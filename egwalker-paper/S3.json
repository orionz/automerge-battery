{"kind":"concurrent","endContent":"#import \"@preview/fletcher:0.3.0\" as fletcher: node, edge\n#import \"@preview/ctheorems:1.1.2\": *\n#show: thmrules.with(qed-symbol: $square$)\n\n// Might be worth pulling these two fields in from a config file instead\n#let anonymous = false\n#let draft = false\n\n\n#let algname = \"Eg-walker\"\n#if anonymous {\n  algname = \"Feathertail\"\n}\n\n#let background = none\n#if draft {\n  background = rotate(64deg, text(120pt, fill: rgb(\"DFDBD4\"))[*DRAFT*])\n}\n\n#set page(\n  paper: \"a4\",\n  numbering: \"1\",\n  // 178 × 229 mm text block on an A4 page (210 × 297 mm)\n  margin: (x: (210 - 178) / 2 * 1mm, y: (297 - 229) / 2 * 1mm),\n  background: background\n)\n\n// 10pt text with 12pt leading\n#set text(font: \"Linux Libertine\", size: 10pt)\n#let spacing = 0.55em\n#set par(justify: true, first-line-indent: 1em, leading: spacing)\n#show par: set block(spacing: spacing)\n//#show math.equation: set text(font: \"Libertinus Math\")\n\n#set heading(numbering: \"1.1.1\")\n\n// Heading formatting from https://gist.github.com/vtta/d6268ba81ebfdd1dc573db4b72df8436\n#show heading: it => locate(loc => {\n  // Find out the final number of the heading counter.\n  let levels = counter(heading).at(loc)\n  let deepest = if levels != () { levels.last() } else { 1 }\n  v(2 * spacing, weak: true)\n  if it.level == 1 {\n    let no-numbering = it.body in ([Abstract], [Acknowledgments], [Acknowledgment])\n    block(text(size: 12pt, {\n      if it.numbering != none and not no-numbering{ \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else if it.level == 2 {\n    block(text(size: 10pt,{\n      if it.numbering != none { \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else {\n    if it.numbering != none { \n      h(-1em)\n      numbering(it.numbering, ..levels)\n      h(spacing, weak: true)\n    }\n    it.body + [.]\n  }\n})\n\n#set enum(indent: 10pt, body-indent: 9pt)\n#set list(indent: 10pt, body-indent: 9pt)\n\n#show figure.where(kind: table): set figure.caption(position: top)\n\n#show figure.caption: it => align(left, par(first-line-indent: 0pt, [\n  #text(weight: \"bold\", [#it.supplement #it.counter.display(it.numbering).])\n  #it.body\n]))\n\n#let theorem = thmplain(\"theorem\", \"Theorem\", base_level: 0, titlefmt: strong).with(inset: 0pt)\n#let lemma = thmplain(\"theorem\", \"Lemma\", base_level: 0, titlefmt: strong).with(inset: 0pt)\n#let definition = thmplain(\"theorem\", \"Definition\", base_level: 0, titlefmt: strong).with(inset: 0pt)\n#let proof = thmproof(\"proof\", \"Proof\").with(inset: 0pt)\n\n#if draft {\n  align(center, text(16pt)[\n    Draft #datetime.today().display()\n  ])\n}\n\n#if anonymous {\n  align(center, text(20pt)[*Fast and memory-efficient collaborative text editing*])\n  align(center, text(12pt)[\n    Anonymous Author(s) \\\n    Submission ID: 223\n  ])\n} else {\n  align(center, text(20pt)[*Collaborative Text Editing: Better, Faster, Smaller*])\n  grid(\n    columns: (1fr, 1fr),\n    align(center, text(12pt)[\n      Joseph Gentle \\\n      #link(\"mailto:me@josephg.com\")\n    ]),\n\n    align(center, text(12pt)[\n      Martin Kleppmann \\\n      University of Cambridge, UK \\\n      #link(\"mailto:martin@kleppmann.com\")\n    ])\n  )\n}\n\n#columns(2, gutter: 8mm, [\n\n#heading(numbering: none, [Abstract])\n\nCollaborative text editing algorithms allow several users to concurrently modify a text file, and automatically merge concurrent edits into a consistent state.\nExisting algorithms fall in two categories: Operational Transformation (OT) algorithms are slow to merge files that have diverged substantially due to offline editing; CRDTs are slow to load and consume a lot of memory.\nWe introduce #algname, a collaboration algorithm for text that avoids these weaknesses.\nCompared to existing CRDTs, it consumes an order of magnitude less memory in the steady state, and loading a document from disk is orders of magnitude faster.\nCompared to OT, merging long-running branches is orders of magnitude faster.\nIn the worst case, the merging performance of #algname is comparable with existing CRDT algorithms.\n#algname can be used everywhere CRDTs are used, including peer-to-peer systems without a central server.\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software.\n\n\n= Introduction <introduction>\n\nReal-time collaboration has become an essential feature for many types of software, including document editors such as Google Docs, Microsoft Word, or Overleaf, and graphics software such as Figma.\nIn such software, each user's device locally maintains a copy of the shared file (e.g. in a tab of their web browser).\nA user's edits are immediately applied to their own local copy, without waiting for a network round-trip, so that the user interface is responsive regardless of network latency.\nDifferent users may therefore make edits concurrently, and the software must merge such concurrent edits in a way that preserves the users' intentions, and ensure that all devices converge to the same state.\n\nFor example, in @two-inserts, two users initially have the same document \"Helo\".\nUser 1 inserts a second letter \"l\" at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $italic(\"Insert\")(3, \\\"l\\\")$ it can apply it to obtain \"Hello!\", but when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ it cannot apply that operation as-is, since that would result in the state \"Hell!o\", which would be inconsistent with the other user's state and the intended insertion position.\nDue to the concurrent insertion at an earlier index, user 1 must insert the exclamation mark at index 5.\n\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\")\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\")\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\n// Seph: I'm not sure how much people care about the theoretical complexity of OT this early in the paper. Might be better to ground it in some real world benchmarking.\nOT is simple and fast in the case of @two-inserts, where each user performed only one operation since the last version they had in common.\nIn general, if the users each performed $n$ operations since their last common version, merging their states using OT has a cost of at least $O(n^2)$, since each of one user's operations must be transformed with respect to all of the other user's operations.\nSome OT algorithms have a merge complexity that is cubic or even slower @Li2006 @Roh2011RGA @Sun2020OT.\nThis is acceptable for online collaboration where $n$ is typically small, but if users may edit a document offline or if the software supports explicit branching and merging workflows @Upwelling, an algorithm with complexity $O(n^2)$ can become impracticably slow.\nIn @benchmarking we show a real-life example document that takes one hour to merge using OT.\n\n_Conflict-free Replicated Data Types_ (CRDTs) have been proposed as an alternative to OT.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006WOOT, and over a dozen text CRDTs have been published since @crdt-papers.\nThese algorithms work by giving each character a unique identifier, and using those IDs instead of integer indexes to identify the position of insertions and deletions.\nThis avoids having to transform operations, since IDs are not affected by concurrent operations.\nUnfortunately, these IDs need to be held in memory while a document is being edited.\nEven with careful optimisation, this metadata uses more than 10 times as much memory as the document text, and makes documents much slower to load from disk.\nSome CRDT algorithms also need to retain IDs of deleted characters (_tombstones_).\n\nIn this paper we propose #if anonymous { algname } else { [_Event Graph Walker_ (#algname)] }, a collaborative editing algorithm that has the strengths of both OT and CRDTs but not their weaknesses.\nLike OT, #algname uses integer indexes to identify insertion and deletion positions, and transforms those indexes to merge concurrent operations.\nWhen two users concurrently perform $n$ operations each, #algname can merge them at a cost of $O(n log n)$, much faster than OT's cost of $O(n^2)$ or worse.\n\n#algname merges concurrent edits using a CRDT algorithm we designed.\nUnlike existing algorithms, we invoke the CRDT only to perform merges of concurrent operations, and we discard its state as soon as the merge is complete.\nWe never write the CRDT state to disk and never send it over the network.\nWhile a document is being edited, we only hold the document text in memory, but no CRDT metadata.\nMost of the time, #algname therefore uses 1–2 orders of magnitude less memory than a CRDT.\nDuring merging, when #algname temporarily uses more memory, its peak memory use is comparable to the best known CRDT implementations.\n\n#algname assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, #algname's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nCollaboration on plain text files is the first application for #algname.\nWe believe that our approach can be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, and more.\nMore generally, #algname provides a framework for efficient coordination-free distributed systems, in which nodes can always make progress independently, but converge eventually @Hellerstein2010.\n\nThis paper makes the following contributions:\n\n- In @algorithm we introduce #algname, a hybrid CRDT/OT algorithm for text that is faster and has a vastly smaller memory footprint than existing CRDTs.\n- Since there is no established benchmark for collaborative text editing, we are also publishing a suite of editing traces of text files for benchmarking. They are derived from real documents and demonstrate various patterns of sequential and concurrent editing.\n- In @benchmarking we use those editing traces to evaluate the performance of our implementation of #algname, comparing it to selected CRDTs and an OT implementation. We measure CPU time to load a document, CPU time to merge edits from a remote replica, memory usage, and file size. #algname improves the state of the art by orders of magnitude in the best cases, and is only slightly slower in the worst cases.\n- We prove the correctness of #algname in @proofs.\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs <event-graphs>\n\nWe represent the editing history of a document as an _event graph_: a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert/delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen $a$ is a _parent_ of $b$, we also say $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, and neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by taking the union of their sets of events.\nEvents in the graph are immutable; they always represents the operation as originally generated, and not as a result of any transformation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider the event $italic(\"Delete\")(i)$, which deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nFor all valid event graphs $G$, $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, in practice a version rarely consists of more than two events.\n\n== Replaying editing history <replay>\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nRegardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n#if anonymous {\n  [= The #algname algorithm <algorithm>]\n} else {\n  [= The Event Graph Walker algorithm <algorithm>]\n}\n\n#algname is a collaborative text editing algorithm based on the idea of event graph replay.\nThe algorithm builds on a replication layer that ensures that whenever a replica adds an event to the graph, all non-crashed replicas eventually receive it.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that #algname uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\n#algname can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort. Then each event is transformed so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\nWhile OT transforms one operation with respect to one other, #algname uses the internal state to transform operations efficiently.\n\nIn graphs with concurrent operations there are multiple possible sort orders. #algname guarantees that the final document state is the same, regardless which of these orders is chosen. However, the choice of sort order may affect the performance of the algorithm, as discussed in @complexity.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; #algname either first inserts \"l\" at index 3 and then \"!\" at index 5 (like User 1 in @two-inserts), or it first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts). The final document state is \"Hello!\" either way.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of #algname <characteristics>\n\n#algname ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of each branch of the editing history in a separate CRDT object.\nThe CRDT for a given branch could translate events from the event graph into the corresponding CRDT operations.\nWhen branches fork, the CRDT object would need to be cloned in memory.\nWhen branches merge, CRDT operations from one branch would be applied to the other branch's CRDT state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nThis approach produces the correct result, but it performs poorly, as we need to store and update a full copy of the CRDT state for every concurrent branch in the event graph.\n\n// (Seph): We have benchmark data for this approach btw.\n\n#algname improves on this approach in two ways:\n\n1. #algname avoids the need to clone and merge multiple CRDT objects. Instead, the algorithm maintains a single data structure that can transform and merge events from multiple branches.\n2. In portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of events), events do not need to be transformed at all, and we can discard all of the internal state accumulated so far.\n\nMoreover, #algname does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state.\nThe event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\n#algname's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis uses significant amounts of memory and makes documents slow to load.\n\nOT algorithms avoid this internal state; similarly to #algname, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both #algname and OT, the event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms are very slow to merge long-running branches (see @benchmarking).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas #algname handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of #algname that replays the entire event graph without discarding its internal state along the way. This approach incurs some CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$. We avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in the order that events are visited.\nWhen a node has multiple children in the graph, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance (see @complexity) but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be ${e_2}$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ to the prepare state again by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\n/*\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n*/\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$.\nSubsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertions, we use a CRDT to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which the event graph is traversed.\nFor example, RGA @Roh2011RGA or YATA @Nicolaescu2016YATA could be used for this purpose.\nOur implementation of #algname uses a variant of the Yjs algorithm @yjs, itself based on YATA, that we conjecture to be maximally non-interleaving.\nWe leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal #algname state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally \"!\" is inserted after the \"y\".\nThe figures include the character for the sake of readability, but #algname actually does not store text content in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply.\nIn order to update #algname's internal state, we need to map these indexes to the correct record in the sequence, based on the prepare state $s_p$.\nTo produce the transformed operations, we need to map the positions of these internal records back to indexes again -- this time based on the effect state $s_e$.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow we can find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nThe above process makes $sans(\"apply\")(e_i)$ efficient.\nWe also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"advance\")(e_i)$, which modify the prepare state $s_p$ of the record inserted or deleted by $e_i$.\n// For insert events, we modify the corresponding insert record with an _id_ of $i$, matching the event.\n// And for delete events, we modify the record of the item _deleted by_ the event.\n// Note that the event's index can't be used to locate the item, as the item's absolute position in the sequence may not match the event's index.\nWhile advancing/retreating we cannot look up a target record by its index. Instead, we maintain a second B-tree, mapping from each event's ID to the target record. The mapping stores a value depending on the type of the event:\n\n- For delete events, we store the ID of the character deleted by the event.\n- For insert events, we store a pointer to the leaf node in the first B-tree that contains the corresponding record. When nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\nOn every $sans(\"apply\")(e)$, after updating the sequence as above, we update this mapping.\nWhen we subsequently call $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nThis map allows us to advance or retreat in logarithmic time.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows #algname to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either in $V$, or an ancestor of some event in $V$, or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nA critical version might not remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\n\nA key insight in the design of #algname is that critical versions partition the event graph into sections that can be processed independently. Events that happened at or before a critical version do not affect how any event after the critical version is transformed. // #footnote[This property holds for our most, but not all text based CRDTs. Notably, this property does not hold for the Peritext CRDT for collaborative rich text editing @Litt2022peritext due to how peritext processes concurrent annotations.]\nThis observation enables two important optimisations:\n\n- Any time the version of the event graph processed so far is critical, we can discard the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway. In this case, the transformed event is identical to the original event, so the event can simply be emitted as-is.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\n\nThe internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new events, replaying the existing events that happened after that critical version, and finally applying the new events.\nEvents from before that critical version are not replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph is replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nLuckily, the exact internal state at $V_\"crit\"$ is not needed. All we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we apply the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we apply them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in second B-tree.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of first B-tree, and at most one traversal of the second B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nWe can also give an upper bound on the complexity of replaying an event graph with $n$ events.\nEach event is applied exactly once, and before each event we retreat or advance each prior event at most once, at $O(log n)$ cost.\nThe worst-case complexity of the algorithm is therefore $O(n^2 log n)$, but this case is unlikely to occur in practice.\n\n== Storing the event graph <storage>\n\nTo store the event graph compactly on disk, we developed a compression technique that takes advantage of how people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\n#algname's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005. We also borrow some bit-packing tricks from the Yjs CRDT library @yjs.\n\nWe first topologically sort the events in the graph. Different replicas may sort the graph differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nEach column stores some different fields of the event data. The columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and LZ4-compress.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n// - _Cached transform positions (optional)._ We can optionally store the transformed positions of each event. This allows the document state to be recomputed much faster in many cases. And because of the similarity between transformed positions and original positions, this data adds a very small amount of file overhead in practice.\n\n// We use several further tricks to reduce file size. For example, we run-length-encode deletions in reverse direction (due to holding down backspace). We express operation indexes relative to the end of the previous event, so that the number fits in fewer bytes. We deduplicate replica IDs, and so on.\n\nReplicas can optionally also store a copy of the final document state reflecting all events. This allows documents to be loaded from disk without replaying the event graph.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using event IDs of the form $(italic(\"replicaID\"), italic(\"seqNo\"))$, but otherwise the encoding is similar.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n// Benchmarking crimes to avoid https://gernot-heiser.org/benchmarking-crimes.html\n\nWe created a TypeScript implementation of #algname optimised for simplicity and readability#if not anonymous {[ @reference-reg]}, and a production-ready Rust implementation optimised for performance#if not anonymous {[ @dt]}.\nThe TypeScript version omits the run-length encoding of internal state, B-trees, and topological sorting heuristics.\n\nTo evaluate the correctness of #algname we proved that the algorithm complies with Attiya et al.'s _strong list specification_ @Attiya2016 (see @proofs).\nWe also performed randomised property testing on the implementations, including checking that our implementations converge to the same result.\n\nTo evaluate its performance, we compare the Rust implementation of #algname with two popular CRDT libraries: Automerge v0.5.9 @automerge (Rust) and Yjs v13.6.10 @yjs (JavaScript).#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. It performed worse than Yjs, so we omitted it from our results.]\nWe only test their collaborative text datatypes, and not the other features they support.\nHowever, the performance of these libraries varies widely.\nIn an effort to distinguish between implementation differences and algorithmic differences, we have also implemented our own performance-optimised reference CRDT library.\nThis library shares most of its code with our Rust #algname implementation, enabling a more like-to-like comparison between the traditional CRDT approach and #algname.\nOur reference CRDT outperforms both Yjs and Automerge.\n\nWe have also implemented a simple OT library using the TTF algorithm @Oster2006TTF.\n(We do not use the server-based Jupiter algorithm @Nichols1995 or the popular OT library ShareDB @sharedb because they do not support the branching and merging patterns that occur in some of our dataset.)\n// This OT library batch transforms operations in a given event graph. Intermediate transformed operations are memoized and reused during the graph traversal - which dramatically improves performance but also increases memory usage. This library has not been optimised as thoroughly as the other code.\n\nWe compare these implementations along 3 dimensions:\n#footnote[Experimental setup: We ran the benchmarks on a Ryzen 7950x CPU running Linux 6.5.0-28 and 64GB of RAM.\nWe compiled Rust code with rustc v1.78.0 in release mode with `'-C target-cpu=native'`. Rust code was pinned to a single CPU core to reduce variance across runs. // (The reason is that different cores of the same CPU are clocked differently due to thermal reasons. Using a single core improves run-to-run stability).\nFor JavaScript (Yjs) we used Node.js v22.2.0. // Javascript wasn't pinned to a single core. Nodejs uses additional cores to run the V8 optimizer.\nAll reported time measurements are the mean of at least 100 test iterations (except for the case where OT takes an hour to merge trace A2, which we ran 10 times).\nThe standard deviation for all benchmark results was less than 1.2% of the mean, except for the Yjs measurements, which had a stddev of less than 6%. Error bars on our graphs are too small to be visible.\n]\n\n/ Speed: The CPU time to load a document into memory, and to merge a set of updates from a remote replica.\n/ Memory usage: The RAM used while a document is loaded and while merging remote updates.\n/ Storage size: The number of bytes needed to persistently store a document or replicate it over the network.\n\n== Editing traces\n\nAs there is no established benchmark for collaborative text editing, we collected a set of editing traces from real documents.\n#if anonymous {\n  [All code and data used in our benchmarks is available for anybody to reproduce.#footnote[https://figshare.com/s/0fb13e5d179aaa6957d7]]\n} else {\n  [We have made these traces freely available on GitHub @editing-traces.]\n}\nFor this evaluation we use seven traces, which fall into three categories:\n\n/ Sequential Traces: (S1, S2, S3): One author, or multiple authors taking turns (no concurrency).\n/ Concurrent Traces: (C1, C2): Multiple users concurrently editing the same document with $approx$1 second latency. Many short-lived branches with frequent merges.\n/ Asynchronous Traces: (A1, A2): Event graphs derived from branching/merging Git commit histories. Multiple long-running branches and infrequent merges.\n\nWe recorded the sequential and concurrent traces with keystroke granularity using an instrumented text editor.\nTo make the traces easier to compare, we normalised them so that each trace contains $approx$500k inserted characters (about 100 printed pages).\nWe extended shorter traces to this length by repeating them several times.\nSee @traces-appendix for details.\n\n== Time taken to load and merge changes\n\nThe slowest operations in many collaborative editors are:\n- merging a large set of edits from a remote replica into the local state (e.g. reconnecting after working offline);\n- loading a document from disk into memory so that it can be displayed and edited.\nTo simulate a worst-case merge, we start with an empty document and then merge an entire editing trace into it.\nIn the case of #algname this means replaying the full trace.\n@chart-remote shows the merge time for each implementation.\n// For the CRDT implementations, all events were preprocessed into the appropriate CRDT message format. The time taken to do this is not included in our measurements.\n\nAfter completing this merge, we saved the resulting local replica state to disk and measured the CPU time to load it back into memory.\nIn the CRDT implementations we tested, loading a document from disk is equivalent to merging the remote events, so we do not show CRDT loading times separately in @chart-remote.\nIn these algorithms, the CRDT metadata needs to be in memory for the user to be able to edit the document, or to apply any updates received from other replicas (even when there is no concurrency).\nIn contrast, OT and #algname can load documents orders of magnitude faster than CRDTs by caching the final document state on disk, and loading just this data (essentially a plain text file).\n#algname and OT only need to load the event graph when merging concurrent changes or to reconstruct old document versions.\nDocument edits by the local user or applying non-concurrent remote events do not need the event graph.\n\n// For completeness, we also measured the time taken to process local editing events. However, all of the systems we tested can process events many orders of magnitude much faster than any human's typing speed. We have not shown this data as at that speed, the differences between systems are irrelevant.\n\n#figure(\n  text(8pt, image(\"diagrams/timings.svg\")),\n  caption: [\n    The CPU time taken by each algorithm to merge all events in each trace (as received from a remote replica), or to reload the resulting document from disk. The CRDT implementations (Ref CRDT, Automerge and Yjs) take the same amount of time to merge changes as they do to subsequently load the document. The red line at 16 ms indicates the time budget available to an application that wants to show the results of an operation by the next frame, assuming a display with a 60 Hz refresh rate.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\nWe can see in @chart-remote that #algname and OT are very fast to merge the sequential traces (S1, S2, S3), since they simply apply the operations with no transformation.\nHowever, OT performance degrades dramatically on the asynchronous traces (6 seconds for A1, and 1 hour for A2) due to the quadratic complexity of the algorithm, whereas #algname remains fast (160,000$times$ faster in the case of A2).\n\nOn the concurrent traces (C1, C2) and asynchronous trace A2, the merge time of #algname is similar to that of our reference CRDT, since they perform similar work.\nBoth are significantly faster than the state-of-the-art Yjs and Automerge CRDT libraries; this is due to implementation differences and not fundamental algorithmic reasons.\n\nOn the sequential traces #algname outperforms our reference CRDT by a factor of 7--10$times$, and on trace A1 (which contains large sequential sections) #algname is 5$times$ faster.\nComparing to Yjs or Automerge, this speedup is greater still.\nThis is due to #algname's ability to clear its internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare #algname's performance with a version of the algorithm that has these optimisations disabled.\n@speed-ff shows the time taken to replay all our traces with this optimisation enabled and disabled.\nWe see that the optimisation is effective for S1, S2, S3, and A1, whereas for C1, C2, and A2 it makes little difference (A2 contains no critical versions).\n\n#figure(\n  text(8pt, image(\"diagrams/ff.svg\")),\n  caption: [\n    Time taken for #algname to merge all events in a trace, with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nAutomerge's merge times on traces C1 and C2 are outliers. This appears to be a bug, which we have reported.\n\nWhen merging an event graph with very high concurrency (like A2), the performance of #algname is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this trace as much as 8$times$ slower to merge. Our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\n\n== RAM usage\n\n@chart-memusage shows the memory footprint (retained heap size) of each algorithm.\nThe memory used by #algname and OT is split into peak usage (during the merge process) and the \"steady state\" memory usage, after temporary data such as #algname's internal state is discarded and the event graph is written out to disk.\nFor the CRDTs the figure shows steady state memory usage; peak usage is up to 25% higher.\n\n#algname's peak memory use is similar to our reference CRDT's steady state: slightly lower on the sequential traces, and approximately double for the concurrent traces.\nHowever, the steady-state memory use of #algname is 1--2 orders of magnitude lower than the best CRDT.\nThis is a significant result, since the steady state is what matters during normal operation while a document is being edited.\nNote that peak memory usage would be lower when replaying a subset of an event graph, which is the common case.\n\n// (seph): The peak memory usage could be reduced a lot if I first divide up the graph into chunks by the critical versions. Right now, the implementation makes a \"merge plan\" for the whole thing (which is stored in memory) then processes the entire plan. The plan itself uses up a lot of memory. A better approach would chunk it in sections separated by critical versions. That would dramatically reduce peak memory usage!\n\nYjs has 2--3$times$ greater memory use than our reference CRDT on most traces, and Automerge an order of magnitude greater.\nAutomerge's very high memory use on C1 and C2 is probably a bug.\nThe computer we used for benchmarking had enough RAM to prevent swapping in all cases.\n\nOT has the same memory use as #algname in the steady state, but significantly higher peak memory use on the C1, C2, and A2 traces (6.8~GiB for A2).\nThe reason is that our OT implementation memoizes intermediate transformed operations to improve performance.\nThis memory use could be reduced at the cost of increased merge times.\n\n#figure(\n  text(7pt, image(\"diagrams/memusage.svg\")),\n  caption: [\n    RAM used while merging an editing trace received from another replica. #algname and OT only retain the current document text in the steady state, but need additional RAM at peak while merging concurrent changes.\n  ],\n  kind: image,\n  placement: top,\n) <chart-memusage>\n\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled #algname's built-in LZ4 and Automerge's built-in gzip compression. Enabling this compression further reduces the file sizes.\n\n// TODO: I wonder if it would be worth adding zlib compression (matching automerge)? It would be a small change.\n\nAutomerge stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions, with and without a cached copy of the final document state (to enable fast loads).\nEven with this additional document text, #algname's files are smaller on all traces except S1.\n\n// TODO: Is this worth adding?\n// Note that storing the raw editing trace in this compact form removes one of the principle benefits of #algname, as the event graph must be replayed in order to determine the current document text. To improve load time, the current text content can be cached and stored alongside the event graph on disk. Alternately, the transformed operation positions can also be stored in the file. In our testing, this resulted in a tiny increase in file size while improving load performance by an order of magnitude.\n\nIn contrast, Yjs only stores the text of the final, merged document. This results in a smaller file size, at the cost of making it impossible to reconstruct earlier document states.\n@chart-dt-vs-yjs compares Yjs to the equivalent event graph encoding in which we only store the final document text and operation metadata.\nOur encoding is smaller than Yjs on all traces. The overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n// Using this scheme, #algname can still merge editing events and load the document text directly from disk.\n\n#figure(\n  text(8pt, image(\"diagrams/filesize_full.svg\")),\n  caption: [\n    File size storing edit traces using #algname's event graph encoding (with and without final document caching) compared to Automerge. The lightly shaded region in each bar shows the concatenated length of all stored text. This acts as lower bound on the file size.\n  ],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, image(\"diagrams/filesize_smol.svg\")),\n  caption: [File size storing edit traces in which deleted text content has been omitted, as is the case with Yjs. The lightly shaded region in each bar is the size of the final document, which is a lower bound on the file size.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>\n\n\n= Related Work <related-work>\n\n#algname is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 present only datatypes such as maps, sets, and registers; #algname adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with #algname: both are based on traversing an event graph, with operations being transformed from their original form into a form that can be applied in topologically sorted order.\nToomim also points out that CRDTs can implement this transformation.\n#algname is a concrete, optimised implementation of the time machine approach; novel contributions of #algname include updating the prepare version by retreating and advancing, as well as the details of internal state clearing and partial event graph replay.\n\n#algname is also an _operational transformation_ (OT) algorithm @Ellis1989. // since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research going back to the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms consist of a set of _transformation functions_ that transform one operation with regard to one other operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformations.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\n#algname departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\n/*\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding #algname, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n*/\n\nOther collaborative text editing algorithms @Preguica2009 @Roh2011RGA @fugue @Weiss2010 belong to the family of _conflict-free replicated data types_ (CRDTs) @Shapiro2011.\nTo our knowledge, all existing CRDTs for text work by assigning each character a unique ID, and translating index-based insertions and deletions into ID-based ones.\nThese unique IDs need to be held in memory when a document is being edited, persisted for the lifetime of the document, and sent to all replicas.\nIn contrast, #algname uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\n#algname needs to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT state, and it only needs to be in-memory while merging concurrent operations.\nMost of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 builds a CRDT-like structure containing the entire editing history, not only the parts being merged.\nDifferential synchronization @Fraser2009 relies on heuristics such as similarity-matching of text to perform merges, which is not guaranteed to converge.\n\nVersion control systems such as Git @Coglan2019, Pijul @pijul, and Darcs @darcs also track the editing history of text files.\nHowever, they do not support real-time collaboration, and they are line-based (good for code), whereas #algname is character-based (which is better for prose).\nGit uses a three-way merge, which is not reliable on files containing substantial repeated text @Khanna2007.\nMerges in Darcs have worst-case exponential complexity @darcs-book, and Pijul merges using a CRDT that assigns a unique ID to every line @pijul-theory.\n\n= Conclusion\n\n#algname is a new approach to collaborative text editing that has characteristics of both CRDTs and OT.\nIt is orders of magnitude faster than existing algorithms in the best cases, and competitive with the fastest existing implementations in the worst cases.\nCompared to existing CRDTs, it uses orders of magnitude less memory in the steady state, files are vastly faster to load for editing, and in documents with largely sequential editing edits from other users are merged much faster.\nCompared to OT, large merges (e.g., when two users each did a significant amount of work while offline) are much faster, and #algname supports arbitrary branching/merging patterns (e.g., in peer-to-peer collaboration).\n\nSince #algname stores a fine-grained editing history of a document, it allows applications to show that history to the user, and to restore arbitrary past versions of a document by replaying subsets of the graph.\nThe underlying event graph is not specific to the #algname algorithm, so we expect that the same data format will be able to support future collaborative editing algorithms as well.\nThe core idea of #algname is not specific to plain text; we believe it can be extended to other file types such as rich text, graphics, or spreadsheets.\n\nUntil now, many applications have been implemented using centralised server-based OT to avoid the overheads of CRDTs.\n#algname is the first CRDT to surpass OT's performance, and it requires no server.\nThis breakthrough makes it possible for decentralised, local-first software @Kleppmann2019localfirst to become competitive with traditional cloud software.\n\n#if not anonymous [\n  #heading(numbering: none, [Acknowledgements])\n\n  This work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n  Thank you to Matthew Weidner and Joe Hellerstein for feedback on a draft of this paper.\n]\n\n#show bibliography: set text(8pt)\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n]) // end of two-column layout\n\n#pagebreak()\n#counter(heading).update(0)\n#set heading(numbering: \"A.1\", supplement: \"Appendix\")\n\n#let stats_for(name, type, repeats, num_authors: none) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n\n  // let a = num_authors\n  if num_authors == none {\n    num_authors = data.num_agents\n  }\n\n  (\n    name,\n    type,\n    str(repeats),\n    str(calc.round(data.total_keystrokes / 1000)), // total events (k)\n\n    // Other columns:\n    // str(calc.round(100 * data.num_insert_keystrokes / data.total_keystrokes, digits: 1)), // % insert events\n    // str(calc.round(data.num_insert_keystrokes / 1000)), // number of insert events\n    // str(calc.round(data.num_delete_keystrokes / 1000)), // number of delete events\n    str(calc.round(data.concurrency_estimate, digits: 2)), // concurrency estimate\n    str(data.graph_rle_size), // number of nodes in the causal graph\n    str(num_authors),\n    str(calc.round(100 * data.final_doc_len_chars / data.num_insert_keystrokes, digits: 1)),\n    // str(calc.round(data.op_stats.len / 1000, digits: 1)),\n    str(calc.round(data.final_doc_len_utf8 / 1024, digits: 1)),\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: stats_for(\"S2\", \"sequential\", 3).map(x => auto),\n    align: (center, center, right, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header(\n      [*Name*],\n      [*Type*],\n      [*Repeats*],\n      [*Events (k)*],\n      // [*Inserts (k)*],\n\n      [*Avg Concurrency*],\n      [*Graph runs*],\n      [*Authors*],\n      [*Chars remaining (%)*],\n      [*Final size (kB)*],\n      // [*\\# RLE Ops (k)*],\n    ),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"sequential\", 3, num_authors: 2),\n    ..stats_for(\"S2\", \"sequential\", 3),\n    ..stats_for(\"S3\", \"sequential\", 1, num_authors: 2),\n    ..stats_for(\"C1\", \"concurrent\", 25),\n    ..stats_for(\"C2\", \"concurrent\", 25, num_authors: 2),\n    ..stats_for(\"A1\", \"asynchronous\", 1),\n    ..stats_for(\"A2\", \"asynchronous\", 2),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation.\n    _Repeats_: Number of times the original trace was repeated to normalise its length relative to the other traces.\n    _Events_: total number of editing events, in thousands, including repeats. Each inserted or deleted character counts as one event.\n    _Average concurrency_: mean number of concurrent branches per event in the trace.\n    _Graph runs_: number of sequential runs of events (linear event sequences without branching/merging).\n    _Authors_: number of users who added at least one event.\n    _Chars remaining_: percentage of inserted characters that remain in the document (i.e., are never deleted) after all events have been merged.\n    _Final size_: Resulting document size in kilobytes after all events have been merged.\n  ]\n) <traces-table>\n\n#columns(2, gutter: 8mm, [\n\n= Editing Traces <traces-appendix>\n\n@traces-table gives an overview of the editing traces used in our evaluation (@benchmarking).\nAll traces are freely available for benchmarking collaborative text editing algorithms\n#if anonymous {\n  [(link elided for anonymous review).]\n} else {\n  [on GitHub @editing-traces.]\n}\nThe traces represent the editing history of the following documents:\n\n/ Sequential Traces: These traces have no concurrency. They were recorded using an instrumented text editor that recorded keystroke-granularity editing events. Trace S1 is the LaTeX source of a journal paper #if not anonymous {[@Kleppmann2017 @automerge-perf]} written by two authors who took turns. S2 is the text of an 8,800-word, single-author blog post#if not anonymous {[ @crdts-go-brrr]}. S3 is the Typst source of this paper that you are currently reading.\n/ Concurrent Traces: Trace C1 is two users in the same document, writing a reflection on an episode of a TV series they have just watched. C2 is two users collaboratively reflecting on going to clown school together. We recorded these real-time collaborations with keystroke granularity, and we added 1~sec (C1) or 0.5~sec (C2) artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. Trace A1 is `src/node.cc` from the Git repository for Node.js @node-src-nodecc, and A2 is `Makefile` from the Git repository for Git itself @git-makefile.\n\nWe recorded the sequential and concurrent traces ourselves, collaborating with friends or colleagues.\n#if anonymous {[Please note that as a result, the trace data contains the names of the authors of this paper, and it is not anonymised.]}\nAll contributors to the traces have given their consent for their recorded keystroke data to be made publicly available and to be used for benchmarking purposes.\nThe asynchronous traces are derived from public data on GitHub.\n\nThe recorded editing traces originally varied a great deal in length.\nTo allow easier comparison of measurements between traces, we have attempted to roughly standardise the sizes of all editing traces to contain approximately 500k inserted characters (with the exception of S3, which is approximately twice this size).\nWe did this by duplicating the shorter event graphs multiple times in our data files, without introducing any concurrency (that is, all events from one run of the trace happen either before or after all events from another run).\nWe repeat the original S1 and S2 traces 3 times, the original C1 and C2 traces 25 times, and the original A2 trace twice.\nThe statistics given in @traces-table are after duplication.\n\n= Proof of Correctness <proofs>\n\nWe now demonstrate that #algname is a correct collaborative text algorithm by showing that it satisfies the _strong list specification_ proposed by Attiya et al. @Attiya2016, a formal specification of collaborative text editing.\nInformally speaking, this specification requires that replicas converge to the same document state, that this state contains exactly those characters that were inserted but not deleted, and that inserted characters appear in the correct place relative to the characters that surrounded it at the time it was inserted.\nAssuming network partitions are eventually repaired, this is a stronger specification than _strong eventual consistency_ @Shapiro2011, which is a standard correctness criterion for CRDTs @Gomes2017verifying.\n\nWith a suitable algorithm for ordering concurrent insertions at the same position, #algname is also able to achieve maximal non-interleaving @fugue, which is a further strengthening of the strong list specification.\nHowever, since that algorithm is out of scope of this paper, we also leave the proof of non-interleaving out of scope.\n\n== Definitions\n\nLet $sans(\"Char\")$ be the set of characters that can be inserted in a document.\nLet $sans(\"Op\") = {italic(\"Insert\")(i, c) | i in NN and c in sans(\"Char\")} union {italic(\"Delete\")(i) | i in NN}$ be the set of possible operations.\nLet $sans(\"ID\")$ be the set of unique event identifiers, and let $sans(\"Evt\") = sans(\"ID\") times cal(P)(sans(\"ID\")) times sans(\"Op\")$ be the set of possible events consisting of a unique ID, a set of parent event IDs, and an operation.\nWhen $e in G$ and $e = (i,p,o)$ we also use the notation $e.italic(\"id\") = i$, $e.italic(\"parents\") = p$, and $e.italic(\"op\") = o$.\n\n#definition[\n  An event graph $G subset.eq sans(\"Evt\")$ is _valid_ if:\n  1. every event $e in G$ has an ID $e.italic(\"id\")$ that is unique in $G$;\n  2. for every event $e in G$, every parent ID $p in e.italic(\"parents\")$ is the ID of some other event in $G$;\n  3. the graph is acyclic, i.e. there is no subset of events ${e_1, e_2, ..., e_n} subset.eq G$ such that $e_1$ is a parent of $e_2$, $e_2$ is a parent of $e_3$, ..., and $e_n$ is a parent of $e_1$; and\n  4. for every event $e in G$, the index at which $e.italic(\"op\")$ inserts or deletes is an index that exists (is not beyond the end of the document) in the document version defined by the parents $e.italic(\"parents\")$.\n] <valid-graph>\n\nSince event graphs grow monotonically and we never remove events, it is easy to ensure that the graph remains valid whenever a new event is added to it.\n\nAttiya et al. make a simplifying assumption that every insertion operation has a unique character.\nWe use a slightly stronger version of the specification that avoids this assumption.\nWe also simplify the specification by using our event graph definition instead of the original abstract execution definition (containing message broadcast/receive events and a visibility relation).\nThese changes do not affect the substance of the proof: each node of our event graph corresponds to a _do_ event in the original strong list specification, and the transitive closure of our event graph is equivalent to the visibility relation.\n\nGiven an event graph $G$ we define a replay function $sans(\"replay\")(G)$ as introduced in @replay, based on the #algname algorithm.\nIt iterates over the events in $G$ in some topologically sorted order, transforming the operation in each event as described in @algorithm, and then applying the transformed operation to the document state resulting from the operations applied so far (starting with the empty document).\nIn a real implementation, $sans(\"replay\")$ returns the final document state as a concatenated sequence of characters.\nFor the sake of this proof, we define $sans(\"replay\")$ to instead return a sequence of $(italic(\"id\"), c)$ pairs, where $italic(\"id\")$ is the unique ID of the event that inserted the character $c$.\nThis allows us to distinguish between different occurrences of the same character.\nThe text of the document can be recovered by simply ignoring the $italic(\"id\")$ of each pair and concatenating the characters.\n\nWe can now state our modified definition of the strong list specification:\n\n#definition[\n  A collaborative text editing algorithm with a replay function $sans(\"replay\")(G)$ satisfies the _strong list specification_ if for every valid event graph $G subset sans(\"Evt\")$ there exists a relation $italic(\"lo\") subset sans(\"ID\") times sans(\"ID\")$ called the _list order_, such that:\n  1. For event $e in G$, let $G_e = {e} union sans(\"Events\")(e.italic(\"parents\"))$ be the subset of $G$ consisting of $e$ and all events that happened before $e$.\n    Let $italic(\"doc\")_e = sans(\"replay\")(G_e) = angle.l (italic(\"id\")_0, c_0), ..., (italic(\"id\")_(n-1), c_(n-1)) angle.r$ be the document state immediately after locally generating $e$, where $c_i in sans(\"Char\")$ and $italic(\"id\")_i in sans(\"ID\")$. Then:\n    #enum(numbering: \"(a)\", indent: 0.5em, body-indent: 0.5em,\n      [$italic(\"doc\")_e$ contains exactly the elements that have been inserted but not deleted in $G_e$: #text(9pt, [\n      $ (exists i in [0, n-1]: italic(\"doc\")_e [i] = (italic(\"id\"), c)) <==> \\\n        (exists a in G_e, j in NN: a.italic(\"id\") = italic(\"id\") and a.italic(\"op\") = italic(\"Insert\")(j,c)) and \\\n        (exists.not b in G_e, k in NN: b.italic(\"op\") = italic(\"Delete\")(k) and \\\n        sans(\"replay\")(sans(\"Events\")(b.italic(\"parents\")))[k] = (italic(\"id\"), c)). $])],\n      [The order of the elements in $italic(\"doc\")_e$ is consistent with the list order: #text(9pt, [\n      $ forall i, j in [0, n-1]: i<j ==> (italic(\"id\")_i, italic(\"id\")_j) in italic(\"lo\"). $])],\n      [Elements are inserted at the specified position: #text(9pt, [\n      $ forall i, c: e.italic(\"op\") = italic(\"Insert\")(i,c) ==> italic(\"doc\")_e [i] = (e.italic(\"id\"), c) $])]\n    )\n  2. The list order $italic(\"lo\")$ is transitive, irreflexive, and total, and thus determines the order of all insert operations in the event graph.\n] <strong-list-spec>\n\n== Proving Convergence\n\n#lemma[Let $e$ be an event in a valid event graph such that $e.italic(\"op\") = italic(\"Delete\")(i)$. In the internal state immediately before applying $e$ (in which all events that happened before $e$ have been advanced and all others have been retreated), either the record that $e$ will update has $s_p = mono(\"Ins\")$, or it is part of a placeholder (which behaves like a sequence of $s_p = mono(\"Ins\")$ records).] <lemma-prepare-delete>\n#proof[\n  If we had $s_p = mono(\"NotInsertedYet\")$, that would imply that we retreated the insertion of the character deleted by $e$, which contradicts the fact that the insertion of a character must happen before any deletion of the same character.\n  Furthermore, if we had $s_p = mono(\"Del\") k$ for some $k$, that would imply that an event that happened before $e$ already deleted the same character, in which case it would not be possible to generate $e$.\n  This leaves $s_p = mono(\"Ins\")$ or placeholder as the only options that do not result in a contradiction.\n]\n\n#lemma[Let $S_0$ be some internal #algname state, and let $a$ and $b$ be two concurrent events. Let $S_1$ be the internal state resulting from updating $S_0$ with retreat and advance calls so that the prepare version of $S_1$ equals the parents of $b$. Let $S_2$ be the internal state resulting from first replaying $a$ on top of $S_0$, and then retreating and advancing so that the prepare version of $S_2$ equals the parents of $b$. Then the only difference between $S_1$ and $S_2$ is in the record inserted or updated by $a$ (and possibly the split of a placeholder that this record falls within); the rest of $S_1$ and $S_2$ is the same.] <lemma-prepare-state>\n#proof[\n  Since $S_0$ is produced by #algname, it contains records for all characters that have been inserted or deleted by events since the last critical version prior to $a$ and $b$, it contains placeholders for any characters inserted but not deleted prior to that critical version, and it does not contain anything for characters that were deleted prior to that critical version.\n  By the definition of critical version, any event $e$ that is concurrent with $a$ or $b$ must be after the critical version, and therefore the record that is updated by $e$ must exist in $S_0$.\n\n  $S_1$ has the same record sequence and the same $s_e$ in each record as $S_0$, since retreating and advancing do not change those things.\n  The $s_p$ values in $S_1$ are set so that every record inserted by an event concurrently with $b$ has $s_p = mono(\"NotInsertedYet\")$, every record whose insertion happened before $b$ but which was not deleted before $b$ has $s_p = mono(\"Ins\")$, and every record that was deleted by $k>0$ separate events before $b$ has $s_p = mono(\"Del\") k$.\n  To achieve this it is sufficient to consider events that happened after the last critical version.\n  Thus, the $s_p$ values in $S_1$ do not depend on the $s_p$ values in $S_0$, and they do not depend on any events that are concurrent with $b$.\n\n  Replaying $a$ on top of $S_0$ involves first updating the $s_p$ values to set the prepare version to the parents of $a$ (which may differ from the parents of $b$), and then applying $a$, which either inserts or updates a record in the internal state, and possibly splits a placeholder to accommodate this record.\n  $S_2$ is then produced by updating all of the $s_p$ values in the same way as for $S_1$.\n  As these $s_p$ values depend only on $b.italic(\"parents\")$ and not on $a$, $S_2$ is identical to $S_1$ except for the record inserted or updated by $a$.\n]\n\n#lemma[Let $a$ and $b$ be two concurrent events such that $a.italic(\"op\") = italic(\"Insert\")(i, c_i)$ and $b.italic(\"op\") = italic(\"Insert\")(j, c_j)$. If we start with some internal state and document state and then replay $a$ followed by $b$, the resulting internal state and document state are the same as if we had replayed $b$ followed by $a$.] <lemma-ins-ins>\n// TODO: technically the internal states will not be the same since the prepare states differ. But the next retreat/advance to a specific version should fix that up.\n#proof[\n  To replay $a$ followed by $b$, we first retreat/advance so that the prepare state corresponds to $a.italic(\"parents\")$, then apply $a$, then retreat $a$, then retreat/advance so that the prepare state corresponds to $b.italic(\"parents\")$, then apply $b$.\n  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n  Since $b$ is concurrent to $a$, $a$ cannot be a critical version, and therefore the internal state is not cleared after applying $a$.\n  When $b$ is applied, the presence of the record inserted by $a$ is the only difference between the internal state when applying $b$ after $a$ compared to applying $b$ without applying $a$ first (by @lemma-prepare-state).\n  When determining the insertion position in the internal state for $b$'s record based on $b$'s index $j$, the record inserted by $a$ does not count since it has $s_p = mono(\"NotInsertedYet\")$.\n  Therefore, $b$'s record is inserted into the internal state at the same position relative to its neighbours, regardless of whether $a$ has been applied previously.\n  By similar argument the same holds for $a$'s record.\n\n  As explained in @prepare-effect-versions, the internal state uses a CRDT algorithm to place the records in the internal state in a consistent order, regardless of the order in which the events are applied.\n  The details of that algorithm go beyond the scope of this paper.\n  The key property of that algorithm is that the final sequence of internal state records is the same, regardless of whether we apply first $a$ and then $b$, or vice versa.\n  For example, if we first apply $a$ then $b$, and if the final position of $b$'s record in the internal state is after $a$'s record, then the CRDT algorithm has to skip over $a$'s record (and potentially other, concurrently inserted records) when determining the insertion position for $b$'s record.\n  This process never needs to skip over a placeholder, since placeholders represent characters that were inserted before the last critical version.\n  It only ever needs to skip over records for insertions that are concurrent with $a$ or $b$; by the definition of critical versions, all such insertion events appear after the last critical version (and hence after the last internal state clearing) in the topological sort, and therefore they are represented by explicit internal state records, not placeholders.\n\n  Now we consider the document state.\n  WLOG assume that the record inserted by $a$ appears at an earlier position in the internal state than the record inserted by $b$ (regardless of the order of applying $a$ and $b$).\n  Let $i'$ be the transformed index of $a.italic(\"op\")$ when $a$ is applied first, and let $j'$ be the transformed index of $b.italic(\"op\")$ when $b$ is applied first.\n\n  Say we replay $a$ before $b$.\n  When computing the transformed index for $b$, the internal state record for $a$ has $s_p = mono(\"NotInsertedYet\")$, and hence it is not counted when mapping $b.italic(\"op\")$'s index $j$ to $b$'s internal state record.\n  However, $a$'s record _is_ counted when mapping $b$'s internal state record back to an index, since $a$'s record has $s_e = mono(\"Ins\")$ and it appears before $b$'s record.\n  Therefore the transformed index for $b.italic(\"op\")$ is $j' + 1$ when applied after $a$.\n  On the other hand, if we replay $b$ before $a$, the record for $b$ appears after the record for $a$ in the internal state, so the transformed index for $a$ is $i'$, unaffected by $b$.\n  Thus, we have the situation as shown in @two-inserts, and the effect of the two insertions $a$ and $b$ on the document state is the same regardless of their order.\n]\n\n#lemma[Let $a$ and $b$ be two concurrent events such that $a.italic(\"op\") = italic(\"Insert\")(i, c)$ and $b.italic(\"op\") = italic(\"Delete\")(j)$. If we start with some internal state and document state and then replay $a$ followed by $b$, the resulting internal state and document state are the same as if we had replayed $b$ followed by $a$.] <lemma-ins-del>\n#proof[\n  Since $a$ and $b$ are concurrent, the character being deleted by $b$ cannot be the character inserted by $a$.\n  We therefore only need to consider two cases: (1)~the record inserted by $a$ has an earlier position in the internal state than the record updated by $b$; or (2) vice versa.\n\n  Case (1): If we replay $a$ before $b$, we first apply $a$, then retreat $a$, then apply $b$ (and also retreat/advance other events before applying, like in @lemma-ins-ins).\n  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n  When subsequently applying $b$ we update an internal state record at a later position.\n  The record inserted by $a$ is not counted when mapping $b$'s index to an internal record, but it is counted when mapping the internal record back to a transformed index, resulting in $b$'s transformed index being one greater than it would have been without earlier applying $a$ (by @lemma-prepare-state).\n  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears after $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n  The transformed operations therefore converge.\n\n  Case (2): If we replay $b$ before $a$, we first apply $b$, then retreat $b$, then apply $a$ (plus other retreats/advances).\n  Applying $b$ updates an existing record in the internal state (possibly splitting a placeholder in the process).\n  Before applying $b$ this record must have $s_p = mono(\"Ins\")$ (by @lemma-prepare-delete), and it can have either $s_e = mono(\"Ins\")$ (in which case, the transformed operation for $b$ is $italic(\"Delete\")(j')$ for some transformed index $j'$) or $s_e = mono(\"Del\")$ (in which case, $b$ is transformed into a no-op).\n  After applying and retreating $b$ this record has $s_p = mono(\"Ins\")$ and $s_e = mono(\"Del\")$ in any case.\n  We next apply $a$, which by assumption inserts a record into the internal state at a later position than $b$'s record.\n  If we had $s_e = mono(\"Del\")$ before applying $b$, the process of applying and retreating $b$ did not change the internal state, so the transformed operation for $a$ is the same as if $b$ had not been applied, which is consistent with the fact that $b$ was transformed into a no-op.\n  If we had $s_e = mono(\"Ins\")$ before applying $b$, $b$'s record is counted when mapping $a$'s index to an internal record position, but not counted when mapping the internal record back to a transformed index, resulting in $a$'s transformed index being one less than it would have been without earlier applying $b$ (by @lemma-prepare-state), as required given that $b$ has deleted an earlier character.\n  On the other hand, if we replay $a$ before $b$, the record inserted by $a$ appears after $b$'s record in the internal state, so the transformation of $b$ is not affected by $a$, and the transformed operations converge.\n]\n\n#lemma[Let $a$ and $b$ be two concurrent events such that $a.italic(\"op\") = italic(\"Delete\")(i)$ and $b.italic(\"op\") = italic(\"Delete\")(j)$. If we start with some internal state and document state and then replay $a$ followed by $b$, the resulting internal state and document state are the same as if we had replayed $b$ followed by $a$.] <lemma-del-del>\n#proof[\n  WLOG we need to consider two cases: (1)~the record updated by $a$ has an earlier position in the internal state than the record updated by $b$; or (2)~$a$ and $b$ update the same internal state record. The case where $a$'s record has a later position than $b$'s record is symmetric to (1).\n\n  Case (1): We further consider two sub-cases: (1a)~the record that $a$ will update has $s_e = mono(\"Ins\")$ prior to applying $a$; or (1b)~the record has $s_e = mono(\"Del\")$.\n\n  Case (1a): Say we replay $a$ before $b$.\n  Before applying $a$, the record that $a$ will update must have $s_p = mono(\"Ins\")$ (by @lemma-prepare-delete).\n  After applying and retreating $a$, the record updated by $a$ has $s_p = mono(\"Ins\")$ and $s_e = mono(\"Del\")$, and the transformed operation for $a$ is $italic(\"Delete\")(i')$ for some transformed index $i'$.\n  We subsequently apply $b$, which by assumption updates an internal state record that is later than $a$'s.\n  $a$'s record is therefore counted when mapping the index of $b.italic(\"op\")$ to an internal record position, but not counted when mapping the internal record back to a transformed index.\n  If $a$ had not been replayed previously, it would have been counted during both mappings (by @lemma-prepare-state).\n  Thus, if the record updated by $b$ has $s_e = mono(\"Ins\")$, the transformed operation for $b$ is $italic(\"Delete\")(j'-1)$, where $j'$ is the transformed index of $b$'s operation if $a$ had not been replayed previously, and $j'-1 gt.eq i'$, as required.\n  If $b$'s record previously has $s_e = mono(\"Del\")$, it is transformed into a no-op.\n  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears later than $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n\n  Case (1b): Say we replay $a$ before $b$.\n  Before applying $a$, the record that $a$ will update must have $s_p = mono(\"Ins\")$ (by @lemma-prepare-delete), and $s_e = mono(\"Del\")$ by assumption.\n  After applying and retreating $a$, the record updated by $a$ remains in the same state ($s_p = mono(\"Ins\")$, $s_e = mono(\"Del\")$), and the transformed operation for $a$ is a no-op.\n  When we subsequently apply $b$, the transformed operation is therefore the same as if $a$ had not been applied, as required.\n  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears later than $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n\n  Case (2): Before replaying both of the events, the record that both events update may have $s_e = mono(\"Ins\")$ or $s_e = mono(\"Del\")$, but after applying the first event it definitely has $s_e = mono(\"Del\")$.\n  The second event will therefore be transformed into a no-op.\n  The same happens regardless of whether $a$ or $b$ is replayed first, so the result does not depend on the order of replay of the two events.\n]\n\n#lemma[Given a valid event graph $G$, $sans(\"replay\")(G)$ is a deterministic function. In other words, any two replicas that have the same event graph converge to the same document state and the same internal state.] <lemma-deterministic>\n#proof[\n  The algorithms to transform an operation and to apply a transformed operation to the document state are by definition deterministic.\n  This leaves as the only source of nondeterminism the choice of topologically sorted order ($G$ is valid and hence acyclic, thus at least one such order exists, but there may be several topologically sorted orders if $G$ contains concurrent events).\n  We show that all sort orders result in the same final document state.\n\n  Let $E = angle.l e_1, e_2, ..., e_n angle.r$ and $E' = angle.l e'_1, e'_2, ..., e'_n angle.r$ be two topological sort orders of $G = {e_1, e_2, ..., e_n}$.\n  Then $E'$ must be a permutation of $E$.\n  Both sequences are in some causal order, that is: if $e_i -> e_j$ ($e_i$ happens before $e_j$, as defined in @event-graphs), then $e_i$ must appear before $e_j$ in both $E$ and $E'$.\n  If $e_i parallel e_j$ (they are concurrent), the events could appear in either order.\n  Therefore, it is possible to transform $E$ into $E'$ by repeatedly swapping two concurrent events that are adjacent in the sequence.\n  We show that at each such swap we maintain the invariant that the document state and the internal state resulting from replaying the events in the order before the swap are equal to the states resulting from replaying the events in the order after the swap.\n  Therefore, the document state and the internal state resulting from replaying $E$ are equal to those resulting from $E'$.\n\n  Let $angle.l e_1, e_2, ..., e_i, e_(i+1), ..., e_n angle.r$ be the sequence of events prior to one of these swaps, and $e_i$, $e_(i+1)$ are the events to be swapped.\n  Replaying the events in the prefix $angle.l e_1, e_2, ..., e_(i-1) angle.r$ is a deterministic algorithm resulting in some document state and some internal state.\n  Next, we replay either $e_i$ followed by $e_(i+1)$, or $e_(i+1)$ followed by $e_i$.\n  Since $e_i$ and $e_(i+1)$ are concurrent, it is not possible for only one of the two to be contained in a critical version, and therefore no state clearing will take place between applying these two events.\n  If $e_i$ and $e_(i+1)$ are both insertions, the resulting states in either order are the same by @lemma-ins-ins.\n  If one of $e_i$ and $e_(i+1)$ is an insertion and the other is a deletion, we use @lemma-ins-del.\n  If both $e_i$ and $e_(i+1)$ are deletions, we use @lemma-del-del.\n  Finally, replaying the suffix $angle.l e_(i+2), ..., e_n angle.r$ is a deterministic algorithm.\n  This shows that concurrent operations commute.\n]\n\n== Satisfying the Strong List Specification\n\n#lemma[\n  Let $G$ be a valid event graph, let $italic(\"doc\") = sans(\"replay\")(G)$ be the document state resulting from replaying $G$, and let $S$ be the internal state after replaying $G$. Then the $i$th element in $italic(\"doc\")$ corresponds to the $i$th record with $s_e = mono(\"Ins\")$ in the internal state (counting placeholders as having $s_e = mono(\"Ins\")$, and not counting records with $s_e = mono(\"Del\")$). Moreover, the set of elements in $italic(\"doc\")$ is exactly the elements that have been inserted but not deleted in $G$:\n  $ (exists i in [0, n-1]: italic(\"doc\")[i] = (italic(\"id\"), c)) <==> \\\n    (exists a in G, i in NN: a.italic(\"id\") = italic(\"id\") and a.italic(\"op\") = italic(\"Insert\")(i,c)) and \\\n    (exists.not b in G, i in NN: b.italic(\"op\") = italic(\"Delete\")(i) and \\\n    sans(\"replay\")(sans(\"Events\")(b.italic(\"parents\")))[i] = (italic(\"id\"), c)). $\n] <state-correspondence>\n#proof[\n  Let $E = angle.l e_1, e_2, ..., e_n angle.r$ be some topological sort of $G$, and assume that we replay $G$ in this order.\n  By @lemma-deterministic it does not matter which of the possible orders we choose.\n  We then prove the thesis by induction over $n$, the number of events in $G$.\n  The base case is trivial: $G={}$, $italic(\"doc\")=angle.l angle.r$, so there are no events, no records in the internal state, and no elements in the document state.\n\n  Inductive step: Let $E_k = angle.l e_1, e_2, ..., e_k angle.r$ with $k<n$ be a prefix of $E$.\n  Since the set of events in $E_k$ also forms a valid event graph, we can assume the inductive hypothesis, namely that replaying $E_k$ results in a document corresponding to the records with $s_e = mono(\"Ins\")$ in the resulting internal state, and the document contains exactly those elements that have been inserted but not deleted by an operation in $E_k$.\n  We now add $e_(k+1)$, the next event in the sequence $E$, to the replay.\n  We do this by transforming $e_(k+1)$ using the internal state obtained by replaying $E_k$, and applying the transformed operation to the document state from $E_k$.\n  We need to show that the invariant is still preserved in the following two cases: either (1)~$e_(k+1).italic(\"op\") = italic(\"Insert\")(j,c)$ for some $j$, $c$, or (2)~$e_(k+1).italic(\"op\") = italic(\"Delete\")(j)$ for some $j$.\n  We also have to consider the case where the internal state is cleared, but we begin with the case where no state clearing occurs.\n\n  Case (1): The set of elements that have been inserted but not deleted grows by $(e_(k+1).italic(\"id\"), c)$ and otherwise stays unchanged.\n  The transformation of an insertion operation is always another insertion operation.\n  The document state is therefore updated by inserting the same element $(e_(k+1).italic(\"id\"), c)$, and otherwise remains unchanged.\n  Moreover, the transformed index of that insertion is computed by counting the number of internal state records with $s_e = mono(\"Ins\")$ that appear before the new record in the internal state, and the new record also has $s_e = mono(\"Ins\")$, and the $s_e$ property of no other record is updated, so the correspondence between internal state records and document state is preserved.\n\n  Case (2): The element being deleted is at index $j$ in the document at the time $e_(k+1)$ was generated, which is $sans(\"replay\")(sans(\"Events\")(e_(k+1).italic(\"parents\")))$.\n  We compute this element by retreating and advancing events until the prepare version equals $e_(k+1).italic(\"parents\")$, and then finding the $j$th (zero-indexed) record in the internal state that has $s_p = mono(\"Ins\")$.\n  The records with $s_p = mono(\"Ins\")$ are those that have been inserted but not deleted in events that happened before $e_(k+1)$, and therefore the $j$th such record is the record corresponding to $sans(\"replay\")(sans(\"Events\")(e_(k+1).italic(\"parents\")))[j]$.\n  Before applying $e_(k+1)$, this record may have either $s_e = mono(\"Ins\")$ or $s_e = mono(\"Del\")$.\n  If $s_e = mono(\"Ins\")$, we update it to $s_e = mono(\"Del\")$, and transform $e_(k+1)$ into a deletion whose index is the number of $s_e = mono(\"Ins\")$ to the left of the target record in the internal state; by the inductive hypothesis, this is the correct document element to be deleted.\n  If $s_e = mono(\"Del\")$ before applying $e_(k+1)$, that event is transformed into a no-op, since another operation in $E_k$ has already deleted the element in question from the document state.\n  In either case, we preserve the invariants of the induction.\n\n  If $e_(k+1)$ is a critical version, we clear the internal state and replace it with a placeholder.\n  By the definition of critical version, every event in $E_k$ and $e_(k+1)$ happened before every event in the rest of $E$.\n  Therefore, after retreating and advancing any event after $e_(k+1)$, any internal state record with $s_e = mono(\"Del\")$ will also have $s_p = mono(\"Del\") k$ for some $k>0$, and any internal state record with $s_e = mono(\"Ins\")$ will also have $s_p = mono(\"Ins\")$ unless it is deleted by an event after $e_(k+1)$.\n  Since an internal state with $s_e = mono(\"Del\")$ can never move to state $s_e = mono(\"Ins\")$, this means that any records with $s_e = mono(\"Del\")$ as of the critical version can be discarded, since they will never again be needed for transforming the index of an operation after $e_(k+1)$.\n  Moreover, since all of the remaining records have $s_e = s_p = mono(\"Ins\")$ as of the critical version, and since the replay of the remaining events in $E$ will never need to advance or retreat an event prior to the critical version, all of the records in the internal state can all be replaced by a single placeholder while still preserving the invariants of the induction.\n]\n\n#theorem[The #algname algorithm satisfies the strong list specification (@strong-list-spec).] <main-theorem>\n#proof[\n  Given a valid event graph $G$, let $sans(\"replay\")(G)$ be the replay function based on #algname, as introduced earlier.\n  We must show that there exists a list order $italic(\"lo\") subset sans(\"ID\") times sans(\"ID\")$ that satisfies the conditions given in @strong-list-spec.\n  We claim that this list order corresponds exactly to the sequence of records and placeholders in the internal state after replaying the entire event graph $G$.\n  By @lemma-deterministic, this internal state exists and is unique.\n  This correspondence is more apparent if we assume a variant of #algname that does not clear the internal state on critical versions, but we also claim that performing the optimisations in @clearing preserves this property.\n\n  To begin, note that the internal state is a totally ordered sequence of records, and that (aside from clearing the internal state) we only ever modify this sequence by inserting records or by updating the $s_p$ and $s_e$ properties of existing records.\n  Thus, if a record with ID $italic(\"id\")_i$ appears before a record with ID $italic(\"id\")_j$ at some point in the replay, the order of those IDs remains unchanged for the rest of the replay.\n  We define the list order $italic(\"lo\")$ to be the ordering relation among IDs in the internal state after replaying $G$ using a #algname variant that does not clear the internal state.\n  This order exists, is unique (@lemma-deterministic), and is by definition transitive, irreflexive, and total, so it meets requirement (2) of @strong-list-spec.\n\n  Let $e in G$ be any event in the graph, and let $G_e = {e} union sans(\"Events\")(e.italic(\"parents\"))$ be the subset of $G$ consisting of $e$ and all events that happened before $e$.\n  Note that $G_e$ satisfies the conditions in @valid-graph, so it is also valid.\n  Let $italic(\"doc\")_e = sans(\"replay\")(G_e) = angle.l (italic(\"id\")_0, c_0), ..., (italic(\"id\")_(n-1), c_(n-1)) angle.r$ be the document state immediately after locally generating $e$.\n  Since $sans(\"replay\")$ is deterministic (@lemma-deterministic), $italic(\"doc\")_e$ exists and is unique.\n\n  By @state-correspondence, $italic(\"doc\")_e$ contains exactly the elements that have been inserted but not deleted in $G_e$, which is requirement (1a) of @strong-list-spec.\n  Also by @state-correspondence, the $i$th element in $italic(\"doc\")_e$ corresponds to the $i$th record with $s_e = mono(\"Ins\")$ in the internal state obtained by replaying $G_e$.\n  Since any pair of IDs that are ordered by the internal state derived from $G_e$ retain the same ordering in the internal state derived from $G$, we know that the ordering of elements in $italic(\"doc\")_e$ is consistent with the list order $italic(\"lo\")$, satisfying requirement (1b) of @strong-list-spec.\n\n  Finally, to demonstrate requirement (1c) of @strong-list-spec we assume that $e.italic(\"op\") = italic(\"Insert\")(i,c)$, and we need to show that $italic(\"doc\")_e [i] = (e.italic(\"id\"), c)$.\n  Since $G_e$ contains only $e$ and events that happened before $e$, but no events concurrent with $e$, we know that immediately before applying $e$, every record in the internal state will have $s_p = mono(\"Ins\")$ if and only if it has $s_e = mono(\"Ins\")$ (because there are no events that are reflected in the effect version but not in the prepare version $e.italic(\"parents\")$).\n  Therefore, the set of records that are counted while mapping the original insertion index $i$ to an internal state record equals the set of records that are counted while mapping the internal record back to a transformed index.\n  Thus, the transformed index of the insertion is also $i$, and therefore the new element is inserted at index $i$ of the document as required.\n  This completes the proof that #algname satisfies the strong list specification.\n]\n])\n","numAgents":1,"txns":[{"parents":[],"numChildren":0,"agent":0,"time":"1970-01-01T00:00:00Z","patches":[[0,0,"#set heading(numbering: \"1.a\")\n\n#align(center, text(17pt)[\n  *Replayable Event Graphs: A new approach for collaborative editing*\n])\n"],[62,65,""],[62,0,"ORDT "],[66,1,""],[65,1,""],[64,1,""],[63,1,""],[62,1,""],[62,0,"T"],[62,1,""],[62,0,"REG for Text editing"],[87,0,"\n// #grid(\n//   columns: (1fr, 1fr),\n  #align(center)[\n    Joseph Gentle \\\n    #link(\"mailto:me@josephg.com\")\n  ]\n// )\n\n\n#align(center)[\n  *DRAFT DRAFT DO NOT PUBLISH*\n]"],[221,0,", "],[222,1,""],[221,1,""],[223,0,"\n  text("],[226,0,"#"],[232,0,")"],[232,0,"15pt"],[224,13,""],[223,1,""],[221,0,", text(20pt)"],[232,1,""],[267,0,")"],[229,1,""],[228,1,""],[228,0,"15"],[268,0,"\n\n\n"],[232,0,", margin("],[233,8,""],[232,1,""],[232,0,", mar"],[236,1,""],[235,1,""],[234,1,""],[233,1,""],[232,1,""],[222,0," mar"],[225,1,""],[224,1,""],[223,1,""],[222,1,""],[270,0,"#["],[271,1,""],[271,0,"text()"],[276,0,"margin"],[271,4,""],[271,0,"p[a"],[273,1,""],[272,1,""],[272,0,"ad"],[275,6,""],[275,0,"left: 2em, right: 2em"],[297,0,"[\n  \n  "],[299,2,""],[300,2,""],[300,0,"]"],[299,0,"  Basdfasdf"],[312,0,"\n\nasdfasdf"],[298,0,"\n  *Abstract*\n  "],[312,2,""],[315,9,""],[313,2,""],[301,0,"#align(center)["],[326,0,"]"],[329,0,"  There have bene "],[346,1,""],[345,1,""],[344,1,""],[344,0,"en many attempts to define"],[364,6,""],[331,33,""],[329,2,""],[329,0,"  There have been many attempts to define a "],[372,1,""],[371,1,""],[331,40,""],[331,0,"There have been many attempts to define *pure*"],[371,1,""],[371,0,"_"],[376,1,""],[376,0,")"],[376,1,""],[376,0,"_ C"],[378,1,""],[378,0,"operation based CRDTs that operate soley on the original ev"],[436,1,""],[435,1,""],[435,0,"editing events themselves. However, no practical text bse"],[491,1,""],[490,1,""],[490,0,"ased algorithms have been proposed or implemented for text editing."],[540,3,""],[540,0,"which allow this approach to be used for"],[328,0,"\n  CRDTs have several downsides in practical use: They require the entire "],[360,3,""],[360,0,"for "],[377,0," in text editing"],[419,0,"CRDt st"],[425,1,""],[424,1,""],[423,1,""],[422,1,""],[422,0,"T state to be loaded in memory during all editing sessions. They"],[482,4,""],[482,0,"T"],[482,1,""],[482,0,"And this data set grows w"],[482,0,"This data is CRDtt"],[499,1,""],[498,1,""],[498,0,"T type specific and it"],[520,18,""],[520,0," "],[528,0,"ithout bounds\n  "],[542,2,""],[541,0,"."],[541,1,""],[541,0," as a document is edited. Some solutions to this have been proposed - like PO"],[617,1,""],[616,1,""],[616,0,"*"],[616,1,""],[616,0,"_POBRDT*"],[623,1,""],[622,1,""],[621,1,""],[620,1,""],[619,1,""],[618,1,""],[617,1,""],[616,1,""],[616,0,"_Pure Operation-based "],[632,6,""],[632,0,"Based RDT*"],[641,1,""],[641,0,"_ "],[642,1,""],[642,0,". However, no practical solution has been "],[653,31,""],[329,324,""],[329,0,"  CRDTs have several downsides for practical use in text editing: They require the entire CRDT state to be loaded in memory during all editing sessions. This data is CRDT type specific and it grows without bounds as a document is edited. Some solutions to this have been proposed - like _Pure Operation-Based RDT_. However, this approach is not "],[653,21,""],[653,0,"no algorithm f"],[656,0,"practical "],[677,0,"or text editing has been found"],[653,54,""],[653,0,"up until now, now p"],[671,1,""],[670,1,""],[669,1,""],[669,0," practical solution for text editing has been found or implemented.\n  \n  "],[737,2,""],[740,0,"In this paper we propose a correctness cri"],[765,17,""],[757,8,""],[757,0,"demonstrate a practical algorithm for doing "],[795,6,""],[795,0,"collaborative"],[757,11,""],[757,0,"introduce _REG-walker_: "],[780,1,""],[820,0," editing"],[820,0,"ly"],[830,0," ed"],[832,1,""],[831,1,""],[831,0,"text "],[835,1,""],[513,4,""],[513,0,"."],[514,2,""],[514,0," I"],[562,0," (and pun"],[570,1,""],[491,0," (and the associated network protocl"],[526,1,""],[526,0,"ol)"],[553,0,"And pruning is difficult - this data set"],[593,2,""],[638,0,"."],[639,8,""],[638,1,""],[753,8,""],[753,0,"algorithm"],[855,12,""],[855,0,"an efficient "],[910,0,". We "],[912,3,""],[912,0,"As we will show, this allr"],[937,1,""],[936,1,""],[935,1,""],[935,0,"pproach opt"],[945,1,""],[944,1,""],[943,1,""],[943,0,"is smaller on disk"],[912,18,""],[912,0,"T"],[944,0," that comp"],[953,1,""],[953,0,"parable CRDT "],[965,1,""],[961,0,"text based "],[976,0," implementations, and it is faster in "],[998,16,""],[926,3,""],[926,0,"has competitive performance to "],[957,21,""],[1004,1,""],[1003,1,""],[1002,1,""],[1001,1,""],[1000,1,""],[999,1,""],[999,0,". It takes up less psac"],[1021,1,""],[1020,1,""],[1019,1,""],[1018,1,""],[1018,0,"space a"],[1024,1,""],[1024,0,"on disk, and its "],[1040,1,""],[1039,1,""],[1038,1,""],[1038,0," "],[1038,1,""],[1038,0,"t allows pruning and other"],[1033,0,"the network format is fixed for "],[1033,32,""],[1054,10,""],[1054,0,". It also "],[1056,8,""],[1056,0,"All algorithms in this class also use the same network and disk format, allowing improved "],[1137,9,""],[1137,0,"future algorithmic improvements to be implemented without thr"],[1195,3,""],[1195,0,"requiring "],[1187,18,""],[1187,0,"pe"],[1188,1,""],[1187,1,""],[1187,0,"peace by pea"],[1187,12,""],[1187,0,"e"],[1187,1,""],[1187,0,"more easily."],[1200,266,""],[1199,1,""],[811,0,"\n  There have been many attempts to define _pure_ operation based CRDTs that operate soley on the original editing events themselves. However, no practical text based algorithms have been proposed or implemented which allow this approach to be used for text editing."],[811,266,""],[336,0," are useful for multi-master collaborative editing, but they"],[437,16,""],[451,0," "],[451,1,""],[437,0," in text editing"],[786,84,""],[786,0,"naively implemented operation based "],[806,0,"pure "],[827,0,"merging is very compiutati"],[835,18,""],[835,0,"has bad performance"],[835,19,""],[835,0,"po"],[836,1,""],[836,0,"erforms very poorly."],[956,0," using pure operations"],[997,12,""],[980,17,""],[980,0,"As we will sho"],[983,11,""],[983,0,"our benchmarks show,"],[1015,3,""],[1015,0," is"],[1029,0," to existing"],[1074,1,""],[1073,1,""],[1073,0," whil eu"],[1080,1,""],[1079,1,""],[1078,1,""],[1078,0,"e using "],[1086,12,""],[1109,3,""],[1115,1,""],[1115,0,"ing"],[1128,0,"Because "],[1136,1,""],[1136,0,"a"],[1165,4,""],[1164,1,""],[1203,8,""],[1202,1,""],[1203,62,""],[1203,0,"future "],[858,352,""],[858,0,"  In this paper we introduce _REG-walker_: an efficient algorithm for collaboratively editing text using pure operations. As our benchmarks show, performance is comparable to existing text based CRDT implementations while using less space on disk, and allowing pruning. Because all algorithms in this class use the same network and disk format, future"],[611,0," - requiring network level coordination to change any part of the algorithm"],[1201,0," and other "],[1206,6,""],[1206,0,"partial loads of the d"],[1206,22,""],[1206,0,"\"light clients\""],[1304,0," changes "],[1305,8,""],[1305,0,"algorth"],[1311,1,""],[1310,1,""],[1310,0,"ithmic improvements can be made without global coordination."],[1349,0," any"],[1341,0," pacem"],[1346,1,""],[1345,1,""],[1344,1,""],[1343,1,""],[1343,0,"eacemeal,"],[1397,1,""],[1396,1,""],[1389,7,""],[1389,0,"1. "],[1391,1,""],[1390,1,""],[1389,1,""],[1389,0,"# "],[1390,1,""],[1389,1,""],[1389,0,"=Introduction\n\n"],[1402,0," "],[1402,1,""],[1390,0," "],[1388,0,"\n"],[1406,0,"CRDTs define their shared"],[331,5,""],[331,0,"Conflict-Free Replicated Data ty"],[362,1,""],[361,1,""],[361,0,"Types (CRDTs)"],[1469,0," data model"],[1444,36,""],[1444,0,"At h"],[1447,1,""],[1447,0,"the heart of any CRDT - as the name implies - is a shared data type. For example, the FUGUE algorithm (a CRDT for collaborative "],[1552,0,"sequence "],[1552,9,""],[1575,0,"text editing)"],[1575,4,""],[1574,1,""],[1582,0," text and other sequence data"],[1612,0," uses a tree of nodes\n\n> Diagram\n\n"],[1633,0,". Each node has a "],[1645,6,""],[1645,0,"is defined by $$"],[1660,0,")("],[1661,1,""],[1660,2,""],[1659,1,""],[1659,0,"()"],[1660,0,"Parents"],[1660,7,""],[1660,0,"parent - lef"],[1671,1,""],[1670,1,""],[1669,1,""],[1668,1,""],[1667,1,""],[1666,1,""],[1660,0,"tree-"],[1660,0,"content, is_deleted, "],[1659,0,"_"],[1694,0,"_. ("],[1661,32,""],[1661,0,"id, x, left"],[1671,1,""],[1670,1,""],[1669,1,""],[1668,1,""],[1668,0,"tree_parent, L | R$"],[1681,0,"$"],[1692,1,""],[1691,1,""],[1691,0," The tree"],[1696,4,""],[1696,0,"id a dn "],[1703,1,""],[1702,1,""],[1701,1,""],[1700,1,""],[1699,1,""],[1698,1,""],[1692,6,""],[1692,0,"This data structure froms t"],[1712,7,""],[1712,0,"forms the basis for the CRDT's mas"],[1745,1,""],[1744,1,""],[1743,1,""],[1743,0,"messages"],[1712,39,""],[1712,0,"us ys"],[1716,1,""],[1715,1,""],[1714,1,""],[1713,1,""],[1712,1,""],[1712,0,"is used for both the CRDT's messages and"],[1749,3,""],[1748,1,""],[1747,1,""],[1747,0," type and "],[1724,5,""],[1723,1,""],[1723,0,":\n\n- "],[1728,1,""],[1728,0,"T"],[1751,5,""],[1751,0,"\n- File format"],[1754,4,""],[1754,0,"The storage"],[1772,0,"\n\nAnd its "],[1774,8,""],[1774,0,"And its"],[1757,0," persistent "],[1768,1,""],[1783,0,"\n- The in-memory data structure used to "],[1820,3,""],[1820,0,"in both *pre"],[1831,1,""],[1830,1,""],[1829,1,""],[1828,1,""],[1828,0,"_prepare_upd"],[1839,1,""],[1838,1,""],[1837,1,""],[1836,1,""],[1836,0,"-update_ (aka _generate_) and "],[1784,82,""],[1784,0,"- The in-memory data structure used in both _prepare-update_ (aka _generate_) and"],[1712,11,""],[1712,0,"defines"],[1753,0," CRDT"],[1757,1,""],[1756,1,""],[1755,1,""],[1754,1,""],[1753,1,""],[1782,3,""],[1782,0,"An"],[1809,0,", which is needed for"],[1830,8,""],[1873,0," _apply_update"],[1880,1,""],[1880,0,"-"],[1887,0,"_ (aka the _effector_ function)."],[1918,1,""],[1809,17,""],[1809,0," "],[1809,1,""],[1809,0,", used"],[1907,0,"."],[1907,1,""],[1909,7,""],[1909,0,"Beca"],[1912,1,""],[1911,1,""],[1910,1,""],[1909,1,""],[1909,0,"Because this data structure "],[1909,28,""],[1909,0,"Because this data structure"],[1909,27,""],[1909,0,"If an "],[1914,1,""],[1913,1,""],[1913,0," collaborative "],[1909,19,""],[1909,0,"P"],[1909,1,""],[1909,0,"P"],[1909,1,""],[1909,0,"The data structre "],[1926,1,""],[1925,1,""],[1924,1,""],[1924,0,"ure grows without bounds "],[1909,40,""],[1909,0,"The data structure grows without bounds"],[1908,0,"\nThis has a few down"],[1923,5,""],[1923,0," significant downsides:\n"],[1948,0,"- "],[1989,0," during e"],[1990,8,""],[1989,1,""],[1989,0,", and is difficult to compact\n- Any "],[2021,4,""],[2021,0,"If a collaborative editing system wants to change"],[1442,0,"\n\nAny realtime "],[1448,9,""],[1448,0,"realtime"],[1444,12,""],[1444,0,"Realtime "],[1444,9,""],[1444,0,"Collaborative editing systems define 3 different formats for "],[1444,0,"We can think of a "],[1462,1,""],[1462,0,"a"],[1462,1,""],[1462,0,"c"],[1490,1,""],[1490,0," as"],[1499,1,""],[1494,5,""],[1494,0,"a data flow system, "],[1513,1,""],[1512,1,""],[1512,25,""],[1512,0,", with 3 clear stages:\n\n1. "],[1538,1,""],[1537,1,""],[1536,1,""],[1536,0,"+ The "],[1538,4,""],[1537,1,""],[1536,1,""],[1536,0,"\\ asdf: asdf"],[1536,1,""],[1536,0,"/."],[1537,1,""],[1538,4,""],[1538,0,"Original Events"],[1555,4,""],[1555,0,"When a new "],[1562,4,""],[1562,0,"user makes a change to a document, the event starts"],[1607,6,""],[1607,0,"is expressed in *t"],[1624,1,""],[1623,1,""],[1622,1,""],[1622,0," terms of the docum"],[1623,18,""],[1536,87,""],[1536,0,"/ Original Events: When a user makes a change to a document, the event is expressed in"],[1475,0," text"],[1475,5,""],[1622,0," terms of the document being edited. For tex"],[1659,7,""],[1659,0,"For example, a "],[1673,1,""],[1672,1,""],[1672,0,"the document's "],[1672,15,""],[1672,0,"an insert event might b"],[1623,8,""],[1623,0,"relationt "],[1632,1,""],[1631,1,""],[1631,0," to"],[1697,1,""],[1697,0,"insert *"],[1704,1,""],[1704,0,"_"],[1704,1,""],[1704,0,"\"x\" at position 4. "],[1722,1,""],[1721,1,""],[1721,0," "],[1721,1,""],[1721,0,". The insert happ"],[1734,4,""],[1734,0,"applies "],[1733,9,""],[1733,0," happened in relation"],[1743,11,""],[1743,0,"relative to a document at some version.\n/ CRDT Events: CRDTs convert"],[1804,0,"immediately "],[1823,0," this change"],[1803,0," use a _pare"],[1814,1,""],[1813,1,""],[1812,1,""],[1812,0,"repare_"],[1818,1,""],[1818,0,"_update_ method to"],[1827,9,""],[1827,0,"functi"],[1827,6,""],[1827,0,"method to"],[1868,0," into some internal "],[1887,1,""],[1887,0,", CRDT-specific format. For example, Fugue my re-expres this changes "],[1955,1,""],[1954,1,""],[1954,0," as _(id: xx, _"],[1967,0," \"x\", parent: "],[1980,1,""],[1979,1,""],[1973,6,""],[1973,0,"tree_parent: yy, Left)"],[1995,1,""],[1996,0,"."],[1964,2,""],[1964,0,"UUID(x)"],[1991,2,""],[1991,0,"UUID(y)"],[2007,0," A different sequence baseed"],[2034,1,""],[2033,1,""],[2033,0,"d CRDT will use a dife"],[2054,1,""],[2054,0,"ferent format. (F"],[2070,1,""],[2070,0,"Eg, "],[2073,1,""],[2072,1,""],[2071,1,""],[2070,1,""],[2069,1,""],[2068,1,""],[2068,0,"\n/ Transformed Event / opa"],[2093,1,""],[2093,0,"eration: Once the "],[2089,2,""],[2083,7,""],[2083,0,"O"],[2094,9,""],[2094,0,"Wh"],[2095,1,""],[2094,1,""],[2094,0,"When the reciever "],[2103,0,"event is recieved "],[2069,61,""],[2069,0,"/ Transformed Operation: When the event is recieved reciever"],[2068,0," OT based systems use a "],[2086,6,""],[2086,0,"typically "],[2069,27,""],[2068,1,""],[2068,0," I"],[2069,1,""],[2069,0,"It is this event type"],[1461,0," CRDT based"],[1462,10,""],[1461,1,""],[1444,17,""],[1444,0,"Any system suing"],[1459,1,""],[1458,1,""],[1457,1,""],[1456,1,""],[1455,1,""],[1455,0,"su"],[1456,1,""],[1455,1,""],[1455,0,"using a CRDT to"],[1484,0,"ly"],[1493,1,""],[1492,1,""],[1491,1,""],[1491,0," "],[1491,1,""],[1491,0," a document"],[1444,3,""],[1444,0,"We can think of any"],[1464,0,"CRDT-based "],[1475,23,""],[1489,1,""],[1488,1,""],[1488,0," editing system"],[1503,23,""],[1444,103,""],[1444,0,"The t"],[1448,1,""],[1447,1,""],[1446,1,""],[1445,1,""],[1444,1,""],[1444,0,"The t"],[1447,2,""],[1444,3,""],[1444,0,"We can think of any CRDT-based collaborative editing system as a data flow system, with 3 clear stages:"],[1444,30,""],[1444,0,"In a "],[1448,1,""],[1469,1,""],[1468,1,""],[1467,1,""],[1467,0,"or based on"],[1476,2,""],[1476,0,"around a CRDT, data "],[1496,18,""],[1500,0,"s through the"],[1520,22,""],[1520,0," in 3 clear statg"],[1536,1,""],[1535,1,""],[1535,0,"ges:"],[1543,0,"1. "],[1793,0,"2. "],[2104,0,"3. "],[2128,0,"s"],[1628,11,""],[1628,0,"relative"],[1628,0,"in rel"],[1633,1,""],[1632,1,""],[1631,1,""],[1630,1,""],[1629,1,""],[1628,1,""],[1728,59,""],[1727,1,""],[1727,0," The version of the document"],[1732,0,"*"],[1732,1,""],[1732,0,"_"],[1740,0,"_"],[1732,0,"document version "],[1759,15,""],[1741,8,""],[1751,0,"at the point "],[1758,0,"edit "],[1763,6,""],[1763,0,"point is "],[1740,0,"'s"],[1753,21,""],[1753,0,"when the eh"],[1763,1,""],[1763,0,"dit happened "],[1728,14,""],[1728,0,"The system must also capture the document's"],[1805,0,"in order to propertl "],[1825,1,""],[1824,1,""],[1823,1,""],[1823,0,"ly interpret the events."],[1846,1,""],[1845,1,""],[1845,0,"."],[1894,0,"(aka _generate_) "],[2014,2,""],[2014,0,"may"],[2027,0,"s"],[2094,3,""],[2094,0,"D"],[2123,0,"s"],[2124,5,""],[2147,0,"s to x"],[2152,1,""],[2152,0,"express the same information."],[2181,23,""],[2181,0," This data format is saved to disk and replicated across the network."],[2201,0," used on "],[2210,10,""],[2219,21,""],[2207,0,"to persist the CRDT d"],[2227,1,""],[2227,0,"to disk"],[2234,2,""],[2235,5,""],[2239,0,"to replicate the change across the"],[2281,0," "],[2281,1,""],[2338,9,""],[2338,0,", i"],[2340,1,""],[2340,0,"it is used to modify a local CRDT's state via an *appl"],[2393,1,""],[2392,1,""],[2391,1,""],[2390,1,""],[2389,1,""],[2389,0,"_apply_update_ function"],[2404,0,"(aka _effector)"],[2418,1,""],[2418,0,"_("],[2419,1,""],[2418,1,""],[2418,0,"_) "],[2429,0,". This "],[2431,5,""],[2431,0,"It is not often discussed, but this method can be trivially modified to "],[2474,29,""],[2474,0,"can be re"],[2478,5,""],[2462,0,"by inspecting how the effector "],[2484,9,""],[2483,1,""],[2482,1,""],[2481,1,""],[2480,1,""],[2480,0,"this"],[2483,1,""],[2482,1,""],[2481,1,""],[2480,1,""],[2492,4,""],[2492,0,"modifies the data structure, we can "],[2456,0," with "],[2461,1,""],[2461,0,"in the CRDT literature"],[2489,66,""],[2431,58,""],[2431,0,"T"],[2431,1,""],[2431,0,"Modifying the state will usually mo"],[2465,1,""],[2464,1,""],[2464,0,"also"],[2445,0,"CRDT's "],[2475,0," m"],[2476,1,""],[2463,13,""],[2463,0,"also usually mod"],[2476,3,""],[2476,0,"result in modifications to the document. A"],[2517,1,""],[2516,1,""],[2516,0," The fim"],[2523,1,""],[2522,1,""],[2521,1,""],[2520,1,""],[2519,1,""],[2518,1,""],[2517,1,""],[2517,0,"We can express these changes "],[2524,22,""],[2524,0,"usually "],[2524,8,""],[2524,0,"mod"],[2517,10,""],[2517,0,"The mo"],[2522,1,""],[2521,1,""],[2521,0,"corresponding modifications to the document"],[2556,0,"resulting "],[2517,18,""],[2517,0,"The "],[2521,39,""],[2521,0,"change to"],[2529,1,""],[2529,0,"o the resulting document is "],[2528,0,"made "],[2549,0,", local"],[2569,0,"wha"],[2571,1,""],[2570,1,""],[2517,53,""],[2517,0,"We can think of this modification "],[2507,8,""],[2507,0,"document's"],[2507,10,""],[2507,0,"projected document ($q(s)#"],[2532,1,""],[2532,0,"$)"],[2533,0," in "],[2536,1,""],[2535,1,""],[2534,1,""],[2533,1,""],[2525,9,""],[2516,0,", user visible"],[2541,34,""],[2541,0,"The "],[2544,1,""],[2544,0,"se modifications correspond to the \"transformed\""],[2575,4,""],[2575,0,"a "],[2590,0," versi "],[2596,1,""],[2595,1,""],[2595,0,"ion of the operation, an"],[2618,1,""],[2618,0,"s discussed in the lit"],[2637,3,""],[2637,0,"Operational Transformation literature.\n\n"],[2675,0," "],[2675,1,""],[2675,0," "],[2675,1,""],[2675,0," The local"],[2676,9,""],[2676,0,"When this happens"],[2681,12,""],[2675,6,""],[2677,466,""],[2676,0,"\nUsing a "],[2684,1,""],[2684,0," "],[2677,8,""],[2677,0,"Using a"],[2606,9,""],[2606,0,"event"],[2616,17,""],[2616,0,"per "],[2616,4,""],[2616,0,"in "],[2486,0,"corresponding "],[2671,0," And for text operations, "],[2680,17,""],[2680,0,"sequence CRDTs, "],[2672,5,""],[2672,0,"F"],[2692,0,"we can describe"],[2671,36,""],[2679,1,""],[2673,6,""],[2673,0,"The primary benefit of this approach is that it allows "],[2673,55,""],[2673,0,"The primary benefit of this approach is that it allows"],[2718,9,""],[2718,0,"we cdon"],[2724,1,""],[2723,1,""],[2722,1,""],[2721,1,""],[2721,0,"don't care "],[2673,59,""],[2673,0,"The CRDT's state"],[2676,0," version of the"],[2704,0," may be different from the "],[2673,58,""],[2673,0,"The version of the CRDT's state may be different from the"],[2672,0,"\n"],[2672,0,"\nThis approach has "],[2673,18,""],[2673,0,"This approach has"],[2692,59,""],[2673,19,""],[2672,0,"\nThe advantage of this approach is that the version of the target CRDT does not need to match the version of "],[2673,0,"// "],[2673,111,""],[2673,0,"// The advantage of this approach is that the version of the target CRDT does not need to match the version of"],[2672,0,"\n"],[2672,0,"\nThe version at which an event was "],[2677,0,"docuemn"],[2683,1,""],[2682,1,""],[2681,1,""],[2681,0,"ment "],[2677,9,""],[2684,0," of the document"],[2723,0,"generated do "],[2735,1,""],[2735,0,"es not need to match the version of the document into which the event was applied. "],[2817,1,""],[2817,0," This allows"],[2817,12,""],[2673,0,"// "],[2937,0," approach"],[2932,0,"\n"],[2981,0,"\n- The CRDT's state is difficult to reason about. When is it safe to prune data? "],[3061,1,""],[2982,79,""],[2981,1,""],[3052,0," or prune "],[3023,39,""],[3003,0,"usually "],[3003,8,""],[3026,49,""],[3026,0,"Typign"],[3031,1,""],[3030,1,""],[3029,1,""],[3028,1,""],[3027,1,""],[3026,1,""],[3026,0,"There has been a lot of innovation over the years in the sap"],[3085,1,""],[3084,1,""],[3084,0,"pace of CRDT "],[3049,48,""],[3049,0," new CRDT algorithms invented over the years. Typ"],[3097,1,""],[3097,0,"ing the storage and network protocol to a particular CRDT algorithm makes it difficult to "],[3171,16,""],[3171,0,"standardization and code reuse very difficult"],[3023,0,". Pruning the da"],[3025,14,""],[3025,0,"It is very difficult to co"],[3050,1,""],[3049,1,""],[3049,0,"prune the data structure."],[3055,3,""],[3055,0,"tihs"],[3058,1,""],[3057,1,""],[3056,1,""],[3056,0,"his"],[3075,0,"\n- The "],[3076,6,""],[3076,0,"- The"],[2988,14,""],[2988,0,"CRDT's state"],[3022,51,""],[3021,1,""],[3021,0,". "],[3022,1,""],[3021,1,""],[3021,0,", and it is very difficult to prune this data set"],[3076,0," CRDT's state is needed to convert (1) into (2)"],[3103,20,""],[3102,1,""],[3101,1,""],[3100,1,""],[3100,0,"both to generate new events"],[3121,0,"local "],[3133,0,", and merge remote events. This means the data structure typically needs to be loaded entirely into RAM before any "],[3237,11,""],[3237,0,"f"],[3237,1,""],[3237,0,"before ean"],[3246,1,""],[3245,1,""],[3244,1,""],[3244,0,"any editing can occur."],[3173,1,""],[3173,0,"hi"],[3174,1,""],[3173,1,""],[3173,0,"is "],[3175,1,""],[3261,6,""],[3261,0,"happen."],[3271,76,""],[3271,0,"T"],[3303,0,"s"],[3283,0,"format "],[3311,0," are tied"],[3351,0,". This"],[3364,0,"protocol "],[3418,0,"."],[3418,0," "],[3418,1,""],[3353,0,"The explosion of new CRDT algorithms "],[3353,37,""],[3418,1,""],[3418,0," as "],[3421,1,""],[3420,1,""],[3419,1,""],[3419,0,"when new CRDTs are invented."],[3446,0," - which has happened many times"],[3446,32,""],[3447,0,"\n\nThe Time MAchine"],[3458,7,""],[3458,0,"Machines paper"],[3449,0,"In "],[3452,1,""],[3452,0,"t"],[3448,0,"\n\n"],[3448,1,""],[3447,1,""],[3475,0,", we showed "],[3449,38,""],[3449,0,"In the Time Machines paper, we showed"],[3050,0," ever"],[2390,5,""],[2390,0,"effect"],[3492,0," "],[3455,38,""],[3455,0,"It has been p"],[3479,0,"\n"],[3469,1,""],[3478,0,"\nIt has been p"],[3455,14,""],[3464,0,"\n"],[3454,1,""],[3463,0,"\n- The storage format and network protocols are tied to a particular CRDT algorithm. This makes protocol standardization and code reuse very difficult when new CRDTs are invented."],[3275,179,""],[3284,0,"\n- The CRDT's state is needed both to generate new local events, and merge remote events. This means this data structure typically needs to be loaded entirely into RAM before any editing can happen."],[3077,198,""],[3086,0,"\n- The CRDT's state grows without bounds, and it is very difficult to ever prune this data set"],[2983,94,""],[2992,0,"\n"],[2982,1,""],[2991,0,"\nThis approach has a few significant downsides:"],[2935,47,""],[2944,0,"\n"],[2934,1,""],[2943,0,"\n// The advantage of this approach is that the version of the target CRDT does not need to match the version of"],[2823,111,""],[2832,0,"\n"],[2822,1,""],[2831,0,"\n// The version of the document at which an event was generated does not need to match the version of the document into which the event was applied."],[2674,148,""],[2683,0,"\n"],[2673,1,""],[2672,0,"\n"],[3479,0,"r"],[3479,1,""],[3478,1,""],[3478,0,"propo"],[3466,17,""],[3468,1,""],[3467,1,""],[3466,1,""],[3466,0,"\n"],[3466,0,"Another approach - propo"],[3489,1,""],[3489,0,"osed sev"],[3496,1,""],[3495,1,""],[3494,1,""],[3485,9,""],[3484,1,""],[3483,1,""],[3482,1,""],[3482,0," is to "],[3483,6,""],[3482,1,""],[3482,0,", proposed sev"],[3495,1,""],[3494,1,""],[3493,1,""],[3493,0,"by various"],[3493,10,""],[3493,0,"in [time machines], [po-log], ?? is to exploc"],[3537,1,""],[3536,1,""],[3535,1,""],[3532,3,""],[3532,0,"replace the _"],[3544,1,""],[3543,1,""],[3542,1,""],[3541,1,""],[3540,1,""],[3540,0,"_p"],[3541,1,""],[3540,1,""],[3539,1,""],[3532,7,""],[3532,0,"instead collabor"],[3540,8,""],[3540,0,"store and replicate the set"],[3564,0,"ori"],[3566,1,""],[3565,1,""],[3564,1,""],[3567,0," of original events (tagged wi"],[3586,11,""],[3586,0," (tagged with version information). "],[3621,1,""],[3621,0," In this form, the _p"],[3641,1,""],[3640,1,""],[3639,1,""],[3638,1,""],[3637,1,""],[3636,1,""],[3636,0,"_prep"],[3636,5,""],[3636,0,"_prepare_update_ becomes a"],[3661,1,""],[3661,0,"the identiti"],[3672,1,""],[3672,0,"y function. "],[3683,1,""],[3682,1,""],[3682,0," and the whole system can be seen as a grow-only set CRDT"],[3711,5,""],[3711,0,"modelled "],[3743,0," replicating *("],[3757,1,""],[3756,1,""],[3756,0,"_(id, event, parents)_"],[3769,0,"causal_"],[3785,0," triples."],[3635,0," the replication system"],[3636,22,""],[3636,0,"instead of replicating a specific "],[3661,9,""],[3661,0,"sequence CRDT's state via broadcasting events, "],[3700,0,"that CRDT's "],[3720,0,"we replicate a "],[3734,1,""],[3734,0,"n "],[3735,1,""],[3734,1,""],[3734,0," "],[3734,1,""],[3733,1,""],[3733,0,"the causal graph of events itself."],[3752,0," original"],[3768,7,""],[3737,16,""],[3737,0,"set of all "],[3763,0," generated on all peers"],[3743,4,""],[3770,2,""],[3770,0,"across"],[3787,0," "],[3787,1,""],[3805,0,"then "],[3719,0," "],[3719,1,""],[3719,0,"\n\n\n"],[3719,0," the CRDT itself"],[3724,0,"sequence "],[3744,0," is wrapped as follows:\n\n- The "],[3769,6,""],[3769,0,"- The"],[3683,0,"directly ("],[3728,0," to ap"],[3733,1,""],[3733,0,"ll peers)"],[3743,0," the replicated object is the set of all known original events."],[3806,48,""],[3805,1,""],[3805,0,":"],[3810,3,""],[3810,0,"$s$ becomes "],[3810,0,"The document state "],[3808,33,""],[3808,0,"- The document state $s$ becomes a set of "],[3808,42,""],[3808,0,"- The document state $s$ becomes a set of _(id, event, causal_parents)_ triples. cau"],[3891,1,""],[3890,1,""],[3889,1,""],[3889,0,"_causal_parents_"],[3888,0," _"],[3889,1,""],[3889,0,"*"],[3889,1,""],[3889,0,"_id_ is a globally unique ID - typically with a compare"],[3937,0,"fully ordered "],[3951,7,""],[3951,0,"sorting fucntio"],[3959,7,""],[3959,0,"function for tie breaking. The event "],[3990,6,""],[3990,0,"_"],[3990,1,""],[3990,0,"_event_ is the original editing event that occurred - fo"],[4045,1,""],[4044,1,""],[4043,1,""],[4042,1,""],[4041,1,""],[4041,0,". For text editing, this is either *Insert(pos, content*)"],[4097,1,""],[4096,1,""],[4096,0,")* or *Delete(pos)*."],[3888,1,""],[3888,0,"\n  \\ "],[3897,0,":"],[3891,1,""],[3891,0,"/"],[3991,4,""],[3990,1,""],[3989,1,""],[3989,0,"\n  / "],[4001,0,":"],[4121,1,""],[4120,1,""],[4120,0,"\n  / "],[4141,0," is"],[4143,1,""],[4142,1,""],[4141,1,""],[4141,0,": is "],[4121,25,""],[4121,0,"  / _causal_parents_: is"],[3887,1,""],[3887,0,":"],[4145,0," a set of *id"],[4157,1,""],[4156,1,""],[4155,1,""],[4155,0,"ids of other events in the "],[4121,61,""],[4121,0,"  / _causal_parents_: is a set of ids of other events in the"],[3842,0," proper"],[3842,7,""],[4175,6,""],[4175,0,"which _happened_before* thi"],[4201,1,""],[4200,1,""],[4199,1,""],[4198,1,""],[4197,1,""],[4197,0,"_ hh"],[4200,1,""],[4199,1,""],[4199,0,"this event."],[4420,1,""],[4126,1,""],[3863,1,""],[4418,1,""],[4125,1,""],[3863,1,""],[4416,1,""],[4124,1,""],[3863,1,""],[4414,1,""],[4123,1,""],[3863,1,""],[4412,1,""],[4122,1,""],[3863,1,""],[4410,1,""],[4121,1,""],[3863,1,""],[4408,1,""],[4120,1,""],[3863,1,""],[4196,0," This list"],[4197,9,""],[4197,0,"The parents set is usually transitively reduces"],[4243,1,""],[4243,0,"d."],[4224,0,"stored in a "],[4256,0," form"],[4262,0," All I"],[4267,1,""],[4266,1,""],[4265,1,""],[4264,1,""],[4263,1,""],[4262,1,""],[4262,0,"\n  \n  "],[4263,2,""],[4264,2,""],[4263,1,""],[4263,0,"- $s^0#"],[4269,1,""],[4269,0,"$ is the empty set $$"],[4289,0,"em"],[4289,2,""],[4289,0,"emptyset"],[4298,0,"\n- _prepare_update_ is the identiti"],[4332,1,""],[4332,0,"y function\n- _effect_update_ is"],[4362,1,""],[4361,1,""],[4361,0,"simply "],[4361,7,""],[4361,0,"is"],[4114,2,""],[4114,0,"    "],[3983,2,""],[3983,0,"    "],[3882,2,""],[3882,0,"    "],[4118,4,""],[4118,0,"  "],[3985,4,""],[3985,0,"  "],[3882,4,""],[3882,0,"  "],[4363,0," the set union function $union"],[4388,5,""],[4388,0,"union$, taking "],[4396,7,""],[4395,1,""],[4394,1,""],[4361,6,""],[4361,0,"performs"],[4379,9,""],[4387,0,", combining all "],[4387,16,""],[4387,0,".\n- $P$ (delivery precon"],[4391,0,"The delivery precondition "],[4421,16,""],[4421,0,"is that all parents of any new"],[4421,30,""],[4421,0,"er"],[4422,1,""],[4421,1,""],[4421,0,"erquire"],[4421,7,""],[4421,0,"requires that all"],[4435,3,""],[4435,0,"an ev"],[4439,1,""],[4438,1,""],[4437,1,""],[4436,1,""],[4435,1,""],[4435,0,"events are added in causal r"],[4462,1,""],[4462,0,"order_"],[4455,0,"_"],[4469,0,". That is, if an event a"],[4492,1,""],[4492,0,"_a_ "],[4495,1,""],[4494,1,""],[4493,1,""],[4492,1,""],[4492,0,"_a_ "],[4495,1,""],[4494,1,""],[4494,0," happened_before b)"],[4512,1,""],[4512,0,"_, "],[4389,126,""],[4389,0,"- The delivery precondition $P$ requires that events are added in _causal order_. That is, if an event _a happened_before b_,"],[4471,43,""],[4471,0,"$P := "],[4473,0,"(u)"],[4480,0,"\\"],[4480,1,""],[4480,0,"forall p in u"],[4474,1,""],[4474,0,"()"],[4475,0,"id, "],[4478,1,""],[4477,1,""],[4476,1,""],[4476,0,", e, p"],[4481,1,""],[4481,0,"P"],[4500,1,""],[4500,0,"P$"],[4474,0,"s, "],[4504,0,", "],[4505,1,""],[4504,1,""],[4504,0,": "],[4491,15,""],[4491,0,"P sub"],[4493,3,""],[4493,0,"subset.eq s"],[4484,1,""],[4484,0,"p"],[4491,1,""],[4491,0,"p"],[4505,0," where _s_ is the set of events and _p_ is the parents of the new event."],[4478,1,""],[4478,0,"_"],[4481,1,""],[4481,0,"_"],[4481,1,""],[4481,0,"e"],[4478,1,""],[4478,0,"i"],[4488,1,""],[4488,0,":"],[4578,0,"\nHowever, "],[4579,9,""],[4579,0,"However,"],[4579,8,""],[4579,0,"This set of events "],[4579,19,""],[4579,0,"This set of events  is "],[4601,1,""],[4600,1,""],[4599,1,""],[4598,1,""],[4598,0,"can be "],[4598,7,""],[4598,0,"is a "],[4598,5,""],[4598,0,"forms a Directed Acyclic Graph (DAG) "],[4634,1,""],[4634,0,", where the parents field defines edges in the graph."],[4634,0," of events"],[3587,1,""],[3618,1,""],[3570,0," all observed"],[3599,0,","],[3599,1,""],[3632,1,""],[3632,0,"\n\n\n"],[3632,0," We refer to this set of events as the Event Graph, as it forms a "],[3633,68,""],[3632,1,""],[3632,0,"\n\n"],[3756,62,""],[3756,0,"we construct a new CRDT"],[3771,4,""],[3771,0,"grow-only set "],[3789,0,", which internally "],[3791,17,""],[3790,1,""],[3789,1,""],[3789,0," "],[3789,1,""],[3759,10,""],[3759,0,"use "],[3756,7,""],[3756,0,"the network uses "],[3793,0," where the set stores "],[3634,181,""],[3634,0,"In this form, instead of replicating a sequence CRDT's state directly (via broadcasting that CRDT's events to all peers), the network uses a grow-only set CRDT where the set stores event triples"],[3815,13,""],[3815,0,"_(id, event, parents)_ event triples"],[3838,13,""],[3837,1,""],[3814,0," event triples of"],[3854,0," where:"],[4317,0,"\n- The document state $s$ becomes a set of _(id, event, parents)_ triples:"],[3863,74,""],[4243,0,"\n"],[3862,1,""],[4094,2,""],[3963,2,""],[3862,2,""],[3861,0,"\n"],[4237,0,"\n\nThe hap"],[4245,1,""],[4244,1,""],[4243,1,""],[4239,4,""],[4238,1,""],[4237,1,""],[4237,0,"\n\nThis CRDT is defined by:"],[4289,0," is  "],[4293,1,""],[4293,0,"a"],[4294,10,""],[4332,1,""],[4332,0,"."],[4302,22,""],[4302,0,"event"],[4396,0,". Events are passed "],[4409,7,""],[4409,0,"preserved "],[4418,1,""],[4418,0,"."],[4468,45,""],[4468,0,"E"],[4474,0," can only be merged"],[4493,10,""],[4512,0," The delivery precondition $P$ requires that e"],[4543,15,""],[4543,0,"function is defined as"],[4552,13,""],[4552,0,"requires"],[4552,8,""],[4551,1,""],[4511,0,", to preserve the invariant that the causal graph must "],[4544,22,""],[4544,0,"every ID listed "],[4544,16,""],[4465,0,"\n- The event graph "],[4466,18,""],[4466,0,"- The event graph"],[4238,0,"\n"],[4238,0,"\n"],[4713,119,""],[4239,0,"This set of events forms a Directed Acyclic Graph (DAG) of events, where the parents field defines edges in the graph.\n"],[4357,1,""],[4357,0," We use common notation here - _a happened_before b_ is written as $a -> b#"],[4431,1,""],[4431,0,"$. "],[4433,1,""],[4432,1,""],[4432,0," "],[4432,1,""],[4432,0,"./ Th"],[4436,1,""],[4435,1,""],[4434,1,""],[4433,1,""],[4433,0," The relationship is transitive, antireflexive "],[4479,1,""],[4464,0," and "],[4469,2,""],[4482,0,". Concurrent operations $a parallel b := (a arrow.r.not b and b arrow.r.not a)$"],[4484,77,""],[4484,0,"Events $a$ and $b$ are _concurrent_ if neither event happened-before the other: $a parallel b := (a arrow.r.not b and b arrow.r.not a)$.\n\nThe graph "],[4626,6,""],[4626,0,"event "],[4622,10,""],[4622,0,"The event"],[3632,0,"\n\nWe refer to this "],[3634,17,""],[3634,0,"We refer to this"],[3632,0," Ho"],[3634,1,""],[3633,1,""],[3632,1,""],[3632,0,"\n\nThe "],[3634,4,""],[3634,0,"However, replaying this document state "],[3643,30,""],[3643,0,"us"],[3644,1,""],[3643,1,""],[3643,0,"converting this "],[3654,5,""],[3654,0,"any set of events into a "],[3672,7,""],[3643,0,"generating a document from "],[3670,14,""],[3670,0,"a"],[3686,0,"is a difficult problem. We know of no existing "],[3724,0,"practical "],[3743,0,"solutions to this problem.\n\nThis paper"],[3771,10,""],[3771,0,"In this paper we will define and \n"],[3771,33,""],[3771,0,"In this paper we will define and"],[3804,0,"\n\n"],[3599,0," and their"],[3609,12,""],[3604,5,""],[3603,1,""],[3602,1,""],[3601,1,""],[3600,1,""],[3600,0,"(and the document"],[3625,0," at which each event happened)"],[3655,13,""],[3655,0,"."],[3600,1,""],[3599,1,""],[3599,0,", "],[3655,1,""],[3654,1,""],[3654,0,"."],[3639,0," of these"],[3654,0,"s"],[3676,28,""],[3676,0,"converting any given"],[3710,0," into "],[3715,1,""],[3715,0," "],[3676,40,""],[3676,0,"practically using a set of original events"],[3676,42,""],[3676,0,"efficiently converting a set of original events into a document"],[3762,0," - especially for a text docume"],[3763,30,""],[3762,1,""],[3763,60,""],[3699,1,""],[3699,0,"the"],[3699,3,""],[3698,1,""],[3761,0," The primar"],[3762,10,""],[3762,0,"In this paper w "],[3777,1,""],[3777,0,"e will show"],[3779,9,""],[3779,0,"will provide a "],[3784,10,""],[3784,0,"show a novel algorithm - *"],[3809,1,""],[3809,0,"_rec"],[3812,1,""],[3812,0,"g-walker_"],[3820,1,""],[3820,0,"_, which can take any "],[3699,0," "],[3699,1,""],[3699,0,"a "],[3716,0," te"],[3718,1,""],[3717,1,""],[3717,0,"sequence "],[3725,1,""],[3725,0," editing"],[3746,1,""],[3746,0,"the corresponding"],[3676,22,""],[3676,0,"working directly with the"],[3701,2,""],[3675,0," building an efficient collaborative editing system on top of"],[3736,26,""],[3736,0," a"],[3737,1,""],[3737,0,"the"],[3780,32,""],[3737,0,"a simple"],[3745,3,""],[3737,8,""],[3737,0,"the raw"],[3808,0," How do you convert a"],[3828,1,""],[3827,1,""],[3820,7,""],[3809,11,""],[3808,1,""],[3667,222,""],[3667,0,"However, building an efficient collaborative editing system on top of the raw set of original sequence editing events is a difficult problem. In this paper we will show a novel algorithm - _reg-walker_, which can take any"],[3564,0,"_Event GRaph"],[3575,1,""],[3574,1,""],[3573,1,""],[3572,1,""],[3572,0,"raph_: which is the "],[3564,28,""],[3665,0," We call this the _Event GRaph"],[3694,1,""],[3693,1,""],[3692,1,""],[3691,1,""],[3691,0,"raph_."],[3759,0,"directly "],[3782,48,""],[3782,0,"event graph is a"],[3863,1,""],[3862,1,""],[3862,0,":"],[3840,0,"introduce "],[3850,5,""],[3901,0," event graph"],[3893,20,""],[3893,0,"replay any event graph of s"],[3919,1,""],[3919,0,"sequence editing events and "],[3916,31,""],[3915,1,""],[3904,0,"sequence "],[3904,9,""],[3915,0," of sequence edits to generate the coreres"],[3956,1,""],[3955,1,""],[3954,1,""],[3953,1,""],[3953,0,"responding document state. Our system is "],[3699,295,""],[3699,0,"However, building an efficient collaborative editing system directly on top of the event graph is a difficult problem. In this paper we will introduce a novel algorithm: _reg-walker_, which can replay any event graph of sequence edits to generate the corresponding document state. Our system is"],[3229,0," tran"],[3233,1,""],[3232,1,""],[3231,1,""],[3230,1,""],[3229,1,""],[3207,0," in its entirity "],[3223,11,""],[3260,0," on each peer"],[3748,0,", correct"],[3909,1,""],[3909,0,". _reg_walker_"],[3923,6,""],[3968,0," and"],[3972,3,""],[4000,0,"output"],[4000,6,""],[4016,13,""],[4016,0,"As we will sho"],[4016,14,""],[4016,0,"Our system si"],[4028,1,""],[4027,1,""],[4027,0,"is correct"],[4016,21,""],[4016,0,"As we show through benchmarks, our system's performance is competitive with existing "],[4092,9,""],[4092,0,"corre"],[4092,5,""],[4092,0,"CRDT based approaches"],[4021,0," will"],[4097,0,"the"],[4099,1,""],[4098,1,""],[4097,1,""],[4097,0,"corresponding "],[4097,14,""],[4097,0,"equivalent "],[4129,0,", and "],[4134,1,""],[4133,1,""],[4132,1,""],[4131,1,""],[4130,1,""],[4130,0," which "],[4136,1,""],[4135,1,""],[4134,1,""],[4134,0,"le being more ergonomic in many ways.\n\n\n"],[4173,0,"== "],[4173,3,""],[4173,0,"=="],[4172,0,"\n"],[4176,0," Defining the REpl"],[4193,1,""],[4192,1,""],[4191,1,""],[4190,1,""],[4177,13,""],[4177,0,"The Problem"],[4189,56,""],[4189,0,"\n\n"],[4190,0,"The *R"],[4195,1,""],[4194,1,""],[4194,0,"_Replayable Event GRa"],[4214,1,""],[4213,1,""],[4213,0,"raph_"],[4190,3,""],[4190,0,"We call the set of all know"],[4209,8,""],[4208,1,""],[4207,1,""],[4206,1,""],[4190,0,"// "],[4189,0,"\n"],[4189,0,"\n"],[4465,0,"\n"],[4237,1,""],[4464,0,"\n// We call the set  _Replayable Event Graph_"],[4192,45,""],[4419,0,"\n"],[4191,1,""],[4418,0,"\n"],[4190,1,""],[4189,0,"\n"],[4189,0,"\nWe can define any "],[4190,18,""],[4190,0,"We can define any"],[4174,1,""],[4206,0," "],[4189,18,""],[4189,0,"Original evernts"],[4204,1,""],[4203,1,""],[4202,1,""],[4201,1,""],[4201,0,"nts can be d"],[4212,1,""],[4189,23,""],[4189,0,"An original editing event"],[4188,0,"\n"],[4189,43,""],[4189,0,"I"],[4188,0,"\n"],[4188,0,"\nRather than replicating  "],[4213,1,""],[4213,0,"a CRDT's ins"],[4224,1,""],[4224,0,"ternal state between peers, our system instead replicates the set of all known *origin"],[4303,7,""],[4303,0,"_original events_. Each of these events is defined by "],[4321,0," This"],[4325,1,""],[4324,1,""],[4323,1,""],[4322,1,""],[4321,1,""],[4282,0,"the _Event Graph_: Which is"],[4299,10,""],[4299,0," - which is "],[4325,6,""],[4325,0," known"],[4189,197,""],[4189,0,"Rather than replicating a CRDT's internal state between peers, our system instead replicates the _Event Graph_ - which is the set of all known _original events_. Each of these events is defined by"],[4385,168,""],[4332,10,""],[4332,0,"editing "],[4346,1,""],[4346,0," created on every peer"],[4405,5,""],[4405,0,"the"],[4415,1,""],[4450,47,""],[4449,1,""],[4825,0,"\n"],[4825,0,"\nThe parente f"],[4838,1,""],[4837,1,""],[4836,1,""],[4836,0,"s field defines"],[4826,25,""],[4825,1,""],[4824,1,""],[4778,8,""],[4873,10,""],[4906,0," the"],[5193,0,"\n\nThe set is append-only. Events are never modified once the enter the graph, and "],[5274,1,""],[5273,1,""],[5272,1,""],[5271,1,""],[5270,1,""],[5269,1,""],[5269,0,". New items are only addewd"],[5295,1,""],[5294,1,""],[5294,0,"d"],[5281,14,""],[5281,0,"may only be added when all of that item's "],[5271,52,""],[5271,0,"The graph must always contain every item named by an"],[5322,1,""],[5321,1,""],[5320,1,""],[5319,1,""],[5318,1,""],[5307,11,""],[5307,0,"event named in the parents field of every"],[5037,18,""],[5037,0,", asymmetric"],[5037,1,""],[5037,0," and"],[5037,4,""],[5037,0,","],[5038,11,""],[5037,1,""],[5037,0," and antireflexive"],[5046,0,"-"],[5349,0," other event. $$"],[5364,0,"forall (i, e, p) in G: p \\sub"],[5390,3,""],[5390,0,"subset"],[5389,1,""],[5395,0,".eq G"],[5401,0,"."],[4421,18,""],[4421,0,"i, e, p"],[4443,1,""],[4541,4,""],[4666,6,""],[4418,0," ID, event and parents (or more formally"],[4441,1,""],[4440,1,""],[4439,1,""],[4439,0,"s. O"],[4443,1,""],[4521,21,""],[4522,7,""],[4522,0,"flu"],[4524,1,""],[4523,1,""],[4523,0,"ully ordered"],[4535,10,""],[4535,0," "],[4552,0," (Eg strings with lexographical sort)"],[4552,37,""],[5397,0,"\n"],[5397,0,"\nWe can define a CRDT"],[5398,20,""],[5398,0,"The network "],[5398,12,""],[4811,0,"\n"],[4811,0,"\nE = {\n  | Insert(pos, content) | pos ∈ ℤ, content ∈ C\n  | Del(pos)             | pos ∈ ℤ\n}\n"],[4811,0,"\n$"],[4905,0,"$"],[4812,7,""],[4812,0,"$ E = {"],[4903,3,""],[4903,0,"} $"],[4818,0,"cases("],[4912,0,")"],[4912,1,""],[4910,0,")"],[4836,0,"\""],[4830,0,"\""],[4837,1,""],[4830,1,""],[4910,1,""],[4912,0,")"],[4912,1,""],[4818,6,""],[4812,2,""],[4902,2,""],[4901,0,"// "],[4866,0,"// "],[4818,0,"// "],[4812,0,"// "],[4910,3,""],[4872,3,""],[4821,3,""],[4812,3,""],[4812,0,"$ "],[4904,0," $"],[4830,0,"\""],[4824,0,"\""],[4833,3,""],[4833,0,":\""],[4833,2,""],[4833,0,"pos\""],[4833,0,"\""],[4847,0,"\""],[4840,0,"\""],[4848,1,""],[4840,1,""],[4837,1,""],[4833,1,""],[4897,3,""],[4897,0,"p"],[4878,3,""],[4878,0,"p"],[4849,3,""],[4849,0,"p"],[4833,3,""],[4833,0,"p"],[4854,7,""],[4854,0,"p"],[4836,7,""],[4836,0,"p"],[4848,1,""],[4836,1,""],[4847,0,"c"],[4836,0,"c"],[4858,3,""],[4858,0,"Del\""],[4858,0,"\""],[4853,0," \\"],[4888,0," \\"],[4819,0," \\"],[4840,15,""],[4855,20,""],[4811,50,""],[4810,1,""],[5398,0,"Replicating "],[5398,12,""],[5398,0,"The distributed "],[5398,16,""],[5398,0,"Replicating this graph is quite easy. We can "],[5398,45,""],[5398,0,"Replicating this graph is quite easy. We can"],[4677,0,". "],[4678,1,""],[4677,1,""],[4677,0,". Events deif"],[4689,1,""],[4688,1,""],[4688,0,"fine an appli"],[4700,1,""],[4700,0,"y function $circle.plus$"],[4712,11,""],[4712,0,"plus.cir"],[4717,3,""],[4717,0,"circle "],[4712,0," "],[4712,1,""],[4723,1,""],[4679,0,"// "],[4681,1,""],[4679,2,""],[4686,6,""],[4686,0,"m"],[4686,1,""],[4686,0,"imply "],[4691,4,""],[4691,0," a naive"],[4728,0," which modified"],[4742,1,""],[4742,0,"s "],[4686,13,""],[4686,0,"have a ni"],[4694,1,""],[4694,0,"aive"],[4743,0,"a document "],[4753,1,""],[4753,0,". \"AB\" $plus.ci"],[4766,2,""],[4766,0,"circle#$"],[4773,1,""],[4772,1,""],[4772,0,"#"],[4772,1,""],[4772,0,"$ _"],[4774,1,""],[4774,0,"_"],[4774,1,""],[4774,0,"("],[4774,1,""],[4774,0,"_Insert(1, C)_"],[4760,1,""],[4755,0,"$"],[4772,1,""],[4787,0,"$"],[4773,7,""],[4773,0,"text("],[4777,1,""],[4776,1,""],[4775,1,""],[4774,1,""],[4773,1,""],[4773,0,"ita"],[4773,3,""],[4773,0,"italic()"],[4780,0,"\"Insert\""],[4795,1,""],[4795,0," = "],[4756,0,"\\\""],[4762,0,"\\\""],[4759,0,"'"],[4758,1,""],[4761,1,""],[4761,0,"'"],[4761,1,""],[4761,0,"\""],[4758,0,"\""],[4759,1,""],[4802,0,"\\\"\"AB\"\\\""],[4806,0,"C"],[4753,0," in the obvious way. Eg"],[4776,1,""],[5024,7,""],[5024,0,". The"],[5029,4,""],[5075,1,""],[5075,0,"\n\n"],[4555,1,""],[4556,1,""],[4556,0,"$"],[4555,0,"$"],[4557,0,"_i"],[4483,1,""],[4481,1,""],[4482,0,"$"],[4481,0,"$"],[4839,1,""],[4840,1,""],[4840,0,"$"],[4839,0,"$"],[4841,0,"_i"],[4902,10,""],[4902,0,"$$"],[4903,0,"e_i"],[4509,43,""],[4509,0,". Thje "],[4515,1,""],[4514,1,""],[4513,1,""],[4513,0,"e ID must be comparable (fully ordered) for tie breaking."],[4774,18,""],[4754,20,""],[4754,0,"uses the event to modify a document"],[4791,2,""],[4791,0,"For example,"],[5546,0,"_i"],[5551,0,"_i"],[5562,0,"_i"],[5580,44,""],[5580,0,"This graph is replicated between peers by tr"],[5623,1,""],[5622,1,""],[5622,0,"treating it as a grow-only set CRDT."],[5639,1,""],[5639,0,"G"],[5644,1,""],[5644,0,"O"],[5649,1,""],[5649,0,"S"],[5657,1,""],[5657,0," of event triples"],[4465,0,"+"],[4465,1,""],[4465,0,"_i"],[4470,0,"_u"],[4471,1,""],[4471,0,"i"],[4459,1,""],[4459,0,"$"],[4473,1,""],[4473,0,"$"],[4460,0,"G = {"],[4478,0,"}"],[4478,1,""],[4464,1,""],[4463,1,""],[4462,1,""],[4462,0,"in "],[4460,5,""],[4473,0," in G"],[4459,0,"the event graph G is "],[4479,1,""],[4478,1,""],[4477,1,""],[4477,0,"contains "],[4476,0,"$"],[4475,0,"$"],[4479,8,""],[4479,0,"is a set where"],[4487,6,""],[4482,5,""],[4482,0,"the set of"],[5717,0,":"],[5718,12,""],[5717,26,""],[5717,0,":"],[5717,1,""],[5717,0,". We c"],[5722,1,""],[5721,1,""],[5720,1,""],[5719,1,""],[5718,1,""],[5718,0," Using the notation from [shapiro]:"],[5777,1,""],[5777,0,"S"],[5757,18,""],[5757,0,"The set of all documen"],[5772,7,""],[5772,0,"event graphsd"],[5784,1,""],[5800,0," all sets of"],[5757,70,""],[5757,0,"The document state is a"],[5779,1,""],[5779,0,"a set of "],[5779,9,""],[5779,0,"the event graph H"],[5795,1,""],[5795,0,"G"],[5761,9,""],[5766,0," $s$"],[5791,0,"$"],[5790,0,"$"],[5793,0,", define d b"],[5804,1,""],[5803,1,""],[5802,1,""],[5801,1,""],[5801,0,"d ba"],[5804,1,""],[5803,1,""],[5803,0,"above."],[5911,1,""],[5911,0," as-is."],[5963,0,": $$"],[5966,1,""],[5965,1,""],[5964,1,""],[5963,1,""],[5965,17,""],[5964,1,""],[5967,0,"To preserve the graph,"],[5988,1,""],[5988,0,"'s "],[5967,24,""],[5973,4,""],[5973,0," must"],[5978,5,""],[6039,0,"all paernts "],[6043,8,""],[6043,0,"parent its"],[6052,1,""],[6052,0,"esms "],[6056,1,""],[6055,1,""],[6054,1,""],[6053,1,""],[6053,0,"ms are in the graph"],[6104,8,""],[6104,0,"s"],[6104,1,""],[6104,0,"is defined by"],[6125,7,""],[6125,0,"i, e_i, p_i"],[6143,0,"_i"],[6156,1,""],[6156,0,"s"],[6189,41,""],[6189,0,"."],[6158,32,""],[6158,0,".\n\n"],[6161,229,""],[6161,0,"However, th"],[6171,1,""],[6170,1,""],[6169,1,""],[6169,0,"a proble"],[6169,8,""],[6169,0," this leaves "],[6170,12,""],[6170,0,"trouble arrives when we try to define the queryion"],[6219,1,""],[6218,1,""],[6217,1,""],[6217,0," function $q$"],[6217,0,"_"],[6212,0,"_"],[6232,0," ("],[6233,1,""],[6232,1,""],[6232,0," - which must take an event graph and produce the corresponding document state.\n\n== Correctness criteria\n\n"],[6316,20,""],[6316,0,"Querying the "],[6316,13,""],[6316,0,"Replaying the event Graph"],[6330,1,""],[6330,0,"E"],[6343,0,"asdf"],[6343,4,""],[6313,0,"\n"],[6142,1,""],[6133,1,""],[5604,1,""],[5593,1,""],[4908,1,""],[4503,1,""],[6137,0,"P"],[6129,0,"P"],[5601,0,"P"],[5591,0,"P"],[4907,0,"P"],[4503,0,"P"],[5034,0," $$"],[5036,0,"p in P_i => "],[5036,1,""],[5036,0,"i_j"],[5050,0,"e_j -> e_i)"],[5050,0,"("],[5034,29,""],[5034,0," $i_j in P_i => (e_j -> e_i)$"],[5036,0,"forall "],[5057,1,""],[5067,1,""],[5053,3,""],[5053,0,":"],[5053,0," | {ik "],[5059,1,""],[5058,1,""],[5057,1,""],[5056,1,""],[5056,0,"i, "],[5058,1,""],[5057,1,""],[5056,1,""],[5055,1,""],[5055,0,"j"],[5055,1,""],[5055,0," "],[5045,1,""],[5045,0,"a"],[5052,1,""],[5052,0,"b"],[5056,0,"a, b \\"],[5061,1,""],[5061,0,"in G"],[5053,12,""],[5057,1,""],[5057,0,"a"],[5064,1,""],[5064,0,"b"],[5044,1,""],[5043,1,""],[5035,0,"./"],[5036,1,""],[5035,1,""],[5035,0,"// "],[6377,0,"The "],[6377,4,""],[6377,0,"We'll call the "],[6377,15,""],[6377,0,"The"],[6377,3,""],[6377,0,"Replaying the event graph"],[6377,25,""],[6377,0,"We can"],[6193,0,"\n"],[6193,0,"\nHowever, "],[6194,9,""],[6193,1,""],[6192,1,""],[6192,0,"\n\n"],[4176,11,""],[4176,0,"Repl"],[4179,1,""],[4178,1,""],[4177,1,""],[4176,1,""],[4176,0,"Event Graphs"],[6195,0,"> Diagrams - example REGs."],[6222,0,"\n"],[6222,0,"\nThe remaining piece is defining the t"],[6259,1,""],[6259,0,"q"],[6259,1,""],[6223,36,""],[6223,0,"The remaining piece is defining the"],[6311,99,""],[6260,51,""],[6260,0,"However, trouble arrives when we try to define the"],[6258,0," _query_ function $q$ - which must take an event graph and produce the corresponding document state."],[6358,52,""],[6358,0," We will"],[6359,7,""],[6358,1,""],[6288,0,"ub "],[6290,1,""],[6289,1,""],[6288,1,""],[6288,0,"in our case "],[6300,5,""],[6304,0,"s"],[6321,3,""],[6300,21,""],[6300,0,"converts an event graph into"],[6328,8,""],[6255,3,""],[6255,0,"a"],[6258,5,""],[6258,0,"replay"],[6276,1,""],[6276,0,"r"],[6278,83,""],[6278,0,", which "],[6285,1,""],[6279,6,""],[6278,1,""],[6278,0," - which in our case converts an event graph into the corresponding document state."],[6278,20,""],[6278,0,", which must"],[6298,1,""],[6301,0," existing"],[6361,0," The "],[6302,9,""],[6353,4,""],[6352,1,""],[6278,0," (kno"],[6282,1,""],[6281,1,""],[6280,1,""],[6280,0,"refered to as "],[6285,0,"r"],[6295,0,"$"],[6295,1,""],[6280,15,""],[6280,0,"also called "],[6280,12,""],[6280,0,"refere"],[6285,1,""],[6285,0,"red to as the $q"],[6300,1,""],[6299,1,""],[6299,0,"_query function_ $q$ in shapiro). This function"],[6346,7,""],[6413,0," How do we wri"],[6414,13,""],[6413,1,""],[6446,6,""],[6446,0,"The replay function "],[6446,20,""],[4189,0,"\n"],[4189,0,"\nFor an y"],[4197,1,""],[4196,1,""],[4196,0,"y CRDT algoriuth"],[4211,1,""],[4210,1,""],[4209,1,""],[4209,0,"thm "],[4190,23,""],[4189,1,""],[4188,1,""],[4188,0,"\n\nFor any CRDT defined by "],[4190,24,""],[4189,1,""],[4188,1,""],[6413,0,"\n\nWe"],[6416,1,""],[6415,1,""],[6415,0,"We can construct an event graph"],[6415,0,"R"],[6415,1,""],[6446,0," b"],[6447,1,""],[6447,0,"from any CRDT"],[6457,0,"m"],[6415,46,""],[6415,0,"== "],[6415,3,""],[6415,0,"As shown in [Time machine "],[6440,1,""],[6440,0,"s"],[6440,1,""],[6440,0," "],[6440,1,""],[6440,0,"s paper], we can construct a "],[6468,1,""],[6468,0,"n event graph from any CRDT. This defines"],[6502,7,""],[6502,0,"provides a correcnt"],[6520,1,""],[6519,1,""],[6519,0,"ness"],[6497,26,""],[6497,0,"The "],[6415,86,""],[6415,0,"As shown in [Time machines paper], we can construct an event graph from any CRDT. The"],[6414,0,"\n\n##"],[6417,1,""],[6416,1,""],[6415,1,""],[6414,1,""],[6500,0," CRDT "],[6501,5,""],[6501,0,"event graph and CRDT forms are equivalent if the the event graph produces the same "],[6565,19,""],[6550,4,""],[6561,0,"'s replay function produces the same output as the query"],[6612,0,"CRDT's "],[6624,0," function"],[6545,0,", for all valid sequences of user events across all replicas,"],[6694,0,"."],[6672,0," corresponding"],[6709,0,"\n\nFor example, "],[6711,13,""],[6711,0,"For example,"],[6555,5,""],[6555,0,"possible"],[6577,5,""],[6577,0,"edit "],[6714,12,""],[6714,0,"The replay function can "],[6714,0,"// "],[6714,27,""],[6714,0,"// The replay function can"],[6713,0,"\n\n"],[6714,0,"Given the CRDT's query ufn"],[6739,1,""],[6738,1,""],[6737,1,""],[6737,0,"function is d"],[6728,22,""],[6728,0," is defined by:\n\nmerge:: "],[6752,1,""],[6751,1,""],[6750,1,""],[6750,0," :: CRDT -> CRDT -> CRDT"],[6759,3,""],[6758,0,","],[6764,0,")"],[6754,0,"("],[6774,0,"\nQu"],[6776,1,""],[6775,1,""],[6775,0,"query:: "],[6782,1,""],[6781,1,""],[6780,1,""],[6780,0," :: CRDT -> Doc"],[6744,0,"\nupdate :: (CRDT, (Id, Event)) -> CRDT"],[6835,3,""],[6744,0,"\n```haskell"],[6844,0,"\n```"],[6793,0,"\n"],[6794,1,""],[6793,0,";"],[6793,1,""],[6873,0," be define "],[6883,1,""],[6883,0,"d like this:\n\n```\n\n```"],[6901,0,"fn replay()"],[6911,0,"graph"],[6917,0," {\n  \n  "],[6920,2,""],[6921,2,""],[6921,0,"}"],[6920,0,"  for (id, event, parents) in graph.tyra"],[6959,1,""],[6958,1,""],[6957,1,""],[6956,1,""],[6956,0,"cau"],[6958,1,""],[6957,1,""],[6956,1,""],[6901,58,""],[6901,0,"\n"],[6901,0,"\n"],[6901,1,""],[6901,0,"replay {} = "],[6901,12,""],[6901,0,"replay {} ="],[6755,0,"\n"],[6755,1,""],[6823,0,"\ninti"],[6827,1,""],[6826,1,""],[6826,0,"itialState :: Doc"],[6823,0,"\n"],[6841,3,""],[6841,0,"CRDT"],[6934,0," query I"],[6941,1,""],[6941,0,"initi"],[6941,5,""],[6941,0,"initialState\nreplay (head, rest) = "],[6954,0,"// "],[6954,25,""],[6954,0,"// replay (head, rest) ="],[6953,0,"\n\n"],[6954,0,"egMerge :: CRDT[]"],[6969,1,""],[6965,0,"["],[6971,0," -> CRDT"],[6965,6,""],[6965,0,"Ids"],[6967,1,""],[6966,1,""],[6965,1,""],[6965,0,"[Id]"],[6953,0,"\n"],[6955,7,""],[6955,0,"replay"],[6977,0,"\nreplay []  "],[6988,1,""],[6988,0,"= "],[6978,12,""],[6978,0,"replay [] = query initialState\nreplay head:rest"],[7020,1,""],[7020,0,":"],[7016,9,""],[7016,0,"ids = "],[7009,13,""],[7009,0,"replay ids ="],[6991,1,""],[6954,0,"\n\n"],[6955,0,"crdtAfter :: Id ="],[6971,1,""],[6971,0,"-> CRDT"],[7045,0," ids.map(crd"],[7054,3,""],[7054,0,"crdtAfter).reduce(merge)"],[6978,0,"\ncr"],[6979,2,""],[6979,0,"crdtAfter = "],[6990,1,""],[6990,0,"\n  where ("],[6999,1,""],[6999,0,"parents = "],[6991,18,""],[6991,0,"  where parents ="],[6968,0,"Graph -> "],[6997,0," grap"],[7001,1,""],[7000,1,""],[6999,1,""],[6998,1,""],[6997,1,""],[6997,0," eg, id"],[7024,0," eg.get(id).parents"],[7014,1,""],[7014,0,"\n    "],[7015,0,"    parents = eg.get(id).parents\n"],[7052,7,""],[7052,0,"event"],[7071,7,""],[7071,0,"p"],[7071,1,""],[7071,0,"event"],[7006,0," replay(parents) + event"],[7084,2,""],[7084,0,"g"],[7053,2,""],[7053,0,"g"],[6998,2,""],[6998,0,"g"],[7083,0,"r"],[7053,0,"r"],[6999,0,"r"],[7086,0,"a"],[7055,0,"a"],[7000,0,"a"],[7089,0,"p"],[7057,0,"p"],[7001,0,"p"],[7092,0,"h"],[7059,0,"h"],[7002,0,"h"],[7121,0,"Graph -> "],[7150,0,"graph, "],[7163,0,"u"],[7188,0,"graph, "],[7155,0,"_"],[7150,0,"_"],[7150,6,""],[7214,0,"E"],[6997,0,"E"],[6964,0,"E"],[7217,0,"v"],[6999,0,"v"],[6965,0,"v"],[7220,0,"e"],[7001,0,"e"],[6966,0,"e"],[7223,0,"n"],[7003,0,"n"],[6967,0,"n"],[7226,0,"t"],[7005,0,"t"],[6968,0,"t"],[6923,32,""],[6907,0,"recursively "],[7225,25,""],[7224,1,""],[7224,0,"\n\nreplayAll :: Graph\nrepl"],[7245,4,""],[7245,0,"replayAll = "],[7256,1,""],[7255,1,""],[7255,0,"graph = replay graph allIds(graph)"],[7007,0,"graph "],[7006,1,""],[7006,0," "],[7000,0,"("],[7106,0,"\n    stateB"],[7111,6,""],[7111,0,"crdtBeforeEvent = "],[7107,22,""],[7107,0,"    crdtBeforeEvent = replay graph parents"],[7000,22,""],[7000,0,"update crd"],[7007,3,""],[7007,0,"crdtBeforeEvent"],[7022,2,""],[7189,1,""],[7234,0,"foldl (merge) (query initialState) (map "],[7274,7,""],[7289,0," graoh"],[7294,1,""],[7293,1,""],[7293,0,"ph"],[7296,14,""],[7296,0," ids)"],[7051,0,"getParents "],[7067,5,""],[7067,0," "],[7070,9,""],[7083,0,"getEvent "],[7097,5,""],[7097,0," "],[7100,7,""],[7048,0,")"],[7041,0,"("],[7049,0,", event"],[7060,10,""],[7060,0,"get"],[7073,30,""],[7060,3,""],[7060,0,"lookup"],[7119,0,"\n"],[7119,0,"\ninitialCRDT = "],[7120,14,""],[7120,0,"initialCRDT = query initialState"],[7120,11,""],[7120,0,"emptyDocu"],[7128,1,""],[7251,18,""],[7251,0,"e"],[7197,18,""],[7197,0,"e"],[7235,0,"m"],[7198,0,"m"],[7237,0,"p"],[7199,0,"p"],[7239,0,"t"],[7200,0,"t"],[7241,0,"y"],[7201,0,"y"],[7243,0,"D"],[7202,0,"D"],[7245,0,"c"],[7203,0,"c"],[7246,1,""],[7203,1,""],[7245,0,"o"],[7203,0,"o"],[7247,0,"c"],[7204,0,"c"],[7149,0," -- Typically \"\""],[7153,12,""],[7152,1,""],[7151,1,""],[7150,1,""],[7149,1,""],[6934,0,"\nloop"],[6938,1,""],[6938,0,"kup :: Graph -> Id "],[6956,1,""],[6956,0," -> (Parents, Event)\n"],[6961,7,""],[6961,0,"i"],[6961,1,""],[6961,0,"[ID]"],[6963,1,""],[6963,0,"d"],[6961,6,""],[6966,0,", [Id]"],[7082,9,""],[7087,0,", parents"],[7151,7,""],[7151,0,"p"],[7089,7,""],[7089,0,"p"],[7146,0,"a"],[7090,0,"a"],[7148,0,"r"],[7091,0,"r"],[7150,0,"e"],[7092,0,"e"],[7152,0,"n"],[7093,0,"n"],[7154,0,"t"],[7094,0,"t"],[7156,0,"I"],[7095,0,"I"],[7158,0,"d"],[7096,0,"d"],[7160,0,"s"],[7097,0,"s"],[6935,0,"lookup :: Graph -> Id -> (Event, [Id])\n"],[6974,6,""],[6974,0,"allIds"],[6995,0,"]"],[6993,0,"["],[6997,17,""],[7409,1,""],[7409,0," "],[7403,0,"("],[6934,0,"\n/"],[6935,1,""],[6935,0,"-- Given some help er"],[6955,1,""],[6954,1,""],[6953,1,""],[6952,1,""],[6952,0,"per functions for accessing events:"],[7241,30,""],[7240,1,""],[7051,0,"\nemptyDoc = query initialState\n"],[7051,0,"\nemptyDoc :: Doc"],[7098,0,"\n-- Get the CRDT's state immediately after any event h"],[7151,1,""],[7150,1,""],[7339,0,"\n-- Replay a sub"],[7350,5,""],[7350,0,"the ub"],[7355,1,""],[7354,1,""],[7354,0,"subset of the graph defined by the trantiv"],[7354,0,"transitive "],[7385,22,""],[7385,0,"named by [i"],[7395,1,""],[7395,0,"Id]"],[7394,0,"version "],[7406,0,":"],[7406,1,""],[6714,29,""],[6714,0,"The recur"],[6717,6,""],[6714,3,""],[6714,0,"Given the CRDT is defined by:"],[6892,0,"then "],[7615,0,"\nThis algorithm replays the event graph"],[7616,38,""],[7616,0,"We"],[7617,1,""],[7616,1,""],[7616,0,"CLAIM: This algorithm replays the event graph."],[7638,7,""],[7638,0,"\"simulates\" teh "],[7638,1,""],[7647,5,""],[7647,0," the "],[7648,4,""],[7648,0,"a network of peers collaboratively editing using "],[7697,18,""],[7697,0,"the specific "],[7701,9,""],[7701,0,"CRDT"],[7691,0,"a document "],[7716,0,". "],[7717,1,""],[7716,1,""],[7716,0,"."],[6871,0,"\n"],[6871,0,"\nThe CRDT must be commutative"],[6885,0," have all of the \"standard\" CRDT properties: It must"],[6952,0," and idemo"],[6961,1,""],[6961,0,"potentl;"],[6968,1,""],[6967,1,""],[6967,0,"."],[6930,10,""],[6930,0,"Merge must be"],[6930,1,""],[6872,58,""],[6872,0,"The merge function must be commutative and idempotent"],[6925,40,""],[6925,0,"."],[6793,0,"\n-- Commutative and idempotent, as required"],[6755,0,"\n-- "],[6756,3,""],[6756,0,"--"],[6796,0,"\n"],[6758,0," Modify a CRDT by applying a local update."],[6842,0," Merge "],[6843,6,""],[6843,0,"Statefully merge 2 CRDTs. This function must be "],[6891,2,""],[6891,0,"c"],[6917,13,""],[6917,0,"."],[6869,14,""],[6869,0,"Merge "],[6962,0,"\n\n"],[6963,1,""],[6962,1,""],[6801,0,"x"],[6801,1,""],[7112,0,"haskell"],[6989,54,""],[6988,1,""],[6987,1,""],[6983,0,"\n\n"],[6942,42,""],[6756,0,"\n"],[6756,0,"initialState :: CRDT\nquery :: CRDT -> Doc\n"],[6984,1,""],[6985,0,"mergeAll :: [CRDT] -> CRDT\nmer"],[7012,3,""],[7012,0,"mergeAll = foldl iniit"],[7029,5,""],[7029,0,"initialState"],[7020,0," crdts"],[7047,0," crdts"],[6984,0,"\n-- Helper function "],[7003,1,""],[6985,18,""],[6984,1,""],[6984,0,"\n//"],[6986,1,""],[6985,1,""],[6985,0,"- "],[6986,1,""],[6986,0,"- ("],[6988,1,""],[6987,1,""],[6986,1,""],[6985,1,""],[6984,1,""],[7681,24,""],[7681,0,"mergeAll"],[7690,5,""],[7713,4,""],[7712,1,""],[7690,0,"ids)"],[7693,1,""],[7693,0," \\.map "],[7699,1,""],[7693,6,""],[7693,0,")"],[7690,4,""],[7712,0," ids)"],[7690,0,"(map "],[7638,22,""],[7637,1,""],[6712,0,"\n\n"],[5656,0,"\n"],[5656,0,"\nA *"],[5659,1,""],[5659,0,"_version_ is defines"],[5678,1,""],[5678,0,"d as a set of event IDs "],[5657,45,""],[5657,0,"A _version_ is defined as a set of event IDs"],[5656,0,"\nEach "],[5657,5,""],[5518,1,""],[5518,0,"\n\n"],[5535,7,""],[5542,6,""],[5542,0," alls"],[5546,1,""],[5552,0,"s"],[5553,48,""],[5553,0," from"],[5557,1,""],[5556,1,""],[5555,1,""],[5554,1,""],[5554,0,"referenced in every parents field"],[5568,6,""],[5568,0,"the "],[5585,0," of all events"],[5646,0,"\n"],[5519,1,""],[5645,0,"\nThe set is append-only. Events are never modified once the enter the graph."],[5443,76,""],[5569,0,"\n"],[5646,1,""],[5621,0,"or removed "],[5658,0,"\nWe can define"],[5666,6,""],[5666,0,"name a su"],[5659,16,""],[5659,0,"Beca"],[5662,1,""],[5661,1,""],[5660,1,""],[5659,1,""],[5659,0,"Each "],[5659,5,""],[5659,0,"Each"],[5443,0,"A *prop"],[5449,1,""],[5448,1,""],[5447,1,""],[5446,1,""],[5445,1,""],[5445,0,"_proper*"],[5452,1,""],[5452,0,"_ "],[5454,4,""],[5459,0," is a graph that"],[5475,5,""],[5483,0,"s"],[5443,0,"It is illegal for a "],[5463,11,""],[5468,0," to contain a reference to an event that isn't also in the event graph."],[5460,21,""],[5460,0," any e"],[5465,1,""],[5464,1,""],[5464,0," event ID"],[5472,1,""],[5471,1,""],[5470,1,""],[5470,0," to"],[5483,6,""],[5483,0," anothjer"],[5491,1,""],[5490,1,""],[5489,1,""],[5489,0,"er"],[5508,5,""],[5508,0," itself"],[5536,82,""],[5536,0," $forall (i, e_i, P_i) in G: P_i subset.eq G$"],[5536,1,""],[5580,1,""],[5580,0,"\n\n"],[5563,0," exists.not"],[5564,10,""],[5563,1,""],[5581,47,""],[5580,0,"."],[5671,4,""],[5671,0,"We can "],[5671,7,""],[5671,0,"Its often useful to be abl"],[5671,26,""],[5671,0,"We can name a subgraph of our event graph (still "],[5713,7,""],[5712,1,""],[5685,0,"proper "],[5691,1,""],[5685,6,""],[5685,0,"valid "],[5718,0," by "],[5719,3,""],[5719,0,"using set notation - by listing t"],[5751,1,""],[5751,0,"all the"],[5740,18,""],[5740,0,"as the set of all events in the subgraph. But it is often useful to "],[5671,137,""],[5671,0,"We can name a valid subgraph of our event graph using set notation - as the set of all events in the subgraph. But it is often useful to"],[5671,138,""],[5686,29,""],[5685,1,""],[5684,1,""],[5683,1,""],[5683,0,"names a subset of the event bra"],[5713,1,""],[5712,1,""],[5711,1,""],[5711,0,"graph"],[5691,0,"valid "],[5722,0," - perhaps"],[5725,7,""],[5725,0,"usually "],[5722,11,""],[5722,0,"."],[6039,18,""],[6039,0,"adds"],[6039,4,""],[6039,0,"performs set union"],[5722,1,""],[5722,0," - usually "],[5722,11,""],[5722,0,"."],[5682,0," is a "],[5687,1,""],[5687,0,"n efficient identifier for"],[5713,6,""],[5714,2,""],[5714,0,"some "],[5751,0," We "],[5754,1,""],[5753,1,""],[5752,1,""],[5752,0,"V"],[5671,0,"// "],[5670,0,"\n"],[5670,0,"\nA _versiopn"],[5681,1,""],[5680,1,""],[5680,0,"n_ is a list of IDs in the "],[5703,4,""],[5703,0,"the graph of eve"],[5718,1,""],[5717,1,""],[5716,1,""],[5716,0,"concurrent events. The version "],[5735,12,""],[5735,0,"A version names a subset of the graph: "],[5773,1,""],[5772,1,""],[5772,0," constructed by taking all the IDs "],[5671,136,""],[5671,0,"A _version_ is a list of IDs in the graph of concurrent events. A version names a subset of the graph constructed by taking all the IDs"],[5670,0,"\nIts "],[5674,1,""],[5674,0," sometimes useful to refer to a valid subset of the event graph with a _version_. A version "],[5756,10,""],[5756,0,"Rather than sendin a"],[5775,1,""],[5774,1,""],[5756,18,""],[5756,0,"This can be efficiently summarized by "],[5756,38,""],[5756,0,"Subgraphs can be identified by lis"],[5787,3,""],[5787,0,"the transitively reduced set of IDs of the events in the subgraph. Given some version we can reconstruct the subgraph by "],[5907,1,""],[5906,1,""],[5905,1,""],[5905,0,"like this: $$"],[5917,0,"G_2 = {}"],[5924,0,"g in G"],[5924,1,""],[5924,0,"e"],[5930,0,": "],[5917,0,"g(V)"],[5921,3,""],[5926,0,"}"],[5925,0,"{"],[5927,1,""],[5925,1,""],[5926,0,")"],[5925,0,"("],[5926,1,""],[5926,0,"i, e_i, p_"],[5935,1,""],[5934,1,""],[5933,1,""],[5933,0," P_i"],[5945,0,"e in "],[5949,1,""],[5948,1,""],[5947,1,""],[5946,1,""],[5945,1,""],[5945,0,"i in V or "],[5943,1,""],[5943,0," |"],[5956,0,"e_i -> v in v"],[5956,0,"exists v in V: "],[5979,5,""],[5946,17,""],[5954,0,"i = v or "],[5964,1,""],[5963,1,""],[5925,13,""],[5925,0,"e"],[5942,1,""],[5942,0,"e"],[5951,1,""],[5951,0,"e"],[5951,1,""],[5951,0,"e"],[5934,0,"exists "],[5905,9,""],[5896,0,"corresponding "],[5918,0," by taking all the events named by the version, and all of their transitive dependencies. Ie"],[6010,2,""],[6010,0,","],[6062,136,""],[5675,9,""],[5675,0,"often"],[5787,21,""],[5793,0," transitively reduced "],[5814,1,""],[5825,0,"ir"],[5827,23,""],[5827,0," events"],[5793,21,""],[5813,0,", transitively reduced. (So if #"],[5844,1,""],[5844,0,"$"],[5836,9,""],[5835,1,""],[6047,85,""],[6046,1,""],[6045,1,""],[6804,0,"\n"],[6804,0,"\n##"],[6806,1,""],[6805,1,""],[6805,0,"==Corre"],[6807,0," "],[6813,0,"ctness"],[6804,0,"\n"],[6803,0," Almost al"],[6804,9,""],[6804,0,"This simple func"],[6809,11,""],[6809,0,"single function contains almost all of the complexity of an event graph."],[6865,16,""],[6865,0,"t"],[6865,1,""],[6865,0," the ys"],[6871,1,""],[6870,1,""],[6870,0,"system."],[7026,0," the "],[7030,1,""],[7030,0,"y have identical merge"],[7032,20,""],[7032,0,"produce d"],[7040,1,""],[7040,0,"identical documents "],[7027,0,"s"],[7027,1,""],[7027,0,"all "],[7027,4,""],[7060,0,"for all timelines of history."],[7068,0,"possible "],[7090,7,""],[7090,0,"editing"],[7098,1,""],[7077,0,"editing "],[7094,11,""],[7095,1,""],[7095,0,"\n\n\n"],[7096,0,"\nWe can think of the event graph as a describ"],[7140,1,""],[7140,0,"ptiuon"],[7145,1,""],[7144,1,""],[7143,1,""],[7142,1,""],[7142,0,"ion of the "],[7133,20,""],[7133,0," record of the behaviour of all collaborating ep"],[7180,1,""],[7179,1,""],[7179,0,"peers on the"],[6045,0,". The parents field in each event is the version of the graph"],[6101,0,"event "],[6101,11,""],[6101,0,"document when that "],[6110,10,""],[6110,0,"imemd"],[6114,1,""],[6113,1,""],[6112,1,""],[6112,0,"mediately before that event was created."],[5184,0," the"],[5188,7,""],[5188,0," normal"],[5195,9,""],[5195,0," notation"],[5188,7,""],[5188,0," common"],[7259,9,""],[7259,0,"writes "],[7259,7,""],[7259,0,"edits made by"],[7272,3,""],[7297,6,""],[7296,1,""],[7296,0,"."],[7273,4,""],[7292,1,""],[7292,0," on the network"],[7273,0,"all "],[7311,0,". The "],[7313,4,""],[7312,1,""],[7312,0," We "],[7315,1,""],[7314,1,""],[7313,1,""],[7208,105,""],[7208,0,"We can think of the event graph as a record of the edits made by all collaborating peers on the network."],[7120,14,""],[7120,0,"have an equivalence"],[7138,1,""],[7138,0,"y relationship"],[7226,19,""],[7226,0,"From this point of virw"],[7248,1,""],[7247,1,""],[7247,0,"ew, the"],[7266,3,""],[7266,0," is"],[6157,0,"\n\n"],[6157,1,""],[6156,1,""],[7339,0," A"],[7340,1,""],[7340,0,"The event graph equivalent of asdfasdf"],[7377,1,""],[7376,1,""],[7375,1,""],[7374,1,""],[7373,1,""],[7372,1,""],[7371,1,""],[7370,1,""],[7340,30,""],[7340,0,"Given some CRDT C"],[7356,1,""],[7356,0,"c$"],[7356,0,"$"],[7359,0," "],[7359,1,""],[7359,0,", the event graph e"],[7377,1,""],[7365,0,"equivalent "],[7388,0,"replay function must calculate the "],[7404,19,""],[7404,0,"calculates the "],[7404,15,""],[7404,0,"simulates the q"],[7418,1,""],[7418,0,"equivalent"],[7418,10,""],[7418,0,"corresponding set of replicas editing"],[7448,7,""],[7447,1,""],[7447,0," re"],[7449,1,""],[7448,1,""],[7447,1,""],[7447,0," "],[7226,222,""],[7226,0,"From this point of view, the event graph is a record of the edits made by all collaborating peers on the network. Given some CRDT $c$, the equivalent event graph replay function simulates the corresponding set of replicas"],[7092,17,""],[7092,0," "],[7097,0," and its corresponding event graph"],[7131,7,""],[7131,0," "],[7238,0,"When constructing a re"],[7259,1,""],[7258,1,""],[7257,1,""],[7257,0,"n event graph (really, th"],[7272,10,""],[7238,34,""],[7238,0,"The replay function for an event "],[7238,0,"Suppose we are constructing a r"],[7268,1,""],[7268,0,"n"],[7268,1,""],[7267,1,""],[7267,0,"n event graph from some CRDT $c$. T"],[7301,1,""],[7320,0," must simulate "],[7320,15,""],[7320,0," needs to simulate"],[7006,0,"\nthe event graph is a record of the edits made by all collaborating peers on the network. \n"],[7007,89,""],[7007,0,"the event graph is a record of the edits made by all collaborating peers on the network."],[7007,1,""],[7007,0,"T"],[7095,0," The job of the replay function is to calculate the document state made by b"],[7170,1,""],[7170,0,"e"],[7170,1,""],[7170,0,"m"],[7170,1,""],[7170,0,"this network of e"],[7186,1,""],[7186,0,"peers, after all changes have been merged together."],[7533,272,""],[7470,63,""],[7470,0,"Suppose we are constructing an event graph from some CRDT $c$."],[7191,1,""],[7198,38,""],[7198,0,"the system has come to quiescence."],[7213,8,""],[7213,0,"reached "],[7146,0," eventual"],[7278,45,""],[7278,0,"every CRDT has an equivalent replay function defined by replaying all eventsi "],[7355,1,""],[7354,1,""],[7354,0," in the "],[7334,28,""],[7334,0,"simulating the network of peers processing this event graph"],[7365,28,""],[7349,0,"equivalent "],[7370,0," collaborating"],[7404,4,""],[7404,0," "],[7404,1,""],[7431,7,""],[7431,0,"are"],[7445,1,""],[7444,1,""],[7443,1,""],[7442,1,""],[7442,0,"ent"],[7442,3,""],[7442,0,"ency"],[7431,3,""],[7431,0,"have an"],[7508,27,""],[7508,0,"possible even"],[7516,5,""],[7508,8,""],[7508,0,"possible editing timelines."],[7536,232,""],[7536,0,"\nHowever, there are "],[7537,19,""],[7537,0,"We can dein"],[7547,1,""],[7546,1,""],[7546,0,"fine a simple algorithm for genet"],[7578,1,""],[7578,0,"raint"],[7582,1,""],[7581,1,""],[7580,1,""],[7580,0,"ting this result"],[7590,6,""],[7590,0,"document state using the code below"],[7620,5,""],[7620,0,"[]"],[7621,0,"in figure X"],[7633,0,"."],[7537,0,"Given some CRDT "],[7543,5,""],[7543,0,"the definition of a"],[7561,1,""],[7561,0,"some "],[7570,0,","],[7571,2,""],[7571,0," w"],[7669,0," However, this algorithm i"],[7694,1,""],[7694,0,"is very inefficient in practice."],[7679,47,""],[7679,0,"its very difficult to implement an eff"],[7711,6,""],[7711,0,"this algorithm if"],[7727,1,""],[7727,0,"e"],[7727,1,""],[7726,1,""],[7726,0,"efficiently in practice as the CRDT states grow large"],[7750,29,""],[7749,1,""],[7749,0," in an imperait"],[7763,1,""],[7762,1,""],[7762,0,"tive manner"],[7670,103,""],[7670,0,"However, anm "],[7682,1,""],[7681,1,""],[7681,0," "],[7679,3,""],[7679,0,"this code is far from "],[7679,22,""],[7679,0,"this code is "],[7684,8,""],[7684,0,"algorithm"],[7345,14,""],[7345,0,"all edits"],[7349,5,""],[7349,0,"events in the graph in the corresopnding"],[7376,13,""],[7376,0,"corresopnding"],[7376,13,""],[7376,0,"corresponding asdf "],[7394,1,""],[7389,5,""],[7389,0," jhk jh"],[7393,3,""],[7389,4,""],[7345,27,""],[7374,19,""],[7374,0,"CRDT objects"],[7400,14,""],[7278,0,"we can define an event graph & replay function from any "],[7334,6,""],[7338,0," definition by"],[7352,45,""],[7352,0," implementing a simulation"],[7368,10,""],[7367,1,""],[7366,1,""],[7353,13,""],[7353,0,"using the "],[7353,10,""],[7353,0,"simulating the CRDT"],[7364,20,""],[7420,11,""],[7420,0,"replay function"],[7420,0,"event graph "],[7431,8,""],[7431,0," "],[7432,9,""],[7606,0,"(below) "],[7606,8,""],[7595,0,", generic"],[7703,0," is slo"],[7679,1,""],[7679,0,"\n\n"],[7681,30,""],[7681,0,"This algorithm should "],[7696,7,""],[7696,0,"can work for any CRDT definition. H"],[7730,1,""],[7730,0,"but it "],[7730,7,""],[7730,0,"But it is quite slow in practice, and there are "],[7762,16,""],[7762,0,"."],[7764,0,"\n---\n"],[7765,3,""],[7765,0,"Algorithm:"],[7765,0,"=== "],[8859,80,""],[8859,0," will generate "],[8844,0," Al"],[8846,1,""],[8846,0," collabo"],[8845,9,""],[8845,0,"An event graph"],[8845,0,"Using the "],[8855,2,""],[8851,4,""],[8851,0,"an"],[8865,0,", inc "],[8870,1,""],[8869,1,""],[8869,0," combination with thei"],[8890,1,""],[8889,1,""],[8889,0,"is replay function ($q$ = *replayAll*), "],[8928,3,""],[8928,0," t"],[8958,0,"the same docu"],[8958,13,""],[8958,0,"ide"],[8958,3,""],[8958,0,"the same document state at all times to the equivalent CRDT.\n\nThis "],[9020,5,""],[9020,0,"This"],[7681,83,""],[8937,4,""],[8937,0,"This algorithm can work for any CRDT definition. But it is quite slow in practice.\n"],[8990,0,"unfortunately "],[9033,0," The downside to this"],[9050,4,""],[9049,1,""],[9048,1,""],[9047,1,""],[9047,0,"is that "],[9034,21,""],[9034,0,"W"],[9034,1,""],[9033,1,""],[9032,1,""],[9032,0," (see b"],[9038,1,""],[9038,0,"[chapter X - benchmarks]."],[9062,1,""],[9062,0,"). "],[9064,1,""],[9063,1,""],[9062,0,"."],[8951,4,""],[8951,0," will"],[8974,11,""],[9054,0,"\n\nFor text "],[9056,9,""],[9055,1,""],[9054,1,""],[9054,0,"\n"],[9054,1,""],[9054,0,". The "],[9059,1,""],[9059,0,"re are two reasons why it is slow:"],[9022,0,", particularly in imperative languages where deep object sharing are "],[9066,0," its "],[9070,1,""],[9069,1,""],[9069,0," is difficult to do"],[9109,3,""],[9108,1,""],[9108,0,"."],[9101,0,"state "],[9114,1,""],[9115,0,"."],[9115,1,""],[9114,1,""],[9114,0,"."],[9117,1,""],[9117,0,"S"],[9094,12,""],[9094,0,"structural"],[9089,23,""],[9067,0,"deep structural sharing"],[9090,2,""],[9103,7,""],[9175,0,"\n\n- This algorithm "],[9177,17,""],[9176,1,""],[9175,1,""],[9174,1,""],[9137,37,""],[4174,0,"="],[6992,0,"="],[7686,0,"="],[9142,30,""],[9142,0,"== Fugue\n\n"],[9142,0,"\n"],[9153,0,"This "],[9153,5,""],[9153,0,"In this paper, "],[9153,15,""],[9153,0,"In this paper,"],[6990,0,"\n"],[6978,11,""],[6978,0,"an "],[6980,1,""],[6979,1,""],[6915,64,""],[6915,0,"\n\nFor convenience, we will also define two more functions"],[6779,0,"()"],[6780,0,"G"],[6782,0," -"],[6783,1,""],[6782,1,""],[6782,0,": D\n"],[6785,1,""],[6782,1,""],[6782,0," =>"],[6786,0,"D"],[6782,6,""],[6835,0,"]"],[6828,0,"["],[6853,5,""],[6861,0,"s"],[6973,0," related to replaying the event log:\n\n\nFirst, it is often extremely useful to define a `PartialReplay` function which \"updates\" or \"merges\" new changes into a document:\n\n// \\vspace{3mm}\n// \\texttt{fn PartialReplay(doc: Document, v: Version, m: Version) -> Document}\n// \\vspace{3mm}\n\n```\nfn PartialReplay(doc: Document, v: Version, m: Version) -> Document\n```\n\n\nPartialReplay takes a document state at some version $v$ and calculates the new document state at $v union m$. Note that the behaviour of this PartialReplay function is fully specified by the REG's replay function:\n\n// ```\n// PartialReplay(Replay(v), v, m) = Replay(v union m)\n// ```\n\n$ P(R(v), v, m) = R(v union m) $\n\nWe can use various forms of correctness testing to verify PartialReplay works as expected for all inputs.\n\nUsing a partial replay function instead of a replay function allows for a great many simplifications in practical systems. For example, peers can cache a recent document state, and then never actually replay the entire event graph when a document is loaded.\n\nThe other useful function is the `PartialTransform` function, which outputs a _transformed_ list of events which can be used to advance a recent document state forward through time:\n\n// \\vspace{3mm}\n// \\texttt{fn PartialTransform(v: Version, m: Version) -> Event[]}\n// \\vspace{3mm}\n\n```\nfn PartialTransform(v: Version, m: Version) -> Event[]\n```\n\nThis function returns a list of events which, when applied to a document state at version 'v', will convert the document to the state at $v union m$.\n\nPartialTransform allows REGs to efficiently update cursor positions in a shared text document, or differentially update large documents that may not fit in memory.\n\nThe returned transformed event list is constrained by the Replay function such that $R(v) plus.circle m = R(v union m)$. However, there are often many correct return values for `PartialTransform` for any given input.\n"],[7011,1,""],[7008,0," _partialReplay)"],[7023,1,""],[7023,0,"_ and _partialTransform_"],[7047,1,""],[7047,0,". Mathematically, both of "],[7065,8,""],[7065,0,"the behaviour of both of these functions"],[7049,17,""],[7049,0,"T"],[7089,0," is constrained by the replay function. But they are very useful in practice for "],[7165,5,""],[7165,0,".\n\n\\ Pa"],[7171,1,""],[7170,1,""],[7170,0,"partialReplay_"],[7170,0,"_"],[7185,0,": asdf"],[7168,1,""],[7168,0,"/"],[7187,4,""],[7168,19,""],[7168,0,"/ _partialReplay_:"],[7185,0,"("],[7185,1,""],[7184,0,"("],[4327,6,""],[4359,0," collaborating"],[5078,0,"\n"],[5078,0,"\nEvents are defined in terms "],[5098,9,""],[5098,0,"on "],[5098,3,""],[5098,0,"in "],[5079,22,""],[5078,1,""],[5077,1,""],[4379,1,""],[4379,0,"\n\n"],[4379,0," If we consider some set of peers collaborative "],[4426,1,""],[4426,0,"ly editing a document #"],[4448,1,""],[4448,0,"$d in DD$, each "],[4380,86,""],[4378,0," while editing document"],[4393,0,"our "],[4405,0," $$"],[4407,0,"d in DD"],[7230,0,"doc: Doc, v: "],[7242,1,""],[7241,1,""],[7240,1,""],[7240,0,"v: Version, m: Version) -> Doc"],[7272,0," This method "],[7273,12,""],[7273,0,"Given some partial "],[7283,9,""],[7283,0," existing document"],[7273,28,""],[7273,0,"Given some "],[7232,1,""],[7231,1,""],[7282,0,"#"],[7282,1,""],[7282,0,"$$"],[7283,0,"d = r(v)"],[6046,1,""],[6046,0,"G"],[7230,0,"G, "],[7292,0,"G("],[7295,0,")"],[7285,0,"existing document at"],[7302,3,""],[7302,0," #"],[7303,1,""],[7303,0,"_d_ at version _v_, "],[7322,1,""],[7321,1,""],[7321,0," ("],[7330,2,""],[7331,1,""],[7333,0,")"],[7322,0,"such that "],[7344,0,", "],[7213,133,""],[7213,0,"/ _partialReplay(G, d: Doc, v: Version, m: Version) -> Doc_: Given some existing document _d_ at version _v_ such that ($d = r(v)$),"],[7420,56,""],[7347,73,""],[7347,0,"First, it is often extremely useful to define a `PartialReplay` function"],[7274,0,"which \"updates\" or \"merges\" new changes into a document:"],[7274,5,""],[7274,0,"This function"],[7337,0,". "],[7339,29,""],[7339,0,"Documen"],[7345,1,""],[7344,1,""],[7343,1,""],[7342,1,""],[7346,0," must be the document"],[7383,10,""],[7382,0,". Ie,"],[7387,2,""],[7387,0," "],[7398,1,""],[7395,0,"G"],[7397,0,")"],[7396,0,"("],[7401,1,""],[7401,0,". _partialReplay_ computes and returns "],[7213,227,""],[7213,0,"/ _partialReplay(G, d: Doc, v: Version, m: Version) -> Doc_: This function \"updates\" or \"merges\" new changes into a document. Doc _d_ must be the document at version _v_. Ie, $d = r(G(v))$. _partialReplay_ computes and returns"],[7439,342,""],[7439,0," the"],[7443,4,""],[7580,69,""],[7614,107,""],[7613,0,"\n"],[7613,0,"\n"],[7613,1,""],[7612,1,""],[7872,0,"\n/ _transform_"],[7876,0,"P"],[7876,1,""],[7876,0,"partial"],[7883,1,""],[7883,0,"T"],[7892,0,"(G, v: Version, m: Version) -> Ve"],[7924,1,""],[7923,1,""],[7923,0,"[Event]_: "],[7933,69,""],[7933,0,"This function"],[8016,7,""],[8031,0," at version $"],[8043,1,""],[8043,0,"_v_"],[8055,13,""],[8047,8,""],[8047,0,"to eve"],[8052,1,""],[8051,1,""],[8050,1,""],[8050,0,"the version at _"],[8065,1,""],[8065,0,"##"],[8066,1,""],[8065,1,""],[8065,0,"$$"],[8066,0,"v union m"],[8076,0,"."],[8078,315,""],[8244,129,""],[8243,1,""],[8242,1,""],[8242,2,""],[8242,0," T"],[8330,1,""],[7582,1,""],[7582,0,"p"],[7584,1,""],[7584,0,"r"],[7598,1,""],[7598,0,"r"],[8350,236,""],[6962,0,"\n"],[6962,0,"\nThe event graph is a record of the edits made by all collaborating peers on the network. The job of the replay function is to calculate the eventual document state made by this network of peers after the system has reached quiescence.\n\n"],[7198,1,""],[7197,1,""],[8315,0,"// "],[8109,0,"// "],[8318,3,""],[8109,3,""],[10494,14,""],[10494,0,"The primary contribution of this paper is to "],[10494,45,""],[10494,0,"Ou"],[10494,2,""],[10494,0,"The primary contribution of this paper is to sho"],[10541,1,""],[10540,1,""],[10539,1,""],[10539,0,"present an algorithm"],[10548,1,""],[10548,0," fast"],[10563,0," "],[10554,0,"replay "],[10554,7,""],[10564,0," "],[10564,1,""],[10564,0,"for replaying events "],[10494,91,""],[10494,0,"The primary contribution of this paper is to present a fast algorithm for replaying events"],[10481,0," It is also difficult to "],[10493,0,"quite "],[10512,0,"compute the equivalent partialREplay"],[10543,1,""],[10543,0,"e"],[10548,0," and partialTransform m"],[10570,1,""],[10570,0,"functions from this definition."],[10481,120,""],[7449,659,""],[7448,1,""],[7199,111,""],[7199,0,"T"],[7199,1,""],[7199,0,"Aside from _replay_, "],[7199,21,""],[7199,0,"Tjere"],[7203,1,""],[7202,1,""],[7201,1,""],[7200,1,""],[7199,1,""],[7198,0,"\n"],[7198,0,"\nU"],[7199,1,""],[7199,0,"In practice, however, "],[7212,9,""],[7212,0,"the replay function "],[7216,0,"because "],[7212,4,""],[7219,0," the"],[7240,0,"must process all events in the graph, it is often quite slow"],[7281,2,""],[7281,0,"can"],[7290,0," be"],[7304,0,". ("],[7306,1,""],[7306,0,"#"],[7306,1,""],[7306,0,"$O(n)$"],[7305,7,""],[7305,0," Since we usually have a re"],[7306,26,""],[7306,0,"While editing we usually have a recent document"],[7331,0,"store"],[7336,4,""],[7354,0," state in memory, so "],[7211,69,""],[7211,0," te"],[7213,1,""],[7213,0,"he replay function"],[7255,0," because it often needs to calculate"],[7281,10,""],[7281,0," visit"],[7267,20,""],[7267,0,"will usually need to visit all eev"],[7300,1,""],[7299,1,""],[7299,0,"vents int eh gra"],[7305,10,""],[7305,0,"in the graph to calculate the resulting document state"],[7361,0,"But, "],[7366,1,""],[7366,0,"w"],[7391,44,""],[7391,0,"have a recent document state available. So "],[7433,1,""],[7432,1,""],[7431,1,""],[7431,0,"We can "],[7431,7,""],[7431,0,"Iedally "],[7438,1,""],[7437,1,""],[7436,1,""],[7435,1,""],[7434,1,""],[7433,1,""],[7432,1,""],[7431,1,""],[7430,1,""],[7430,0," This can be used to "],[7431,20,""],[7431,0,"f"],[7431,1,""],[7431,0,"If the replay function can take advantage of this "],[7431,50,""],[7430,1,""],[7429,1,""],[7398,7,""],[7422,0," at a recent version. To take advantage of this, we will also define a"],[7492,2,""],[7492,0," "],[7511,0," function $t$"],[7523,0,"(G, v1, v2)"],[7528,1,""],[7531,1,""],[7530,1,""],[7530,0,"m"],[7528,0,"_0"],[7532,1,""],[7532,0,"v_1"],[7534,1,""],[7534,0,"m"],[7528,1,""],[7527,1,""],[7527,0,"V_"],[7532,1,""],[7532,0,"V"],[7522,1,""],[7522,0,"T"],[7538,0," P"],[7539,1,""],[7539,0,"Partia"],[7539,6,""],[7539,0,"_partialTransform_"],[7557,194,""],[7557,0," "],[7566,23,""],[7566,0,"an ordered list"],[7536,0," -> [e_1, e_2, e_3, ..]"],[7558,0,"."],[7671,1,""],[7671,0,"V_0"],[7674,1,""],[7674,0,"$"],[7670,1,""],[7670,0,"$"],[7695,1,""],[7695,0,"V_0"],[7705,1,""],[7705,0,"V_m"],[7710,0," Ie, r(G(V_0)) "],[7715,0,"$"],[7726,0,"$"],[7726,0,"c"],[7726,1,""],[7726,0,"plu"],[7726,3,""],[7726,0,"plus.cir"],[7731,3,""],[7731,0,"circle e_1 plus.circle e_2 .. = "],[7757,0," plus.circle"],[7775,0,"r(G(V_90"],[7782,1,""],[7781,1,""],[7781,0,"0 union V_1))"],[7795,0,". "],[7365,0," this is usually unnecessary"],[7394,16,""],[7394,0,"because we"],[7402,2,""],[7402,0,"replicas will often store a l"],[7430,1,""],[7429,1,""],[7428,1,""],[7422,6,""],[7422,0,"have a"],[7428,52,""],[7429,0,"recent document state avial"],[7455,1,""],[7454,1,""],[7453,1,""],[7452,1,""],[7451,1,""],[7451,0,"available at a recent "],[7754,56,""],[7754,0,")"],[7754,1,""],[7754,0,"r(G(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ..)"],[7754,0,"("],[7811,0,"."],[7837,1,""],[7839,164,""],[7838,1,""],[7837,1,""],[7837,0," "],[7837,1,""],[7837,0,"\n\n"],[7924,1,""],[7923,1,""],[7923,0,", "],[7924,1,""],[7923,1,""],[7923,0,"t, but "],[7839,91,""],[7839,0,"There are often many correct return values for `PartialTransform` for any given input, but"],[7886,18,""],[7886,0,"_partialTransform_"],[7926,3,""],[7925,1,""],[7924,1,""],[7924,0,"."],[7924,1,""],[7924,0," whuich"],[7930,1,""],[7929,1,""],[7928,1,""],[7927,1,""],[7926,1,""],[7925,1,""],[7924,1,""],[7924,0,". The "],[7929,1,""],[7929,0,"y "],[7867,0,", functionally eqi"],[7884,1,""],[7884,0,"uivalent"],[7950,6,""],[7949,1,""],[7949,0,", differing in th "],[7966,1,""],[7966,0,"e order of returns "],[7984,1,""],[7983,1,""],[7983,0,"ed events and such. "],[8002,1,""],[7951,51,""],[7950,1,""],[7949,1,""],[7949,0,". For example, the output of ["],[7978,1,""],[7978,0,"`[Delete(1), Delete(0)]` is "],[7963,0," in a sequence editor,"],[8028,0,"`[Delete(1), Delete(0)]`"],[8027,0," equivalent to"],[8028,0,"functionally "],[8064,1,""],[8064,0,"0"],[8079,0," as the"],[8085,1,""],[8084,1,""],[8083,1,""],[8083,0,"both e"],[8088,1,""],[8088,0,"sequences will "],[8088,15,""],[8088,0,"event sequences modify the do"],[8104,13,""],[8104,0,"have the same effect on "],[8118,10,""],[8118,0,"result."],[8104,0,"\n"],[7839,265,""],[7839,0,"There are often many correct, functionally equivalent return values for _partialTransform_ for any given input. For example, in a sequence editor, the output of `[Delete(1), Delete(0)]` is functionally equivalent to `[Delete(0), Delete(0)]` as both event sequences"],[7839,264,""],[7839,0,"There are often many correct, functionally equivalent return values for _partialTransform_ for any given input. For example, in a sequence editor, the output of `[Delete(1), Delete(0)]` is functionally equivalent to `[Delete(0), Delete(0)]` as both event sequences "],[8104,22,""],[8104,0,"have the same result on th"],[8124,6,""],[8124,0,"."],[8104,21,""],[8103,1,""],[8103,0,", qhen"],[8108,1,""],[8107,1,""],[8106,1,""],[8105,1,""],[8105,0,"wwhe"],[8108,1,""],[8107,1,""],[8106,1,""],[8106,0,"hen applied, have the asme"],[8131,1,""],[8130,1,""],[8129,1,""],[8128,1,""],[8128,0,"same effect."],[10128,0,", pracit"],[10135,1,""],[10134,1,""],[10134,0,"tically useful"],[10179,0," in "],[10173,10,""],[10173,0,"text "],[10069,109,""],[10069,0,"The primary contribution of this paper is to present a fast, practically useful algorithm for replaying text"],[10068,0,"\n"],[10068,0,"\nOur goal is to do efficient and effective collaborative "],[10069,3,""],[10069,0,"If our"],[10069,59,""],[10069,0,"The "],[10069,4,""],[10068,1,""],[10067,1,""],[10130,12,""],[10130,0,"pracit"],[10135,1,""],[10134,1,""],[10134,0,"t"],[10134,1,""],[10134,0,"tical, "],[10157,19,""],[10157,0," for collaborative text editing using event graphs.\n\nThe event"],[10210,9,""],[10210,0,"Now that we have "],[10210,17,""],[10210,0,"The "],[10210,4,""],[10210,0,"We believe our al"],[10210,17,""],[10188,0," (or, more generally, sequence editing)"],[10249,0,"We "],[10249,3,""],[10249,0,"To this end, "],[10249,13,""],[10249,0,"To this end,"],[10249,12,""],[10249,0,"The algorithm listen"],[10268,1,""],[10268,0,"d above will work with any sequence "],[10295,9,""],[10295,0,"CRDT but it is not optimized. It cannot "],[10249,86,""],[10249,0,"The algorithm listed above will work with any CRDT but it is not optimized. It cannot"],[9916,2,""],[9916,0,"can be"],[10060,0," It is also unclear how we can derive a _partialTransform_ function from this simulation definiti"],[10149,8,""],[10148,1,""],[10148,0," algorithm."],[10172,27,""],[10172,0,"The goal of this paper i"],[10196,13,""],[10314,6,""],[10314,0," on top of"],[10414,0," for any particular CRDT"],[10440,9,""],[10440,0,"When using it for sequence editing, we will need to deep"],[10492,4,""],[10492,0,"clone "],[10492,6,""],[10492,0,"maintain multiple "],[10501,0,"se"],[10502,1,""],[10501,1,""],[10510,0," "],[10510,1,""],[10510,0,"instances of the CRDT's data structure - all of which"],[10549,14,""],[10549,0,"in memory"],[10534,0,"(quite large) "],[10572,0,". Constructing "],[10574,13,""],[10574,0,"And there is no possiblily "],[10590,11,""],[10590,0,"possibli"],[10574,24,""],[10574,0,"This does not present any possibiliy "],[10574,37,""],[10574,0,"An ideal algorithm would laos "],[10603,1,""],[10602,1,""],[10601,1,""],[10600,1,""],[10599,1,""],[10599,0,"not need this, "],[10599,15,""],[10598,1,""],[10598,0,":\n\n- Only have a"],[10603,11,""],[10603,0,"Use "],[10601,6,""],[10600,1,""],[10599,1,""],[10598,1,""],[10598,0," also allow a part"],[10612,4,""],[10611,0,"for"],[10613,1,""],[10612,1,""],[10611,1,""],[10610,1,""],[10610,0,"for "],[10604,10,""],[10604,0,"not need"],[10613,0,"to a"],[10616,1,""],[10616,0,"use the entire subgraph"],[10604,35,""],[10604,0,"allow a "],[10611,1,""],[10611,0,"n efficient _ap"],[10625,1,""],[10624,1,""],[10624,0,"partialTra"],[10623,11,""],[10623,0,"_partialTransform_ function to be written "],[10664,1,""],[10664,0," that does no t"],[10678,1,""],[10677,1,""],[10677,0,"t need to create or access "],[10684,20,""],[10684,0,"to read or "],[10692,3,""],[10692,0,"any "],[10670,26,""],[10670,0,"nee"],[10672,1,""],[10671,1,""],[10670,1,""],[10670,0,"only"],[10670,4,""],[10670,0,"needs to "],[10670,9,""],[10670,0,"only needs to access recent "],[10691,7,""],[10691,0,"events"],[10669,0,", ideally,"],[10694,13,""],[10694,0,"look at events between $V_0#"],[10721,1,""],[10721,0,"$ and $V_m$."],[10717,0,"the current "],[10739,0,"the merged version "],[10765,0,"\n\n"],[10766,0,"For this purpose, we will "],[10766,26,""],[10766,0,"To this end, we have invented a "],[10766,32,""],[10766,0,"To this end, we have invented a"],[8598,1257,""],[9541,0,"\n\n\n= APPENDIX"],[9546,8,""],[9546,0,"Appendix\n\n\n\n==== Algorithm:\n\nGiven the CRDT is defined by:\n\n```haskell\ninitialState :: CRDT\nquery :: CRDT -> Doc\n\n-- Modify a CRDT by applying a local update.\nupdate :: (CRDT, (Id, Event)) -> CRDT\n\n-- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\nmerge :: (CRDT, CRDT) -> CRDT\n\nmergeAll :: [CRDT] -> CRDT\nmergeAll crdts = foldl initialState crdts\n```\n\nThe replay function then can be defined recursively like this:\n\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n\nCLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n"],[9557,4,""],[9557,0,"="],[9560,0,"Generic "],[9568,9,""],[9568,0,"CRDT o"],[9573,1,""],[9573,0,"t r"],[9575,1,""],[9574,1,""],[9574,0,"o replay algorithm"],[9081,0,"\n\n"],[8914,0,"\n"],[8914,0,"\nHow, then, do we create an efficient replay function for text editing?"],[8976,0," (or more generally sequence)"],[8905,1,""],[8907,5,""],[8907,0,"EG-"],[8909,1,""],[8908,1,""],[8908,0,"g-walker"],[8906,0," Introducing"],[8907,11,""],[8906,1,""],[8917,0,"\n"],[8917,0,"\nThe goal of the _eg-walker_ algorithm is to "],[8918,15,""],[8918,0,"Our"],[8947,3,""],[8947,0,"designed to generate equiva"],[8947,27,""],[8946,1,""],[8945,1,""],[8944,1,""],[8943,1,""],[8943,0,"e"],[8943,1,""],[8943,0," is "],[8918,29,""],[8918,0,"Our _eg-walker_ algorithm is"],[8917,0,"\n"],[8917,0,"\nTo a"],[8921,1,""],[8920,1,""],[8919,1,""],[8918,1,""],[8917,1,""],[9048,0,"\n"],[8948,1,""],[9047,0,"\nOur _eg-walker_ algorithm is"],[8919,29,""],[9018,0,"\n"],[8918,1,""],[9017,0,"\n"],[8917,1,""],[9016,1,""],[8917,0,"\n"],[9019,0,"This is "],[9019,8,""],[9047,0,"\n"],[9018,1,""],[9046,0,"\nHow, then, do we create an efficient replay function for text (or more generally sequence) editing?"],[8918,100,""],[8944,2,""],[8944,0,"exists to solve the problem"],[8960,11,""],[8960,0,"ythi"],[8963,1,""],[8962,1,""],[8961,1,""],[8960,1,""],[8960,0,"this problem:\n\n\n"],[8974,1,""],[8973,1,""],[8972,1,""],[8972,0,". I"],[8974,1,""],[8974,0,"Specifically, we want:\n\n- "],[8999,1,""],[8998,1,""],[8998,0,"\\ "],[8999,1,""],[8998,1,""],[8998,0,"/ Correctness: asdf_"],[9013,0,"_"],[9014,4,""],[9014,0,"eg-walker"],[9024,0," must output the"],[8917,0,"\n"],[8917,0,"\nIt may be co"],[8929,1,""],[8928,1,""],[8928,0,"functionally"],[8928,12,""],[8928,0,"corect"],[8933,1,""],[8932,1,""],[8931,1,""],[8931,0,"rect, but eh s"],[8944,1,""],[8943,1,""],[8942,1,""],[8941,1,""],[8941,0,"the naive simulation algorithm is impractical for real world use. It is slow (see benchmarks). And it does not "],[8918,134,""],[8918,0,"It may be correct, but the naive simulation algorithm is impractical for real world use. It is slow (see benchmarks). And it does not"],[8917,0,"\nWe aren't merely interested in "],[8918,167,""],[8917,0,"\n"],[8917,0,"\nWe can do better than this simulation function"],[8918,46,""],[8918,0,"The o"],[8922,1,""],[8922,0,"\"o"],[8923,1,""],[8922,1,""],[8922,0,"ob"],[8923,1,""],[8922,1,""],[8922,0,"remainin"],[8918,12,""],[8907,0,"Introducing "],[8930,6,""],[8931,1,""],[8931,0,"E"],[8941,0," (Event graph walker) is a new"],[8981,0," we have developed to "],[9002,1,""],[8929,0,"\n\n"],[8902,1,""],[8599,0,"\n"],[8903,1,""],[8600,0,"\n"],[8904,24,""],[8601,0,"= Introducing Eg-walker\n"],[8928,1,""],[8625,0,"\n"],[8626,14,""],[8626,0,"The a"],[8630,1,""],[8630,0,"network simulation algorithm described above"],[8749,0," for large editign"],[8766,1,""],[8765,1,""],[8765,0,"ng traces"],[8988,0," And "],[8992,1,""],[8991,1,""],[8990,1,""],[8989,1,""],[8989,0,"Without a _partial"],[8999,8,""],[8999,0,"_partialTransform_ function, every event will require every peer to re-compute the entire CRDT"],[9045,0,"either "],[9100,0," state (from the very first event), or cache the CRDT"],[9149,0,"core"],[9152,1,""],[9152,0,"responding "],[9167,0," state - which "],[9139,0,"locally "],[9190,0,"removes "],[9190,8,""],[9190,0,"negates many of the advantages of using an event graph in the first place."],[9266,0,"Enter "],[9272,1,""],[9273,1,""],[9273,0,"e"],[9266,6,""],[9267,1,""],[9267,0,"E"],[9277,0," "],[9277,1,""],[9298,0," is our solution to both of these problems. This is a novel"],[9357,93,""],[9357,0," event graph replay algorithm specifically designed for cau"],[9415,1,""],[9414,1,""],[9413,1,""],[9413,0,"sequence editing (like text). "],[9442,1,""],[9442,0," It has the following properties:"],[9504,15,""],[9504,0,"outputs the sa"],[9504,14,""],[9504,0,"its"],[9506,1,""],[9505,1,""],[9504,1,""],[9504,0,"has equivalent behaviour to the si"],[9537,1,""],[9536,1,""],[9536,0,"graph simulation function for all inputs. (HOW DO WE PROVE THIS??)\n\\"],[9603,1,""],[9603,0,"/ Performance: _eg-walker_ performs very well. SEe the "],[9630,28,""],[9630,0,"is very fast and memory efficient. See the bel"],[9675,1,""],[9675,0,"nchmarking section below"],[9686,13,""],[9686,0,"chapter below for details.\n/ Partial replay: "],[9713,18,""],[9713,0,"/ Partial replay:"],[9729,1,""],[9729,0," support: _eg-walker_ al"],[9752,1,""],[9752,0,"llows "],[9713,45,""],[9713,0,"/ Partial replay support: _eg-walker_ allows"],[9712,0," We require no "],[9712,15,""],[9757,0," "],[9751,7,""],[9751,0,"affords a _a"],[9762,1,""],[9762,0,"par"],[9761,4,""],[9761,0,"_partialTransform_ function"],[8698,0," However, it is not well optimized."],[8732,1,""],[8732,0," a"],[8733,1,""],[8732,1,""],[8732,0,". It can "],[8741,28,""],[8741,0,"be "],[8744,1,""],[8767,0,"when merging "],[8919,1,""],[8919,0,"\n\n"],[9332,4,""],[9332,0," a novel algorithm which"],[9356,9,""],[9356,0," solves"],[9391,22,""],[9391,0,"T"],[9391,1,""],[9391,0,"This is "],[9391,8,""],[9350,0," for replaying event graphs of t"],[9381,1,""],[9381,0,"sequence events"],[9390,6,""],[9365,0,"sequence "],[9386,0," (liek "],[9392,1,""],[9391,1,""],[9390,1,""],[9390,0,"ke text editing events)"],[9413,165,""],[9413,0,"."],[9354,0," efficiently"],[9426,0," It has the following properties:"],[9536,0," listed earler"],[9550,9,""],[9548,0,"i"],[9622,5,""],[9650,47,""],[9650,0,"We will "],[9650,8,""],[9649,1,""],[9649,0," It performa"],[9660,1,""],[9660,0,"s"],[9650,11,""],[9649,1,""],[9608,0,"As we sh"],[9615,1,""],[9614,1,""],[9614,0,"w"],[9614,1,""],[9614,0,"showin the"],[9623,1,""],[9622,1,""],[9621,1,""],[9620,1,""],[9619,1,""],[9618,1,""],[9618,0," in the Benchmarks chapter below, "],[9667,0,"very "],[9774,0,". This is "],[9781,3,""],[9781,0,"allwos "],[9787,1,""],[9786,1,""],[9785,1,""],[9784,1,""],[9784,0,"ows document snapshots to be efficiently updates"],[9831,1,""],[9831,0,"d"],[9787,0,":\n -"],[9791,2,""],[9791,0," D"],[7361,42,""],[7361,0,"R"],[7380,0," store"],[7386,5,""],[7410,30,""],[7381,0,"have a local copy of "],[7402,6,""],[7425,0,", so this computation is "],[7435,0,"extra "],[7456,0,"inefficient"],[7434,6,""],[7449,0," quite"],[7381,0,"store "],[7387,5,""],[7198,0,"\nThere are two dons"],[7216,1,""],[7215,1,""],[7215,0,"wnsides of the replay function de"],[7247,1,""],[7246,1,""],[7245,1,""],[7245,0,":\n\n1. "],[7250,1,""],[7249,1,""],[7248,1,""],[7248,0,"+ "],[7250,1,""],[7225,0," using a"],[7233,4,""],[7249,1,""],[7249,0," defined like this:"],[7272,14,""],[7272,0,"T"],[7292,35,""],[7386,0,"can often be quite slow because it "],[7386,0,"This "],[7394,6,""],[7418,1,""],[7409,9,""],[7408,1,""],[7408,0,"\n\n"],[7408,0,", especially for long lived document."],[7444,1,""],[7444,0,"s."],[7271,1,""],[7270,1,""],[7269,1,""],[7268,1,""],[7268,0," "],[7204,0," is one major downside"],[7226,18,""],[7271,1,""],[7271,0," in practice:"],[7398,1,""],[7398,0,"\n\n- "],[7462,0,"\n- This a"],[7465,6,""],[7465,0,"This should usul"],[7480,1,""],[7470,10,""],[7470,0,"is usually unnecessary"],[7465,27,""],[7465,0,"This "],[7469,1,""],[7468,1,""],[7467,1,""],[7466,1,""],[7465,1,""],[7465,0,"Ideally, this work is unnecessary "],[7465,34,""],[7465,0,"This requires"],[7470,0,"algorithm "],[7488,0," access to the "],[7489,0,"that every peer "],[7469,50,""],[7469,0," makes pruning difficult, because there's no "],[7463,51,""],[7463,0,"- This makes pruning difficult, because there's no"],[7310,8,""],[7305,5,""],[7305,0,"needs"],[7310,4,""],[7453,48,""],[7453,0,"All peers need "],[7463,0,"will "],[7473,0,"access to the entire causa"],[7494,5,""],[7494,0,"event graph"],[7473,0,"constant "],[7514,0," to merge changes. Ideally, we coul"],[7531,18,""],[7531,0,"\n\nTo "],[7535,1,""],[7534,1,""],[7533,1,""],[7532,1,""],[7531,1,""],[7531,0,"\n- And "],[7537,1,""],[7536,1,""],[7535,1,""],[7534,1,""],[7533,1,""],[7532,1,""],[7532,0,"\nAnd this "],[7537,5,""],[7537,0,"doin"],[7537,4,""],[7537,0,"re-processing the entire event graph is usually unnecssa"],[7592,1,""],[7591,1,""],[7590,1,""],[7590,0,"essary, because the "],[7606,4,""],[7606,0,"replicas almost always store a "],[7629,8,""],[7629,0,"have access to a recent document state anyway. Ideally, we just need to look at "],[7685,24,""],[7685,0,"the "],[7676,13,""],[7675,113,""],[7675,0," "],[7675,1,""],[7675,0,"\n\n"],[7675,0," Ideally, we want a replay function which only visite"],[7727,1,""],[7727,0,"s"],[7721,7,""],[7721,0," looks at recent events to generate the resulting document"],[7722,0,"needs to "],[7735,1,""],[7676,111,""],[7675,1,""],[7675,0," Ideally, we want a replay function which only needs to look at recent events to generate the resulting document"],[7717,70,""],[7717,0,"only needs to do work proportional to the amount of "],[7759,10,""],[7759,0,"number of events which have happened since the user's snapshot"],[7813,8,""],[7813,0,"current document state."],[7838,0,"To allow this"],[7851,25,""],[7853,7,""],[7853,0,"we would also like"],[7871,12,""],[7872,0,"event graph implementations to define "],[8220,0,"Note that "],[8230,1,""],[8230,0,"t"],[8219,1,""],[8218,1,""],[8218,0," "],[9666,0,"over a CRDT "],[9309,0,"\n"],[9015,1,""],[9308,0,"\n= Introducing Eg-walker"],[8991,24,""],[9284,0,"\n"],[8990,1,""],[9023,16,""],[9681,0,"\n"],[9294,1,""],[9680,0,"\n"],[9293,1,""],[9679,0,"\n= Introducing Eg-walker"],[9269,24,""],[9655,0,"\n"],[9681,1,""],[9680,1,""],[9811,0," It solves both of the "],[9812,22,""],[9811,1,""],[9718,1,""],[9718,0,"our solution to the above problems. It is a"],[9852,34,""],[9852,0," with the following properties:"],[9803,9,""],[9816,0," of sequence editing events"],[9854,15,""],[9854,0," edits"],[9861,0,". The algorithm has"],[9880,5,""],[9861,0," using "],[9862,6,""],[9862,0,"with replay behaviour equivalent to FugueMax [ref]"],[9913,1,""],[9913,0,"\n\n"],[9898,0,"the "],[9910,0," CRDT"],[10024,35,""],[10024,0,"FugueMax (or the graph simulation of fuguemax)"],[10217,0," Performance is competitive with C"],[10218,33,""],[10217,1,""],[10294,61,""],[10293,1,""],[10293,0,", which allows f"],[10308,1,""],[10295,13,""],[10295,0,"allowing for efficient, partial updates."],[10335,101,""],[10337,630,""],[10337,0,"\n\n\n\n\n"],[10337,0,"== List CRDTs"],[10340,0,"Using a "],[10348,4,""],[10348,0,"sequence"],[10340,16,""],[10340,0,"Sequecne"],[10347,1,""],[10346,1,""],[10345,1,""],[10345,0,"nce"],[10354,0," "],[10354,1,""],[10340,0,"Using a "],[10348,8,""],[10348,0,"list for a list"],[10368,1,""],[10368,0,"\n\n"],[10336,0,"\n\n\n"],[10337,0,"The main "],[10337,9,""],[10337,0,"Eg-walker considers the problem"],[10337,31,""],[10337,0,"Eg="],[10339,1,""],[10339,0,"-walker maintains an internal data "],[10346,0," works by traversing"],[10356,0,"doing an in-ro"],[10369,1,""],[10368,1,""],[10368,0,"order "],[10383,1,""],[10382,1,""],[10381,1,""],[10381,0,"al of the causal graph. "],[10404,1,""],[10391,13,""],[10391,0,"event graph. As it traverses the graph, it"],[10433,28,""],[10433,0," generates and maintains an internal data structure (described below) which allows for two "],[10508,16,""],[10508,0," is capable of mapping positions and editing events from "],[10560,5,""],[10560,0,"between two versions "],[10580,1,""],[10580,0,": #$"],[10583,1,""],[10582,1,""],[10582,0,"$V_1$ and $V_2$%"],[10597,1,""],[10597,0,"."],[10585,1,""],[10585,0,"in"],[10596,1,""],[10596,0,"out"],[10586,1,""],[10585,1,""],[10585,0,"0"],[10597,1,""],[10596,1,""],[10595,1,""],[10595,0,"1"],[10585,1,""],[10585,0,"c"],[10595,1,""],[10595,0,"e"],[10595,1,""],[10595,0,"o"],[10585,1,""],[10585,0,"o"],[10585,1,""],[10585,0,"i"],[10582,0,"the input version s"],[10600,1,""],[10599,1,""],[10599,0," "],[10609,0," output version"],[10631,0,"\n\nThe input version chan"],[10654,1,""],[10653,1,""],[10652,1,""],[10652,0,"an be moved around the graph - "],[10633,50,""],[10633,0,"In "],[10635,1,""],[10634,1,""],[10633,1,""],[10633,0,"In CRDT terms, the input version"],[10652,0,"data structure allows "],[10667,7,""],[10667,0,"supports "],[10633,16,""],[10633,0,"T"],[10660,0," the "],[10661,4,""],[10661,0,"CRDT style"],[10652,8,""],[10652,0,"exposes a"],[10672,0," _prepare-update_ function at its"],[10702,17,""],[10702,0,"#"],[10702,1,""],[10702,0,"$V_i$ and "],[10652,20,""],[10652,0,"marries a CRDT style"],[10711,1,""],[10710,1,""],[10709,1,""],[10708,1,""],[10708,0,"with an _effect"],[10716,7,""],[10716,0,"_effect_update_ at "],[10723,1,""],[10723,0,"-"],[10633,102,""],[10633,0,"The data structure marries a CRDT style _prepare-update_ function at $V_i$ with an _effect-update_ at"],[6437,1,""],[6437,0,"-"],[6509,1,""],[6509,0,"-"],[10734,0," $V_o$. "],[10732,0,"style operation "],[10758,0,"The "],[10758,4,""],[10758,0,"$"],[10758,1,""],[10758,0,"The output version $V_0"],[10780,1,""],[10780,0,"o$ moves monotonically forwardas "],[10812,1,""],[10811,1,""],[10810,1,""],[10810,0," as more events "],[10756,0,", which also outputs the transformed "],[10769,24,""],[10769,0,"tr"],[10769,2,""],[10769,0,"outputs the transformed version of the event"],[10814,1,""],[10814,0,"\n\n"],[10872,12,""],[10872,0,"events are processed."],[10407,3,""],[10407,0,"we "],[10418,1,""],[10430,0,"events are converted "],[10440,11,""],[10440,0," processed through fugue"],[10459,5,""],[10459,0,"f"],[10459,1,""],[10459,0,"FugueMax's _prepare-update function and added "],[10485,0,"_"],[10506,2,""],[10506,0,"to "],[10508,25,""],[10535,0," resembling FugueMax. "],[10556,1,""],[10556,0," This data structure is"],[10580,1,""],[10595,1,""],[10595,0,". The structure"],[10597,13,""],[10597,0,"This data structure"],[10616,6,""],[10596,1,""],[10596,0,"\n\n"],[10597,1,""],[10596,1,""],[10596,0," "],[10597,142,""],[10597,0,"Each item in the "],[10577,37,""],[10557,20,""],[10557,0,"The data structure in FugueMax is augmented with two state variables"],[10556,0," FugueMax stores a field "],[10557,24,""],[10557,0,"For"],[10559,1,""],[10558,1,""],[10558,0,"ugueMax stores "],[10556,0," For each item in the tree,"],[10600,0,"whether that item has been deleted by "],[10637,1,""],[10636,1,""],[10635,1,""],[10634,1,""],[10634,0,". "],[10557,79,""],[10556,1,""],[10625,0,": "],[10626,1,""],[10625,1,""],[10625,0,", naming"],[10627,6,""],[10627,0,"specifying the "],[10557,4,""],[10557,0,"Each item in the"],[10573,17,""],[10583,0,"tree "],[10642,0,"state at two versions"],[10654,9,""],[10650,4,""],[10647,3,""],[10642,5,""],[10587,1,""],[10583,4,""],[10573,0,"data structure in"],[10569,4,""],[10566,3,""],[10561,5,""],[10557,4,""],[10557,0,"The "],[10641,1,""],[10637,4,""],[10627,10,""],[10627,0,"naming"],[10626,7,""],[10625,1,""],[10625,0,": "],[10626,1,""],[10625,1,""],[10556,0," For each item in the tree, FugueMax stores whether that item has been deleted. "],[10635,1,""],[10634,1,""],[10634,0," by "],[10637,1,""],[10634,3,""],[10626,8,""],[10621,5,""],[10617,4,""],[10617,0," has been deleted by "],[10634,4,""],[10634,0,". "],[10556,80,""],[10625,0,": "],[10625,2,""],[10625,0,", naming"],[10627,6,""],[10627,0,"specifying the "],[10557,4,""],[10557,0,"Each item in the"],[10573,17,""],[10583,0,"tree "],[10642,0,"state at two versions: t"],[10665,1,""],[10665,0,"an input version $V_0$ and output version $_"],[10708,1,""],[10708,0,"V_1%$"],[10712,1,""],[10711,1,""],[10711,0,"$."],[10556,1,""],[10556,0,"\n\n"],[10714,0," FugueMax (and"],[10727,1,""],[10726,1,""],[10725,1,""],[10724,1,""],[10723,1,""],[10723,0,", and other similar c"],[10743,1,""],[10743,0,"sequence CRDTs usually store a single state variable specifying if the"],[10795,0," for each item"],[10827,0," item has been deleted. The eg-walker state ve"],[10872,1,""],[10872,0,"ariables "],[10849,0," at the current version"],[10904,0,"generalize this idea - and store the"],[10924,16,""],[10924,0,". The state is stored from th"],[10936,17,""],[10936,0,"is from the set of ${No"],[10958,1,""],[10957,1,""],[10957,0,"\"NotInsertedYet\""],[10957,1,""],[10956,1,""],[10955,1,""],[10955,0,"`"],[10970,1,""],[10970,0,"`, `Insertd"],[10980,1,""],[10980,0,"ed`, `Deleted(1)`, `Deleted(1)"],[11008,1,""],[11008,0,"2"],[11010,0,"`, `Deleted(1)"],[11022,1,""],[11022,0,"3"],[11024,0,"`, ..."],[10955,0,"{"],[11031,0,"}"],[10956,0," "],[11032,0," "],[11034,0,"."],[10714,321,""],[10714,0," FugueMax, and other similar sequence CRDTs usually store a single state variable for each item specifying if the item has been deleted at the current version. The eg-walker state variables generalize this idea. The state is from the set of { `NotInsertedYet`, `Inserted`, `Deleted(1)`, `Deleted(2)`, `Deleted(3)`, ... }."],[10715,211,""],[10825,0,"\n"],[10825,0,"\nThe input"],[10826,9,""],[10826,0,"We can move the input version around by changing the state of stored items."],[10855,7,""],[10893,1,""],[10893,0," to match the "],[10893,14,""],[10893,0,"."],[10555,1,""],[10555,0,", constructed of items which look like this:\n\n```\n\n```"],[10605,0,"{}"],[10606,0,"id: X, originLeft: _, originRight: _, inputState: S, outputState: Y"],[10672,1,""],[10672,0,"Y"],[10672,1,""],[10672,0,"S"],[10605,0,"{id: X, originLeft: _, originRight: _, inputState: S, outputState: S}\n{id: X, originLeft: _, originRight: _, inputState: S, outputState: S}\n"],[10604,0,"\n["],[10747,0,"  "],[10677,0,"  "],[10607,0,"  "],[10822,0,"\n  "],[10823,2,""],[10823,0,"]"],[10686,1,""],[10686,0,"Y"],[10686,1,""],[10686,0,"Y"],[10758,1,""],[10758,0,"Z"],[10828,0,"\n\nOriginLeft and originRight are defined according to the FugueMax algorithm. See the paper for details. Rahtehr"],[10933,7,""],[10933,0,"Rather"],[10933,6,""],[10933,0,"FugueMax typically stores an additional field naming"],[10979,6,""],[10979,0,"specifin"],[10986,1,""],[10985,1,""],[10985,0,"ying if the output state "],[10996,14,""],[10996,0," item has ever been deleted. "],[11024,1,""],[10906,118,""],[10905,1,""],[10907,0,"As you can see, "],[10923,1,""],[10923,0,"e"],[10949,5,""],[10949,0,"list "],[11189,0,"\n\nIf we take the set of items "],[11191,28,""],[11191,0,"The list i"],[11200,1,""],[11200,0,"of items exactly correlates with the equivalent fuguemax tree "],[11191,71,""],[11191,0,"The list of items exactly correlates with the equivalent fuguemax tree"],[11189,0," These state variables replay "],[11218,1,""],[11217,1,""],[11217,0,"ce fuguemax's deleted field - which normally specifies if the field has been deleted."],[11374,0,". Items are in "],[11386,3,""],[11386,0,"listed in the same order, and have identical originLeft and originRight fields. If we compare this data set with "],[11485,14,""],[11485,0,"li"],[11466,21,""],[11465,1,""],[11084,0,"input "],[11194,1,""],[11194,0," and the output state is simply from"],[11226,4,""],[11226,0,"either `Inserted` or `Deleted`."],[11372,0,"// "],[11312,58,""],[11312,0,".\n\n"],[11314,1,""],[11313,1,""],[11257,56,""],[11257,0,"\n\nAt "],[11261,1,""],[11260,1,""],[11259,1,""],[11758,0,"\nu"],[11759,1,""],[11759,0,"But we can move $V_i$ to any version, so long as $V"],[11809,1,""],[11809,0,"V_i ->"],[11809,0,"V_i = V_o o"],[11819,1,""],[11819,0,"or "],[11828,0," V_o#"],[11832,1,""],[11832,0,"$\n\nThe traversal works as follows\n"],[11865,1,""],[11865,0,":\n\n```\n\n\n```"],[11872,0,"for event in graph.traverse"],[11891,0,"inOrder"],[11898,1,""],[11898,0,"T"],[11906,0,"al"],[11907,1,""],[11906,1,""],[11905,1,""],[11905,0,"al() {\n  \n  "],[11912,2,""],[11913,2,""],[11913,0,"}"],[11914,1,""],[11876,5,""],[11876,0,"()"],[11877,0,"id, parents, "],[11889,1,""],[11888,1,""],[11881,0,"event, "],[11927,0,"  setVo"],[11933,1,""],[11933,0,"i "],[11934,1,""],[11933,1,""],[11932,1,""],[11932,0,"V"],[11932,1,""],[11932,0,"InputVersion(parents)\n  add(event)"],[11494,1,""],[11494,0," to match the "],[11494,14,""],[11494,0,". "],[11495,1,""],[11494,1,""],[11494,0,"to m"],[11497,1,""],[11496,1,""],[11495,1,""],[11494,1,""],[11494,0," to match the item's state at "],[11523,1,""],[11520,3,""],[11514,6,""],[11507,7,""],[11503,4,""],[11497,6,""],[11494,3,""],[11494,0,"to m"],[11497,1,""],[11496,1,""],[11495,1,""],[11494,1,""],[11493,1,""],[11493,0,"."],[11473,0,"input "],[11499,1,""],[11499,0,"s."],[11456,0," an"],[11458,1,""],[11457,1,""],[11456,1,""],[11259,1,""],[11258,1,""],[11761,0," It is always the "],[11761,18,""],[11761,0," I"],[11762,1,""],[11762,0,"The output version always corresopns"],[11797,1,""],[11796,1,""],[11795,1,""],[11794,1,""],[11794,0,"pons"],[11797,1,""],[11797,0,"ds to the version at which all events have been"],[11814,30,""],[11814,0," containing all processed events."],[11939,5,""],[11939,0,"is conceptually simple, "],[11962,1,""],[11961,1,""],[11961,0,". It works"],[12089,0,"\n\nTo set the input version, we "],[12091,29,""],[12090,1,""],[12089,1,""],[12085,0,"\n\nfn setInputVersion(v"],[12106,1,""],[12106,0,"oldV0"],[12110,1,""],[12109,1,""],[12109,0,"InputVErsion"],[12120,1,""],[12119,1,""],[12118,1,""],[12117,1,""],[12116,1,""],[12115,1,""],[12115,0,"ersion, newInputVersion()"],[12139,1,""],[12138,1,""],[12138,0,") {\n  \n  "],[12142,2,""],[12143,2,""],[12143,0,"}"],[12142,0,"  let {removed, added} = graph.diff(oldI"],[12178,4,""],[12178,0,"oldInputVersion, newIn"],[12195,5,""],[12195,0,"newInputVersion)\n  "],[12212,2,""],[12149,0,"e"],[12150,7,""],[12150,0,"ventsRemoved"],[12164,5,""],[12164,0,"eventsAdded"],[12224,0,"  for e in even"],[12235,4,""],[12235,0,"eventsRemoved.reverse() // Iterate in reverse order\n  "],[12287,2,""],[12258,0,"{"],[12258,1,""],[12258,0," {"],[12289,0,"\n  }"],[12289,0,"    disable(e)"],[12307,0,"\n  \n  "],[12308,2,""],[12311,0,"for e in eventsAdded."],[12331,1,""],[12331,0," {\n    \n    "],[12334,4,""],[12335,4,""],[12335,0,"  }"],[12334,0,"    enable(e)"],[4316,0," "],[4316,1,""],[5171,0,", and a"],[5177,1,""],[5176,1,""],[5175,1,""],[5174,1,""],[5173,1,""],[5172,1,""],[5171,1,""],[5222,0," This gra"],[5222,9,""],[5171,0," that is also a join sme"],[5194,1,""],[5193,1,""],[5193,0,"emi-lattice"],[5525,0,"\nEvents bm"],[5534,1,""],[5533,1,""],[5533,0,"must be added"],[5773,0,"\n"],[5686,1,""],[5772,0,"\nIt is illegal for any event to reference another event that isn't itself in the event graph. $forall (i, e_i, P_i) in G: P_i subset.eq G$."],[5547,139,""],[5633,0,"\nEvents must be added"],[5526,21,""],[5612,0,"\n"],[5634,0," to the set in causal order. It is s"],[5669,8,""],[5621,8,""],[5621,0,"may only be "],[5685,3,""],[5685,0,"an"],[5685,3,""],[5685,0,"a "],[5686,1,""],[5686,0,"n event graph to contain an "],[5688,31,""],[5687,1,""],[5686,1,""],[5685,1,""],[5666,0," If the event graph contains "],[5686,9,""],[5686,0,"referecnes "],[5686,11,""],[5686,0,"references a parent event $$"],[5713,0,"p in P_i"],[5722,0,", that parent event must alos "],[5751,1,""],[5750,1,""],[5749,1,""],[5749,0,"so be "],[5721,0," in G"],[5760,0,"in G"],[5763,1,""],[5763,0,"#"],[5763,1,""],[5763,0,"G$"],[5763,0,"$"],[5766,0," - "],[5768,1,""],[5767,1,""],[5766,1,""],[5766,83,""],[5767,0," //"],[5816,1,""],[5818,19,""],[5818,0,"Unlike [po-log], "],[5825,0,"other approaches ("],[5851,0,")"],[5854,0,"we "],[5818,39,""],[5818,0,"Unlike other approaches ([po-log]), we "],[5856,1,""],[5854,2,""],[5851,1,""],[5841,2,""],[5830,11,""],[5825,5,""],[5834,1,""],[5824,10,""],[5818,6,""],[5818,0,"Its often useful to"],[5621,3,""],[5621,0,"must"],[5625,5,""],[5718,4,""],[5718,0,"| i in G"],[5766,0,": "],[5767,1,""],[5766,1,""],[5767,0," Ie, "],[5771,1,""],[5770,1,""],[5769,1,""],[5768,1,""],[5767,1,""],[5767,0," #"],[5768,1,""],[5768,0,"$i in G => $"],[5779,0,"P_i subset.eq G"],[5768,0,"Ie, "],[4529,3,""],[4529,0,"a"],[4537,0," event IDs $i subset II$"],[4451,4,""],[4451,0," a"],[4486,1,""],[4486,0,"\n\n"],[4486,0," The event graph $G$ is a set of these events"],[4519,12,""],[4519,0,"event IDs, with cor"],[4530,8,""],[4530,0,"which each correspond to e"],[4555,1,""],[4555,0,"an event ("],[4528,0," $i$"],[4568,1,""],[4568,0,"$e_i$ and parent set $P_i$ where"],[4600,101,""],[4534,33,""],[4534,0,"each of which ah"],[4549,1,""],[4548,1,""],[4548,0,"has a corresponding event"],[4583,0," corresopnding"],[4583,14,""],[4600,7,""],[4600,0,"."],[4634,0," fr"],[4636,1,""],[4635,1,""],[4634,1,""],[4633,1,""],[4633,0," from set "],[4642,1,""],[4641,1,""],[4640,1,""],[4639,1,""],[4639,0,"some set of IDS"],[4653,1,""],[4653,0,"s #"],[4655,1,""],[4655,0,"$II$."],[4633,26,""],[5205,33,""],[5205,0," that is also a join semi-lattice"],[5205,33,""],[5256,0," The graph is also a "],[5276,1,""],[5276,0," that is also a join semi-lattice"],[5275,15,""],[5294,0," - and refere"],[5301,6,""],[5300,1,""],[5299,1,""],[5299,0,"d refere"],[5306,1,""],[5306,0,"red to as such in mayn"],[5327,1,""],[5326,1,""],[5326,0,"ny papers [shapiro, etc]."],[5620,0," Event a"],[5627,1,""],[5627,0,"$a$ ah"],[5632,1,""],[5631,1,""],[5631,0,"_happened"],[5631,9,""],[5631,0,"_happened_before_ $b$ if $a in P+"],[5663,1,""],[5663,0,"_b$."],[5655,0,"f"],[5582,0,"a != b and "],[5632,31,""],[5632,0,"$$"],[5633,0,"a -> b"],[5631,0," The parent "],[5642,1,""],[5642,0,"s field lists all "],[5656,4,""],[5656,0,"the events which happened before "],[5650,39,""],[5650,0,"expresses this relationship:"],[5679,13,""],[5688,0," => a >"],[5694,1,""],[5694,0,"-> b"],[5709,0," of events"],[5820,11,""],[5856,0," contains event $i$, it must also contain all of the parents of $i4"],[5922,1,""],[5922,0,"$"],[5909,0,"transitive "],[5934,0,"."],[5935,1,""],[5935,0,"\n\n$"],[5937,1,""],[5937,0,"//"],[5935,0," Ie, $i in G => P_i subset.eq G$"],[5885,5,""],[5962,0,"."],[6134,0,"\n"],[6134,0,"\nMa"],[6136,1,""],[6135,1,""],[6135,0,"Other pap"],[6135,9,""],[6135,0,"Manby "],[6140,1,""],[6139,1,""],[6138,1,""],[6138,0,"y other papers "],[6135,18,""],[6135,0,"This formalism makes it quite e"],[6165,1,""],[6135,30,""],[6135,0,"Unlike many "],[6142,5,""],[6142,0,"[po-log], w"],[6152,1,""],[6152,0,"the version"],[6152,11,""],[6152,0,"this "],[6135,6,""],[6135,0,"This formalism makes it quite "],[6135,46,""],[6135,0,"This formalism makes it quite  [po-log], this"],[6134,47,""],[6155,0,"be "],[6157,1,""],[6157,0," able to name "],[6171,9,""],[5799,0,"\n"],[5799,0,"\n"],[5800,2,""],[5800,0,"\n\n"],[5800,2,""],[6172,6,""],[6380,0," the set of all"],[6395,4,""],[6425,3,""],[6425,0,"all"],[6427,1,""],[6427,0,"ong with"],[6423,1,""],[6376,4,""],[6475,1,""],[6474,1,""],[6474,0," "],[6474,0,"ceili"],[6478,1,""],[6480,1,""],[6478,1,""],[6478,0,"("],[6480,0,")"],[6320,0," $V$"],[6409,14,""],[6409,0,"in V$"],[6412,0,"$"],[6416,0," an"],[6418,1,""],[6417,1,""],[6416,1,""],[6416,0,"and"],[6419,10,""],[6474,1,""],[6474,0,"i"],[6476,4,""],[6475,1,""],[6478,16,""],[6478,0,"i"],[6480,1,""],[6480,0,"in"],[6483,1,""],[6483,0,"V"],[6488,1,""],[6488,0,"i"],[6488,0,"e"],[6488,1,""],[6488,0,"exists "],[6488,7,""],[6494,0," | v in V"],[6487,0," exis"],[6488,4,""],[6488,0,"exists v i "],[6498,1,""],[6498,0,"n v :"],[6502,1,""],[6501,1,""],[6500,1,""],[6500,0,"V :"],[6510,9,""],[6478,10,""],[6494,0,"e "],[6495,1,""],[6494,1,""],[6494,0," "],[6494,1,""],[6494,0,"i = v or "],[6497,0,"="],[6497,1,""],[6497,0,"="],[6497,1,""],[6502,1,""],[6499,3,""],[6497,2,""],[6495,2,""],[6494,1,""],[6473,0,"V U "],[6476,1,""],[6475,1,""],[6474,1,""],[6474,0," union "],[6511,0," With thi s"],[6521,1,""],[6520,1,""],[6520,0,"s definition, we can say"],[6544,4,""],[6540,35,""],[6540,0," redefine the parents field of a"],[6572,4,""],[6581,0,"as"],[6562,21,""],[6562,0,"field of an event as the version "],[6511,0," And equivalently, w"],[6530,1,""],[6530,0,"we can define "],[6530,14,""],[6530,0,"the version of any event graph $$"],[6562,0,"floor(G) = {i in G : "],[6582,1,""],[6581,1,""],[6581,0,"| no"],[6584,1,""],[6583,1,""],[6583,0,"exi"],[6583,3,""],[6583,0,"exists.not j"],[6594,1,""],[6594,0," "],[6594,1,""],[6594,0,"j : "],[6597,1,""],[6596,1,""],[6595,1,""],[6595,0," in G: i - "],[6605,1,""],[6605,0,"> J"],[6607,1,""],[6607,0,"j}"],[6608,0," \n"],[6135,474,""],[6135,0,"Its often useful to be able to name a subset of the event graph with a _version_. Subgraphs can be identified by the set of IDs of their events, transitively reduced. Given some version $V$ we can reconstruct the corresponding subgraph by taking the set of all events named in $V$ and all of their transitive dependencies. Ie, $ceil(V) = V union {i | exists v in V : i -> v}$. And equivalently, the version of any event graph $floor(G) = {i in G | exists.not j in G: i -> j"],[6135,473,""],[6135,0,"Its often useful to be able to name a subset of the event graph with a _version_. Subgraphs can be identified by the set of IDs of their events, transitively reduced. Given some version $V$ we can reconstruct the corresponding subgraph by taking the set of all events named in $V$ and all of their transitive dependencies. Ie, $ceil(V) = V union {i | exists v in V : i -> v}$. And equivalently, the version of any event graph $floor(G) = {i in G | exists.not j in G: i -> j "],[6609,1,""],[6511,100,""],[6301,0," And equivalently, the version of any event graph $floor(G) = {i in G | exists.not j in G: i -> j }$"],[6134,0,"\n\n\n"],[6136,0,"We can uniquely name a "],[6136,23,""],[6136,0,"We can uniquely name a"],[6134,1,""],[6157,0," graph by its _version_ The "],[6184,1,""],[6183,1,""],[6182,1,""],[6181,1,""],[6180,1,""],[6180,0,". The "],[6163,0," (or a "],[6156,7,""],[6156,0,"any set o"],[6163,2,""],[6159,4,""],[6156,3,""],[6156,0,"a graph"],[6169,1,""],[6169,0," "],[6157,0,"n event"],[6176,1,""],[6176,0,"n event graph "],[6176,14,""],[6176,0," subset of an event graph)"],[6225,0,"version is the set of events in teh grap"],[6257,8,""],[6257,0,"the graph w"],[6267,1,""],[6267,0,"such that"],[6267,9,""],[6267,0,"with no other events "],[6266,22,""],[6240,0,"transitively reduced "],[6287,0," - ak"],[6291,1,""],[6290,1,""],[6289,1,""],[6289,0," which "],[6290,6,""],[6289,1,""],[6288,1,""],[6287,1,""],[6287,0,". (Or, lat"],[6296,1,""],[6295,1,""],[6294,1,""],[6294,0,"alternately, the set of events in the graph with no \"causal children\"). FOrmall"],[6366,7,""],[6366,0,"Formally, "],[6135,241,""],[6135,0,"We can uniquely name an event graph (or a subset of an event graph) by its _version_. The version is the transitively reduced set of events in the graph. (Or, alternately, the set of events in the graph with no \"causal children\"). Formally,"],[6375,217,""],[6219,0," ("],[6220,1,""],[6219,1,""],[6219,0,", written as $$"],[6233,0,"floor(V)"],[6239,1,""],[6239,0,"G"],[6262,71,""],[6315,1,""],[6290,25,""],[6290,0,"that have no "],[6276,27,""],[6276,0,", "],[6277,1,""],[6276,1,""],[6276,0,", after transitive reduction"],[6329,0,"forall "],[6373,0,"."],[6435,8,""],[6435,0,"graph $$"],[6442,0,"ceil(G"],[6447,1,""],[6447,0,"V)"],[6442,0,"G = "],[4635,6,""],[4635,0,"Ids"],[4637,1,""],[4636,1,""],[4636,0,"Ds"],[4532,0,"\n\n//"],[4532,0," ehrtr:"],[4538,1,""],[4533,5,""],[4533,0,"where:"],[5157,0,"\n\n\n"],[5158,0,"Some formal definitions:\n\n/ Hape"],[5189,1,""],[5157,34,""],[6142,0,"\n"],[6142,0,"\n=== Versioning the grpah"],[6162,5,""],[6162,0,"graph"],[6255,8,""],[6255,0,"denoted "],[6277,1,""],[6277,0,"\n\n\n\n"],[6277,0," The version is the set"],[6290,10,""],[6290,0,"of ghra"],[6296,1,""],[6295,1,""],[6294,1,""],[6294,0,"raph $G$ is the set of events in $G$ that do not have a child in the same graph."],[6374,65,""],[6443,1,""],[6443,0,"\n\n"],[6374,1,""],[6374,0,"\n\n"],[5846,33,""],[5846,0,"If event "],[5854,1,""],[5858,0," in si"],[5863,1,""],[5862,1,""],[5861,1,""],[5860,1,""],[5860,0,"s in $G$"],[5869,0," then all of its parents must also be in $G$. Ieg"],[5918,55,""],[5917,1,""],[5916,1,""],[5915,1,""],[5727,0," $G$"],[5785,25,""],[5784,1,""],[5748,6,""],[5748,0,"Once added, events are"],[5770,4,""],[5796,0,"."],[5361,33,""],[5361,0,"For any two "],[5361,12,""],[5361,0,"Events are re"],[5373,1,""],[5372,1,""],[5361,11,""],[5361,0,"Two events $a4"],[5374,1,""],[5374,0,"$ and $b$ may be r"],[5391,1,""],[5390,1,""],[5389,1,""],[5388,1,""],[5387,1,""],[5386,1,""],[5385,1,""],[5384,1,""],[5384,0,"in G may be related via "],[5407,1,""],[5407,0," the _happene"],[5412,8,""],[5412,0,"_happened_before_ relationship."],[5359,1,""],[5158,0,"\n"],[5360,397,""],[5159,0,"Two events $a$ and $b$ in G may be related via the _happened_before_ relationship. _a happened_before b_ is written as $a -> b$. The relationship is transitive and anti-reflexive. Events $a$ and $b$ are _concurrent_ if neither event happened-before the other: $a parallel b := (a != b and a arrow.r.not b and b arrow.r.not a)$. The parents field expresses this relationship: $a in P_b => a -> b$.\n"],[5757,1,""],[5556,0,"\n"],[5758,0,"\n"],[5157,1,""],[5757,0,"\n"],[5555,1,""],[5756,0,"\nTwo events $a$ and $b$ in G may be related via the _happened_before_ relationship. _a happened_before b_ is written as $a -> b$. The relationship is transitive and anti-reflexive. Events $a$ and $b$ are _concurrent_ if neither event happened-before the other: $a parallel b := (a != b and a arrow.r.not b and b arrow.r.not a)$. The parents field expresses this relationship: $a in P_b => a -> b$."],[5158,397,""],[5359,0,"\n"],[5157,1,""],[5358,1,""],[5157,0,"\n"],[5359,0,"\n"],[5263,0," - where $a h"],[5275,1,""],[5274,1,""],[5273,1,""],[5272,1,""],[5272,0,"_a hap"],[5277,1,""],[5276,1,""],[5275,1,""],[5274,1,""],[5274,0," happened-before b_ implies an edge from _a_ b"],[5319,1,""],[5319,0,"to _b_"],[5232,0," ("],[5233,1,""],[5232,1,""],[5232,0," ("],[5233,1,""],[5232,1,""],[5218,14,""],[5218,0," _hapep"],[5219,6,""],[5219,0,"_happened_before_"],[5487,1,""],[5228,1,""],[5050,1,""],[5485,0,"-"],[5227,0,"-"],[5050,0,"-"],[5521,1,""],[5521,0,"-"],[5237,0," r"],[5238,1,""],[5237,1,""],[5237,0,"relationship (via the parents field of each event) "],[5318,0,"."],[5319,63,""],[5416,48,""],[5416,0,"T"],[5450,23,""],[5453,0," denoted"],[5462,8,""],[5473,0,", meaning _a happened-before b_"],[5506,3,""],[5506,0,"This"],[5774,1,""],[5762,0,"$ then it implies"],[5779,4,""],[5779,0," $"],[5788,0," where $P_b$ is the set of all parents of $B"],[5831,1,""],[5831,0,"b$"],[6261,0,"\n"],[6261,0,"\nWe depart from existing formalisms "],[6264,33,""],[6264,0," define versions somewhat difr"],[6293,1,""],[6293,0,"ferently from other "],[6262,51,""],[6261,1,""],[6260,1,""],[6370,0," Unlike other formalisms [po-log], we do not dfepen"],[6420,1,""],[6419,1,""],[6418,1,""],[6417,1,""],[6416,1,""],[6416,0,"epend on vector clocks or any such "],[6408,43,""],[6408,0,"define versions purely based on the graph"],[6371,78,""],[6371,0,"We define versions in a slightly different way that other approaches[ "],[6440,1,""],[6439,1,""],[6439,0," [po-log]"],[6441,0,"eg "],[6443,1,""],[6442,1,""],[6441,1,""],[6440,1,""],[6440,0,"(eg ["],[6452,0,")."],[6454,1,""],[6454,0,"\n\n"],[6453,1,""],[6453,0,":"],[6553,1,""],[6552,1,""],[6552,0," "],[6645,0,", the corresponding graph $G$"],[6673,1,""],[6673,0,"$ co"],[6676,1,""],[6675,1,""],[6674,1,""],[6674,7,""],[6674,0," can be"],[6693,0,"ed"],[6695,24,""],[6695,0," as"],[6712,91,""],[6712,0," where"],[6768,0," $$c"],[6771,1,""],[6771,0,"floor(G)"],[6770,1,""],[6770,0,"ceil("],[6783,0,") = G$."],[6790,1,""],[6790,0,"\n\n"],[6933,0,"\n\n#"],[6935,1,""],[6935,0,"=== Replication"],[6963,2,""],[6963,0,"mayb"],[6966,1,""],[6966,0," be"],[6952,17,""],[6952,0,"The event graph is"],[6952,0,"As"],[6953,1,""],[6952,1,""],[6261,0,"\n"],[6261,0,"\nThe frontier of graph G$"],[6284,0,"$"],[6287,0,", denoted as $$"],[6301,0,"floor(G)"],[6310,0,", represents the frontier if"],[6337,1,""],[6336,1,""],[6336,0,"of"],[6337,1,""],[6337,0,"r boundary set of graph $G$. This is, the set of "],[6312,74,""],[6312,0,"represents the set of events in $_"],[6345,1,""],[6345,0,"G$ that do not have any descendants within the same graph."],[6404,0,"\nWe depart from existing "],[6420,9,""],[6420,0,"existing literature (eg po-log) by using "],[6455,6,""],[6455,0,"this frontier set "],[6405,68,""],[6405,0,"We depart from existing literature (eg po-log) by this frontier set"],[6473,0,"// "],[6455,4,""],[6455,0,"using"],[6461,0,"hi"],[6462,1,""],[6461,1,""],[6461,0,"this "],[6478,0," to denot e"],[6488,1,""],[6487,1,""],[6487,0,"e ther "],[6493,1,""],[6492,1,""],[6492,0," graph's version."],[6508,0,"_"],[6501,0,"_"],[6511,0,"\n"],[6461,5,""],[6461,0,"the "],[6709,97,""],[6709,0,"The version of graph $G$ is the set of events in $G$ that do not have a child in the same graph. "],[6805,1,""],[6805,0,"\n\n"],[6709,0,"// "],[6261,0,"\n"],[6261,0,"\nExis"],[6262,4,""],[6262,0,"Many existing methods use the "],[6262,30,""],[6262,0,"We depart from existing "],[6262,24,""],[6261,1,""],[6261,0,"\nO"],[6262,1,""],[6262,0,"W"],[6262,1,""],[6262,0,"Our definition of the version of an event graph departs from existing literatoru"],[6341,1,""],[6340,1,""],[6339,1,""],[6339,0,"u"],[6339,1,""],[6339,0,"ure. Rather than defining a "],[6356,11,""],[6356,0,"introducing vector clocks, "],[6382,1,""],[6381,1,""],[6381,0," or some similar method, we simply "],[6342,74,""],[6342,0," [e"],[6344,1,""],[6343,1,""],[6343,0,"(eg [po-log]). "],[6357,1,""],[6357,0," "],[6357,1,""],[6359,0,"We define the *version*"],[6381,1,""],[6381,0,"_"],[6373,1,""],[6373,0,"_"],[6382,0," of a graph to be the"],[6403,3,""],[6404,11,""],[6403,1,""],[6409,0,"'s _frontier set_"],[6430,23,""],[6393,0,", denoted as $floor(G)$,"],[6450,5,""],[6393,0," #"],[6394,1,""],[6394,0,"$G$"],[6454,0,". This"],[6456,19,""],[6456,0,"That is, the"],[6547,0,"// "],[7189,1,""],[7188,1,""],[7187,1,""],[7186,1,""],[7172,0,"G = "],[7172,0,"forall G: "],[7204,39,""],[7204,0,"T"],[7234,2,""],[7234,0,"is"],[7233,0," can be redefined as"],[7253,3,""],[7237,16,""],[7237,0," "],[7237,1,""],[7237,0," be redefined as"],[7241,10,""],[7241,0,"defined "],[7249,3,""],[6065,0,"\n"],[6065,0,"\n> "],[6067,1,""],[6066,1,""],[6066,0,"`EXAMPLE DIA"],[6077,1,""],[6076,1,""],[6075,1,""],[6075,0,"DIAGRAMS`"],[6066,0,"> "],[6068,1,""],[6084,1,""],[6084,0,"*"],[6068,0,"*"],[6069,8,""],[6077,0," o"],[6078,1,""],[6078,0,"OF EXAMPLE GRAPHS"],[6342,12,""],[6342,0,"is a little di"],[6294,0,"Rather than defining "],[6315,18,""],[6344,0," int "],[6348,1,""],[6347,1,""],[6347,0," terms of a vector clock or similar, "],[6375,0,"something "],[6345,88,""],[6345,0,"using a lo"],[6345,10,""],[6345,0,"in terms of a logical clock"],[6373,0,"("],[6382,0,", ."],[6384,1,""],[6384,0,"??"],[6387,1,""],[6387,0,","],[6294,95,""],[6294,0,"Rather than defining the version of an event graph in terms of a logical clock ([po-log], ??),"],[6294,281,""],[6294,0,"Rather than defining the version of an event graph in terms of a logical clock ([po-log], ??), We define the _version_ of a graph $G$, denoted as $floor(G)$, to be the graph's _frontier set_. That is, the set of events in $G$ that do not have any descendants within the same graph."],[6294,281,""],[6294,0,"Rather than defining the version of an event graph in terms of a logical clock ([po-log], ??),\nWe define the _version_ of a graph $G$, denoted as $floor(G)$, to be the graph's _frontier set_. That is, the set of events in $G$ that do not have any descendants within the same graph."],[6294,94,""],[6294,0,"Rather than defining the version of an event graph in terms of a logical clock ([po-log], ??),\n"],[6387,1,""],[6387,0,"."],[6387,1,""],[6387,0,", we based "],[6397,1,""],[6396,1,""],[6395,1,""],[6394,1,""],[6393,1,""],[6392,1,""],[6392,0,"name a "],[6392,7,""],[6392,0,"simply use a "],[6294,111,""],[6294,0,"Rather than defining the version of an event graph in terms of a logical clock ([po-log], ??), we simply use a"],[6293,111,""],[6292,1,""],[7254,0,"\n\nThe graph may grow to be "],[7256,3,""],[7256,0,"The evebnt"],[7265,1,""],[7264,1,""],[7263,1,""],[7263,0,"nt"],[7276,11,""],[7276,0,"con"],[7278,1,""],[7277,1,""],[7276,1,""],[7276,0,"bc"],[7277,1,""],[7277,0,"ecome b "],[7284,1,""],[7284,0,"ver"],[7286,1,""],[7285,1,""],[7284,1,""],[7283,1,""],[7283,0,"very large, but the version is almost always quiet "],[7256,78,""],[7255,1,""],[7254,1,""],[7254,0,"\n\nThe event graph may become very large, but the version is almost always quiet "],[7299,0,"in practice "],[7340,6,""],[7340,0,"quite small."],[7340,12,""],[7340,0,"quite small."],[7254,0," After a local event"],[7268,0,"ly generat"],[7255,29,""],[7254,1,""],[7351,1,""],[7351,0," - usually 2i"],[7363,1,""],[7363,0," items or less."],[7298,12,""],[7105,1,""],[7105,0,"\n\n"],[7486,0," The network uses some mech"],[7509,4,""],[7509,0,"replication mechanism to eventually deliver all events to all peers."],[7487,90,""],[7486,1,""],[7386,0,"The network uses some replication mechanism to eventually deliver all events to all peers. "],[7470,5,""],[7470,0,"replicas in "],[7481,1,""],[7480,1,""],[7479,1,""],[7478,1,""],[7397,35,""],[7397,0," needs to "],[7406,1,""],[7452,0," in the set of peers"],[7473,0," We can do that by treating"],[7502,1,""],[7502,0,"t"],[7502,1,""],[7501,1,""],[7501,0,"th"],[7516,0," in turn"],[7524,43,""],[7548,0,"_"],[7530,0,"_"],[7530,1,""],[7548,1,""],[7548,0," storing"],[7556,3,""],[7570,0," $$"],[7572,0,"()"],[7573,0,"i, E_i, "],[7576,1,""],[7576,0,"e"],[7581,0,"V_i"],[7581,1,""],[7581,0,"p"],[7581,1,""],[7581,0,"P"],[7832,0,", adding recieved i"],[7841,10,""],[7841,0,"received items to the local set"],[7841,0,"all remo"],[7848,1,""],[7847,1,""],[7846,1,""],[7845,1,""],[8072,0," "],[8072,1,""],[8072,0," This is a very"],[8082,5,""],[8082,0,"n "],[8072,12,""],[7952,0,"an item cannot be added to the set until "],[7996,0," of its"],[8010,23,""],[8010,0,"s are in the set"],[7921,11,""],[7921,0,"preserving"],[8141,0,"\n"],[8141,0,"\n#"],[8142,1,""],[8142,0,"=== Replay function"],[8112,0,"\n- The query function $$"],[8135,0,"q"],[8137,0," is "],[8138,3,""],[8138,0,"needs to turn the event graph back into "],[8168,10,""],[8168,0,"into a corresponding "],[8173,2,""],[8173,0,"the "],[8191,0,"document state. This is "],[8146,5,""],[8146,0," transform"],[8178,3,""],[8178,0,"its"],[8212,8,""],[8212,0,"Almost all the complexity of this approach existin"],[8261,1,""],[8260,1,""],[8260,0,"s in defining and implementing this replay function."],[8241,0,"using "],[8211,107,""],[8211,0," We will discuss this function "],[8212,30,""],[8212,0,"Much of the rest of this paper discusses this function."],[8212,0,"All the "],[8212,8,""],[8212,0,"Almost all the complexity of this approach comes from"],[8255,10,""],[8255,0,"is hi"],[8259,1,""],[8258,1,""],[8258,0,"contained in this single function definition. "],[8304,55,""],[8270,34,""],[8255,15,""],[8255,0,"resides in this function, and we will spend most of the rest of this paper discussing it."],[8211,0," "],[8211,1,""],[8211,0," W"],[8212,1,""],[8211,1,""],[8455,12,""],[8455,0,"denoted "],[8463,28,""],[8475,0," as the _query function_ $q$ "],[8503,1,""],[8452,0," => "],[8449,0," : G => DD"],[8459,7,""],[8460,53,""],[8460,0,", which"],[8467,13,""],[8530,0,"  (denoted in [shapiro] as the _query function_ $q$). "],[8531,2,""],[8531,0,"This function is "],[8598,1,""],[8597,1,""],[8596,1,""],[8596,0,"."],[8545,26,""],[8545,0,"corresponds to"],[8584,0," in is denoted in [shapiro] as"],[8611,3,""],[8588,14,""],[8597,0,", however it is much more challenging to implemenmt"],[8647,1,""],[8646,1,""],[8646,0,"t in a"],[8648,4,""],[8648,0,"when using event graphs, because it must containal"],[8697,1,""],[8696,1,""],[8696,0," "],[8671,26,""],[8671,0,"."],[8613,0,"often "],[8678,1,""],[8915,0,"\n"],[8915,0,"\nWe can implement this function in several different ways. The most obvious way os"],[8996,1,""],[8995,1,""],[8995,0,"is to take an existing CRDT and have the replay function simulate "],[9001,0,"construct $r$ from "],[9020,5,""],[9036,39,""],[9036,0,", and have it replay that CRDT's "],[9050,6,""],[9050,0,"simulate a network cof "],[9072,1,""],[9071,1,""],[9070,1,""],[9069,1,""],[9069,0,"of collaborating peers editing "],[9092,8,""],[9092,0,"u"],[9092,1,""],[9059,2,""],[9059,0,"the corresponding "],[8916,205,""],[8916,0,"We can implement this function in several different ways. The most obvious way is to construct $r$ from an existing CRDT, and have it simulate the corresponding network of collaborating peers  that CRDT's"],[9108,12,""],[9108,0,"making changes to the document."],[8949,8,""],[8949,0," a variet "],[8958,1,""],[8958,0,"y of"],[9144,0," This approach was descib"],[9168,1,""],[9167,1,""],[9166,1,""],[9166,0,"cribed in [time machines]. "],[9192,1,""],[9192,0," Howeve,r"],[9200,1,""],[9199,1,""],[9199,0,"r, this process replicates the computation"],[9215,26,""],[9215,0,"must replicate the comu"],[9237,1,""],[9237,0,"putation a"],[9246,1,""],[9246,0,"of the entire collaborating en"],[9275,1,""],[9274,1,""],[9274,0,"network on every peer on that network. It essentially multiplies CPU and memory "],[9313,2,""],[9313,0,"Naively implemented, it"],[9336,12,""],[9363,0,"requires"],[9370,1,""],[9370,0,"ments by N where N is the number"],[9379,23,""],[9379,0,"the number of peers on the "],[9376,0,"for every peer "],[9421,0,"th"],[9422,1,""],[9421,1,""],[9421,0,"network.\n\n"],[9431,87,""],[9431,0,"There i"],[9436,2,""],[9431,5,""],[9431,0,"There is one major downside of using a replay function defined like this in practice:"],[9431,85,""],[9431,0,"Further"],[9431,7,""],[9431,0,"Further"],[9431,7,""],[9431,0,"There is also a proble "],[9453,1,""],[9453,0,"m simply in thi"],[9467,1,""],[9467,0,"e d"],[9469,1,""],[9468,1,""],[9467,1,""],[9466,1,""],[9465,1,""],[9465,0,"using this definition of $r$:"],[9493,1,""],[9493,0,", and that is"],[9506,2,""],[9506,0," t"],[9431,178,""],[9430,0,"\nIdeally, the system should only need access to "],[9431,47,""],[9431,0,"In practice, replicas store a local "],[9431,36,""],[9431,0,"In practice, replicas store a local"],[8374,1,""],[9465,0," "],[9452,0,"typically "],[9476,0,"copy of the document being edited"],[9488,0,"current"],[9488,7,""],[9509,0,", at the current version. Ideally, the "],[9544,4,""],[9544,0,"when"],[9535,0,"And most events happen at the most recent version of the "],[9591,1,""],[9590,1,""],[9590,0,"at document. "],[9612,4,""],[9612,0,"the replay function also "],[9632,5,""],[9632,0,"should not need to "],[9451,0," also"],[9480,1,""],[9480,0,", recent "],[9522,24,""],[9482,7,""],[9481,1,""],[9480,1,""],[9480,0," "],[9467,0,"recent "],[9467,7,""],[9474,0," "],[9474,1,""],[9474,0," recent "],[9481,1,""],[9539,0,"usually "],[9556,0," either"],[9604,0,", or some n"],[9614,1,""],[9614,0,"nearby version"],[9678,0,"re-process"],[9678,10,""],[9678,0,"re-process - or even visit  "],[9705,1,""],[9705,0,"- old events which have already been merged into this local document snasptho"],[9774,8,""],[9774,0,"snpasho"],[9774,7,""],[9774,0,"snapshot."],[9784,289,""],[9783,1,""],[9782,1,""],[9782,0," "],[9783,9,""],[9785,0," would like"],[9796,7,""],[9796,0," the"],[9816,17,""],[9848,77,""],[9848,0,"distance between the local document"],[9874,0,"ly stored"],[9892,0," and the merged version."],[9897,19,""],[9897,0,"the added "],[9901,6,""],[9901,0,"versions added"],[9897,4,""],[9897,0,"a"],[9897,1,""],[9897,0,"the add"],[9844,74,""],[9844,0,"the number of events added to this document "],[9887,1,""],[9887,0," "],[9874,14,""],[9874,0,"the do"],[9879,1,""],[9878,1,""],[9878,0,"event graph."],[9883,7,""],[9878,5,""],[9878,0,"the document "],[9890,1,""],[9878,4,""],[9886,0,"."],[9749,33,""],[9749,0,"in."],[9752,2,""],[9752,0," W"],[9630,10,""],[9630,0,"T"],[9744,0,"Ideally, "],[9753,1,""],[9753,0,"w"],[9473,0,"and maintain "],[9642,1,""],[9642,0,"\n\n\n"],[9642,0," An"],[9644,1,""],[9643,1,""],[9642,1,""],[9642,0," When new ver"],[9654,1,""],[9653,1,""],[9652,1,""],[9652,0,"events are "],[9648,15,""],[9648,0,"the document"],[9652,0,"local "],[9666,0," is updated to t"],[9681,1,""],[9681,0,"include new events, ideally:"],[9710,0,"\n- the replay function to do work proportional to the number of events added to the document."],[9713,1,""],[9713,0,"T"],[9429,0,"\n"],[9429,0,"\nThere is a flaw in using this function definition in practice."],[9454,5,""],[9454,0," a replay function defined like this"],[9511,0," "],[9491,21,""],[9428,0," That is "],[9428,9,""],[9428,0," Better approaches optimize"],[9429,26,""],[9429,0,"But optimizations are usually possible."],[9478,0," also"],[9547,1,""],[9547,0,"."],[9553,8,""],[9553,0,"practical systems"],[9665,5,""],[9665,0,"M"],[9676,8,""],[9850,0,"only needs "],[9931,0,"\n- The replay function should not need to read old events"],[9977,0," or access"],[9998,0,". Ideally we can d"],[10015,1,""],[10015,0,"throw"],[10015,5,""],[10015,0,"discard old events"],[10008,3,""],[10008,0,"the system "],[10041,0,", or l"],[10046,1,""],[10046,0,"archive them\n- "],[10059,2,""],[10059,0,"- Its a"],[10065,1,""],[10065,0,"l"],[10065,1,""],[10064,1,""],[10063,1,""],[10063,0," would also be useful fo "],[10087,1,""],[10087,0,"r the replay function to express *iow"],[10123,1,""],[10122,1,""],[10121,1,""],[10121,0,"how* the local document should be changed, rather than just regenerating it from scratch."],[10212,0,"// "],[9469,0,"\n\n\n"],[9471,0,"\n---"],[9469,0,"\nWhile not mathematically use"],[9495,3,""],[9495,0,"necesss"],[9501,1,""],[9501,0,"ary, we would laos"],[9506,13,""],[9506,0,"it w"],[9509,1,""],[9509,0,"is greatly "],[9512,8,""],[9512,0,"very useful to also define a _partial transform_ function $T(G, G_"],[9577,1,""],[9576,1,""],[9576,0,"G"],[9576,1,""],[9576,0,"v_"],[9577,1,""],[9576,1,""],[9576,0,"V_9"],[9578,1,""],[9578,0,"0_"],[9579,1,""],[9579,0,", V_m)#"],[9585,1,""],[9585,0,"$"],[9585,0," -> [e_1, e_2, e_3, ...]"],[9610,0," hwi"],[9613,1,""],[9612,1,""],[9611,1,""],[9611,0,"which outputs a *transf"],[9628,6,""],[9627,1,""],[9627,0,"_transformed_ list of events that cab"],[9663,1,""],[9663,0,"n be applied to a document at "],[9690,3,""],[9690,0,"stata"],[9694,1,""],[9694,0,"e at version $$"],[9708,0,"V-"],[9709,1,""],[9709,0,"-_"],[9710,1,""],[9709,1,""],[9709,0,"_0"],[9712,0," to modify it "],[9716,10,""],[9716,0,"create $$"],[9724,0,"V_()"],[9727,0,"v"],[9727,2,""],[9726,1,""],[9725,1,""],[9723,0,"the document state a "],[9743,1,""],[9743,0,"t "],[9747,0,"_9"],[9748,1,""],[9748,0,"0 union V_m"],[9760,0,". Ie, "],[9470,296,""],[9470,0,"While not mathematically necessary, it is very useful to also define a _partial transform_ function $T(G, V_0, V_m) -> [e_1, e_2, e_3, ...]$ which outputs a _transformed_ list of events that can be applied to a document state at version $V_0$ to create the document state at $V_0 union V_m$. Ie,"],[9762,3,""],[9762,0,"Formally, Ie, $(r(G(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ...) = r(G(V_0 union V_1))$"],[9771,4,""],[9773,1,""],[9781,1,""],[9829,1,""],[9852,0,". This is "],[9854,8,""],[9854,0,"In some ways "],[9854,13,""],[9854,0,"This is an \"implementation detail\""],[9854,10,""],[9854,0,"This "],[9854,5,""],[9854,0,"In som"],[9854,6,""],[9854,0,"This is an"],[9864,2,""],[9864,0," "],[9886,1,""],[9886,0," - but p"],[9893,1,""],[9893,0,"pe"],[9894,1,""],[9894,0,"ractical performance be"],[9903,14,""],[9903,0,"systems benefit fr"],[9920,1,""],[9919,1,""],[9919,0,"greatly from a well written function "],[9947,9,""],[9947,0,"tran"],[9892,59,""],[9892,0," it is of great practical importance because:"],[9939,5,""],[9853,1,""],[9853,0,"\n\n"],[9469,0,"\n"],[9469,0,"\n=== Tranform function"],[9960,105,""],[9969,5,""],[8598,0,"but it contains all the complexity of the "],[8636,4,""],[8636,0,"the concurrent editing algorithm"],[8668,79,""],[8668,0,"."],[8640,29,""],[8639,1,""],[8638,1,""],[8637,1,""],[8636,1,""],[8636,0,"merging concurrent edits."],[8660,0," in the system - so it is often much more complex to implement tahn "],[8723,5,""],[8723,0,"than in a regular CRDT"],[8529,217,""],[8765,0,"\n\n This function corresponds to the _query function_ $q$ in [shapiro], but it contains all the complexity of merging concurrent edits in the system - so it is often much more complex to implement than in a regular CRDT."],[8767,1,""],[8911,0,", "],[8912,1,""],[8911,1,""],[8911,0,". As such"],[8920,5,""],[8926,6,""],[8944,23,""],[8944,0," than th"],[8951,1,""],[8950,1,""],[8912,52,""],[8838,0," because the input is simply original events, this function"],[8897,3,""],[8884,0,"in an event graph "],[8971,14,""],[9035,1,""],[9035,0,", but"],[9040,2,""],[9040,0," t"],[9253,1,""],[9253,0," "],[9253,1,""],[9253,0,", and an algorithm is given in [appendix X]."],[9258,3,""],[9258,0," simple"],[9275,0," to do so"],[9288,5,""],[9288,0,"provided"],[9323,0,"implemented this way, this "],[9350,5,""],[9358,5,""],[9449,0,". And redoes all that work every time an incoming change happesn"],[9512,1,""],[9511,1,""],[9511,0,"ns."],[9513,1,""],[9451,64,""],[9571,36,""],[9568,3,""],[9568,0,"Whether this is a useful a p"],[9595,1,""],[9594,1,""],[9594,0,"proa"],[9597,1,""],[9596,1,""],[9595,1,""],[9595,0,"praoc"],[9599,1,""],[9598,1,""],[9598,0,"ch "],[9581,20,""],[9581,0,"e"],[8966,7,""],[8966,0,"e"],[9576,0,"n"],[8967,0,"n"],[9578,0,"t"],[8968,0,"t"],[9577,3,""],[9577,0,"is a useful apprach "],[8966,3,""],[8966,0,"edits.\n"],[9581,20,""],[9581,0,"entire approach works i"],[9603,1,""],[9588,0,"event graph "],[9615,0,"comes down to "],[9615,14,""],[9615,0,"e"],[9615,1,""],[9615,0,"depends on being able to make the replay function fast and useful."],[9567,1,""],[9567,0,"\n\n"],[9582,7,""],[9577,5,""],[9577,0,"the "],[9580,1,""],[9577,3,""],[9577,0,"this "],[9603,5,""],[9603,0,"is desirable"],[9627,5,""],[9627,0,"our ability"],[9638,5,""],[9671,12,""],[9671,0,".\n"],[9673,1,""],[9825,5,""],[9797,36,""],[9802,0,", rather than "],[9815,1,""],[9810,5,""],[9803,7,""],[9802,1,""],[9851,41,""],[9851,0,"be applied to a document at"],[9885,31,""],[9885,0,"modify it to the document state at"],[9936,0," $T(G, V_0, V_m) -> [e_1, e_2, ...]$ "],[9972,1,""],[9936,0," The transform function is given by"],[10008,9,""],[10008,0,"where"],[9963,5,""],[9963,0,"denoted"],[10096,1,""],[10096,0,", where $$"],[10105,0,"plus.ci"],[10110,2,""],[10110,0,"circle"],[10117,0," is the event application operator."],[10154,47,""],[10154,0,"The transform function is not neeed"],[10188,1,""],[10187,1,""],[10187,0,"ded mathematically, but it is of"],[10437,1,""],[10437,0,"\n\n"],[10613,19,""],[10613,0,"T"],[10509,19,""],[10509,0,"T"],[10596,0,"h"],[10510,0,"h"],[10598,0,"e"],[10511,0,"e"],[10600,0," "],[10512,0," "],[10602,0,"s"],[10513,0,"s"],[10604,0,"y"],[10514,0,"y"],[10606,0,"s"],[10515,0,"s"],[10608,0,"t"],[10516,0,"t"],[10610,0,"e"],[10517,0,"e"],[10612,0,"m"],[10518,0,"m"],[10615,18,""],[10615,0,"does not neeed"],[10628,1,""],[10627,1,""],[10627,0,"d to"],[10666,0," we want"],[10685,0," to be able to"],[10699,4,""],[10675,10,""],[10675,0,"peers"],[10713,0," to prevent"],[10717,7,""],[10717,0,"keep"],[10717,4,""],[10717,0,"improv"],[10717,6,""],[10717,0,"r"],[10717,1,""],[10703,16,""],[10714,4,""],[10714,0,"old events to prevent the system "],[10740,7,""],[10740,0,"event log from growing without bound.\n- "],[10778,2,""],[10778,0,"-"],[10779,3,""],[10779,0," "],[10783,5,""],[10783,0,"is much more computationally"],[10786,0,"usually "],[10820,0,"efficient "],[10830,15,""],[10777,0,"\n- Particularly for text editing, the diff between two nearby versions is usually much smaller than "],[10872,5,""],[10872,0,"and easier to process than the "],[10872,31,""],[10871,1,""],[10871,0," than the en"],[10882,1,""],[10881,1,""],[10881,0,"compelte "],[10881,9,""],[10881,0,"complete document."],[10899,178,""],[10872,0,"*("],[10873,1,""],[10872,1,""],[10872,0,"(and propori"],[10883,1,""],[10883,0,"tuiona"],[10888,1,""],[10887,1,""],[10886,1,""],[10885,1,""],[10884,1,""],[10884,0,"uion"],[10887,1,""],[10886,1,""],[10885,1,""],[10884,1,""],[10884,0,"ionately faster o"],[10900,1,""],[10900,0,"to process) "],[10917,22,""],[10917,0,"inspecting the entire document."],[11182,0,"// "],[11565,1,""],[11565,0,"\n\n"],[11841,16,""],[11841,0," "],[11862,1,""],[11862,0," when applied to a document"],[11876,13,""],[11875,1,""],[11875,0,"."],[11765,13,""],[11866,1,""],[8974,2,""],[8974,0,"?W"],[8975,1,""],[8974,1,""],[8974,0,"While we"],[9043,4,""],[8974,7,""],[8974,0,"W"],[9035,1,""],[9035,0,". But"],[9058,3,""],[9058,0,"approach"],[8974,0,"// "],[8973,0,"\n"],[8973,0,"\nWe can implement this function in a variety of different ways. But the most obvious approach is to construct $r$ from an existing CRDT, and have it simulate the corresponding network of collaborating peers making changes to the document."],[9108,103,""],[9108,0,". We will discuss this in [correctness], below."],[12236,0,". simple algorithm to do so is provided in [appendix X]"],[12238,53,""],[12237,1,""],[12236,1,""],[12263,19,""],[12263,0,"are considered equivalent"],[12288,13,""],[12360,0," A simple alogrih"],[12370,7,""],[12370,0,"algorihtm "],[12370,10,""],[12370,0,"algorithm for doing so is provided in simple algorithm to do so is provided in [appendix X]"],[12415,30,""],[12414,1,""],[12413,1,""],[12412,1,""],[12411,1,""],[12410,1,""],[12409,1,""],[12408,1,""],[12407,1,""],[12406,1,""],[12405,1,""],[12404,1,""],[12420,0,"."],[12360,61,""],[12397,106,""],[12397,0,"this simulation can be done with "],[12362,68,""],[12362,0,"In p"],[12365,1,""],[12365,0,"[appending "],[12375,1,""],[12374,1,""],[12374,0,"x "],[12375,1,""],[12374,1,""],[12373,1,""],[12373,0,"x X] we rp"],[12382,1,""],[12381,1,""],[12381,0,"present a simple algorithm which can do this siml"],[12429,1,""],[12429,0,"ulation process for any CRDT."],[12398,0,"siml"],[12401,1,""],[12401,0,"ulation "],[12436,19,""],[12450,1,""],[12452,0,"This approach"],[12465,33,""],[12465,0," "],[12452,0,"While "],[12458,1,""],[12458,0,"t"],[12471,10,""],[12471,0," will produce "],[12463,0,"generic "],[12493,0,"the correct result"],[12524,1,""],[12524,0,","],[12525,9,""],[12737,0," There are often much "],[12738,21,""],[12738,0,"As we will show, there are m"],[12765,1,""],[12764,1,""],[12755,9,""],[12755,0,"there are often much"],[12450,0,"\n\n"],[12451,1,""],[12450,1,""],[12738,37,""],[12738,0,"However, "],[12738,9,""],[12738,0,"z"],[12738,1,""],[12738,0,"However, this approach gives"],[12761,5,""],[12761,0,"provides a correctness "],[12761,23,""],[12761,0,"defines what a correct algorithm should o"],[12801,1,""],[12801,0,"do given in a"],[12813,1,""],[12812,1,""],[12811,1,""],[12810,1,""],[12810,0,"any input."],[12332,28,""],[12332,0," "],[12332,1,""],[12332,0," editing timelines."],[12333,8,""],[12342,0," of"],[12342,3,""],[12333,0,"editing "],[12428,13,""],[12420,8,""],[12420,0,"simulato"],[12427,1,""],[12427,0,"e any"],[12420,12,""],[12420,0,"do this simulation for any CRDT."],[12439,4,""],[12439,0,"given "],[12497,3,""],[12497,0,"a"],[12352,0,"\n"],[12352,0,"\n"],[12267,11,""],[12341,1,""],[12340,1,""],[12444,0,"\n\n"],[12445,0,"The eg-walker"],[12445,13,""],[12444,1,""],[12443,1,""],[12486,9,""],[12486,0,"the expected"],[12505,13,""],[12505,0," n"],[12506,1,""],[12506,0,"in ca"],[12510,1,""],[12509,1,""],[12509,0,"all cases"],[12731,83,""],[12731,0," Bu"],[12733,1,""],[12732,1,""],[12731,1,""],[12444,0,"\n"],[12444,0,"\nThis allows us to fde"],[12465,1,""],[12464,1,""],[12463,1,""],[12463,0,"define "],[12445,25,""],[12445,0,"Thus, rather than defining the event ordering for "],[12476,19,""],[12472,4,""],[12445,7,""],[12445,0,"T"],[12445,1,""],[12445,0,"R"],[12466,0,"a new co"],[12468,6,""],[12467,1,""],[12466,1,""],[12466,0,"the "],[12445,25,""],[12445,0,"In thit"],[12451,1,""],[12450,1,""],[12449,1,""],[12449,0,"he [eg-walker chapter below] wi"],[12479,1,""],[12479,0,"e de"],[12482,1,""],[12481,1,""],[12481,0,"introduce the e"],[12495,1,""],[12495,0,"_eg-walker_ algorithm "],[12445,72,""],[12445,0,"In the [eg-walker chapter below] we introduce the _eg-walker_ algorithm"],[12444,72,""],[12443,1,""],[12445,7,""],[12445,0,"T"],[12480,12,""],[12480,0,"a well "],[12445,0,"Given any de"],[12456,1,""],[12455,1,""],[12455,0,"CRDT definition, t"],[12473,1,""],[12514,0,"defined"],[12541,1,""],[12541,0,". But"],[12573,0,"This algorithm"],[12587,2,""],[12869,2,""],[12869,0,".\n\n// "],[12543,28,""],[12543,0,"Howe"],[12543,4,""],[12543,0,"But it is not well optimized"],[12550,50,""],[12550,0,"is very"],[12550,0,"can be"],[12556,2,""],[13148,0,"\n\nWith all "],[13155,4,""],[13155,0,"our de"],[13159,2,""],[13159,0,"problem definition out of the way"],[13150,42,""],[13149,1,""],[13148,1,""],[13148,0,"\n\nThe remainder"],[13150,13,""],[13149,1,""],[13148,1,""],[13148,0,": Replaying Event Graphs"],[13150,0,"Efficient "],[13160,10,""],[13160,0,"Replaying of "],[13150,35,""],[13150,0,"FUGUE for Event Graphs"],[13173,0,"\n"],[13173,0,"\nWhen "],[13174,5,""],[9873,0,"s1"],[9874,1,""],[12117,7,""],[12117,0,"derive "],[12127,14,""],[12182,4,""],[12182,0,"a "],[12213,8,""],[12209,0,"replicas modifying a "],[12228,6,""],[12228,0,"te"],[12229,1,""],[12229,0,"he CRDT"],[12125,1,""],[12235,0,", using the CRDT's rules"],[12285,0," "],[12285,1,""],[12285,0," replay"],[12274,18,""],[12274,0,"replayable event graph"],[12337,10,""],[12337,0," output"],[12353,0,"possible "],[12590,7,""],[12586,0,",. "],[12588,1,""],[12587,1,""],[12587,0," especially when pr"],[12588,18,""],[12587,1,""],[12586,1,""],[12586,0," it is impractically "],[12607,9,""],[12611,12,""],[12635,0,"text "],[12654,82,""],[12684,0," for details"],[12699,0," It also uses memory proportional to the number of replicating peers"],[12750,0,"concurrent "],[12778,0," *"],[12700,80,""],[12699,1,""],[12699,0,"\n\nWe "],[12701,3,""],[12700,1,""],[12699,1,""],[12635,5,""],[12694,0," It also uses RAM proportional to the R"],[12732,1,""],[12731,1,""],[12731,0," number of "],[12728,14,""],[12728,0,"$R*n* where "],[12733,0,"$"],[12732,1,""],[12740,0,"R is the number of replicas and $n$ is the number of edits."],[12582,0," However, it has several problems:\n\n-"],[12620,5,""],[12620,0,"T"],[12727,1,""],[12727,0,"\n- "],[12732,5,""],[12830,1,""],[12830,0,"- "],[12837,5,""],[12620,2,""],[12620,0,"It"],[12657,4,""],[12664,0,"text "],[12926,0,"\n\nIf our goal is to use a reple"],[12956,1,""],[12956,0,"ayble "],[12952,10,""],[12952,0,"replayable event graph to "],[12928,50,""],[12928,0,"In order to make use of replayable event graphs in practi"],[12979,6,""],[12979,0,"practical, useful software, we need a way to replay "],[12928,103,""],[12928,0,"In order to make use of replayable event graphs in practical, useful software, we need a way to replay"],[12449,33,""],[12449,0,"replay any event graph using a CRDT"],[12478,2,""],[12478,0,"its co"],[12478,6,""],[12478,0,"a "],[12478,1,""],[12478,0,"an "],[12480,1,""],[12479,1,""],[12478,1,""],[12477,1,""],[12449,29,""],[12445,4,""],[12445,0,"defines a replay function given "],[12471,6,""],[12471,0,"from a "],[12482,0," definition"],[12477,1,""],[12477,0,"ny "],[12484,11,""],[13032,0," ve"],[13034,1,""],[13033,1,""],[13033,0,"event graphs."],[12929,0,"\n"],[12929,0,"\nWe consider replaybal"],[12950,1,""],[12949,1,""],[12948,1,""],[12948,0,"able event graphs to be a dead "],[12974,5,""],[12974,0,"practica"],[12974,8,""],[12974,0,"dead "],[12974,5,""],[12973,1,""],[12972,1,""],[12972,0,"useless"],[12972,0,"somewhat "],[12988,0," in practice if they cannot f"],[13016,1,""],[13016,0,"perform "],[13009,15,""],[13009,0,"do not perform as well as w"],[13035,1,""],[13035,0,"their equivalent CRDTs."],[12929,0,"\n"],[12929,0,"\nWe can do much"],[12930,14,""],[12929,1,""],[12928,1,""],[12486,0,"\n\n\n"],[12487,0,"There are other ways to define anc "],[12493,3,""],[12493,0,"may be"],[12493,6,""],[12493,0,"are"],[12521,1,""],[12520,1,""],[12519,1,""],[12518,1,""],[12518,0,"a replay function. But for the purposes "],[12541,17,""],[12541,0,"wer"],[12543,1,""],[12542,1,""],[12541,1,""],[12541,0,"this paper is interested in "],[12541,28,""],[12541,0,"the focus of this paper is collaborative text editing"],[12587,0,"(or sequence "],[12599,1,""],[12599,0,") "],[12608,0,". The remainder of this paper "],[12487,0,"// "],[12487,154,""],[12487,0,"// There are other ways to define a replay function. But the focus of this paper is collaborative text (or sequence) editing. The remainder of this paper"],[12486,0,"\n"],[12486,0,"\nOur "],[12487,4,""],[12486,1,""],[12485,1,""],[12487,3,""],[12493,3,""],[12493,0,"a"],[12493,1,""],[12493,0,"may be"],[12539,0," However, this ig "],[12556,1,""],[12555,1,""],[12555,0,"s good "],[12549,13,""],[12487,0,"// "],[12486,0,"\n"],[12486,0,"\n"],[12362,18,""],[12362,0,"event graphs."],[12074,0,"\n"],[12074,0,"\nThere are a broad class of "],[12075,27,""],[12075,0,"We suspect there are a lot of ways to construct a replay function. But for the purposes of this paper, we're simply interested in"],[12204,43,""],[12210,1,""],[12210,0,"ing"],[12074,0,"\n"],[12074,0,"\n"],[12075,2,""],[12123,2,""],[12138,0,"s"],[12140,0," But, we"],[12146,7,""],[12184,6,""],[12184,0,"only interested"],[12199,11,""],[12235,3,""],[12235,0,"a"],[12235,1,""],[12235,0,"any"],[12199,0," interested"],[12188,11,""],[12184,4,""],[12184,0,"simply"],[12146,0,"we But "],[12145,3,""],[12140,5,""],[12138,1,""],[12123,0,"a "],[12075,0,"\n"],[12075,0,"\n"],[12074,2,""],[12210,3,""],[12210,0,"e"],[12204,0,"\n\nAs shown in [Time machines paper], we can"],[12201,3,""],[12074,127,""],[12073,1,""],[12110,6,""],[12110,0,"one a"],[12114,1,""],[12114,0,"way to define a replay function's behaviour is to"],[12170,0," that"],[12175,2,""],[12196,4,""],[12196,0,"a"],[12196,1,""],[12196,0," a"],[12214,0,". The replay function's output "],[12216,0,"Defined like this, "],[12235,1,""],[12235,0,"t"],[12264,209,""],[12264,0,"must match the corresponding"],[12278,14,""],[12278,0," document state produces "],[12302,1,""],[12301,1,""],[12301,0,"d by simulating "],[12269,10,""],[12269,0,"equal the "],[12317,0,"a set of peers"],[12326,0,"collaborating "],[12345,0," making the"],[12346,10,""],[12346,0,"modifying the document "],[12368,1,""],[12368,0,", as described "],[12370,13,""],[12370,0,"and replicating "],[12385,1,""],[12385,0,", in a way described by the "],[12390,2,""],[12390,0,"the "],[12394,3,""],[12394,0,"format"],[12394,24,""],[12393,1,""],[12392,1,""],[12391,1,""],[12390,1,""],[12389,1,""],[12388,1,""],[12387,1,""],[12387,0,"using the events from the event graph."],[12387,5,""],[12387,0,"as described by"],[12413,5,""],[12413,0," in"],[12254,24,""],[12254,0," produces the same"],[12287,12,""],[12287,0," as the equivalent "],[12291,15,""],[12291,0,"an equivalent network of collaborating peers"],[12335,101,""],[12335,0," processing the same set of"],[12336,53,""],[12336,0,"making the "],[12336,11,""],[12336,0,"mo"],[12337,1,""],[12336,1,""],[12171,20,""],[12171,0,"it"],[12185,0,"'s"],[12199,0," Consider a network of collaborating replicas creating and merging the same set of events des"],[12270,22,""],[12270,0,"set of events described by the event graph."],[12313,120,""],[12314,0,"When this system reaches quiescence"],[12323,7,""],[12323,0," network of peers"],[12359,0,", the resulting document ("],[12384,1,""],[12384,0,"pass"],[12387,1,""],[12386,1,""],[12385,1,""],[12384,1,""],[12384,0,"(passed through th eC"],[12404,1,""],[12403,1,""],[12402,1,""],[12402,0,"e CRDT's quiery "],[12417,1,""],[12416,1,""],[12415,1,""],[12414,1,""],[12413,1,""],[12413,0,"ery function)"],[12360,0," it produ"],[12361,8,""],[12361,0,"all peers converge on some"],[12387,66,""],[12387,0," document state (aft"],[12406,1,""],[12405,1,""],[12405,0,"fter"],[12402,7,""],[12402,0," (produced via the CRDT's query function)."],[12314,9,""],[12314,0,"Once this"],[12340,0," has"],[12374,0," will have"],[12393,0,"d"],[12398,4,""],[12398,0,"a"],[12398,2,""],[12398,0,"some "],[12417,0,","],[12417,1,""],[12417,0,"."],[12417,1,""],[12459,0,"\n\n"],[12460,1,""],[12459,1,""],[12459,0," $r(G)$ must produce this same document state."],[12480,4,""],[12480,0,"the same"],[12489,5,""],[12503,0," as the CRDT for all possib"],[12524,6,""],[12524,0,"valid event graphs"],[12633,15,""],[12633,0," in this way."],[12608,8,""],[12608,0,"implements "],[12620,0," generic"],[12656,1,""],[12656,0,", based on a CR"],[12667,4,""],[12667,0,"a gn"],[12670,1,""],[12667,3,""],[12667,0,"an"],[12668,1,""],[12667,1,""],[12658,9,""],[12658,0,"given some CRDT's definition."],[12669,0,"functios "],[12677,1,""],[12676,1,""],[12676,0,"ns defining a "],[12694,14,""],[12694,0,"."],[12688,2,""],[12688,0,"a "],[12689,0," compatible"],[12708,0,"If this function were computationally "],[12708,38,""],[12708,0,"Unfortunately, this function is not "],[12708,36,""],[12708,0,"Unfortunately, this function is not"],[12707,0,"\n"],[12707,0,"\nThi"],[12708,3,""],[12707,1,""],[12706,1,""],[12723,0,"while "],[12742,0," is correct, it is not"],[12764,7,""],[12745,0," tio "],[12749,1,""],[12748,1,""],[12747,1,""],[12747,0,"o our knowledge"],[12781,0," practically useful because:"],[12810,169,""],[12811,132,""],[12810,1,""],[12838,0,"an "],[12840,1,""],[12840,0,"d memory inefficient "],[12944,102,""],[12943,1,""],[13013,4,""],[13013,0,"a"],[13035,0," defined like this"],[13055,0,"\nIt is not enough to be mathematically correct. "],[13056,47,""],[13056,0,"In order for replayable event graphs to be used in place of CRDTs, they need to have comperable "],[13140,12,""],[13140,0," compat"],[13146,1,""],[13145,1,""],[13145,0,"etitive performance. Our _eg-walker_ algorithm (described in the next chapter) \n"],[13056,168,""],[13056,0,"In order for replayable event graphs to be used in place of CRDTs, they need to have competitive performance. Our _eg-walker_ algorithm (described in the next chapter) is functionally equivalent to FugueMax [reference]"],[13227,13,""],[13241,0,"the "],[13253,0," C"],[13254,1,""],[13253,1,""],[13265,0," CRDT"],[13265,5,""],[13253,0," CRDT"],[13270,0," "],[13121,0," for collaborative text editing"],[13302,0,"while having much better performance"],[13308,30,""],[13308,0,"improving on the performance"],[13308,28,""],[13308,0,"having orders of magnitude better performance than this simip"],[13368,1,""],[13367,1,""],[13367,0,"ple simulation algorithm.\n\n"],[13154,0,"it is not enough that they are well defined and correct. "],[13211,1,""],[13211,0,"T"],[13215,0," also"],[13258,1,""],[13258,0," "],[13055,0,"\n"],[12762,0,")"],[12746,0,"("],[13591,0,"// "],[13461,0,"// "],[13058,400,""],[13057,1,""],[13655,0,"\nIn order for replayable event graphs to be used in place of CRDTs for collaborative text editing, it is not enough that they are well defined and correct. They also need to have competitive performance. Our _eg-walker_ algorithm (described in the next chapter) is equivalent to the FugueMax CRDT [reference] while having orders of magnitude better performance than this simple simulation algorithm.\n"],[13654,1,""],[13857,1,""],[13857,0,"\n\n"],[13833,12,""],[13844,0," on par or better toe"],[13864,1,""],[13863,1,""],[13862,1,""],[13862,0,"with ex"],[13867,2,""],[13867,0,"CRDT based approaches."],[13888,1,""],[13890,0,"\nIn this chapter we define the "],[13917,4,""],[13917,0,"our novel _eg-walker_ algorithm This algior"],[13948,0,"."],[13955,6,""],[13955,0,"algorithm is th"],[13969,1,""],[13968,1,""],[13967,1,""],[13967,0,":\n\n- Equivalent "],[13970,13,""],[13970,0,"- Equivalent"],[13965,3,""],[13965,0,"has:"],[13983,0," behaviour as the "],[13971,30,""],[13971,0,"- Equivalent behaviour as the FugueMax CRDT [reference], which was the first sequence editor to have proven "],[14057,22,""],[14057,0,"based CRDT with no interleaving problems."],[14073,0,"proba"],[14077,1,""],[14076,1,""],[14076,0,"vably "],[14068,14,""],[14068,0,"proven to be free of"],[14088,2,""],[14102,8,""],[14102,0,"issues"],[14109,0,"\n- Performance generally on par wtih "],[14141,5,""],[14141,0,"with the be"],[14146,6,""],[14146,0,"best-in-class CRDT based implementation."],[14185,1,""],[14185,0,"s.\n"],[14112,0,"Competitive "],[14124,1,""],[14124,0,"p"],[14112,13,""],[14112,0,"P"],[14123,0," tat"],[14126,1,""],[14125,1,""],[14125,0,"hat is "],[14132,22,""],[14132,0," com"],[14135,1,""],[14134,1,""],[14133,1,""],[14132,1,""],[14132,0,"competitive with"],[14190,0," (Se e"],[14195,1,""],[14194,1,""],[14194,0,"e benchmarking chapter)"],[14219,196,""],[14218,0,"- A _a"],[14223,1,""],[14223,0,"part"],[14222,5,""],[14222,0,"_partialTransform_ function"],[14222,0,"well defined "],[14262,0,", allowing efficient updates from any version"],[14283,24,""],[14283,0,"merges "],[14264,0,"which "],[14277,1,""],[14276,1,""],[14275,1,""],[14275,0,"s "],[14276,1,""],[14293,1,""],[14293,0,"."],[14296,243,""],[13971,1,""],[13971,0,"/ Correctness:"],[13986,0,"_eg_walker"],[13995,1,""],[13994,1,""],[13993,1,""],[13992,1,""],[13991,1,""],[13990,1,""],[13989,1,""],[13989,0,"-walker_ has "],[14002,11,""],[14011,0," equivalent to"],[14025,4,""],[14025,0," "],[14055,1,""],[14055,0,". FugueMax"],[14065,6,""],[14066,0,"is a correct, modern sequence CRDT and the first"],[14114,28,""],[14114,0," sequence"],[14163,7,""],[14163,0,"problems."],[14173,1,""],[14173,0,"/"],[14186,0,":"],[14188,0,"_eg-walker_"],[14199,4,""],[14199,0," "],[14200,4,""],[14200,0,"performs "],[14200,9,""],[14188,0,"The performance of "],[14219,0,"is "],[14308,1,""],[14308,0,"/P"],[14309,1,""],[14309,0," PArtial"],[14310,7,""],[14310,0,"Partial"],[14310,7,""],[14310,0,"Transform support:"],[14329,74,""],[14308,21,""],[14308,0,"/ Transform support: _eg-walker "],[14339,1,""],[14339,0,"_ allows "],[14341,7,""],[14341,0,"can produce a"],[14345,9,""],[14345,0,"transform events from "],[14341,26,""],[14341,0,"allows "],[14341,7,""],[14341,0,"uses transform to "],[14308,51,""],[14308,0,"/ Transform support: _eg-walker_ uses transform to"],[13965,3,""],[13965,0,"is"],[13982,1,""],[13981,1,""],[13980,1,""],[13979,1,""],[13978,1,""],[13978,0,"t"],[13993,31,""],[13993,0,"behaves the same as the"],[14328,17,""],[14328,0,"defines a transform"],[14328,8,""],[14328,0,"supports "],[14328,9,""],[14328,0,"affords "],[14347,0," function, to "],[14360,1,""],[14359,1,""],[14358,1,""],[14358,0,"which can efficiently bring "],[14380,6,""],[14380,0,"tra"],[14382,1,""],[14381,1,""],[14380,1,""],[14380,0,"bring any document"],[14385,13,""],[14385,0," mer"],[14380,9,""],[14380,0,"merge changes into a document "],[14409,1,""],[14409,0," snapshot."],[14421,412,""],[14420,0,"\nAt a high level,"],[14437,3,""],[14437,0," e"],[14503,0," - from earliest events to the"],[14530,3,""],[14530,0,"latest events"],[14544,1,""],[14544,0,"\n\n\n"],[14456,0," maintin"],[14463,1,""],[14462,1,""],[14462,0,"aining a modified fuguemax "],[14469,11,""],[14477,0,"'s "],[14479,1,""],[14469,0,"a modified instance of "],[14503,0,"state in memory. "],[14456,64,""],[14544,0," During this traversal, fugue-"],[14568,6,""],[14568,0,"eg-walker ma"],[14579,1,""],[14578,1,""],[14578,0,"creates and maintains an in-em"],[14607,1,""],[14606,1,""],[14606,0,"em"],[14607,1,""],[14606,1,""],[14606,0,"memory"],[13058,0,"One lovely "],[13058,11,""],[13058,0,"But "],[13058,4,""],[13057,1,""],[13057,0,"\nDelighty"],[13065,1,""],[13065,0,"fully, peers "],[13072,6,""],[13072,0,"wo"],[13073,1,""],[13072,1,""],[13072,0,"so long as peers collaboratively "],[13089,16,""],[13089,0,"coordinate on the mathematical definition of their replay function (usually the"],[13155,13,""],[13155,0," ("],[13156,1,""],[13155,1,""],[13155,0,", they are free to diverge on their implementation."],[13182,0,"when it comes to"],[13198,2,""],[13219,0," of that function"],[13237,0," Just like multiple compile"],[13257,7,""],[13257,0,"C "],[13248,11,""],[13248,0,"different C compilers an"],[13271,1,""],[13270,1,""],[13270,0,"are compatible o"],[13285,1,""],[13285,0,"if they can produce working bi"],[13305,10,""],[13305,0,"equivalent binar"],[13316,5,""],[13316,0,"executable files given the same sourc "],[13353,1,""],[13353,0,"e code, different implam"],[13376,1,""],[13375,1,""],[13375,0,"ementations of "],[13370,20,""],[13370,0," REG "],[13371,4,""],[13371,0,"e"],[13371,1,""],[13371,0,"replay functions "],[13371,17,""],[13371,0,"implementations of "],[13387,3,""],[13387,0,"can coll"],[13361,0,"our system a"],[13361,12,""],[13361,0,"replayable event graphs afford "],[13418,8,""],[13418,0,"to collaborate even if they implementt he r"],[13460,1,""],[13459,1,""],[13458,1,""],[13457,1,""],[13456,1,""],[13455,1,""],[13237,218,""],[13237,0," We "],[13238,3,""],[13238,0,"In this paper we present "],[13262,1,""],[13254,8,""],[13251,3,""],[13245,6,""],[13240,5,""],[13238,2,""],[13238,0,"We "],[13240,1,""],[13237,3,""],[13237,0," Just like different C compilers are compatible if they can produce equivalent executable files given the same source code, replayable event graphs afford different implementations to collaborate even if they implement"],[13293,4,""],[13357,94,""],[13357,0,"different replicas in a collaborative network can "],[13403,4,""],[13403,0,"are also cim"],[13414,1,""],[13413,1,""],[13413,0,"ompatible"],[13403,19,""],[13403,0,"can also collaborative "],[13425,1,""],[13425,0,"ly edit the same document so long as the math"],[13462,8,""],[13462,0,"their replay functions behave the same - even if they are implemented differently. We "],[13547,1,""],[13546,1,""],[13545,1,""],[13545,0,"We ho"],[13548,2,""],[13548,0,"present "],[13544,12,""],[13205,0,"+"],[13205,1,""],[13219,0,"_"],[13205,0,"_"],[13130,0,"_"],[13120,0,"_"],[13361,19,""],[13366,14,""],[13373,0," of coll"],[13377,4,""],[13377,0,"replicas collaboratively editing a docum"],[13416,1,""],[13416,0,"ment, those replicas do not need to "],[13437,15,""],[13437,0,"can be implmeented"],[13444,11,""],[13444,0,"implemen"],[13444,8,""],[13441,3,""],[13441,0,"have different implementations_"],[13456,0,"_"],[13473,0," "],[13473,1,""],[13446,0,"totally "],[13481,49,""],[13481,0," "],[13531,44,""],[13531,0," flr"],[13534,1,""],[13533,1,""],[13533,0,"or all input."],[14186,0,"actually "],[14659,11,""],[14659,0,"Fast"],[14787,17,""],[14787,0,"Suports "],[14787,8,""],[14787,0,"Supports tranfro"],[14802,1,""],[14801,1,""],[14801,0,"orm"],[14800,0,"s"],[15103,0," data structure rep"],[15119,3,""],[15119,0,"resembling a fugue "],[15130,3,""],[15130,0,"f"],[15135,1,""],[15135,0,"'s state. This data structure afford"],[15165,6,""],[15145,0,"\n"],[14912,233,""],[14912,0,"At a high level, eg-walker works by doing an in-order traversal of the event graph - from earliest events to latest events. During this traversal, eg-walker creates and maintains an in-memory data structure resembling fugue's state."],[15145,0,"\n"],[15146,20,""],[15146,0,"This data structure"],[15146,19,""],[15146,0,"CRDT"],[15146,4,""],[15146,0,"The generator function in every "],[15149,0," prepare-update ("],[15166,1,""],[15175,0,")"],[15189,6,""],[15189,0,"CRDT de"],[15189,0,"the definition of a "],[15214,2,""],[15214,0,"only allows events to be converted to a CRDT mesag"],[15263,1,""],[15262,1,""],[15262,0,"sage if the event "],[15279,1,""],[15279,0,"'s version matches the version of the CRDT."],[15214,12,""],[15214,0,"requires that the "],[15237,48,""],[15232,0,"document the event was generated on "],[15232,0,"version of the "],[15255,0," that"],[15145,0,"\n"],[15145,0,"\nWhenever an event is generated "],[15146,31,""],[15146,0,"h"],[15146,1,""],[15146,0,"When a CRDT "],[15146,12,""],[15146,0,"When a CRDT"],[15145,0,"\n"],[15145,0,"\nCRDTs like Fugue always have an implicit *version"],[15187,8,""],[15169,0," exist at some"],[15183,18,""],[15183,0," _"],[15184,1,""],[15184,0,"_version_. This version is usually implicit"],[15194,0," "],[15194,1,""],[15194,0," Remember,"],[15195,9,""],[15195,0,"Usu"],[15197,1,""],[15196,1,""],[15195,1,""],[15194,1,""],[15194,0," This version is defined by the set of events seen by the replica when the "],[15260,9,""],[15259,1,""],[15232,0," all"],[15263,33,""],[15263,0,"."],[15248,0," (directly or inde"],[15265,1,""],[15265,0,"irectly)"],[15289,0,"\n\n"],[15290,1,""],[15289,1,""],[15289,0," When an event happens "],[15295,17,""],[15295,0,"a user generates an event, the event is generated in the context of the local replica's state. For example, if the user inserts a character in a text document, the character's position is relative to the document at the version visible on the user's "],[15531,3,""],[15531,0,"in "],[15545,0,"editor.\n\nThe geen"],[15561,1,""],[15560,1,""],[15560,0,"nerator "],[15558,0,"prepare "],[15565,1,""],[15565,0,"-update ("],[15584,0,")"],[15584,1,""],[15583,1,""],[15583,0,") function in the CRDT requires that the "],[15554,70,""],[15554,0,"The prepare-update (generator) function in the CRDT requires that the"],[15552,0," This version isu"],[15568,1,""],[15568,0," usually implicit"],[15568,17,""],[15568,0," often implicit,"],[15583,1,""],[15583,0,"."],[15575,9,""],[15575,0,"implied but not modelled explicitly."],[15682,0," event's "],[15683,8,""],[15683,0,"version of the document into "],[15682,30,""],[15682,0," version of the document "],[15613,94,""],[15613,0,"The prepare-update (generator) function in the CRDT requires that the version of the document"],[15244,5,""],[15244,0,"observed "],[15393,1,""],[15393,0,"\n\n"],[15394,1,""],[15393,1,""],[15393,0," "],[15495,0,"_"],[15487,0,"_"],[15496,1,""],[15487,1,""],[15498,0," other characters in the"],[15522,4,""],[15575,0,"_"],[15532,0,"_"],[15576,1,""],[15532,1,""],[15576,1,""],[15576,0,"\n\n"],[15578,59,""],[15577,1,""],[15577,0,"\nThis version is often implied but not modelled explicitly.\n"],[15578,0,"// "],[15683,4,""],[15683,0," a"],[15683,2,""],[15683,0," the"],[15644,0," CRDT's"],[15687,54,""],[15687,0," requires that the CRDT's version matches the"],[15721,0,"exactly "],[15740,0," document version"],[15749,0,"'s"],[15759,0," immediately preceeding the "],[15772,15,""],[15772,0,"before the event took place."],[15119,0,"which "],[15134,1,""],[15133,1,""],[15132,1,""],[15132,0,"ing"],[15124,1,""],[15119,5,""],[15144,0,"\n\nThis event"],[15151,5,""],[15151,0,"data structure is "],[15166,3,""],[15166,0,"different"],[15174,1,""],[15173,1,""],[15173,0,"s "],[15174,1,""],[15173,1,""],[15172,1,""],[15172,0,"s from fugue in that it "],[15146,50,""],[15145,1,""],[15144,1,""],[15144,0," However, the state "],[15158,6,""],[15158,0,"data structure has been modifie"],[15145,44,""],[15144,1,""],[15119,10,""],[15119,0,"modelled after"],[15141,0," internal"],[15157,0," Events are added to the eve"],[15182,3,""],[15182,0,"fugue tree by running fugue's _pre-"],[15216,1,""],[15216,0,"pare-update_ and _eff"],[15236,1,""],[15235,1,""],[15234,1,""],[15234,0,"apply-update_ functions back to back, adding events into the data set"],[15300,3,""],[15300,0,"structure.\n\nHowever, "],[15312,9,""],[15312,0,"Unfro"],[15316,1,""],[15315,1,""],[15315,0,"ortunately, the algorithm cannot"],[15312,35,""],[15157,0," Each"],[15158,4,""],[15157,1,""],[15174,0," in turn"],[15169,5,""],[15169,0,"incrementally added"],[15188,8,""],[15284,0,"."],[15285,40,""],[15285,0,"\n\nHowever, this approach is "],[15287,28,""],[15158,0,"The data structure allows "],[15184,1,""],[15184,0,"e"],[15190,0," to be"],[15196,4,""],[15220,3,""],[15219,1,""],[15225,0,"'s"],[15297,14,""],[15297,0,".\n\nHowever, before each"],[15308,12,""],[15308,0," its not quite that simple. The "],[15300,8,""],[15300,0,"Unfortunately,"],[15342,6,""],[15341,1,""],[15341,0," Before we apply "],[15352,6,""],[15342,10,""],[15342,0,"In order to run _parep"],[15358,6,""],[15358,0,"_prepare_update_"],[15366,1,""],[1885,1,""],[15365,0,"-"],[1885,0,"-"],[15374,0,", the data structure is modified to have "],[15300,115,""],[15300,0,"Unfortunately, its not quite that simple. In order to run _prepare-update_, the data structure is modified to have"],[15299,0,"\n"],[15299,0,"\nThe "],[15303,1,""],[15302,1,""],[15301,1,""],[15300,1,""],[15299,1,""],[15298,1,""],[15342,72,""],[15342,0,"The pr"],[15347,1,""],[15346,1,""],[15346,0,"_prepare_"],[15354,1,""],[15354,0,"-update_ function in CRDTs like Fugue depend on the events' parent version matching the CRDT's version."],[15341,1,""],[15341,0,"\n\n\n"],[15891,0,"\n"],[15460,1,""],[15890,0,"\nThe _prepare-update_ function in CRDTs like Fugue depend on the events' parent version matching the CRDT's version."],[15344,116,""],[15774,0,"\n"],[15343,1,""],[15380,0," (usu"],[15384,1,""],[15383,1,""],[15382,1,""],[15381,1,""],[15380,1,""],[15380,0," (usually implicit)"],[15435,2,""],[15435,0,"as"],[15435,2,""],[15435,0,"by"],[15460,8,""],[15460,0,"added"],[15491,2,""],[15491,0,"to"],[15505,0,"'s state"],[15460,5,""],[15460,0,"observed"],[15494,2,""],[15494,0,"in"],[15591,25,""],[15591,0,"s"],[15591,1,""],[15591,0,"this state"],[15616,12,""],[15616,0,"imagine a user "],[15637,1,""],[15637,0,"ing"],[15671,0," at position 100"],[15687,1,""],[15687,0,". Position 100 i"],[15702,1,""],[15702,0,"only makes sense"],[15718,28,""],[15736,0," surrounding"],[15779,3,""],[15779,0,"that partc"],[15788,1,""],[15788,0,"icular"],[15802,0,". "],[15803,1,""],[15802,1,""],[15779,23,""],[15779,0,"the version"],[15518,302,""],[15343,175,""],[15343,0,"CRDTs like Fugue always exist at some (usually implicit) _version_. This version is defined by the set of all events observed (directly or indirectly) in the replica's state."],[15342,0,"\n"],[15342,0,"\nWhen a user generates an event, the event is generated in the context of this state. For example, imagine a user inserting a character in a text document at position 100. Position 100 only makes sense relative to other surrounding characters in the document at the version visible in the user's editor."],[15416,10,""],[15416,0,"sopme"],[15420,1,""],[15419,1,""],[15418,1,""],[15418,0,"me document version"],[15439,14,""],[15439,0,"I"],[15598,0,","],[15599,15,""],[15608,0,"at that time "],[15439,0,"This "],[15439,0,"This paragraph is inserted "],[15456,10,""],[15456,0," typed into this document at character position 15343"],[15508,1,""],[15507,1,""],[15507,0,"53. "],[15507,1,""],[15507,0,"4"],[15510,0," However, "],[15456,0," being"],[15479,8,""],[15479,0,"paper"],[15523,0,"\n"],[15343,180,""],[15343,0,"When a user generates an event, the event is generated in the context of some document version. This paragraph is being typed into this paper at character position 15343. However,"],[15523,0,"\n"],[15522,0," p"],[15523,1,""],[15523,0,"this abo"],[15530,1,""],[15529,1,""],[15528,1,""],[15523,5,""],[15523,0,"position 15"],[15533,1,""],[15533,0,"5343"],[15437,0,"_"],[15421,0,"_"],[15439,0," "],[15439,1,""],[15440,0," For example."],[15452,1,""],[15452,0,","],[15453,2,""],[15453,0," t"],[15469,8,""],[15469,0,"was"],[15524,23,""],[15524,0,"I will later edit this "],[15524,23,""],[15524,0,"Before publication, I will edit this"],[15524,36,""],[15524,0,"This paper will go through many edits before publication, and at the time of publication it mayb"],[15619,1,""],[15619,0," be a much earlier or later "],[15620,0,"appear "],[15627,2,""],[15627,0," at"],[15629,1,""],[15628,1,""],[15627,1,""],[15627,0,"at"],[15654,0,"position.\n\nCRDTs like Fugue rely on "],[15682,8,""],[15682,0,"interpret "],[15682,10,""],[15682,0,"rely on the inserted document's version"],[15694,9,""],[15703,1,""],[15702,1,""],[15702,0," into which the user inserted"],[15703,36,""],[15703,0,"that the user is editing to be "],[15731,3,""],[15731,0,"match the CRDT's state at "],[15756,1,""],[15755,1,""],[15754,1,""],[15754,0,"on the local replica. The local replica converts the local position (15343) into some globally usable position identifier. In Fugue's case"],[15885,0,"Max"],[15895,0,", it uses th"],[15897,10,""],[15897,0,"every insert is positioned using a *"],[15932,1,""],[15932,0,"_origni"],[15933,6,""],[15933,0,"leftOrigin_ and _rightOrigin_ ID pair."],[15910,2,""],[15909,1,""],[15909,0,"'s position is converted"],[15933,19,""],[15933,0," into a"],[15119,14,""],[15119,0,"which is "],[15119,9,""],[15119,0,"based on"],[15118,9,""],[15118,0," which re"],[15119,8,""],[15104,15,""],[15104,0,"instance of"],[15138,0,", with a couple small modifications th"],[15175,1,""],[15174,1,""],[15173,1,""],[15371,19,""],[15371,0," modifies a document"],[15393,0,"an"],[15395,3,""],[15433,4,""],[15433,0,"the editie"],[15442,1,""],[15441,1,""],[15441,0,"ed "],[15443,1,""],[15443,0," document's"],[15456,9,""],[15479,0,"when "],[15508,0,", the"],[15512,1,""],[15511,1,""],[15510,1,""],[15510,0,"it was typed at"],[15525,19,""],[15567,0," probably"],[15479,0,"at the moment "],[15523,0," th"],[15525,1,""],[15524,1,""],[15524,16,""],[15524,0,"the starting"],[15524,12,""],[15524,0,"its starting"],[15555,0," was"],[15632,1,""],[15632,0,". A"],[15635,6,""],[15667,7,""],[15667,0," end up"],[15710,0," inm the d"],[15711,9,""],[15711,0,"in the document"],[15728,0,"\n"],[15728,0,"\nCRDTs like fugue u"],[15746,1,""],[15746,0,"convert the local editing position (15343) into a "],[15795,1,""],[15794,1,""],[15794,0,"some s"],[15799,1,""],[15799,0,"globally in"],[15809,1,""],[15808,1,""],[15808,0,"understab"],[15816,1,""],[15816,0,"ndable ID"],[15823,2,""],[15823,0,"identifier that can be "],[15839,7,""],[15839,0,"unio"],[15842,1,""],[15842,0,"quely itentifies"],[15848,10,""],[15848,0,"identifies the "],[15859,4,""],[15859,0,"an insert position"],[15838,0," eo"],[15840,1,""],[15839,1,""],[15839,0,"doesn't "],[15847,39,""],[15839,8,""],[15839,0,"wil l "],[15844,1,""],[15843,1,""],[15842,1,""],[15842,0,"l keep its relative "],[15853,9,""],[15853,0,"position relative to other"],[15853,9,""],[15861,0,"_"],[15853,0,"_"],[15863,0," document positions even if other "],[15897,9,""],[15897,0,"concuren"],[15904,1,""],[15903,1,""],[15903,0,"rent changes have been applied at "],[15936,1,""],[15935,1,""],[15934,1,""],[15934,0,"when merging happens."],[15729,0,"The _prep"],[15733,5,""],[15733,0,"_prepare-update_ function in a "],[15768,1,""],[15787,0,"s"],[15762,12,""],[15767,0," (and similar CRDTS)"],[15786,1,""],[15785,1,""],[15785,0,"s)"],[15830,0," in our case"],[16010,0," Fugue uses"],[16017,4,""],[16017,0,"gives every inserted character a globally unique ID, and converts insert positions in to"],[16104,1,""],[16103,1,""],[16102,1,""],[16102,0,"to the pair of (_origin"],[16118,7,""],[16118,0,"_leftOrigin_ and _ri"],[16135,3,""],[16135,0,"_rightOrigin_"],[16117,1,""],[16147,0," - co"],[16151,1,""],[16150,1,""],[16150,0,"which are the IDs of the items immeda"],[16181,6,""],[16181,0,"immediately to the left and right of the "],[16215,7,""],[16215,0,"ea"],[16216,1,""],[16215,1,""],[16215,0,"of each inserted character when the character was inserted."],[15988,21,""],[15943,2,""],[15943,0,"after"],[15999,0,"does this by "],[16016,1,""],[16015,1,""],[16015,0,"ing"],[15999,5,""],[15999,0,"achieves "],[16016,6,""],[16016,0,"assigning"],[16053,9,""],[16062,1,""],[16062,0,". Position"],[16064,8,""],[16064,0,"Insert positions are"],[16084,39,""],[16084,0," converted into the"],[16085,26,""],[16085,0,"re"],[16086,1,""],[16085,1,""],[16085,0,"rewritten into the pair of IDs of the "],[16100,23,""],[16099,1,""],[16201,4,""],[16201,0,"the"],[16223,33,""],[16223,0,"."],[16205,0,"newly "],[16220,9,""],[16220,0,"copt"],[16223,1,""],[16222,1,""],[16222,0,"ntent"],[16228,0,"\n\nThis proces "],[16241,1,""],[16241,0,"s depends on the local CRDT"],[16230,0,"When a "],[16236,1,""],[16236,0," local edit happens, "],[16230,0," "],[16230,0,"In order for _pre"],[16243,4,""],[16243,0,"_prepare-update_ to work correctly,"],[16278,2,""],[16278,0," w"],[16304,40,""],[16304,0," the local replica's CRDT state's version must match the "],[16230,131,""],[16230,0,"In order for _prepare-update_ to work correctly, when a local edit happens the local replica's CRDT state's version must match the"],[15359,0,"\n"],[15359,0,"\n== Documn"],[15368,1,""],[15368,0,"ent versions"],[15358,0," Before each event "],[15359,18,""],[15358,1,""],[15173,0," - explained below"],[15376,0," Bef"],[15335,45,""],[15335,0,"?B"],[15336,1,""],[15335,1,""],[15335,0,"Before prepare-update_"],[15342,0,"_"],[15358,0," runs, the system modifies the local state to "],[15335,0,"\n"],[15336,69,""],[15336,0,"Before _prepare-update_ runs, the system modifies the local state to"],[15335,0,"\n"],[15335,0,"The data structure "],[15335,19,""],[15335,0,"The data structure isn't "],[15335,4,""],[15335,0,"Eg-walker's "],[15368,0,"exac"],[15362,10,""],[15362,0,"has one additional feature missing in fugueMax"],[15400,1,""],[15400,0,"F"],[15408,0,". It supports an e"],[15410,16,""],[15410,0,"Ever "],[15414,1,""],[15414,0,"y item contains a "],[15431,1,""],[15431,0,"n extra state variable, "],[15410,0," "],[15410,1,""],[15409,0," The data structure "],[15335,140,""],[15335,0,"Eg-walker's data structure has one additional feature missing in FugueMax. The data structure  Every item contains an extra state variable,"],[15476,0,"// "],[15335,0,"// "],[15607,2,""],[15607,0,"the"],[15605,0," via some event"],[15610,10,""],[15610,0,"editing event,"],[15624,1,""],[15635,19,""],[15635,0,"only makes sense"],[15635,16,""],[15635,0,"is only well "],[15638,10,""],[15638,0,"specified in the"],[15712,14,""],[15712,0,"at the moment "],[15780,8,""],[15780,0,"was inserted"],[15792,4,""],[15792,0," at position"],[15810,0," in the documnet"],[15825,1,""],[15824,1,""],[15823,1,""],[15823,0,"ment"],[15826,1,""],[15825,1,""],[15824,1,""],[15823,1,""],[15823,0,"ent"],[15921,0,", 15343 will probably be "],[15946,67,""],[15946,0,"a very different"],[15952,10,""],[15952,0," different place in the document."],[15943,4,""],[15943,0,"correspond to a"],[15996,0," (Or perhaps, it will be e"],[16021,1,""],[16021,0,"pas"],[16021,3,""],[16021,0,"past the end of the document - and thus u"],[16061,1,""],[16061,0,"invalid)."],[16001,8,""],[16000,1,""],[16000,0," it might even be"],[16017,11,""],[15998,4,""],[15998,0,"I"],[16063,1,""],[16062,0,"."],[16186,4,""],[16186,0,"a"],[16228,5,""],[16232,0,"s"],[16414,0," then"],[16430,0,"- lk"],[16433,1,""],[16433,0,"ike YATA and Yjs - "],[16457,0,"a "],[16489,0," pair. These are the"],[16509,16,""],[16590,1,""],[16590,0," at the point of "],[16598,9,""],[16598,0,"moment of that inser't"],[16619,1,""],[16618,1,""],[16618,0,"t's creation."],[16605,3,""],[16617,1,""],[16616,1,""],[16616,0," happens"],[16624,10,""],[16624,0,".\n\nEg-walker needs to "],[16627,19,""],[16626,1,""],[16625,1,""],[16624,1,""],[16624,0,".\n\nWe can consud"],[16639,1,""],[16638,1,""],[16638,0,"ider each document state "],[16643,20,""],[16643,0,"the document to have an associated version ("],[16686,1,""],[16685,1,""],[16685,0,", and the CRDT state"],[16627,78,""],[16626,1,""],[16626,0,"\nThe"],[16629,1,""],[16628,1,""],[16627,1,""],[16627,0,"Both the document "],[16632,13,""],[16631,1,""],[16630,1,""],[16629,1,""],[16628,1,""],[16627,1,""],[16627,0,"The document (the actual text "],[16656,1,""],[16656,0,") and the C"],[16666,1,""],[16666,0,"local replica's CRDT each have an (implicit "],[16709,1,""],[16709,0,") version"],[16700,18,""],[16692,8,""],[16692,0,"exia"],[16695,1,""],[16695,0,"st at some version "],[16713,1,""],[16713,0," through time. When an edit happens, the document and loc"],[16750,20,""],[16750,0,"the events' parent version is the document's version right before the event happened. Thi"],[16838,1,""],[16837,1,""],[16836,1,""],[16836,0,"F"],[16836,1,""],[16836,0,"The p"],[16840,1,""],[16840,0,"_"],[16840,1,""],[16840,0,"_prep"],[16840,5,""],[16840,0,"_prepare-update_ function has a pred"],[16875,1,""],[16866,9,""],[16866,0,"requires that the events' parent version matches the CRDT's"],[16907,18,""],[16907,0,"exactly matches the R"],[16927,1,""],[16927,0,"CRDT's version."],[16627,0,"// "],[16626,0,"\n"],[16626,0,"\nDo you see the problem?\n\nIn order for eg-walker to appl"],[16678,4,""],[16678,0,"run _prep"],[16682,5,""],[16682,0,"_prepare-update_ n"],[16699,1,""],[16699,0,"on each event in the event graph, it must correctly translate the dic"],[16767,1,""],[16766,1,""],[16766,0,"ocument position"],[16765,17,""],[16765,0,"position (specified in absolute terms - eg 15343) into the corresponding _lef"],[16838,4,""],[16838,0,"_leftOrigin_ and _righ"],[16855,5,""],[16855,0,"_rightOrigin_ ID pair based on the "],[16682,0,"correctly run "],[16695,0," Fugue M"],[16702,1,""],[16701,1,""],[16701,0,"Max's"],[16724,0,"function "],[16775,0,"be able to "],[16935,0,"items to the left and right"],[16809,0," event's"],[16930,40,""],[16929,1,""],[16929,0,", "],[16930,1,""],[16929,1,""],[16929,0,":\n\n- "],[16933,1,""],[16932,1,""],[16931,1,""],[16930,1,""],[16929,1,""],[16929,0,", at the event's parent version.\n\nTo do this, "],[16963,0,"// "],[16963,15,""],[16963,0,"// To do this,"],[16962,0,"\n"],[16962,0,"\nThe _apl"],[16970,1,""],[16970,0,"ply_upda"],[16973,1,""],[16973,0,"-"],[16974,1,""],[16974,0,"u"],[16978,0,"te_ funiction "],[16982,10,""],[16982,0,"function also emits"],[15333,0," The system then outputs the final "],[15362,6,""],[15362,0,"transformed "],[15332,1,""],[15332,0," and"],[15336,41,""],[15336,0," for each event, "],[15332,0,". Each event is transformed"],[15359,21,""],[15359,0," "],[15334,26,""],[15334,0,"The "],[15337,1,""],[15334,3,""],[15334,0,"Each event is transformed "],[15345,15,""],[15344,1,""],[15344,0,", af"],[15347,1,""],[15346,1,""],[15345,1,""],[15334,11,""],[15334,0,"As each event is processed, the system emits the _final_ position for that event. "],[15415,1,""],[15415,0," This a"],[15421,1,""],[15421,0,"s"],[15421,1,""],[15421,0,"allows th"],[15429,1,""],[15428,1,""],[15390,0," "],[15390,1,""],[15416,12,""],[15415,1,""],[15414,1,""],[15414,0,", which in"],[15423,1,""],[15422,1,""],[15422,0,"allows"],[15333,1,""],[15333,0,"\n\n"],[15423,6,""],[15423,0,"forms the basis of the "],[15442,4,""],[15442,0,"the transform fucntion"],[15456,8,""],[15456,0,"function."],[15417,6,""],[15421,1,""],[15421,0,"ing"],[15334,0,"\n\n"],[15335,0,"The "],[15335,4,""],[15335,0,"The _apply-update_ function in FugueMax can be trivially modified to emit"],[15404,4,""],[15404,0,"output the transform"],[15415,9,""],[15415,0,"resulting position of each inserted or"],[15415,10,""],[15415,0,"transf"],[15415,6,""],[15415,0,"o"],[15415,1,""],[15415,0,"transformed "],[15455,0," deleted item. - And indeed, amny"],[15470,20,""],[15468,0,", as that item is processed"],[15496,127,""],[15496,0," We use this as the basis for implementing thr "],[15542,1,""],[15541,1,""],[15541,0,"e transform function $T$."],[15807,54,""],[15807,0,"Each"],[15817,0," that happens to a document"],[15818,15,""],[15818,0,"in"],[15807,27,""],[15807,0,"Do"],[15808,1,""],[15807,1,""],[15807,0,"The position of each document event is"],[15842,3,""],[15836,6,""],[15827,9,""],[15822,5,""],[15819,3,""],[15810,9,""],[15807,3,""],[15807,0,"Do"],[15807,2,""],[15807,0,"Each event in a document is"],[15818,14,""],[15818,0,"in the eve"],[15818,10,""],[15818,0,"that happens "],[15818,25,""],[15818,0,"is created"],[15807,21,""],[15807,0,"Events are defined"],[15957,0," of this "],[15961,5,""],[15960,1,""],[15958,15,""],[15958,0,"was"],[15964,0," dpcimen"],[15965,7,""],[15965,0,"document"],[15988,16,""],[16205,19,""],[16160,17,""],[16160,0,"Perhaps even p"],[16173,1,""],[16160,0,"U"],[16160,1,""],[16160,0,"Its li"],[16165,1,""],[16164,1,""],[16164,0,"unlikely, but it could "],[16187,8,""],[16191,0," be"],[16223,0," - and thus invalid"],[16446,1,""],[16452,11,""],[16452,0,"in the presence of other"],[16495,18,""],[16519,0," first"],[16610,22,""],[16648,0,"ID "],[16655,0,". - like YATA and Yjs - "],[16678,1,""],[16677,1,""],[16676,1,""],[16676,0,")"],[16657,6,""],[16657,0,"T"],[16657,1,""],[16657,0,"(This approach first appeared"],[16672,14,""],[16672,0,"was pioneered by"],[16701,0,"[]r"],[16703,1,""],[16702,0,"ref"],[16708,1,""],[16708,0," "],[16656,52,""],[16786,0,"  (This approach was pioneered by YATA and Yjs[ref])."],[16788,1,""],[16787,1,""],[16787,0,"("],[16891,4,""],[16979,4,""],[16979,0,"needs to"],[16987,11,""],[17165,38,""],[17165,0,"The _apply-update_ function also emits"],[17165,38,""],[17165,0,"The _apply-update_ function also emits"],[17165,0,"// "],[17164,0,"\n"],[17164,0,"\n\n"],[17165,0,"To achieve this, eg-walker associated "],[17202,1,""],[17201,1,""],[17201,0,"s an additional state ver"],[17225,1,""],[17224,1,""],[17224,0,"ariable teo "],[17235,1,""],[17234,1,""],[17233,1,""],[17233,0,"o each item in th"],[17249,1,""],[17248,1,""],[17248,0,"fugueMax"],[17248,1,""],[17248,0,"F"],[17256,0,"."],[17247,0," the"],[17260,0," tree"],[17191,0," "],[16839,0,"\n"],[16839,0,"\nIts helpful to think of "],[16855,9,""],[16855,0,"model this with 2 versions\n"],[16881,1,""],[16881,0,":\n\n/ Document version: asdf"],[16904,4,""],[16886,9,""],[16886,0,"Event "],[16884,17,""],[16884,0,"/ Event version: The version of the document e"],[16929,1,""],[16929,0,"immediately _"],[16941,1,""],[16941,0,"before the event took place"],[16886,5,""],[16886,0,"P"],[16886,1,""],[16886,0,"Event's parent"],[16977,0,"\n/ CRDT version: The version if"],[17007,1,""],[17006,1,""],[17006,0,"of the CR"],[17013,2,""],[17013,0,"local CRDT's at"],[17027,1,""],[17026,1,""],[17026,0,"state,"],[17031,1,""],[17031,0,"  This version is defined by the set of all events observed (directly or indirectly) in the replica's state."],[17031,0,"."],[17032,1,""],[17116,23,""],[17116,0,"by the replica.\n\n"],[17132,1,""],[17131,1,""],[17132,0,"\n"],[17132,0,"\n_prepare-update_ requires that the"],[17150,17,""],[17150,0,"has an implicit rp"],[17167,1,""],[17166,1,""],[17166,0,"precondition that these two versions match. CRDTs achieve this by  "],[17232,1,""],[17133,99,""],[17133,0,"_prepare-update_ has an implicit precondition that these two versions match. CRDTs achieve this by"],[16495,0," at other locations in the document"],[16537,9,""],[16537,0," implements"],[16556,0,":\n\n-"],[16559,1,""],[16559,0,"1."],[16561,8,""],[16561,0," A"],[16609,1,""],[16608,1,""],[16608,0,"\n2. "],[16612,6,""],[16612,0,"Rewriting insert"],[16608,0,". The s"],[16614,1,""],[16614,0,"start e"],[16620,1,""],[16620,0,"and d"],[16624,1,""],[16624,0,"end of the document use placeholder IDs."],[16668,11,""],[16668,0,"I"],[16688,5,""],[16875,1,""],[16875,0,"\n\n"],[16928,0,"\n\nIn order for fugue _"],[16943,0,"_"],[16944,6,""],[16944,0,"-re"],[16946,1,""],[16945,1,""],[16944,1,""],[16944,0,"prepare-update"],[16959,0," to run, "],[16963,5,""],[16963,0,"correctly convert events (at some absolute offset) into their "],[16930,95,""],[16930,0,"In order for _prepare-update_ to correctly convert events (at some absolute offset) into their"],[16084,0," the paragraph will have drifted "],[16117,32,""],[16121,5,""],[16132,5,""],[16132,0,"location"],[16157,86,""],[16132,8,""],[16132,0,"offset"],[16132,6,""],[16132,0,"posotio"],[16138,1,""],[16137,1,""],[16136,1,""],[16135,1,""],[16135,0,"ition"],[16109,7,""],[16109,0,",opve"],[16113,1,""],[16112,1,""],[16111,1,""],[16110,1,""],[16109,1,""],[16109,0,"moved"],[16155,0," Position 15343 only"],[16171,4,""],[16171,0,"onl"],[16173,1,""],[16172,1,""],[16171,1,""],[16171,0,"only makes sense relative to the document version in which the paragraph was typed."],[16324,3,""],[16324,0,"this"],[16353,0,"position "],[16895,0,"\n\nFugue maintains a tree"],[16903,0,"does this tran"],[16913,4,""],[16913,0,"converstion "],[16913,12,""],[16913,0,"translation by "],[16936,1,""],[16936,0,"ing"],[16946,0," of inserted items, and "],[16964,6,""],[16964,0,". When an insert happens, the "],[16990,4,""],[16990,0,"we do a "],[16990,8,""],[16990,0,"it does a tree "],[17000,5,""],[17000,0,"lookup in the tree to find the items"],[17031,5,""],[17031,0,"ar"],[17032,1,""],[17031,1,""],[17031,0,"surrounding items."],[17030,0," ID of the"],[17112,0,"\n"],[17060,1,""],[17111,0,"\nFugue does this translation by maintaining a tree of inserted items. When an insert happens, it does a lookup in the tree to find the ID of the surrounding items."],[16897,163,""],[16948,0,"\n"],[16896,1,""],[16947,1,""],[16896,0,"\n"],[16948,0,"\n"],[16956,4,""],[16956,0,"implements"],[17118,1,""],[17120,0,"// "],[17118,0," *This tree i"],[17130,1,""],[17130,0,"also exists at some version*."],[17157,1,""],[17157,0,"_"],[17119,1,""],[17119,0,"_"],[17158,1,""],[17158,0,", again, corresponding to the "],[16950,238,""],[16950,0,"Fugue implements this translation by maintaining a tree of inserted items. When an insert happens, it does a lookup in the tree to find the ID of the surrounding items. _This tree also exists at some version_, again, corresponding to the"],[16397,14,""],[16397,0,"well defined "],[16409,1,""],[16401,8,""],[16397,4,""],[16397,0,"understandable"],[16516,18,""],[16515,1,""],[16515,0," which ahve b"],[16522,6,""],[16522,0,"have been merged into"],[16543,3,""],[16556,0,", all"],[16560,1,""],[16559,1,""],[16558,1,""],[16557,1,""],[16556,1,""],[16556,0,", which allows events t"],[16571,8,""],[16571,0,"commutative "],[16556,27,""],[17124,69,""],[17124,0," It is obvious"],[17131,0,"an "],[17141,0," point - but wo"],[17149,7,""],[17149,0," but the tree"],[17158,4,""],[17157,1,""],[17156,1,""],[17155,1,""],[17154,1,""],[17154,0,"fugue's tree must correspond"],[17154,0,"this lookup will "],[17166,5,""],[17166,0,"requires that "],[17192,5,""],[17203,0,"s to the "],[17154,58,""],[17154,0,"this tree changes over time as new items are "],[17189,10,""],[17189,0,"events are ob"],[17189,13,""],[17189,0,"CRDT messages are merged"],[17194,19,""],[17194,0,"events are merge in"],[17212,1,""],[17212,0,"n. The "],[17215,4,""],[17215,0,"We can "],[16956,266,""],[16956,0,"Fugue implements this translation by maintaining a tree of inserted items. When an insert happens, it does a lookup in the tree to find the ID of the surrounding items. It is an obvious point - but this tree changes over time as new CRDT events are merge in. We can"],[15797,0,"and CRDT "],[17219,0,"d"],[17225,6,""],[17224,1,""],[17224,0," The tree "],[17233,1,""],[17233,0,"'s versuion "],[17244,1,""],[17243,1,""],[17242,1,""],[17241,1,""],[17240,1,""],[17240,0,"ion must "],[17225,0,"For _prepare-update_ to function correctly, "],[17269,1,""],[17269,0,"t"],[17293,0,"match the event's"],[17224,1,""],[17224,0,"\n\n"],[17224,0," Just like the document ver"],[17248,3,""],[17247,1,""],[17247,0,", we can consider the CRDT state to also be at some version - also corresponding to the set of observed messages."],[17308,1,""],[17307,1,""],[17306,1,""],[17306,4,""],[17306,0," -"],[17337,18,""],[17337,0,"CRDT events which have been merged in with _apply-update_."],[17465,0,"exactly "],[17490,0," parent version. Tgiu"],[17510,1,""],[17509,1,""],[17508,1,""],[17508,0,"his is trivial to achieve in a CRDT"],[17539,0,"regular "],[17551,0,", because _pare"],[17561,5,""],[17561,0,"_prepare-update_ only happens on the replica"],[17583,8,""],[17583,0,"run "],[17586,0,"s"],[17602,0," hwich "],[17603,6,""],[17603,0,"which generated the event."],[17537,9,""],[17537,0,"u"],[17534,4,""],[17534,0,"using the"],[17548,0," directly"],[17549,8,""],[17548,1,""],[17540,4,""],[17540,0,"a "],[17542,4,""],[17541,1,""],[17540,1,""],[17540,0,"the CRDT as designed"],[17638,0," Usually, prep"],[17648,4,""],[17648,0,"_prepare-update_ runs syn"],[17665,0,"ku"],[17666,1,""],[17665,1,""],[17665,0,"just "],[17678,0,"cronously with "],[17688,5,""],[17688,0,"in the editor's process."],[17638,10,""],[17638,0," "],[17655,0," can simply be"],[17669,5,""],[17673,1,""],[17687,2,""],[17687,0,"within"],[17678,0,"h"],[17716,0,"\n\nGo"],[17719,1,""],[17718,1,""],[17718,0,"Howeve, "],[17725,1,""],[17724,1,""],[17724,0,"r, in a repla"],[17730,7,""],[17730,0,"the replayable event graph p"],[17757,1,""],[17757,0,"based system, this "],[17771,5,""],[17771,0,"-_"],[17772,1,""],[17771,1,""],[17771,0,"_prepare"],[17771,8,""],[17771,0,"_prepare-update_ runs on all replicating peers. I"],[17819,1,""],[17818,1,""],[17818,0," It must\n"],[17826,1,""],[17826,0,":"],[17826,1,""],[17826,0," output the same"],[17826,16,""],[17826,0," convert the "],[17835,4,""],[17835,0,"each "],[17819,21,""],[17819,0,"Events must be converted "],[17819,25,""],[17718,101,""],[17718,0,"However, in the replayable event graph based system, _prepare-update_ runs on all replicating peers."],[15906,0,"precise "],[15978,0," indrtyr"],[15979,7,""],[15975,4,""],[15975,0,"was"],[15982,9,""],[15996,0," in the document"],[16128,0,"almost certainly "],[16212,4,""],[16212,0,"is only meanig"],[16225,1,""],[16225,0,"ngful"],[16230,12,""],[16231,15,""],[16231,0,"in relation to the"],[16195,0,", and Position 15343"],[16201,1,""],[16201,0,"p"],[16215,0," will refer to a different "],[16221,21,""],[16221,0,"point somewhere else"],[16243,0,"Inserting this paragraph at "],[16271,1,""],[16271,0,"p"],[16294,0,"a "],[16306,0,"a"],[16306,1,""],[16306,0," action"],[16295,1,""],[16294,1,""],[16304,7,""],[17248,2,""],[17248,0,"may seem like"],[17294,0," alos"],[17298,1,""],[17297,1,""],[17297,0,"so"],[17350,0," to the document"],[17425,16,""],[17425,0," have a"],[17440,0,". This version"],[17442,12,""],[17441,1,""],[17440,1,""],[17440,2,""],[17506,5,""],[17506,0," via"],[17576,4,""],[17576,0,"CRDT state"],[17586,2,""],[17642,37,""],[17646,0,"s normally achieve this quite simply"],[17682,21,""],[17682,0," by run"],[17670,19,""],[17670,0,"t"],[17670,1,""],[17670,0,"in a trivial way."],[17686,1,""],[17686,0," -"],[17656,32,""],[17656,0," find this property very simple to achieve, ec"],[17701,1,""],[17700,1,""],[17700,0,"because"],[17775,1,""],[17775,0,", usa"],[17779,1,""],[17779,0,"ually"],[17784,35,""],[17929,0," They must all produce"],[17930,21,""],[17930,0,"Th"],[17931,1,""],[17930,1,""],[17930,0,"All peers must translate the same event into the same (_leftOrigin_ and _rightOrigin_"],[17998,3,""],[17997,1,""],[17997,0,","],[18012,0,") pair as FugueMax."],[17929,4,""],[17929,0," For correctness, we require taht"],[17961,1,""],[17960,1,""],[17959,1,""],[17959,0,"hat"],[17968,5,""],[18055,0," "],[18055,1,""],[18054,1,""],[18054,0,", even if the CRDT"],[18054,1,""],[18054,0,". We need to do this"],[18087,4,""],[18087,0,"liocal "],[18093,1,""],[18092,1,""],[18091,1,""],[18090,1,""],[18089,1,""],[18088,1,""],[18088,0,"ocal CRDT state"],[18067,0,"somehow "],[18111,0," exists at a different version.\n\n== CRDT version"],[18147,12,""],[18147,0,"Eg-walker Versions\n\n"],[18100,5,""],[18106,0," currently"],[18139,0,"do"],[18140,1,""],[18139,1,""],[18146,0," that"],[18150,1,""],[18150,0,"n the event's parents"],[18197,0,"Recall that the version f"],[18221,1,""],[18213,0,"document "],[18230,0,"is defined by a set of ob"],[18244,2,""],[18244,0,"the "],[18257,0,"served events at some point in time. We can "],[18230,0,"#V"],[18231,1,""],[18230,1,""],[18230,0,"$V$ "],[18259,9,""],[18265,0," which were in $G$"],[18307,7,""],[18306,1,""],[7138,0,"\n\nJust like we can "],[7140,17,""],[7140,0,"We "],[7140,3,""],[7140,0,"Just like we define the _happ"],[7164,5,""],[7164,0,"_happened-before_ relation for events, "],[7191,0,"#"],[7191,1,""],[7191,0,"$->$ "],[7208,0,"we can also define the _happened-before_ relationship for versions. Version $V_a$ h"],[7290,1,""],[7289,1,""],[7288,0," -> V_b"],[7296,0," iff the corresopnding "],[7305,14,""],[7305,0,"corresponding graph $G_b = ceil(V_b)#"],[7341,1,""],[7341,0,"$ contains "],[7343,9,""],[7343,0,"i"],[7343,1,""],[7343,0,"contains "],[7275,8,""],[7275,0," Consider the graphs $$"],[7297,0,"G_a_ "],[7301,1,""],[7300,1,""],[7300,0," and G_b"],[7309,0," with corresponding versions "],[7337,1,""],[7338,0,"$V_a -> V_b$"],[7300,5,""],[7300,0,"#"],[7300,1,""],[7300,0,"$$"],[7301,0," and "],[7347,1,""],[7346,1,""],[7345,1,""],[7344,1,""],[7344,0,"$$ "],[7346,1,""],[7345,0," and "],[7355,0,". "],[7344,0," = floor(G-"],[7354,1,""],[7354,0,"_a)"],[7367,0," = floor(G_a)"],[7378,1,""],[7378,0,"b"],[7140,311,""],[7140,0,"Just like we define the _happened-before_ relation $->$ for events, we can also define the _happened-before_ relationship for versions. Consider the graphs $G_a$ and $G_b$ with corresponding versions $V_a = floor(G_a)$ and $V_b = floor(G_b)$. $V_a -> V_b$ iff the corresponding graph $G_b = ceil(V_b)$ contains"],[7140,312,""],[5835,0,"\n"],[5835,0,"\nJust like we define the _happened-before_ relation $->$ for events, we can also define the _happened-before_ relationship for versions. Consider the graphs $G_a$ and $G_b$ with corresponding versions $V_a = floor(G_a)$ and $V_b = floor(G_b)$. $V_a -> V_b$ iff the corresponding graph $G_b = ceil(V_b)$ contains\n\n"],[6147,1,""],[6146,1,""],[5961,9,""],[5961,0," the event graph itself"],[6021,70,""],[6022,0," Grpah"],[6027,1,""],[6026,1,""],[6025,1,""],[6025,0,"aph"],[6030,1,""],[6030,0,"G"],[6037,1,""],[6037,0,"G"],[6046,50,""],[6046,0,"$G_b_"],[6050,1,""],[6050,0,"$ is "],[6054,1,""],[6053,1,""],[6052,1,""],[6052,0,"is a strict superset of "],[6053,23,""],[6052,1,""],[6052,0,"contains "],[6052,9,""],[6052,0,"is a strict superset of G_a. Ie, "],[6079,0,"$"],[6076,0,"$"],[6087,0,"$G_a -> G_b$"],[6098,0," := $G_a -> G_b$"],[6108,1,""],[6107,1,""],[6107,0,"super"],[6107,5,""],[6107,0,"set.sup"],[6113,1,""],[6112,1,""],[6111,1,""],[6110,1,""],[6109,1,""],[6108,1,""],[6107,1,""],[6106,1,""],[6106,0," sup"],[6109,1,""],[6108,1,""],[6113,1,""],[6108,0,"up"],[6107,3,""],[5836,0,"// "],[5836,3,""],[6102,1,""],[6106,0,"sup"],[6106,3,""],[6106,0,"supset.st"],[6114,1,""],[6113,1,""],[6112,1,""],[6117,0,". Liek"],[6122,1,""],[6121,1,""],[6121,0,"kewise, $G_a -> G_b$"],[6133,4,""],[6133,0,"$$"],[6134,0," and "],[6144,0," are concurrent if $G_a -> G_b$"],[6169,1,""],[6168,1,""],[6168,0,"sup"],[6168,3,""],[6168,0,"supset.not"],[6182,0," and G_a supset.not G_b"],[6189,1,""],[6189,0,"b"],[6204,1,""],[6204,0,"a"],[6162,0,"f"],[5655,1,""],[5701,1,""],[5701,0,")"],[5686,0,"("],[5681,0,")"],[5666,0,"("],[5661,0,")"],[5655,0,"("],[5656,6,""],[5656,0,")"],[5656,1,""],[5656,0,"a != b"],[6211,0,"."],[18076,1,""],[18218,3,""],[18218,0,"a"],[18277,1,""],[18277,0," "],[18274,4,""],[18274,0,"mus"],[18274,3,""],[18274,0,"must be run"],[18332,0,"also "],[18350,0,"all"],[18352,1,""],[18351,1,""],[18351,0,"ll "],[18445,0," o"],[18446,1,""],[18446,0,"s"],[18446,1,""],[18446,0,"would have done"],[18473,8,""],[18595,0,"\n"],[18595,0,"\nThe eve"],[18602,1,""],[18601,1,""],[18600,1,""],[18600,0,"eg-"],[18596,7,""],[18595,1,""],[18594,1,""],[18612,20,""],[18612,0,"a version"],[18608,4,""],[18640,0,"$G$ of known "],[18653,3,""],[18659,41,""],[18659,0," which were in $G$ at some point in time."],[18659,18,""],[18682,0," The CE"],[18688,1,""],[18687,1,""],[18686,1,""],[18683,3,""],[18683,0,"Fugue's state defines a single version "],[18697,0,"always exists at some "],[18719,17,""],[18727,0,"in time, corresponding to the set of events which have been apl"],[18789,1,""],[18789,0,"plied."],[15552,1,""],[15551,1,""],[15551,0," which are"],[15578,1,""],[15578,0,"\n\n"],[15579,0,"\n"],[15579,0,"\nThe "],[15580,4,""],[15580,0,"CRD"],[15580,3,""],[15580,0,"Fugue"],[15580,5,""],[15580,0,"A CRDT's state usually exa"],[15605,1,""],[15605,0,"ists at some (p"],[15619,1,""],[15618,1,""],[15618,0,"version - implicitly "],[15617,22,""],[15617,0," implicit or explicit version_"],[15639,0,"_"],[15648,0,", "],[15649,1,""],[15648,1,""],[15648,0,", corresponding to the set of all observed "],[15682,9,""],[15682,0,"merged events. Fugue is no different - "],[15720,1,""],[15719,1,""],[15718,1,""],[15718,0,". The set of versi"],[15731,5,""],[15731,0,"events"],[15731,0,"merged "],[15595,8,""],[15659,3,""],[15659,0,"a"],[15659,1,""],[15659,0,"the"],[15656,0,"in "],[15658,1,""],[15657,1,""],[15656,1,""],[15669,4,""],[15683,0,", and their transitive parents"],[15670,6,""],[15670,0,"all observed"],[15768,0," is "],[15727,16,""],[15727,0,"works the same way. We can recover the version by looking at"],[15747,40,""],[15746,30,""],[15746,0,"\n\nEg-walker "],[15748,10,""],[15748,0,"Eg-walker"],[15746,0," This version is used in 2 different ways:\n\n1. When "],[15790,2,""],[15790,0,"+"],[15792,5,""],[15792,0,"The _prepare-update_ function converts insert or delete positions to "],[15838,2,""],[15838,0,"and"],[15790,72,""],[15790,0,"+ The _prepare-update_ function converts insert and delete positions to _leftOrigin_ and _rightOrigin_ ID pair"],[15861,0," a"],[15902,0,"."],[15792,3,""],[15792,0,"Fugue's"],[15906,1,""],[15906,0,", based on the "],[15792,0,"When an event happens, "],[15886,2,""],[15886,0,"i"],[15886,1,""],[15865,21,""],[15864,1,""],[15864,0," positions into"],[15935,0,"items "],[15813,0," "],[15813,1,""],[15800,13,""],[15800,0,"insert event happens at position index $i4"],[15841,1,""],[15841,0,"$"],[15824,9,""],[15799,7,""],[15871,6,""],[15871,0,"the position"],[15883,77,""],[15883,0," into int"],[15891,1,""],[15890,1,""],[15889,1,""],[15888,1,""],[15888,0," I"],[15889,1,""],[15889,0,"IDs. Deletes are "],[15894,12,""],[15862,32,""],[15862,0,"in t"],[15865,1,""],[15864,1,""],[15864,0,"terprets the position with respect to ti"],[15903,1,""],[15902,1,""],[15902,0,"its version."],[15579,0,"\n"],[15579,0,"\nFor each event, we "],[15596,3,""],[15596,0,"eg-walked"],[15604,1,""],[15604,0,"r does the following 3 steps:\n\n1. "],[15637,1,""],[15636,1,""],[15635,1,""],[15635,0,"+ P"],[15637,1,""],[15637,0,"Set stat "],[15645,1,""],[15645,0,"e version"],[15637,17,""],[15637,0,"Move the input version "],[15635,25,""],[15635,0,"+ Move the input version"],[15594,0," ("],[15595,1,""],[15595,0,"with "],[15595,5,""],[15595,0,"with parents $$"],[15606,1,""],[15606,0," version"],[15595,0,"$i$ "],[15595,26,""],[15595,0,"()"],[15595,0,"$"],[15598,0,"$"],[15597,0,"i, e_i, V_"],[15606,1,""],[15605,1,""],[15605,0,"P-"],[15606,1,""],[15606,0,"_i"],[15662,0,"state's "],[15683,0," to $$"],[15688,0,"P_i"],[15692,0," (more i"],[15699,1,""],[15699,0,"on this below)\n+ Convert E_"],[15725,1,""],[15724,1,""],[15723,1,""],[15716,7,""],[15716,0,"Generate the corresponding CRDT message $$"],[15757,0,"m = "],[15756,6,""],[15756,0,"su"],[15757,1,""],[15756,1,""],[15756,0,"using FugueW"],[15767,1,""],[15767,0,"Max's _prepare-update_ function\n+ Apply the CRDT message to the "],[15799,32,""],[15799,0,"+ Apply the CRDT message to the"],[15578,0,"\n\n"],[15579,1,""],[15578,1,""],[15832,109,""],[15579,0,"\n"],[15579,0,"\nA CRDT's state exists at some implicit or explicit _version_, corresponding to the set of all observed events"],[15580,0,"Recla"],[15584,1,""],[15583,1,""],[15583,0,"all that "],[15592,1,""],[15592,0,"a"],[15580,13,""],[15580,0,"A"],[15689,0,". eg_walk"],[15697,1,""],[15696,1,""],[15695,1,""],[15694,1,""],[15693,1,""],[15693,0,"-walker "],[15691,0,"Instead of having a single version, the "],[15741,0,"data structure exists at 2 versions simulten"],[15784,1,""],[15783,1,""],[15783,0,"ano"],[15785,1,""],[15785,0,"eously: An *"],[15796,1,""],[15796,0,"_input version_ and _output version_."],[15925,0,"_"],[15939,0,"_"],[15833,0," These versions w"],[15849,1,""],[15849,0,"are explained below."],[15985,21,""],[15988,56,""],[15988,0,"Pass $$"],[15994,0,"e_i"],[15998,0," through the CRDT's"],[16046,29,""],[16046,0,"Apply the "],[16044,12,""],[16044,0,"+ Apply the"],[15988,4,""],[15988,0,"Cov"],[15990,1,""],[15990,0,"nvert"],[16001,0," to the corresponding CRDT message by passing it"],[16106,0," CRDT message"],[15932,1,""],[15932,0,"2"],[15995,0," and apply"],[16012,117,""],[16012,0," "],[16012,1,""],[16012,0,"to the int"],[16021,1,""],[16020,1,""],[16019,1,""],[16018,1,""],[16018,0," state."],[16019,0,"internal "],[16034,0,"  $e_i$"],[16035,1,""],[16040,0," is first converted "],[16033,27,""],[16033,0,", running fugue"],[16043,5,""],[16043,0,"FugueMax's "],[15986,68,""],[15986,0,"+ Convert and apply $e_i$ to the internal state, running FugueMax's _prepare-update_ and _prepare-update_"],[16076,7,""],[16076,0,"apply"],[16089,0," methods. The _input version_ and _output version_ are both mo"],[16150,1,""],[16149,1,""],[16149,0,"modified by "],[15986,175,""],[15986,0,"+ Convert and apply $e_i$ to the internal state, running FugueMax's _prepare-update_ and _apply-update_ methods. The _input version_ and _output version_ are both modified by"],[15980,0,"the event's parent version "],[16012,0,"."],[16125,0," in sequence"],[16200,0," the event.\n\n"],[16212,1,""],[16211,1,""],[16212,0,"\n"],[16212,0,"\nThe "],[16213,4,""],[16213,0,"The"],[16213,3,""],[16213,0,"When the event is applli"],[16236,1,""],[16235,1,""],[16235,0,"ied, "],[16213,27,""],[16213,0,"When the event is applied,"],[15833,0," The input version is always equal or before"],[15811,0," $V_i$"],[15838,0," $V_o$"],[15889,0," the output version $V_i <- V_O"],[15919,1,""],[15919,0,"o or V_i <- V_o"],[15929,1,""],[15928,1,""],[15928,0,"="],[15933,0,"$)"],[15909,0,"("],[15936,0,"."],[15690,1,""],[15690,0,"\n\n"],[15594,0,", like Fugue,"],[15594,13,""],[15674,9,""],[15674,0,"merged "],[15844,0," Both are initialized "],[15845,0,"In the simple case "],[15863,1,""],[15863,0,", "],[15865,1,""],[15865,0,"b"],[15885,0," to the empty version $$"],[15908,0,"empt"],[15908,4,""],[15908,0,"emptyset"],[15917,0,"."],[15918,1,""],[16010,37,""],[16010,0,"\n"],[16117,0," $$"],[16119,0,"V_i"],[16160,0," After this step, $$"],[16179,0,"V_i = $"],[16185,1,""],[16185,0,"P_o"],[16187,1,""],[16187,0,"i"],[16029,1,""],[16029,0,"a"],[16034,1,""],[16034,0,"a"],[16039,1,""],[16039,0,"a"],[16039,1,""],[16039,0,"i"],[16034,1,""],[16034,0,"i"],[16029,1,""],[16029,0,"i"],[15815,0,"="],[15815,1,""],[15814,1,""],[15814,0,"alpha"],[16378,0,"to include"],[16388,2,""],[16389,10,""],[16389,0,"$i$."],[14521,10,""],[14521,0,"F"],[14554,9,""],[14577,4,""],[14577,0," in"],[14609,136,""],[14609,0,"they must no"],[14620,1,""],[14619,1,""],[14618,1,""],[14618,0," not only be well defined and correct but also demonstrate comparable or superior p"],[14688,13,""],[14688,0,"performance to existing CD"],[14713,1,""],[14713,0,"RDT based solutions."],[14754,16,""],[14754,0,"present the"],[14787,20,""],[14787,0," "],[14787,1,""],[14787,0,", which is"],[14795,2,""],[14795,0,"aling"],[14799,1,""],[14798,1,""],[14797,1,""],[14796,1,""],[14795,1,""],[14795,0,"is:"],[14823,23,""],[14823,0,"has equivalent behavior to the"],[14879,80,""],[14879,0,", a proven and modern CR"],[14901,2,""],[14901,0,"sequence CRDT free of"],[14922,14,""],[14936,8,""],[14936,0,"issues"],[14809,0,"ness"],[14795,2,""],[14795,0,"meeds th"],[14802,1,""],[14801,1,""],[14800,1,""],[14799,1,""],[14798,1,""],[14797,1,""],[14796,1,""],[14795,1,""],[14795,0,"meets thi"],[14803,1,""],[14803,0,"ese criteria"],[14968,4,""],[14968,0,"Performance"],[15012,2,""],[15012,0,"shows"],[15029,0," performance relative to"],[15053,19,""],[15053,0," leading"],[15066,6,""],[15084,26,""],[15083,1,""],[15082,1,""],[15082,0,", as detailed in the benchmarking chap"],[15098,22,""],[15098,0," []"],[15100,0,"benchmarking chapter"],[15124,18,""],[15124,0,"R"],[15124,1,""],[15124,0,"Transformation support"],[15148,19,""],[15148,0,"The algorithm includes"],[15193,28,""],[15193,0,"enabling efficient integration of "],[15551,0,"\n"],[15551,0,"\n##"],[15553,1,""],[15552,1,""],[15552,0,"$$"],[15553,0,"v_"],[15554,1,""],[15553,1,""],[15553,0,"V_in}"],[15555,0,"{text("],[15560,1,""],[15560,0,"{"],[15564,0,"}"],[15556,0,"\\"],[15556,1,""],[15563,0,"\""],[15561,0,"\""],[15556,5,""],[15560,2,""],[15555,1,""],[15558,0,"_"],[15556,0,"_"],[15559,1,""],[15556,1,""],[15557,1,""],[15557,0,"n"],[15555,1,""],[15555,0,"var("],[15561,1,""],[15561,0,")"],[15561,0,"\""],[15559,0,"\""],[15562,1,""],[15559,1,""],[15561,1,""],[15561,0,"\""],[15555,4,""],[15555,0,"\""],[15555,0,"{"],[15555,1,""],[15555,0,"italics("],[15567,0,")"],[15561,1,""],[15552,16,""],[15551,1,""],[15550,1,""],[15549,1,""],[15549,0,".\n"],[15550,1,""],[16155,3,""],[16155,0,"$V_italic(\"in\")$"],[16095,3,""],[16095,0,"$V_italic(\"in\")$"],[15974,3,""],[15974,0,"$V_italic(\"in\")$"],[15960,3,""],[15960,0,"$V_italic(\"in\")$"],[16194,16,""],[16194,0,"V_i"],[16121,16,""],[16121,0,"V_i"],[15987,16,""],[15987,0,"V_i"],[15960,16,""],[15960,0,"V_i"],[15661,0,"\n$V_italic(\"in\")$"],[15662,16,""],[15661,1,""],[16155,3,""],[16155,0,"V_italic(\"in\")"],[16095,3,""],[16095,0,"V_italic(\"in\")"],[15974,3,""],[15974,0,"V_italic(\"in\")"],[15960,3,""],[15960,0,"V_italic(\"in\")"],[16002,3,""],[16002,0,"V_italic(\"in\")"],[15978,3,""],[15978,0,"V_italic(\"in\")"],[15815,3,""],[15815,0,"V_italic(\"in\")"],[16035,1,""],[16000,1,""],[15826,1,""],[16032,1,""],[15998,1,""],[15825,1,""],[16030,0,"o"],[15997,0,"o"],[15825,0,"o"],[16033,0,"u"],[15999,0,"u"],[15826,0,"u"],[16036,0,"t"],[16001,0,"t"],[15827,0,"t"],[15833,21,""],[15833,0,"B"],[15784,7,""],[15784,0,"V_italic(\"in\")"],[16111,12,""],[16118,9,""],[16111,7,""],[16207,13,""],[16207,0,"A"],[16318,40,""],[16318,0,"$V_italic(\"in\")$ and $V_italic(\"out\")$"],[15786,6,""],[15786,0,"op"],[15786,2,""],[15786,0,"italic"],[15661,0,"\n"],[15661,0,"\n# "],[15663,1,""],[15663,0,"let V_italic(\"in\")"],[15667,0,"vin = "],[15687,0,"$"],[15673,0,"$"],[15812,16,""],[15812,0,"#vin"],[15662,0,"#let vin = $V_italic(\"in\")$\n"],[15697,1,""],[15696,1,""],[15696,0,"out"],[15713,2,""],[15713,0,"out"],[16386,17,""],[16386,0,"v"],[15868,17,""],[15868,0,"v"],[16371,0,"o"],[15869,0,"o"],[16373,0,"u"],[15870,0,"u"],[16375,0,"t"],[15871,0,"t"],[16373,0,"#"],[15868,0,"#"],[16369,0,"$"],[16353,0,"$"],[16162,0,"$"],[16146,0,"$"],[16356,16,""],[16147,16,""],[16340,0,"#"],[16147,0,"#"],[16341,1,""],[16147,1,""],[16340,0,"$V_italic(\"in\")$"],[16147,0,"$V_italic(\"in\")$"],[16372,1,""],[16355,1,""],[16163,1,""],[16146,1,""],[16353,16,""],[16146,16,""],[16337,0,"#"],[16146,0,"#"],[16339,0,"v"],[16147,0,"v"],[16341,0,"i"],[16148,0,"i"],[16343,0,"n"],[16149,0,"n"],[16139,0,"// "],[16231,0,"// "],[16139,3,""],[16228,3,""],[16138,0,"\n"],[16138,0,"\n$$"],[16140,0," "],[16140,1,""],[16140,0,"x = 4 vin"],[16139,11,""],[16138,1,""],[16137,1,""],[16206,10,""],[16048,10,""],[16031,10,""],[16012,10,""],[15994,10,""],[16166,0,"v"],[16018,0,"v"],[16011,0,"v"],[16002,0,"v"],[15994,0,"v"],[16173,1,""],[16025,1,""],[16016,1,""],[16007,1,""],[15997,1,""],[16169,1,""],[16022,1,""],[16014,1,""],[16006,1,""],[15997,1,""],[16284,0," on the ee"],[16293,1,""],[16293,0,"vent"],[16375,0," the version is transformed"],[16380,22,""],[16380,0,"event is transformed"],[16385,0,"'s posiotio"],[16395,1,""],[16394,1,""],[16393,1,""],[16392,1,""],[16391,1,""],[16388,3,""],[16388,0,"final position (at $"],[16407,1,""],[16407,0,"%"],[16407,1,""],[16407,0,"#vout)"],[16414,14,""],[16388,0,"transformed "],[16400,6,""],[16420,0,"is emitted."],[16420,2,""],[16420,0,"may "],[16420,4,""],[16420,0,"can be"],[16434,1,""],[16434,0," in order ot "],[16446,1,""],[16445,1,""],[16444,1,""],[16444,0,"to impele"],[16452,1,""],[16451,1,""],[16450,1,""],[16450,0,"lement _transform_."],[16470,101,""],[14795,21,""],[14795,0,"is:"],[14812,1,""],[14811,1,""],[14810,1,""],[14809,1,""],[14808,1,""],[14808,0,"t"],[14946,11,""],[14946,0,"Performant"],[15098,0,". It uses less CPU and"],[15099,21,""],[15102,22,""],[15102,0,"Supports transformation"],[15111,1,""],[15111,0,"T"],[14796,1,""],[14795,1,""],[14795,0,"has"],[14810,0,"nw"],[14811,1,""],[14811,0,"ess"],[14811,3,""],[14811,0,"w"],[14810,2,""],[14795,3,""],[14795,0,"is"],[15102,23,""],[15102,0,"Transformable"],[15229,0,"\n/ Partially Replayable: The algorithm also iunclu"],[15273,6,""],[15273,0,"includes a w"],[15268,17,""],[15268,0,"supports "],[15268,9,""],[15268,0,"allows replaying "],[15268,17,""],[15268,0,"does "],[15254,19,""],[15254,0,"A variant of the algorithm "],[15254,1,""],[15254,0,"There is a"],[15290,0,"which enables a pa"],[15307,1,""],[15306,1,""],[15306,0,"partia"],[15306,6,""],[15306,0,"snapshot to be updated by"],[15254,77,""],[15254,0,"The algorithm can be used to simply"],[15274,15,""],[15274,0," adapted to onlu"],[15289,1,""],[15288,1,""],[15288,0,"y "],[15285,5,""],[15285,0," replay part of the graph."],[15293,0,"only "],[15315,1,""],[15315,0,", to bring a snapshot up to do "],[15345,1,""],[15344,1,""],[15344,0,"ate on latest"],[15351,6,""],[15351,0,"us"],[15348,5,""],[15348,0,"using t"],[15354,1,""],[15230,124,""],[15229,1,""],[15229,0,"\n// /"],[15233,1,""],[15233,0,"?? And it sppo"],[15246,1,""],[15245,1,""],[15244,1,""],[15244,0,"upports partial replay."],[15502,8,""],[15502,0,"some adaptations"],[15518,40,""],[15518,0," described"],[15351,40,""],[15268,0,"\n"],[15268,0,"\nThe algorithm"],[15268,14,""],[15267,1,""],[14787,10,""],[14787,0,". Eg-walker is"],[14799,2,""],[14799,0,"suppo"],[14799,5,""],[14798,1,""],[14798,0," is"],[15106,13,""],[15106,0,"Supports transformation"],[15243,0,"\n/ Supports partial replay: The algoruith"],[15283,1,""],[15282,1,""],[15281,1,""],[15280,1,""],[15280,0,"ithm can be adapted to minimally update a snapshot "],[15330,1,""],[15330,0," from one version to another version."],[15366,1,""],[15366,0,", and only inspect events in the diff between those"],[15385,32,""],[15377,8,""],[15377,0,"read a minimal set of events within that "],[15413,5,""],[15413,0,"the "],[15366,51,""],[15366,0,", i"],[15368,1,""],[15367,1,""],[15366,1,""],[15366,0,". This is"],[15374,1,""],[15373,1,""],[15373,0,"usually no"],[15382,1,""],[15381,1,""],[15368,13,""],[15367,1,""],[15366,1,""],[15366,0,", without nee"],[15376,3,""],[15376,0,"accessing a"],[15386,1,""],[15386,0,"or processing events "],[15400,7,""],[15400,0,"any events earlier than the common version "],[15442,1,""],[15428,0,"greatest "],[15444,7,""],[15444,0,"parents."],[15451,1,""],[15450,1,""],[15450,0,"."],[15375,0," needing to"],[15395,1,""],[15394,1,""],[15393,1,""],[15406,1,""],[15405,1,""],[15404,1,""],[15414,1,""],[15366,89,""],[15303,9,""],[15303,0,"efficiently"],[15368,0,". This variant is provided below ]"],[15401,1,""],[15401,0,"[LINK]."],[15409,37,""],[15408,1,""],[15574,1,""],[15574,0,"F"],[15619,16,""],[15596,24,""],[15596,0,".\n\nThe internal state is modified "],[15599,31,""],[15598,1,""],[15597,1,""],[15596,1,""],[15596,0,", with a single important modification: Rather than "],[15598,50,""],[15597,1,""],[15596,1,""],[15596,0,". Th"],[15599,1,""],[15598,1,""],[15597,1,""],[15596,1,""],[15596,0,", with a modifie"],[15611,1,""],[15611,0,"cation to "],[15617,4,""],[15617,0,". "],[15618,1,""],[15617,1,""],[15598,19,""],[15598,0,"modified to "],[15598,12,""],[15598,0,"with some modifications."],[15624,0,"Om "],[15626,1,""],[15625,1,""],[15624,1,""],[15624,0,"In traditional "],[15639,2,""],[15643,1,""],[15644,0,", the CRDT's"],[15663,14,""],[15663,0,"corresponds to some"],[15682,21,""],[15662,0," "],[15662,1,""],[15694,20,""],[15694,0,"defined by the"],[15793,0,"\n"],[15735,1,""],[15792,0,"\nIn traditional CRDTs, the CRDT's state corresponds to some _version_, defined by the set of all merged events."],[15624,111,""],[15681,0,"\n"],[15793,3,""],[15793,0," "],[15805,8,""],[15805,0,",a"],[15806,1,""],[15805,1,""],[15805,0,"maintaining a"],[15835,4,""],[15844,25,""],[15844,0," "],[15835,0,"the "],[15849,0,"structure "],[15849,0,"data "],[15864,0,"spans"],[15954,3,""],[15954,0,"versions are"],[15947,0,", "],[15949,3,""],[15949,0,"b"],[15953,13,""],[15964,1,""],[15963,1,""],[15962,1,""],[15961,1,""],[15961,0,"ly set"],[15970,18,""],[15970,0," the empty version"],[16019,44,""],[16019,0,"always precedes or equals the output version"],[16064,0,"//"],[16064,0," "],[16064,1,""],[16064,0,"()"],[16065,0,"($vin <- vout or vin = vout$)."],[16094,1,""],[16093,1,""],[16071,14,""],[16071,0,"<="],[16072,2,""],[16065,1,""],[16079,0,".\n"],[16080,1,""],[16080,0," "],[16438,0," ("],[16439,1,""],[16439,0,"($vin' = vin union {i})"],[16461,0,"#"],[16461,1,""],[16461,0,"$, $vin' = vin union {i}$"],[16474,1,""],[16467,1,""],[16472,1,""],[16466,1,""],[16471,0,"o"],[16466,0,"o"],[16473,0,"u"],[16467,0,"u"],[16475,0,"t"],[16468,0,"t"],[16491,28,""],[16491,0,"T"],[16491,1,""],[16491,0,"When the event is applied, t"],[16612,0,"\n\n\n"],[14842,9,""],[14827,3,""],[14827,0,"be"],[14828,1,""],[14827,1,""],[14827,0,"is identical"],[14830,9,""],[14829,1,""],[14829,0," identical"],[14829,10,""],[14827,2,""],[14827,0,"be"],[14827,2,""],[14827,0,"has"],[14842,0,"behavior "],[14842,9,""],[14842,0,"ordering "],[14827,26,""],[14827,0,"is constructed "],[14841,1,""],[14829,12,""],[14827,2,""],[14827,0,"has equivalent ordering to"],[14827,30,""],[14827,0,"is constructed to be "],[14847,1,""],[14846,1,""],[14845,1,""],[14845,0,"use"],[14849,0,"the "],[14878,0," for ordering "],[14891,1,""],[14891,0,". FugueMax is"],[14904,1,""],[14967,0," We believe eg-walker"],[14968,11,""],[14977,0," can be adapted to other algorithms."],[14968,0,"We believe "],[15023,0," too, but that"],[15027,10,""],[15027,0,", but "],[14967,67,""],[16633,731,""],[16665,0,"Recall that "],[16677,1,""],[16677,0,"e"],[16875,67,""],[16875,0,"By the time yuo re"],[16892,1,""],[16891,1,""],[16890,1,""],[16889,1,""],[16888,1,""],[16888,0,"ou're reading it, "],[16906,31,""],[16906,0,"this"],[17041,29,""],[17041,0,"P"],[17041,0,"Re"],[17042,1,""],[17041,1,""],[17055,0,", as named by a delete or insert event,"],[17057,3,""],[17063,2,""],[17063,0,"in an"],[17067,3,""],[17160,20,""],[17160,0,"event happened."],[17063,2,""],[17063,0,"by"],[17067,0,"n"],[17245,5,""],[17268,0,"s"],[17340,0,". The identifier"],[17356,5,""],[17619,0,"\n"],[17514,2,""],[17514,0,"-"],[17514,1,""],[17514,0,"1."],[17619,1,""],[17515,1,""],[17514,1,""],[17514,0,"+"],[17620,1,""],[17619,1,""],[17619,0,"+"],[17619,0,"  "],[17619,2,""],[17618,1,""],[17618,0,"\n"],[17618,0,"\n+ Delete positions are rewritten"],[17642,9,""],[17642,0,"replaced by the ID of the item being deleted"],[17667,0," deleted"],[17680,14,""],[17704,16,""],[17704,0,"repplaced with "],[17706,1,""],[17718,0,"a"],[17720,0,"("],[17751,0,")"],[17734,4,""],[17733,1,""],[17733,0,", "],[17514,1,""],[17514,0,"-"],[17619,1,""],[17619,0,"-"],[17681,1,""],[17681,0,"-"],[17514,1,""],[17513,1,""],[17512,1,""],[17511,1,""],[17511,2,""],[17511,0," a"],[17614,0,"\n"],[17616,1,""],[17615,1,""],[17615,0,"\n/"],[17634,0,":"],[17679,1,""],[17679,0,"/"],[17697,0,":"],[16632,0,"\nThe "],[16633,4,""],[16633,0,"The version i"],[16637,9,""],[16633,4,""],[16633,0,"#vin is implemented "],[16638,0,"in eg-walker "],[16666,0,"by adding an additional field to each item in th e"],[16712,4,""],[16712,0,"fugue's tree: "],[16690,0,"_state_ "],[16733,1,""],[16732,1,""],[16732,0,"."],[16691,0,"in_"],[16693,1,""],[16693,0,"-"],[16693,1,""],[16692,1,""],[16691,1,""],[16732,1,""],[16732,0," { `NotInsertedYet`, `Inserted`, `Deleted(1)`, `Deleted(2)`, `Deleted(3)`, ... }"],[16733,0,"from the set of "],[16733,16,""],[16732,1,""],[16732,0,". The state is one of "],[16814,13,""],[16813,1,""],[16819,0,". I"],[16821,1,""],[16820,1,""],[16820,0," Inserted items "],[16821,15,""],[16821,0,"The state correspondes"],[16842,1,""],[16841,1,""],[16841,0,"s to "],[16831,15,""],[16831,0,"of each item corresponds to the relationship between "],[16844,40,""],[16844,0,"describes "],[16844,10,""],[16844,0,"depends on #vin:\n\n- If "],[16862,5,""],[16862,0,"- If"],[16716,0," $$"],[16718,0,"i"],[16719,1,""],[16718,1,""],[16717,1,""],[16716,1,""],[16716,0," $i$"],[16736,0,", where ##"],[16745,1,""],[16744,1,""],[16744,0,"$$"],[16745,0,"i"],[16747,0," is the ID of the event sh"],[16772,1,""],[16771,1,""],[16771,0,"which co"],[16778,1,""],[16777,1,""],[16777,0,"inserted the item"],[16720,74,""],[16632,0,"\nE"],[16633,1,""],[16633,0," in fugue's tree, where $i$ is the ID of the event which inserted the item"],[16633,17,""],[16633,0,"Each item in the tree has an id"],[16663,1,""],[16662,1,""],[16662,0,"ID of"],[16667,6,""],[16671,0,", set to"],[16679,4,""],[16679,0," "],[16673,7,""],[16673,0,"equal "],[16673,6,""],[16673,0,"based on "],[16725,0," in the first place. "],[16745,1,""],[16658,0," the same set of fields"],[16632,136,""],[16704,12,""],[16704,0,"into each item"],[16721,1,""],[16720,1,""],[16719,1,""],[16719,0,"in the tree"],[16725,5,""],[16721,4,""],[16719,2,""],[16719,0,"$i$"],[16713,5,""],[16713,0," item"],[16719,3,""],[16719,0,"in the tree"],[16719,0,"(with insert id"],[16733,1,""],[16732,1,""],[16732,0,"ID $i$) "],[16885,0," #v"],[16887,1,""],[16887,0,"vin < "],[16892,1,""],[16891,1,""],[16890,1,""],[16886,1,""],[16886,0,"$"],[16890,0,"$"],[16887,0,"i in "],[16891,0,".not"],[16900,0,", "],[16901,1,""],[16900,1,""],[16880,0,"\n- If "],[16885,1,""],[16884,1,""],[16883,1,""],[16882,1,""],[16881,1,""],[16880,1,""],[16900,0,", "],[16899,0,")"],[16896,0,"("],[16896,0,"ceil"],[16881,27,""],[16881,0,"- If $i in.not ceil(vin)$,"],[16703,0," $s_italic(\"in\")$"],[16538,0,"\n"],[16511,27,""],[16511,0,"When the event is applied,"],[16511,26,""],[16511,0,"When the event is applied, "],[16538,1,""],[16632,0,"\n#let vin = $V_italic(\"in\")$\n"],[16638,1,""],[16638,0,"s"],[16645,1,""],[16645,0,"s"],[16733,16,""],[16733,0,"#sin"],[16639,0,"s"],[16736,0,"s"],[16661,0," // don't want to replace 'sin'."],[16694,0,"\nI"],[16695,1,""],[16695,0,"Eg-walker "],[16704,1,""],[16704,0,"'s stat is "],[16714,1,""],[16713,1,""],[16712,1,""],[16711,1,""],[16711,0,"e is identical to G"],[16729,1,""],[16729,0,"FugueMax's state, wt"],[16748,1,""],[16747,1,""],[16747,0,"but "],[16747,4,""],[16747,0,"with one change: Each item ("],[16774,1,""],[16773,1,""],[16773,0," in the tree "],[16774,0,"$i$ "],[16695,95,""],[16695,0,"Eg-walker's state is identical to FugueMax's state, with one change: Each item $i$ in the tree"],[16789,36,""],[16789,0," gains"],[16795,7,""],[16795,0," adding"],[16789,6,""],[16789,0,"\n#vin in eg-walker is implemented by"],[16789,36,""],[16789,0," gains"],[16795,7,""],[16829,48,""],[16840,0," represe"],[16847,1,""],[16841,6,""],[16841,0,"stores the item's relationship "],[16831,51,""],[16831,0,"$si"],[16833,1,""],[16833,0,"sin in$"],[16824,7,""],[16968,0," s"],[16969,1,""],[16968,1,""],[16967,1,""],[16966,0,", ssin = 11"],[16976,1,""],[16975,1,""],[16975,0,"``"],[16976,0,"asdf"],[16975,0,"mono"],[16975,4,""],[16975,0,"mono()"],[16980,2,""],[16984,1,""],[16984,0,")"],[16980,4,""],[16980,0,"'"],[16980,1,""],[16980,0,"\"NotInsertedYet\""],[16832,1,""],[16898,0,"$"],[16879,0,"mono(\"NotInsertedYet\")"],[16865,0,"mono(\"NotInsertedYet\")"],[16853,0,"mono(\"NotInsertedYet\")"],[16835,0,"mono(\"NotInsertedYet\")"],[16951,16,""],[16915,16,""],[16881,16,""],[16841,16,""],[16903,1,""],[16883,1,""],[16865,1,""],[16841,1,""],[16907,1,""],[16888,1,""],[16872,1,""],[16855,1,""],[16904,0,")"],[16886,0,")"],[16871,0,")"],[16855,0,")"],[16907,1,""],[16888,1,""],[16872,1,""],[16855,1,""],[16904,0,"\""],[16886,0,"\""],[16871,0,"\""],[16855,0,"\""],[16908,0,")"],[16889,0,")"],[16873,0,")"],[16856,0,")"],[16893,1,""],[16892,1,""],[16892,1,""],[16890,0,"(1)"],[16913,1,""],[16912,1,""],[16912,1,""],[16910,0,"(2)"],[16909,1,""],[16889,1,""],[16907,1,""],[16888,1,""],[16905,1,""],[16887,1,""],[16903,1,""],[16886,1,""],[16872,1,""],[16871,1,""],[16870,1,""],[16869,1,""],[16868,1,""],[17009,0,"\n- If $$"],[17016,0,"i in cie"],[17023,1,""],[17022,1,""],[17022,0,"eil(vin)"],[17031,0," but the item has not been deleted, "],[17010,57,""],[17010,0,"- If $i in ceil(vin)$ but the item has not been deleted, $ssin = mono(\"NotInsertedYet\")$"],[17036,3,""],[17036,0,"at #vin the"],[17052,0," "],[17052,1,""],[17089,14,""],[17089,0,"Ins"],[17035,8,""],[17065,0," at #vin"],[17010,0,"- If $i in ceil(vin)$ but the item has not been deleted at #vin, $ssin = mono(\"Ins\")$\n"],[17118,26,""],[17118,0,"and the item has been "],[17171,3,""],[17171,0,"Del"],[17176,0,"(n)"],[17180,0," where n"],[17187,1,""],[17187,0,"$n =$ the number of delete operations"],[17214,10,""],[17214,0,"events in $"],[17224,1,""],[17224,0,"#vin targetting this item."],[17240,4,""],[17240,0,"the"],[17249,0," All delete events must be concuren"],[17283,1,""],[17282,1,""],[17282,0,"rent - since "],[17286,9,""],[17286,0,"."],[17249,38,""],[17249,0," (Items can be deleted a"],[17272,1,""],[17272,0,"multiple times if mul"],[17287,6,""],[17287,0,"by "],[17271,19,""],[17271,0," by multiple concurrent "],[17284,0,"events if the events are "],[17319,1,""],[17319,0,").\n\n"],[16409,0," _prepare-update_ runs"],[16427,4,""],[16427,0,"runs at #vin, using #ssin defined below."],[16691,61,""],[15702,0,"#let ssin = $s_italic(\"in\")$ // don't want to replace 'sin'.\n"],[16528,0," _apply-update_ runs at #vout."],[16558,1,""],[16558,0,"\n\nAfter "],[16560,6,""],[16559,1,""],[16257,1,""],[16257,0,"3"],[16559,0,"_ "],[16560,1,""],[16559,1,""],[16559,0,"+ "],[16257,2,""],[16468,0," Semantically,"],[16541,0,"And "],[16513,1,""],[16512,1,""],[16512,0," ("],[16539,0,")"],[16542,4,""],[16541,30,""],[16469,14,""],[16491,2,""],[16491,0,"as if the d"],[16500,2,""],[16496,4,""],[16493,3,""],[16491,2,""],[16491,0,"at"],[16751,1,""],[16196,557,""],[16823,0,"\nFor each event $(i, e_i, P_i)$, eg-walker does the following steps:\n\n+ Move #vin to the event's parent version $P_i$. After this step, $vin = P_i$\n+ Apply $e_i$ to the internal state, running FugueMax's _prepare-update_ and _apply-update_ methods in sequence on the event. _prepare-update_ runs at #vin (using #ssin defined below).\n+ #vin and #vout are both modified to include $i$. ($vin' = vin union {i}$, $vout' = vout union {i}$)\n\nWhen the event is applied, the event's transformed position (at #vout) can be emitted in order to implement _transform_.\n"],[16823,0,"\n"],[16823,0,"\nWe can define the length of events"],[16852,6,""],[16852,0,"each event at both #vin and #vout based on their state "],[16885,22,""],[16885,0,":\n\n$ $"],[16889,0," len"],[16890,3,""],[16890,0,"italic(\"len\")("],[16903,1,""],[16903,0,"_+"],[16904,1,""],[16904,0,"italic(\"in\")"],[16912,2,""],[16912,0,"out"],[16918,0," = "],[16918,1,""],[16904,6,""],[16904,0,"o"],[16890,6,""],[16890,0,"o"],[16900,0,"p"],[16891,0,"p"],[16900,2,""],[16900,0,"italics"],[16915,0,":"],[16918,0,"cases(\n  \n  "],[16925,2,""],[16926,2,""],[16926,0,")_"],[16927,1,""],[16925,0,"  0 \"if\" italics(\"value\") = bottom"],[16906,1,""],[16939,1,""],[16951,6,""],[16951,0,"bot"],[16953,1,""],[16952,1,""],[16951,1,""],[16951,0,"perp"],[16924,0,"  0 \"if\" italic(\"value\") = perp\n"],[16955,0,","],[16959,1,""],[16959,0,"1"],[16961,27,""],[16961,0,"ekl"],[16963,1,""],[16962,1,""],[16962,0,"lse\""],[16961,0,"\""],[16969,0," "],[16888,0,"$ op(\"len\")_italic(\"out\") := cases(\n  0 \"if\" italic(\"value\") = perp,\n  1 \"else\"\n) $\n\n"],[16993,3,""],[16993,0,"in"],[17017,15,""],[17017,0,"ssin"],[17010,1,""],[17010,0,"1"],[17024,4,""],[17024,0,"mono(\"inser"],[17034,1,""],[17033,1,""],[17032,1,""],[17031,1,""],[17030,1,""],[17030,0,"Ins\")"],[17039,1,""],[17039,0,"0"],[16949,0,"!"],[16957,11,""],[16924,0,"  1 \"else\"\n"],[16926,1,""],[16926,0,"1"],[16968,0,"\n  1 \"else\""],[16924,11,""],[16926,1,""],[16926,0,"1"],[16960,1,""],[16960,0,"0"],[16962,6,""],[16962,0,"\"if\" italic(\"value\") != perp,"],[16983,1,""],[16996,80,""],[16888,0,"$ op(\"len\")_italic(\"in\") := cases(\n  1 \"if\" ssin = mono(\"Ins\"),\n  0 \"else\"\n) $\n\n"],[15582,8,""],[15570,1,""],[15570,0," purely "],[15577,1,""],[15588,0,"variant"],[15621,26,""],[15621,0," "],[15621,1,""],[15621,0," and uses that state to putu"],[15648,1,""],[15647,1,""],[15646,1,""],[15645,1,""],[15645,0,"output the transformed version of each operation.\n\nWe"],[15697,1,""],[15696,1,""],[15696,0,"The "],[15699,1,""],[15698,1,""],[15697,1,""],[15696,1,""],[15695,1,""],[15694,1,""],[15694,0,"\n\nTh"],[15697,1,""],[15696,1,""],[15696,0,"The "],[15696,4,""],[15696,0,"The"],[15621,0,". When each element is "],[15633,11,""],[15633,0,"event is visited, the algorithm outputs the transformed version of that ee"],[15706,1,""],[15706,0,"vent. This can be used "],[15712,17,""],[15711,1,""],[15711,0," Transformed events an"],[15732,1,""],[15731,1,""],[15731,0,"can be composed to get the resulting document state."],[15783,73,""],[15665,0,"mutates the internal state and "],[15814,0,"\n\n= "],[15817,1,""],[15817,0,"= FugueMax\n"],[15819,0,"Internal state: mo"],[15836,1,""],[15835,1,""],[15835,0,"Modified "],[15853,1,""],[15854,3,""],[15819,33,""],[15816,3,""],[15815,1,""],[15814,1,""],[15815,1,""],[15814,1,""],[15814,0,"\n\n"],[15815,1,""],[15814,1,""],[16334,32,""],[16333,1,""],[16333,0," This structure makes"],[16349,5,""],[16349,0,"marries "],[16334,23,""],[16333,1,""],[16333,0," This structure allows us to run "],[16356,10,""],[16356,0,"al"],[16357,1,""],[16356,1,""],[16356,0,"the algorithm to run _prepare-update-"],[16392,1,""],[16392,0,"_ at @"],[16397,1,""],[16397,0,"#vin "],[16334,4,""],[16334,0,"Informally, this"],[16414,0,"followed by #"],[16426,1,""],[16426,0,"_apply-update_ an"],[16442,1,""],[16442,0,"t #vout"],[16414,11,""],[16414,0,"and"],[16441,0,", without need"],[16441,14,""],[16441,0,"."],[16385,3,""],[16385,0,"simultaneously "],[16399,1,""],[16385,14,""],[16385,0,"run"],[16441,1,""],[16441,0," , us"],[16445,1,""],[16444,1,""],[16443,1,""],[16442,1,""],[16441,1,""],[16441,0,", using the same data structure.\n\n$$"],[16476,1,""],[16475,1,""],[16475,0,"== FugueMax, modified\n\n"],[15935,0,"\n"],[15935,0,"\nEvents in "],[15936,10,""],[15936,0,"Sequence "],[15936,9,""],[15936,0,"Events are defined i"],[15955,1,""],[15955,0,"as normal "],[15964,1,""],[15964,0,": Each "],[15966,5,""],[15966,0,"The "],[15966,4,""],[15966,0,"Events in the event graphs"],[15991,1,""],[15964,1,""],[15955,9,""],[15955,0,"in the typical way o"],[15974,1,""],[15974,0,"for a sequence CRDT."],[15994,26,""],[15993,1,""],[15993,0,":\n\n\\ "],[15997,1,""],[15996,1,""],[15996,0,"/ insert(): asdf"],[16005,0,"p, x"],[16010,0,"_"],[15998,0,"_"],[16014,4,""],[16014,0,"inserts a new element with the value $x$ at position $p$ in the document."],[16086,1,""],[16086,0,",, "],[16088,1,""],[16087,1,""],[16087,0," between existing elements at indicies $p-1$ and $p$."],[16117,8,""],[16117,0,"indexes"],[16139,0," Later elements are shifte"],[16139,26,""],[16022,0,"(splices) in "],[16152,0,"\n/ _delete(p)_: "],[16153,15,""],[16153,0,"/ _delete(p)_:"],[16014,1,""],[16014,0,"I"],[16014,1,""],[16014,0,"i"],[15993,1,""],[15993,0,", from "],[15995,5,""],[15995,0,"either:"],[15995,7,""],[15995,0,"one of:"],[15993,1,""],[15993,0,". Each event is"],[16189,0," delete the element at position $p$. All later item"],[16236,4,""],[16236,0,"elements are shifted downw"],[16257,5,""],[16257,0,"to fo"],[16261,1,""],[16261,0,"ill the gap.\n\n"],[16226,5,""],[16226,0,"L"],[16271,0,"A text document is a sequence "],[16290,0,"re"],[16291,1,""],[16290,1,""],[16290,0,"treated as "],[16312,0,"of unicode codepoints.\n\n"],[15692,0,"in "],[15694,1,""],[15693,1,""],[15692,1,""],[15692,0,"by doing both "],[15692,14,""],[15692,0,"with "],[15692,5,""],[15692,0,"by com"],[15697,1,""],[15696,1,""],[15695,1,""],[15695,0,"a combination of FugueMax's _prepare-update_ and _apply_"],[15750,1,""],[15750,0,"-update_ methods. "],[15712,0,"the logic of "],[15780,0," The "],[15785,17,""],[15807,5,""],[15807,0," the"],[15817,0," is output"],[15828,1,""],[15828,0,"\n\n"],[15901,0,"\n\nWe"],[15904,1,""],[15903,1,""],[15903,0,"Weill "],[15903,6,""],[15903,0,"We will first describe the algorithm assuming it processes all events in the event graph. then "],[15993,5,""],[15993,0,"Then describe ways the algorithm can be modified to do par"],[16045,6,""],[16045,0,"impleemnt"],[16045,9,""],[16045,0,"implement partial updates.\n\n"],[16072,1,""],[16071,1,""],[16026,0,"as written "],[16053,2,""],[16053,0,"in order to"],[16093,120,""],[16427,0,"\n#let vin = $V_italic(\"in\")$\n#let vout = $V_italic(\"out\")$\n#let ssin = $s_italic(\"in\")$ // don't want to replace 'sin'.\n\n"],[16549,65,""],[16427,0,"\nA text document is treated as a sequence of unicode codepoints.\n\n"],[16491,0,"\n\n"],[16091,0,"\n\n"],[16092,1,""],[16091,1,""],[16091,0," Chapter [XXXXX] lists a series of optimizations that cam"],[16147,1,""],[16147,0,"n be made to eg-walker (and other"],[16170,10,""],[16170,0,"and chapter [YYYYY] shows benchmark "],[16190,16,""],[16190,0,"benchmarks the resulting in"],[16216,1,""],[16216,0,"mplementation ag"],[16231,1,""],[16231,0,"v"],[16231,1,""],[16230,1,""],[16230,0,"vs other compat"],[16244,1,""],[16243,1,""],[16242,1,""],[16239,3,""],[16239,0,"similar algorithm"],[16247,9,""],[16247,0,"algorith"],[16239,16,""],[16230,9,""],[16229,1,""],[16229,0,". We have implmeented"],[16239,11,""],[16239,0,"implmeented "],[16239,12,""],[16239,0,"implemented "],[16231,20,""],[16230,1,""],[16229,1,""],[16229,0," aga"],[16232,1,""],[16231,1,""],[16230,1,""],[16229,1,""],[16229,0," against "],[16229,9,""],[16229,0,"."],[16190,0,"discusses a series of "],[16223,0,"of "],[16257,0,"Input "],[16263,1,""],[16263,0,"e"],[16257,7,""],[16257,0,"E"],[16495,0," #"],[16496,1,""],[16496,0,"$x$ is of the sequence CRDT's element type - for text"],[16538,11,""],[16538,0,". "],[16539,1,""],[16538,1,""],[16538,0," - for text documents "],[16540,1,""],[16539,1,""],[16538,1,""],[16538,0,". "],[16540,1,""],[16540,0,"F"],[16559,0,","],[16559,1,""],[16558,1,""],[16558,0,", each element is a unicode sca"],[16588,1,""],[16587,1,""],[16586,1,""],[16586,0,"codepoint"],[16586,9,""],[16586,0,"scalar value."],[16695,67,""],[16695,0,"\n"],[15672,0," "],[15672,1,""],[15672,0," its "],[15676,5,""],[15692,2,""],[15692,0,"to match the event's parent version, then applys the event using"],[15751,7,""],[15751,0,"by comp"],[15757,1,""],[15757,0,"bining"],[15763,28,""],[15764,0,"the logic in "],[15832,1,""],[15832,0,"\n\n"],[15834,47,""],[15834,0,"The algorithm outputs the transformed version of the operation. To "],[15898,3,""],[15898,0,"These transformed "],[15886,10,""],[15886,0," event"],[15912,0,"events can be repl"],[15926,4,""],[15926,0,"composed"],[15934,40,""],[15934,0," to "],[16021,0," starts from an empty document state"],[16029,5,""],[16029,0,"with "],[16057,0," and"],[16103,4,""],[16103,0,"LAter, "],[16103,7,""],[16103,0,"Later, we will "],[16117,1,""],[16126,9,""],[16126,0," how the"],[16144,11,""],[16199,1,""],[16199,0,"\n\n"],[16299,9,""],[16299,0,"shows benchmarking results"],[16325,56,""],[16304,0," detailed"],[16334,0," of the resulting implementation."],[16930,2,""],[16969,0," always"],[16992,4,""],[16992,0,"a singluar"],[17001,1,""],[17000,1,""],[16999,1,""],[16998,1,""],[16998,0,"ular"],[17054,0," The"],[17057,1,""],[17056,1,""],[17055,1,""],[17054,1,""],[16951,0," (including Fugue"],[16933,12,""],[16956,0,")"],[16940,1,""],[16940,0,"like "],[16945,10,""],[16950,1,""],[16950,0,")"],[16940,0,"("],[16941,4,""],[16941,0,"ionc"],[16944,1,""],[16943,1,""],[16942,1,""],[16942,0,"ncluding"],[16956,0,"Max"],[17023,8,""],[17023,0,"determined "],[17052,7,""],[17058,0," that hav b"],[17068,1,""],[17067,1,""],[17067,0,"e been merged into the state"],[17090,0,"CRDT's "],[17390,1,""],[17390,0,"\n\n"],[17391,1,""],[17390,1,""],[17390,0," "],[17390,1,""],[17390,0,"\n\n"],[17408,10,""],[17408,0," approach"],[17498,32,""],[17498,0,", "],[17499,1,""],[17498,1,""],[17498,0,"."],[17391,1,""],[17390,1,""],[17390,0," "],[16929,1,""],[16808,1,""],[16929,569,""],[16929,0,"In CRDTs (including FugueMax), the CRDT's state always corresponds to a singular _version_, determined by the set of all events that have been merged into the CRDT's state. Instead of maintaining a single version, the eg-walker data structure spans 2 versions simultaneously: An _input version_ #vin and _output version_ #vout, both initially set to the empty version $emptyset$. The input version always precedes or equals the output version ($vin <= vout$). Informally, this approach allows the algorithm to run _prepare-update_ at #vin and _apply-update_ at #vout.\n\n"],[15972,0,"\n"],[15972,0,"\nIn CRDTs (including FugueMax), the CRDT's state always corresponds to a singular _version_, determined by the set of all events that have been merged into the CRDT's state. Instead of maintaining a single version, the eg-walker data structure spans 2 versions simultaneously: An _input version_ #vin and _output version_ #vout, both initially set to the empty version $emptyset$. The input version always precedes or equals the output version ($vin <= vout$). Informally, this approach allows the algorithm to run _prepare-update_ at #vin and _apply-update_ at #vout.\n\n"],[16541,1,""],[16540,1,""],[16299,132,""],[16299,0,". Positions can be mapped from #vin to $"],[16338,1,""],[16338,0,"#vout"],[16301,9,""],[16301,0,"The data structure can map"],[16327,14,""],[16327,0," positions"],[16357,0," #vin can be moved"],[16367,0,"also "],[16380,0," to any version earlier"],[16396,7,""],[16396,0,"before $"],[16403,1,""],[16403,0,"#vout."],[16396,0,"(or equal to"],[16408,6,""],[16408,0,")"],[16396,1,""],[16407,1,""],[16366,5,""],[16488,0," (set to the pa"],[16502,1,""],[16501,1,""],[16501,0,"event's parent version)"],[16484,40,""],[16483,1,""],[16460,0,"#vin (set to the event's parent version)"],[16460,40,""],[16483,0," #vin (set to the event's parent version)"],[16528,0," then"],[16534,0,"immediatelty"],[16545,1,""],[16544,1,""],[16544,0,"y run "],[15429,1146,""],[16385,0,"\n\nAt a high level, eg-walker works by doing an in-order traversal of the event graph. During this traversal, eg-walker creates and maintains a purely in-memory variant of Fugue's internal state. When each event is visited, the algorithm mutates its internal state to match the event's parent version, then applys the event by combining the logic in FugueMax's _prepare-update_ and _apply-update_ methods.\n\nThe algorithm outputs the transformed version of the event. These transformed events can be composed to get the resulting document state.\n\nIn CRDTs (including FugueMax), the CRDT's state always corresponds to a singular _version_, determined by the set of all events that have been merged into the CRDT's state. Instead of maintaining a single version, the eg-walker data structure spans 2 versions simultaneously: An _input version_ #vin and _output version_ #vout. The data structure can map positions from #vin to #vout. #vin can be moved to any version or equal to #vout. Informally, this approach allows the algorithm to run _prepare-update_ at #vin (set to the event's parent version) and then immediately run _apply-update_ at #vout.\n\n"],[16385,1,""],[17532,569,""],[17556,2,""],[17576,0," al"],[17578,1,""],[17577,1,""],[17577,0,"nearly"],[17613,0,"\n\n\n\n\n"],[17613,0,". The state is a "],[17628,2,""],[17628,0,"made up of a set of *nodes*"],[17648,7,""],[17648,0,"_nodes_ of _(id, x, lev"],[17670,1,""],[17670,0,"fto"],[17672,1,""],[17672,0,"Origin"],[17665,3,""],[17675,0,", rightOrigin, side)_."],[17661,2,""],[17661,0,"i"],[17664,29,""],[17664,0,"l, r, "],[17669,1,""],[17666,3,""],[17664,2,""],[17664,0,"leftOrigin, rightOrigin, side, "],[17659,1,""],[17659,0,"$"],[17696,1,""],[17696,0,"#"],[17661,0,"italic("],[17661,7,""],[17661,0,"\""],[17663,0,"\""],[17676,0,"\""],[17666,0,"\""],[17691,0,"\""],[17680,0,"\""],[17699,0,"\""],[17695,0,"\""],[17705,1,""],[17704,1,""],[17704,0,"$./"],[17706,1,""],[17666,0,"italic("],[17685,0,")"],[17688,0,"italic("],[17708,0,")"],[17711,0,"italic("],[17724,0,")"],[16324,0,"#let ssin = $s_italic(\"in\")$ // don't want to replace 'sin'.\n"],[16393,1,""],[16392,1,""],[16391,1,""],[16391,0,"out"],[16408,2,""],[16408,0,"out"],[17789,0,"ssin, ss"],[17796,1,""],[17796,0,"out"],[17801,0," and a map from $i$ => "],[17823,1,""],[17822,1,""],[17821,1,""],[17820,1,""],[17819,0," => u"],[17823,1,""],[17823,0,"i"],[17817,9,""],[17817,0,"deleted item X to Y"],[17830,6,""],[17825,5,""],[17825,0,"id "],[17817,11,""],[17817,0,"t"],[17817,1,""],[17703,3,""],[17703,0,"tree"],[17788,0," in {L, R}"],[17819,9,""],[17819,0,"d"],[17819,1,""],[17819,0,"_delete map_. Notably "],[17840,1,""],[17840,0,", the tree does not store the inserted content."],[17833,54,""],[17832,1,""],[17831,1,""],[17831,0,":\n\n\\ "],[17835,1,""],[17834,1,""],[17834,0,"/ $i$ is the i"],[17847,1,""],[17847,0,"nopde"],[17831,1,""],[17831,0,". Each node cores"],[17847,1,""],[17846,1,""],[17846,0,"responds to an item that has been inserted in "],[17889,3,""],[17888,1,""],[17888,0," in th eproc"],[17892,8,""],[17892,0,"the processed set, within $$"],[17919,0,"ceil(vout)"],[17930,0,"."],[17933,0,"// "],[17843,0,"in the tree "],[17900,0," at some point"],[17959,3,""],[17976,1,""],[17975,1,""],[17974,1,""],[17974,0,"de\n/asdf"],[17981,1,""],[17980,1,""],[17979,1,""],[17978,1,""],[17977,1,""],[17976,1,""],[17964,0,":"],[17977,0,"'s ID - set to the ID of the "],[17992,0,"the same "],[18001,4,""],[18004,7,""],[18004,0,"as the insert event which created the node.\n/ _"],[18050,1,""],[18050,0,"_leftO"],[18050,6,""],[18050,0,"_leftOrigin_: is asdf"],[18064,7,""],[18064,0,"is the ID of the im"],[18082,1,""],[18082,0,"tem immediately to the left of $i$ "],[18062,0,", _righ"],[18064,5,""],[18064,0,"_rightOrigin_"],[18079,2,""],[18079,0,"are"],[18077,0,", _side_"],[18097,0,"s"],[18110,0,"s"],[18136,3,""],[18136,0,"and rith"],[18143,1,""],[18142,1,""],[18142,0,"ght "],[18048,102,""],[18048,0,"/ _leftOrigin_, _rightOrigin_, _side_: are the IDs of the items immediately to the left and right $i$"],[17719,2,""],[17718,1,""],[17718,0,". Each node "],[17718,12,""],[17746,0,"_i"],[17771,0,"_i"],[17789,0,"_i"],[17789,2,""],[17771,2,""],[17746,2,""],[17718,0,". Each node "],[17718,12,""],[17988,9,""],[17988,0," the"],[17995,0," of"],[17998,7,""],[17998,0," the corresponding"],[18029,24,""],[18130,1,""],[18129,1,""],[18128,1,""],[18128,0,"of $i$ when the node was created."],[18059,8,""],[18153,0,"\n/ , _side_"],[18157,1,""],[18156,1,""],[18162,0,": I"],[18164,1,""],[18164,0,"is _L_ or _R_, meaning "],[18179,8,""],[18179,0,"marking the node as a left or right child of its "],[18220,8,""],[18220,0,". See the [fugue a"],[18237,1,""],[18237,0,"paper "],[18242,1,""],[18242,0,"] for details."],[18153,0," See the [fugue paper] for details."],[18292,0,"/ @"],[18294,1,""],[18294,0,"#ssin: is the state of the node at #vin. "],[18292,43,""],[18292,0,"/ #ssin: is the state of the node at #vin. $ssin in { mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del(1)\"), mono(\"Del(2)\"), ... }$."],[18329,0," "],[18329,1,""],[18329,0,"version "],[18342,0," This o"],[18348,1,""],[18343,5,""],[18342,1,""],[18430,0,"\n/ #sout: is the state of the node at version #vout. Unlike #"],[18490,1,""],[18490,0,"#ssin, "],[18431,66,""],[18431,0,"/ #sout: is the state of the node at version #vout. Unlike #ssin, we only "],[18483,22,""],[18482,1,""],[18481,1,""],[18481,0,": either ${"],[18483,9,""],[18482,1,""],[18481,1,""],[18481,0,". Unlike #"],[18490,1,""],[18490,0,"$"],[18483,8,""],[18483,0,"This does not need to be as details"],[18517,1,""],[18517,0,"ed as $"],[18523,1,""],[18523,0,"#ssin because #sout "],[18537,6,""],[18537,0,"#vout is monotonically increasing."],[18483,88,""],[18482,1,""],[18482,0," However, "],[18483,9,""],[18482,1,""],[18482,0," For complex reasons, "],[18483,21,""],[18483,0,"#"],[18483,1,""],[18483,0,"@"],[18483,1,""],[18483,0,"$ssou"],[18487,1,""],[18486,1,""],[18485,1,""],[18485,0,"out in ${"],[18493,1,""],[18492,1,""],[18492,0,"{ "],[18431,63,""],[18431,0,"/ #sout: is the state of the node at version #vout. $sout in { mono(\"Ins\"), mono(\"Del(1)\") }"],[18518,1,""],[18517,1,""],[18516,1,""],[18520,0,"."],[18482,0," Because #"],[18491,1,""],[18491,0,"$"],[18491,1,""],[18491,0,"#sout "],[18483,8,""],[18483,0,"Unlike 3"],[18490,1,""],[18490,0,"@"],[18490,1,""],[18490,0,"#vin, $"],[18496,1,""],[18496,0,"#vout only mov"],[18509,1,""],[18508,1,""],[18507,1,""],[18506,1,""],[18505,1,""],[18504,1,""],[18503,1,""],[18502,1,""],[18502,0,"only advances monotic"],[18522,1,""],[18521,1,""],[18521,0,"onically forward through "],[18538,8,""],[18537,1,""],[18537,0,". (I"],[18540,1,""],[18540,0,"Events are added to #"],[18539,22,""],[18483,56,""],[18483,0,"For not entirely obvious reasons, "],[18517,7,""],[18516,0," @"],[18517,1,""],[18517,0,"#sout does not need to be as detailed as #sout. The only valid states"],[18574,12,""],[18574,0,"interesting "],[18574,12,""],[18574,0,"states that need"],[18565,25,""],[18564,1,""],[18517,47,""],[18487,30,""],[18487,0,"reasons that may "],[18499,5,""],[18499,0," aren't entirely releve"],[18521,1,""],[18521,0,"ant "],[18524,1,""],[18487,37,""],[18487,0,"complex reasons,"],[18504,0,"@"],[18504,1,""],[18504,0,"#sout is simpler than #sin. "],[18570,0," This corresponds to "],[18571,4,""],[18571,0,"In the fu"],[18579,1,""],[18578,1,""],[18578,0,"Fugue paper, these two states"],[18620,3,""],[18619,1,""],[18618,1,""],[18618,0," to the item #"],[18631,1,""],[18631,0,"$x$"],[18626,0,"stored "],[18641,0," val"],[18638,0,"value "],[18650,1,""],[18649,1,""],[18648,1,""],[18648,0,"bein"],[18648,4,""],[18483,21,""],[18431,196,""],[18431,0,"/ #sout: is the state of the node at version #vout. #sout is simpler than #sin. $sout in { mono(\"Ins\"), mono(\"Del\") }. In the Fugue paper, these two states correspond to the stored item value $x$"],[18628,0,"---"],[18431,0,"// "],[18431,3,""],[18483,0,"//"],[18484,1,""],[18483,1,""],[18510,0," //"],[18507,0,"s"],[18513,1,""],[18512,1,""],[18511,1,""],[18551,0,"//"],[18551,2,""],[18549,0,"#"],[18549,1,""],[18549,0,"$"],[18551,0," //"],[18551,3,""],[18552,21,""],[18552,0,"T"],[18598,0," having its "],[18609,1,""],[18619,0,", or being replaced with the s"],[18648,1,""],[18648,0,"tom"],[18644,7,""],[18644,0,"a tombstone value $perp"],[18663,4,""],[18663,0,"perp."],[18667,1,""],[18667,0,"$ respectively."],[18644,2,""],[18644,0,"the "],[18483,29,""],[18654,1,""],[18654,0," "],[18654,1,""],[18654,0,". "],[18655,1,""],[18655,0,"\n/ the "],[18658,4,""],[18658,0,"_delete map_: "],[18658,0,"The "],[18676,0,"asdf"],[18676,4,""],[18675,1,""],[18658,4,""],[18671,0," is a map from "],[18672,14,""],[18672,0,"stores a map from in"],[18691,1,""],[18690,1,""],[18690,0,"event ID $i$ to event ID $j$ for each "],[18723,5,""],[18723,0,"every visited delete event"],[18690,0,"delete "],[18712,0," insert"],[18763,0,". The in"],[18770,1,""],[18769,1,""],[18768,1,""],[18768,0," corresponding insert event"],[18763,0," in #$"],[18768,1,""],[18768,0,"vout"],[18743,8,""],[18743,0,"visited "],[18774,30,""],[18773,1,""],[18713,0,"the targetted "],[18717,10,""],[18736,0," that was deleted"],[18742,11,""],[18742,0,"the event deleted"],[18672,12,""],[18672,0,"maps"],[18676,5,""],[18692,0,"s"],[18671,0," For every visited de"],[18690,2,""],[18690,0,"delete event in #vout, the delete map"],[18732,8,""],[18732,0," the "],[18745,1,""],[18745,0," of the delete"],[18767,11,""],[18767,0,"the target "],[18795,0," was"],[18799,10,""],[18807,41,""],[18807,0,"."],[18656,0,"\n\n"],[18656,0,"\nFinally, the"],[18669,3,""],[17809,19,""],[18637,0,"\nAs well as a "],[18649,2,""],[18649,0,"the fugue tree, we also "],[18665,8,""],[18665,0,"the algorithm also associates"],[18684,0,"stores an "],[18703,1,""],[18691,12,""],[18691,0,"a"],[18691,1,""],[18665,0,"for each visi"],[18674,4,""],[18674,0,"delete event visited, "],[18673,0," visited"],[18694,8,""],[18694,0," $i$"],[18726,0,"$t_i$"],[18726,0,"the delete "],[18730,7,""],[18730,0,"ID of the tar"],[18742,1,""],[18741,1,""],[18740,1,""],[18740,0,"d"],[18740,1,""],[18740,0,"targetted item "],[18760,0,"."],[18736,14,""],[18740,0," "],[18740,1,""],[18740,0," deleted,"],[18653,6,""],[18657,0," of nodes"],[18753,5,""],[18752,1,""],[18751,1,""],[18729,0,"$t_i$: "],[18750,0," that"],[18746,9,""],[18746,0,"the target of $i$"],[18763,8,""],[18750,0,"e"],[18750,1,""],[18750,0,"item "],[18761,0,"ted"],[18772,164,""],[18562,0,"original "],[18782,0,"\n\n"],[18783,0,"The ordering rule is "],[18783,21,""],[18783,0,"Eg-walker uses fugue's "],[18798,8,""],[18798,0,"FugeM"],[18802,1,""],[18801,1,""],[18801,0,"ueMax's ordering rule $$"],[18824,0,"lt.cur"],[18827,3,""],[18827,0,"curly"],[18833,0,". All items are orded"],[18853,1,""],[18852,1,""],[18852,0,"ered in th"],[18861,1,""],[18860,1,""],[18860,0,"exampl"],[18860,6,""],[18860,0,"exactly the same ay"],[18878,1,""],[18877,1,""],[18877,0,"way as they are in FugueMAx."],[18904,1,""],[18903,1,""],[18902,1,""],[18902,0,"ax."],[18906,213,""],[18906,0,"\n"],[18906,0,"\n"],[18906,0,"\nAs "],[18907,3,""],[18907,0,"The event tree names two versions $$"],[18916,5,""],[18911,11,""],[18911,0,"state perpe"],[18921,1,""],[18920,1,""],[18919,1,""],[18918,1,""],[18917,1,""],[18917,0,"describes"],[18917,0,"simultaneously "],[18956,1,""],[18955,1,""],[18954,1,""],[18954,0,", #"],[18956,1,""],[18956,0,"$"],[18956,1,""],[18956,0,"#vin and #vout. "],[18971,1,""],[18932,22,""],[18932,0,"shows us w"],[18941,1,""],[18941,0,"two versions"],[18932,21,""],[18932,0,"represents the event graph at two versions:"],[18975,1,""],[18991,0," A"],[18992,1,""],[18991,1,""],[18991,0," #vin <= "],[18992,1,""],[18992,0,"@"],[18992,1,""],[18992,0,"#"],[18992,1,""],[18992,0,"$"],[19000,0,"vout$"],[18770,1,""],[18773,2,""],[18773,0,"by"],[18915,0," tree"],[18951,11,""],[18951,0,"Fugue's tree"],[18950,0," equv"],[18954,1,""],[18954,0,"ivalent"],[18967,0,"MAx"],[18969,1,""],[18968,1,""],[18968,0,"ax"],[19009,1,""],[19009,0,", with"],[19029,0," at all times.\n\nThe state at #vout is represented by the all nodes in "],[19086,13,""],[19086,0,"the set of all nodes in the tree. #ssin is disregarded"],[19119,0," "],[19119,1,""],[19140,0,". #sout st"],[19148,2,""],[19148,0,"stores "],[19085,4,""],[19085,0," simple"],[19086,30,""],[19086,0,"full"],[19095,0," of nodes"],[19134,7,""],[19134,0,"represents whether the item in question has been "],[19157,26,""],[19157,0,"od"],[19158,1,""],[19157,1,""],[19157,0,"node has been "],[19134,10,""],[19134,0,"stores"],[19149,18,""],[19149,0,"or "],[19141,11,""],[19141,0,"_Del_ if the node has bene"],[19166,1,""],[19165,1,""],[19165,0,"en replaced with a tombstone."],[19168,0,"deleted (and "],[19206,0,")"],[19208,0,"\n\n"],[19045,0,"The state at #vout is represented by the full tree of nodes. #ssin is disregarded. #sout stores _Del_ if the node has been deleted (and replaced with a tombstone).\n"],[19372,1,""],[19209,0,"\n"],[19227,1,""],[19226,1,""],[19225,1,""],[19225,0,"in"],[19250,18,""],[19250,0,"set of nodes"],[19250,0,"sube"],[19253,1,""],[19253,0,"set "],[19257,4,""],[19265,0," where #sin"],[19275,1,""],[19274,1,""],[19274,0,"sin#"],[19277,1,""],[19277,0," is not "],[19281,4,""],[19281,0,"in one of the { mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del(1)\"), mono(\"Del(2)\"), ... }$"],[19297,24,""],[19281,27,""],[19281,0,"either _Ins_ or "],[19297,8,""],[19297,0,"_"],[19302,1,""],[19302,0,"x"],[19305,1,""],[19304,1,""],[19304,0,"_"],[19305,25,""],[19297,0,"some "],[19297,5,""],[19305,0," for some _x_."],[19319,103,""],[19250,6,""],[19250,0,"sin"],[19252,1,""],[19251,1,""],[19251,0,"ubtree"],[18792,4,""],[18792,0,"obeys"],[18835,5,""],[18835,0,"I"],[18835,1,""],[18835,0,"O"],[18835,1,""],[18835,0,"I"],[19317,0," A node will only be in the _NotInsertedYet_ state if all of its children are also in this state, so entire subtree"],[19413,19,""],[19413,0,". We do not need to worry about orphaned nodes."],[19041,0,"\nThe state is "],[19054,1,""],[19053,1,""],[19052,1,""],[19052,0,"always "],[19042,17,""],[19041,1,""],[19413,1,""],[19413,0,", so\\"],[19418,2,""],[19417,1,""],[19417,0," w"],[19247,7,""],[19247,0,"tree"],[19313,0,")"],[19301,0,"("],[19314,1,""],[19301,1,""],[19300,0,","],[19461,0," "],[19461,1,""],[19461,0,"\n\nEach of these tr"],[19478,1,""],[19477,1,""],[19476,1,""],[19476,0," prote"],[19481,1,""],[19480,1,""],[19480,0,"jected"],[19463,0,"The system m"],[19474,1,""],[19474,0,"maintains the ein"],[19490,1,""],[19489,1,""],[19488,1,""],[19488,0,"invariant that "],[19503,1,""],[19503,0,"e"],[19526,0," trees exactly matches the equivalent tree at #"],[19572,1,""],[19572,0,"#vin and #vout."],[19564,0,"FugueMax "],[19573,4,""],[19573,0,"state"],[19473,0," constantly"],[19473,11,""],[19497,0,"s"],[19473,0," constantly"],[19473,11,""],[19518,15,""],[19518,0,"projections "],[19529,1,""],[19474,0,"constantly "],[18938,0,"\n"],[18938,1,""],[18902,0,"\n\n\n\n"],[19613,369,""],[18903,0,"#sou"],[18906,1,""],[18905,1,""],[18905,0,"i"],[18905,1,""],[18905,0,"sin - If $i in.not ceil(vin), ssin = mono(\"NotInsertedYet\")$\n- If $i in ceil(vin)$ but the item has not been deleted at #vin, $ssin = mono(\"Ins\")$\n- If $i in ceil(vin)$ and the item has been deleted at #vin, $ssin = mono(\"Del\")(n)$ where $n =$ the number of delete events in #vin targetting the item. (Items can be deleted by multiple events if the events are concurrent).\n"],[18908,1,""],[18908,0,"\n\n"],[18908,0," is "],[18909,3,""],[18903,0,"Te"],[18904,1,""],[18904,0,"he "],[18906,1,""],[18905,1,""],[18904,1,""],[18903,1,""],[18903,6,""],[18903,0,"#ssin"],[18902,0,"\n"],[18902,0,"\n#"],[18903,1,""],[18903,0,"The value of #ssin and ##sou"],[18930,1,""],[18929,1,""],[18928,1,""],[18927,1,""],[18927,0,"sout "],[18903,29,""],[18903,0,"The value of "],[18916,2,""],[18921,0," depends"],[14520,0,"\n"],[14520,0,"\n"],[14471,0,"\n"],[1001,1,""],[6670,0,"\n"],[6670,0,"\n"],[6671,2,""],[6671,0,"UI"],[6672,1,""],[6671,1,""],[6671,0,"In a departure from [po-log], "],[6701,1,""],[6701,0,"w"],[6671,31,""],[6671,0,"W"],[6857,0,"\n\nIn a departure from [po-log], w"],[6859,2,""],[6859,0,"Thisi s"],[6865,1,""],[6864,1,""],[6863,1,""],[6863,0," is"],[6895,0,"huic"],[6898,1,""],[6897,1,""],[6896,1,""],[6896,0,"ich defines versions using  a "],[6925,1,""],[6924,1,""],[6923,1,""],[6923,0,"a vector clock. "],[6938,1,""],[6938,0," "],[6938,1,""],[6900,8,""],[6908,0," the graph"],[6913,5,""],[6912,1,""],[6909,3,""],[6909,0,"changes"],[6938,0," "],[6938,1,""],[6938,0," "],[6859,80,""],[6859,0,"This is a departure from [po-log], which versions changes using a vector clock."],[6788,150,""],[6788,0,"events in $G$ that do not have any descendants within the same graph.\n\nThis is a departure from [po-log], which versions changes using a vector clock."],[6858,80,""],[6857,1,""],[6670,0,"\n"],[6670,0,"\n\nThis is a departure from [po-log], which versions changes using a vector clock."],[6670,1,""],[6671,0,"Po"],[6672,1,""],[6671,1,""],[6671,24,""],[6671,0,"The"],[6683,0," paper and associated work ([..]"],[6714,1,""],[6714,0,"]) uses"],[6717,4,""],[6717,0,"versions changes using a vec"],[6726,19,""],[6726,0,"events using a vector clock. This "],[6760,46,""],[6760,0,"choice is somewhat arb"],[6781,1,""],[6781,0,"bitrary - there are am"],[6802,1,""],[6801,1,""],[6801,0,"many usable versioning systems (eg hash graphs)"],[6806,7,""],[6806,0,"e"],[6806,1,""],[6806,0,"usable "],[6812,1,""],[6812,0,", ep"],[6815,1,""],[6814,1,""],[6814,0,"e"],[6814,1,""],[6814,0,"expressinv"],[6823,1,""],[6822,1,""],[6822,0,"ve "],[6860,0,". And its "],[6866,4,""],[6866,0,"vector clocks "],[6671,209,""],[6671,0,"The [po-log] paper and associated work ([..]) versions events using a vector clock. This choice is somewhat arbitrary - there are many usable, expressive versioning systems (eg hash graphs). And vector clocks"],[5017,0," )"],[5018,1,""],[5018,0,"($$"],[5020,0,"e i"],[5022,1,""],[5021,1,""],[5020,1,""],[5020,0,"i in G"],[5027,0,")"],[5020,4,""],[5020,0,"O"],[5020,1,""],[5020,0,"P_i subset"],[4837,4,""],[4837,0,"define"],[4837,0,"typically "],[4867,0,"_"],[4862,0,"_"],[4868,1,""],[4877,0,"-"],[4877,1,""],[4877,0,"_"],[4899,27,""],[4899,0,"modifies a "],[4918,0," according to the event"],[4899,42,""],[4899,0,"uses an event"],[4906,6,""],[4903,3,""],[4899,4,""],[4899,0,"applies the event to th"],[4921,1,""],[4920,1,""],[4920,0," a d"],[4923,1,""],[4922,1,""],[4921,1,""],[4920,1,""],[4920,0," a"],[4921,1,""],[4920,1,""],[4920,0,"a document"],[4987,0,"\""],[4989,0,"\""],[4987,0,"\\"],[4990,0,"\\"],[6354,0,"ro"],[6355,1,""],[6354,1,""],[6354,0,"to the graph "],[6383,0," Event $i$ can "],[6383,15,""],[6761,21,""],[6761,0,"typically "],[6761,10,""],[6761,0,"use a logical timestamp (typically"],[6810,0,") to version c"],[6823,1,""],[6815,8,""],[6815,0,"exp"],[6815,3,""],[6815,0,"both express versions and store the causal trals"],[6862,1,""],[6861,1,""],[6860,1,""],[6859,1,""],[6858,1,""],[6857,1,""],[6857,0," real"],[6861,1,""],[6860,1,""],[6860,0,"latiopnship"],[6858,13,""],[6858,0,"relationship between changes"],[6888,124,""],[6887,1,""],[6887,0," Thi"],[6890,1,""],[6889,1,""],[6888,1,""],[6887,1,""],[6887,0," In a depatru"],[6899,1,""],[6898,1,""],[6897,1,""],[6897,0,"rture from this work, we stick to graph theory f"],[6944,1,""],[6944,0,"to express versions. Th"],[6966,1,""],[6965,1,""],[6964,1,""],[6944,20,""],[6943,1,""],[6943,0,"."],[6908,4,""],[6908,0,"existing"],[6814,26,""],[6815,5,""],[6815,0,"express"],[6883,9,""],[6883,0," this"],[6864,56,""],[6864,0,"We "],[6866,1,""],[6865,1,""],[6864,1,""],[6863,1,""],[6863,0," Vector clocks have some "],[6864,24,""],[6864,0,"Vector clocks are quite hard to reason about em"],[6910,1,""],[6909,1,""],[6909,0,"mathematically "],[6923,1,""],[6923,0,", and they can graph "],[6943,1,""],[6942,1,""],[6941,1,""],[6940,1,""],[6940,0,"ow ui"],[6944,1,""],[6943,1,""],[6943,0,"quite"],[6943,5,""],[6943,0,"large on disk (every event "],[6958,0,"since the vector clock for "],[6958,39,""],[6863,95,""],[6863,0," In this wow"],[6874,1,""],[6874,0,"rk we insta"],[6880,5,""],[6880,0,"se"],[6881,1,""],[6880,1,""],[6880,0,"depart from this approach and stick to graph "],[6863,0," Vector "],[6864,7,""],[6863,1,""],[6864,14,""],[6864,0,"W"],[6912,0,"theory for verinion"],[6923,8,""],[6923,0,"versini"],[6929,1,""],[6928,1,""],[6928,0,"oning changes."],[6864,2,""],[6864,0,"In our definition of replayable event graphs, we"],[6943,0,"simply "],[6994,1,""],[6994,0," - though vector clocks may still be useful in practical implementations."],[7028,22,""],[7028,0,"find "],[7032,1,""],[7028,4,""],[7028,0,"be useful in practical"],[7050,17,""],[7050,0," implementations."],[6994,72,""],[14847,1,""],[14846,1,""],[15793,61,""],[15793,0,"as it would build a document from scar"],[15830,1,""],[15829,1,""],[15829,0,"racth"],[15833,1,""],[15832,1,""],[15831,1,""],[15831,0,"tch, "],[15805,0,"re "],[15807,1,""],[15838,0,"processing"],[15922,3,""],[15922,0,"could"],[15922,5,""],[15922,0,"can"],[15937,9,""],[15758,5,""],[15787,12,""],[15787,0," assuming it is"],[15803,7,""],[15803,0,"building"],[15967,0,"\n"],[15967,0,"\nWe have done extensive performance optimization and tuning on our algorithm. "],[16045,2,""],[16052,0,"s"],[16061,0," and [yyyyy] list"],[16074,4,""],[16074,0,"describe our benchmarking methol"],[16105,1,""],[16105,0,"dology, dat a"],[16117,1,""],[16116,1,""],[16116,0,"a sets and "],[16126,1,""],[16113,0,"our "],[16130,8,""],[16130,0," a"],[16131,12,""],[16144,0," used"],[16144,0,"."],[16146,40,""],[16146,0,"C"],[16197,33,""],[16197,0,"."],[16638,0,"\nL"],[16639,1,""],[16639,0,"Like the Fugue paper, we do not "],[16661,10,""],[16661,0,"our system does not natively model replace operations."],[16681,9,""],[16917,5,""],[16917,0,"functions "],[16926,1,""],[16917,9,""],[16917,0,"performsn"],[16925,10,""],[17022,9,""],[17022,0," an"],[17070,0,"\n\n\n"],[17070,0," "],[17070,1,""],[17069,1,""],[17069,0," ad"],[17071,1,""],[17071,0,"nd uses this state to transform operations."],[17103,10,""],[17103,0,"events"],[17111,0,"\n"],[17114,0,"// "],[17111,1,""],[17111,0,"\n"],[17329,0,"// "],[17329,3,""],[17329,0,"// "],[17110,0," These transformed events can be composed to get the resulting document state."],[17111,5,""],[17111,0,"The resulting"],[17163,3,""],[17163,0,"g"],[17163,1,""],[17163,0,"copmute"],[17163,7,""],[17163,0,"compute"],[17201,1,""],[17200,1,""],[17201,0,"\n"],[17201,0,"\nRatgher"],[17208,1,""],[17207,1,""],[17206,1,""],[17205,1,""],[17205,0,"ther "],[17209,1,""],[17208,1,""],[17207,1,""],[17206,1,""],[17205,1,""],[17205,0,"her than "],[17202,12,""],[17201,1,""],[17200,1,""],[17559,3,""],[17566,9,""],[17565,1,""],[17565,0,"like"],[17578,1,""],[17559,0,"In "],[17599,0," rep"],[17602,1,""],[17601,1,""],[17600,1,""],[17600,0,"is associated with"],[17618,22,""],[17639,0," "],[17639,1,""],[17639,0," of the graph"],[17654,0,"("],[17652,1,""],[17652,0,","],[17654,1,""],[17715,1,""],[17714,1,""],[17714,17,""],[17559,27,""],[17559,0,"A"],[17558,0,"\n\n"],[17559,0,"However, our in-memory "],[17572,10,""],[17568,4,""],[17568,0,"te"],[17569,1,""],[17569,0,"he eg-walker v"],[17582,1,""],[17582,0,"interne"],[17588,1,""],[17588,0,"al state"],[17568,28,""],[17568,0,"uc"],[17569,1,""],[17568,1,""],[17568,0,"due to the existence of con"],[17568,27,""],[17568,0,"the eg-walker data structure needs to run _prepare-update_ and _apply_u"],[17638,1,""],[17637,1,""],[17637,0,"-update_"],[17609,0," FugueMax's"],[17656,0," methods"],[17567,0," due to the existence of conr"],[17595,1,""],[17595,0,"current changes,"],[17611,4,""],[17621,16,""],[17621,0," "],[17689,0," at different versions"],[17710,1,""],[17710,0,"e"],[17710,1,""],[17710,0,"s"],[17690,12,""],[17690,0,"as if they happened at se"],[17714,1,""],[17713,1,""],[17713,0,"different"],[17731,0," in the "],[17723,16,""],[17723,0,"points in time. We "],[17741,1,""],[17740,1,""],[17739,1,""],[17738,1,""],[17738,0," _prepare-update_ must run "],[17761,4,""],[17761,0,"be run at the "],[17768,7,""],[17768,0,"as if it happened at the event's "],[17793,8,""],[17793,0,"version of the o"],[17808,1,""],[17808,0,"event. And _apply-update_ must run as if it happened at the m"],[17868,1,""],[17868,0,"resulting (mergeD"],[17884,1,""],[17884,0,"d) version."],[17611,0,"\n\n\n"],[17611,0," W"],[17612,1,""],[17612,0,"we cannot simply run fugue-max's _rep"],[17648,1,""],[17647,1,""],[17646,1,""],[17646,0,"prea"],[17649,1,""],[17649,0,"pare"],[17645,8,""],[17645,0,"_prepare-update_ and _apply-update_ functions to modify he"],[17702,1,""],[17701,1,""],[17701,0,"the internal state. "],[17690,0," in sequecn"],[17700,1,""],[17699,1,""],[17699,0,"nce"],[17733,0,"_parepa"],[17739,1,""],[17738,1,""],[17737,1,""],[17736,1,""],[17735,1,""],[17735,0,"repare-update_ must run in the "],[17755,0,"be "],[17769,0,"context of the event's parent version."],[17784,8,""],[17798,0," of each event"],[17813,0," This function "],[17814,14,""],[17813,1,""],[17732,0," The event's position is relative to its parent version, and the resulting CRDT mesag"],[17816,1,""],[17815,1,""],[17815,0,"sage must contain _rigi"],[17837,1,""],[17836,1,""],[17835,1,""],[17834,1,""],[17834,0,"origin)_"],[17841,1,""],[17841,0,"-"],[17841,1,""],[17840,1,""],[17840,0,"-left_ and _origin-right_ "],[17825,7,""],[17825,0,"have"],[17825,4,""],[17825,0,"set fields"],[17829,6,""],[17828,1,""],[17862,0,"fields according to the "],[17787,1,""],[17787,0,". Further, insert operations"],[17815,40,""],[17815,0," need an"],[17821,3,""],[17860,0," to be set"],[17871,16,""],[17871,0,"based on the document's surroud"],[17901,1,""],[17901,0,"nding context wh"],[17916,1,""],[17915,1,""],[17884,30,""],[17883,1,""],[17754,2,""],[17754,0,"must bse"],[17761,1,""],[17760,1,""],[17760,0,"e set"],[17754,11,""],[17754,0,"is expressed"],[17733,5,""],[17733,0,"Each editing e"],[17807,0," And the _prepare-update_ fuinctio"],[17833,8,""],[17833,0,"function must convert this position into a "],[17855,31,""],[17847,7,""],[17847,0,"assu"],[17850,1,""],[17850,0,"ign"],[17871,5,""],[17871,0," an"],[17872,3,""],[17911,0," based on the ad"],[17926,1,""],[17925,1,""],[17925,0,"be"],[17926,1,""],[17925,1,""],[17925,0,"nearbyi"],[17931,1,""],[17931,0," items when the parent version "],[17947,14,""],[17947,0,"event happened"],[17924,0," ID of"],[17967,0,"_"],[17944,0,"_"],[17969,0,"."],[17968,1,""],[17943,2,""],[17943,0," "],[17969,106,""],[17559,410,""],[17559,0,"However, due to the existence of concurrent changes, we cannot simply run fugue-max's _prepare-update_ and _apply-update_ functions in sequence to modify the internal state. Each editing event's position is expressed relative to its parent version. And the _prepare-update_ function must assign insert operations _origin-left_ and _origin-right_ fields based on the ID of nearby items when the event happened."],[17971,0,"// "],[17969,0,"\n"],[17731,0," of the CRDT"],[17982,0,"> This "],[17984,5,""],[17984,0,"DIAGRAM??"],[17200,0,"\n\nThe "],[17202,4,""],[17202,0,"Eg-walkers"],[17211,1,""],[17211,0,"'s state departs from "],[17219,14,""],[17219,0," differs from gugue"],[17233,5,""],[17233,0,"fuf"],[17235,1,""],[17235,0,"gue's state in that it stores the "],[17219,0," departs"],[17227,13,""],[17227,0," from"],[17246,23,""],[17246,0," in one important aspect: rather than "],[17272,1,""],[17272,0,"R"],[17264,6,""],[17264,0,"way"],[17281,0,"simply storing the merged "],[17300,7,""],[17300,0,"final merged state "],[17313,6,""],[17313,0,"res"],[17300,16,""],[17300,0,"result of merging all items in the graph, "],[17335,7,""],[17269,12,""],[17269,0,"In ste"],[17274,1,""],[17273,1,""],[17272,1,""],[17272,0,"ste"],[17274,1,""],[17273,1,""],[17272,1,""],[17271,1,""],[17271,0,"stead of "],[17321,13,""],[17321,0,"visited items, we also store the state of each item at "],[17202,0,"// "],[17202,177,""],[17202,0,"// Eg-walker's state departs from fugue's state in one important way: Instead of simply storing the result of merging all visited items, we also store the state of each item at"],[17881,2,""],[17881,0,"while"],[17892,1,""],[17892,0,"ying"],[17881,46,""],[17881,0,"during the traversal"],[17902,0," Te"],[17904,1,""],[17904,0,"he problems "],[17915,1,""],[17914,1,""],[17914,0," is that _prepare-update_ must run in the context of the event's parent version::"],[17994,1,""],[17994,0,"\n\n\n"],[17995,0,"\n- "],[17996,2,""],[17996,0,"-"],[17997,2,""],[18053,10,""],[18053,0,"the document aa"],[18067,1,""],[18067,0,"t the parent"],[18088,1,""],[18087,1,""],[18087,0,"\n\n"],[18088,1,""],[18088,0,"- "],[18090,45,""],[18090,0,"When processing"],[18123,0,", _parep"],[18130,1,""],[18129,1,""],[18128,1,""],[18127,1,""],[18127,0,"repare-update_ must output an"],[18154,3,""],[18209,0,"s"],[18214,6,""],[18214,0,"adjacent"],[18229,24,""],[18147,6,""],[18147,0,"assign"],[18229,0,"at the parent version"],[17906,16,""],[17923,0," function"],[17839,20,""],[17839,0," "],[17848,1,""],[17848,0," on each event "],[17862,1,""],[17875,20,""],[17875,0,"during the traversal"],[17931,0," be"],[17983,1,""],[17983,0," for two reasons:"],[18093,0,"."],[18093,1,""],[18096,160,""],[18096,0,"The resulting CRDT event is based on the "],[18121,16,""],[18121,0,"depends on the CRDT's state at the parent version "],[18170,1,""],[18170,0,". Insert events are populat"],[18186,11,""],[18186,0,"must be populated with _origin-left_ and _origin-right_"],[18171,0," Delete events "],[18179,7,""],[18179,0,"messages need the ID of the item being deleted, and "],[18231,2,""],[18231,0,"i"],[18237,7,""],[18237,0," messages need"],[18251,23,""],[18284,0," fields based on the ID of adjacent items "],[18325,1,""],[18325,0," when the message was created."],[18093,0,"."],[17736,0,"\n"],[17736,0,"\n"],[17736,1,""],[17735,1,""],[17735,0,"\n\nFugue-max's _prepare-update_meth"],[17768,1,""],[17767,1,""],[17766,1,""],[17765,1,""],[17764,1,""],[17764,0," "],[17764,1,""],[17764,0,"_ method converts events from the avem"],[17801,1,""],[17800,1,""],[17799,1,""],[17799,0,"boe"],[17801,1,""],[17800,1,""],[17800,0,"ve"],[17801,1,""],[17800,1,""],[17800,0,"ove format"],[17798,12,""],[17798,0,"format listed above to either _insert(origin_left, origin_right)"],[17836,0,"id, "],[17865,0,", x"],[17869,0,"_ or _delete(id)_"],[17737,0,"// "],[17737,152,""],[17736,1,""],[17735,1,""],[18171,0," "],[18171,1,""],[18171,0," "],[18171,1,""],[18172,0," Fugue-max's _prepare-update_ method converts events from the format listed above to either _insert(id, origin_left, origin_right, x)_ or _delete(id)_ for in"],[18328,1,""],[18327,1,""],[18326,1,""],[18325,1,""],[18324,1,""],[18323,1,""],[18322,1,""],[18322,0,"."],[18444,0,"to be filled in "],[18826,0,"\n"],[18826,0,"\nTo "],[18829,1,""],[18828,1,""],[18827,1,""],[18959,1,""],[18959,0,"\n\n"],[18829,0,"// "],[18827,1,""],[18828,3,""],[18828,0,"// "],[18963,0,"Unlike a traditional "],[18972,12,""],[18972,0," "],[18972,1,""],[18972,0,"normal CRDT state - whch "],[18963,34,""],[18962,1,""],[18962,0,"\n"],[18828,3,""],[18827,0,"Normally, "],[18827,11,""],[18957,0," NMo"],[18960,1,""],[18959,1,""],[18959,0,"ormally, _prepare-update_ only runs "],[18985,10,""],[18985,0,"is ur"],[18989,1,""],[18988,1,""],[18988,0,"run with a CRDT"],[18985,18,""],[18985,0,"is run "],[18988,4,""],[18988,0,"only run on the peer which e"],[19015,1,""],[19015,0,"generated that change, at the "],[19038,7,""],[19038,0,"and the CRDT's version matches the events' "],[19080,1,""],[19079,1,""],[19078,1,""],[19078,0,"'s parent version when the ch"],[19096,11,""],[19096,0,"on the replica at the moment when the change happened."],[18827,131,""],[18836,0," this isn't a problem as"],[18918,4,""],[18918,0,"each"],[18929,114,""],[18929,0," at t"],[18933,1,""],[18932,1,""],[18931,1,""],[18930,1,""],[18929,1,""],[18929,0,", at the point"],[18938,5,""],[18938,0,"moment in time when the event happened. However, for eg-walker we need to process"],[18987,4,""],[18997,18,""],[18996,1,""],[18977,0," At that moment in time, the locak replica "],[19006,14,""],[19006,0,"local replica stores a copy of the CRDT state."],[19027,10,""],[19041,0," in memory at that specific version"],[19055,21,""],[19055,0,"the n"],[19059,1,""],[19059,0,"n"],[19059,1,""],[19059,0,"de"],[19060,1,""],[19059,1,""],[19059,0,"parent version"],[19093,0," "],[19075,19,""],[19074,1,""],[19075,0,"\nTo "],[19076,3,""],[19076,0,"To"],[18931,21,""],[18930,1,""],[17737,0,"During the traversal, we "],[17759,3,""],[17759,0,"eg-walker run s"],[17773,1,""],[17772,1,""],[17772,0,"s FugueMax's _prepare-update_ and _apply-update_ methods o"],[17829,1,""],[17829,0,"to create and merge CRDT events in to its internal "],[17860,20,""],[17860,0,". "],[17839,3,""],[17839,0,"then"],[17839,5,""],[17839,0,"and "],[17860,0," in to its insern"],[17876,1,""],[17875,1,""],[17874,1,""],[17873,1,""],[17873,0,"ternal state"],[17895,0," _p"],[17897,1,""],[17896,1,""],[17895,1,""],[17895,0," _prepare-update_ "],[17896,18,""],[18025,20,""],[18025,0,"during the traversal "],[18045,1,""],[17896,23,""],[17896,0,"in the presence of"],[18128,0,", and "],[18128,6,""],[18128,0,"."],[18106,0,"CRDT state at each "],[18120,5,""],[18120,0,"the "],[15755,0,"\n"],[15755,0,"\nEg-walker can "],[15766,4,""],[15766,0,"suppor"],[15756,18,""],[15773,0," the _full replay_ case for the algorithm, whe"],[15816,3,""],[15816,0,"when"],[15821,28,""],[15821,0,"eg-walker builds"],[15837,9,""],[15831,0,"processes _all_ events in the event graph and "],[15894,0," entirely"],[15916,1,""],[15916,0,"."],[15918,40,""],[15918,0,"This is a soecial"],[15928,7,""],[15928,0,"special case of _partial replay_ "],[15960,1,""],[15960,0,", where $$"],[15969,0,"v"],[15969,1,""],[15969,0,"V-"],[15970,1,""],[15970,0,"_0 = emp"],[15975,3,""],[15975,0,"emptyset"],[15986,5,""],[15986,0,"In section [xxx]"],[16006,5,""],[16040,9,""],[16040,0," generaliza"],[16050,1,""],[16050,0,"ed "],[16052,1,""],[16052,0," for"],[16056,13,""],[16049,1,""],[16049,0,"s"],[16053,3,""],[16053,0,"to support "],[16063,1,""],[16080,0," asdf ewf."],[16080,10,""],[16080,0," Asdf "],[16085,1,""],[16085,0," asdf."],[16080,11,""],[1379,9,""],[1379,0,"piecemeal"],[2333,1,""],[2332,0,"e"],[3219,1,""],[3219,0,"e"],[17613,1,""],[17613,0,"ies"],[17615,1,""],[15755,326,""],[15987,0,"\nWe first describe the _full replay_ case for the algorithm, when eg-walker processes _all_ events in the event graph and builds a document entirely from scratch. This is a special case of _partial replay_, where $V_0 = emptyset$. In section [xxx], we describe how the algorithm can be generalised to support partial updates.\n"],[15987,326,""],[16677,0,"\nWe first describe the _full replay_ case for the algorithm, when eg-walker processes _all_ events in the event graph and builds a document entirely from scratch. This is a special case of _partial replay_, where $V_0 = emptyset$. In section [xxx], we describe how the algorithm can be generalised to support partial updates.\n"],[17183,0,", containing all visited"],[17185,22,""],[17184,1,""],[17115,21,""],[17115,0,"builds"],[17115,0,"iteratively "],[17180,0,". This state is"],[17195,5,""],[17199,1,""],[17199,0,"d"],[17201,11,""],[17213,0," incoming"],[17214,8,""],[17214,0,"each"],[17224,1,""],[17224,0," as the event is s"],[17241,1,""],[17241,0,"visited"],[17289,0," use "],[17293,1,""],[17293,0,"d directly or"],[17356,0,"\n\nFor example, given these events:\n\n```\n\n```"],[17396,0,"[\n  {id: X, originLeft: _, originRight: _, inputState: S, outputState: S}\n  {id: Y, originLeft: _, originRight: _, inputState: S, outputState: S}\n  {id: Z, originLeft: _, originRight: _, inputState: S, outputState: S}\n]"],[17395,0,"\n\n"],[17396,0,"[\n  {id: X, originLeft: _, originRight: _, inputState: S, outputState: S}\n  {id: Y, originLeft: _, originRight: _, inputState: S, outputState: S}\n  {id: Z, originLeft: _, originRight: _, inputState: S, outputState: S}\n]"],[17614,1,""],[17613,1,""],[17396,1,""],[17395,1,""],[17612,0,"```\n```"],[17615,0,"\n"],[17540,2,""],[17468,2,""],[17396,2,""],[17544,29,""],[17474,29,""],[17404,29,""],[17485,1,""],[17444,1,""],[17403,1,""],[17482,1,""],[17442,1,""],[17402,1,""],[17482,29,""],[17443,29,""],[17404,29,""],[17424,0,"e"],[17414,0,"e"],[17404,0,"e"],[17427,0,"v"],[17416,0,"v"],[17405,0,"v"],[17430,0,"e"],[17418,0,"e"],[17406,0,"e"],[17433,0,"n"],[17420,0,"n"],[17407,0,"n"],[17436,0,"t"],[17422,0,"t"],[17408,0,"t"],[17439,0,":"],[17424,0,":"],[17409,0,":"],[17442,0," "],[17426,0," "],[17410,0," "],[17445,0,"I"],[17428,0,"I"],[17411,0,"I"],[17448,0,"n"],[17430,0,"n"],[17412,0,"n"],[17451,0,"s"],[17432,0,"s"],[17413,0,"s"],[17454,0,"e"],[17434,0,"e"],[17414,0,"e"],[17457,0,"r"],[17436,0,"r"],[17415,0,"r"],[17460,0,"t"],[17438,0,"t"],[17416,0,"t"],[17463,0,"("],[17440,0,"("],[17417,0,"("],[17466,0,"'"],[17442,0,"'"],[17418,0,"'"],[17469,0,"A"],[17444,0,"A"],[17419,0,"A"],[17472,0,"'"],[17446,0,"'"],[17420,0,"'"],[17475,0,","],[17448,0,","],[17421,0,","],[17478,0," "],[17450,0," "],[17422,0," "],[17481,0,"4"],[17452,0,"4"],[17423,0,"4"],[17483,1,""],[17453,1,""],[17423,1,""],[17481,0,"0"],[17452,0,"0"],[17423,0,"0"],[17484,0,")"],[17454,0,")"],[17424,0,")"],[17487,0,","],[17456,0,","],[17425,0,","],[17490,0," "],[17458,0," "],[17426,0," "],[17493,0,"p"],[17460,0,"p"],[17427,0,"p"],[17496,0,"a"],[17462,0,"a"],[17428,0,"a"],[17499,0,"r"],[17464,0,"r"],[17429,0,"r"],[17502,0,"e"],[17466,0,"e"],[17430,0,"e"],[17505,0,"n"],[17468,0,"n"],[17431,0,"n"],[17508,0,"t"],[17470,0,"t"],[17432,0,"t"],[17511,0,"s"],[17472,0,"s"],[17433,0,"s"],[17514,0,":"],[17474,0,":"],[17434,0,":"],[17517,0," "],[17476,0," "],[17435,0," "],[17520,0,"["],[17478,0,"["],[17436,0,"["],[17523,0,"]"],[17480,0,"]"],[17437,0,"]"],[17401,1,""],[17401,0,"A"],[17445,1,""],[17445,0,"B"],[17489,1,""],[17489,0,"C"],[17484,0,"{id: C, event: Insert('A', 0), parents: []}\n"],[17533,1,""],[17533,0,"D"],[17463,1,""],[17463,0,"B"],[17507,1,""],[17507,0,"C"],[17551,1,""],[17551,0,"D"],[17481,0,"A"],[17526,0,"A"],[17571,0,"B, C"],[17467,1,""],[17467,0,"1"],[17512,1,""],[17512,0,"1"],[17557,1,""],[17557,0,"2"],[17557,1,""],[17557,0,"3"],[17581,0,"\n\nEg-walker process"],[17593,7,""],[17593,0,"traverses "],[17583,20,""],[17583,0,"Eg-walker traverses"],[17376,0," the graph of"],[17615,0," this graph (either "],[17626,9,""],[17626,0," "],[17626,1,""],[17626,0," in order"],[17630,5,""],[17630,0,"cas"],[17632,1,""],[17632,0,"usal order (either A, B, C, D or "],[17661,0,"]"],[17651,0,"["],[17663,0,"$"],[17651,0,"$"],[17669,0,"$[A, B, C, D]$"],[17644,6,""],[17644,0,"in order of"],[17644,11,""],[17644,0,"either in or"],[17644,12,""],[17643,1,""],[17643,0,"- ie, either in order of"],[17696,1,""],[17695,1,""],[17694,1,""],[17693,1,""],[17692,1,""],[17691,1,""],[17691,0,"C, B, "],[17700,0,". The events are con"],[17702,18,""],[17702,0,"During the traversal, the events are converted to the corresponding"],[17756,0,"equii"],[17760,1,""],[17760,0,"valemnt "],[17767,1,""],[17766,1,""],[17765,1,""],[17764,1,""],[17764,0,"nt "],[17767,13,""],[17767,0,"FugueMax CRDT events:"],[17794,2,""],[17938,2,""],[17866,2,""],[17794,2,""],[18004,2,""],[17939,1,""],[17869,1,""],[17799,1,""],[17937,0,"A"],[17868,0,"A"],[17799,0,"A"],[17869,1,""],[17869,0,"B"],[17939,1,""],[17939,0,"C"],[17934,0,"{id: C, originLeft: _, originRight: _, inputState: S, outputState: S}\n"],[18009,1,""],[18009,0,"D"],[17814,1,""],[17814,0,"_"],[18042,30,""],[17972,30,""],[17902,30,""],[17832,30,""],[17952,0," "],[17912,0," "],[17872,0," "],[17832,0," "],[17956,0,"x"],[17915,0,"x"],[17874,0,"x"],[17833,0,"x"],[17960,0,":"],[17918,0,":"],[17876,0,":"],[17834,0,":"],[17964,0," "],[17921,0," "],[17878,0," "],[17835,0," "],[17968,0,"'"],[17924,0,"'"],[17880,0,"'"],[17836,0,"'"],[17972,0,"A"],[17927,0,"A"],[17882,0,"A"],[17837,0,"A"],[17976,0,"'"],[17930,0,"'"],[17884,0,"'"],[17838,0,"'"],[17884,1,""],[17884,0,"B"],[17931,1,""],[17931,0,"C"],[17978,1,""],[17978,0,"D"],[17814,1,""],[17814,0,"root"],[17814,4,""],[17814,0,"start"],[17834,1,""],[17834,0,"end"],[17867,1,""],[17867,0,"A"],[17914,1,""],[17914,0,"A"],[17883,1,""],[17883,0,"ed"],[17884,1,""],[17884,0,"nd"],[17932,1,""],[17932,0,"end)"],[17932,0,"("],[17886,0,")"],[17883,0,"("],[17837,0,")"],[17834,0,"("],[17819,0,")"],[17814,0,"("],[17874,0,"      "],[17931,0,"      "],[17988,0,"      "],[17570,1,""],[17570,0,"2"],[17985,1,""],[17985,0,"B"],[18007,1,""],[18007,0,"C"],[18009,0,"    "],[18021,0,"\n\n"],[18022,1,""],[18021,1,""],[18025,0,"\n\n"],[17590,0," // Between B and C."],[17542,0," // NOTE"],[17546,4,""],[17546,0,"Conr"],[17549,1,""],[17548,1,""],[17547,1,""],[17546,1,""],[17546,0,"<-- Concurrent with B!"],[17620,0,"Inserted "],[17629,1,""],[17629,0,"b"],[17701,1,""],[17700,1,""],[17700,20,""],[17700,0,"arbitrarily either"],[18077,0,"\nAnd merged into "],[18078,16,""],[18078,0,"And merged into"],[17838,0," using FugueMax's _prepare-update_ function"],[18136,0," the "],[18137,4,""],[18137,0,"FugueMax's state, "],[18154,1,""],[18153,1,""],[18153,0,". As "],[18148,10,""],[18148,0,"tree."],[18137,0,"the "],[18150,1,""],[18149,1,""],[18155,0," As items are merge in, the reuls"],[18187,1,""],[18186,1,""],[18185,1,""],[18185,0,"suling"],[18190,1,""],[18189,1,""],[18188,1,""],[18187,1,""],[18187,0,"lting (final"],[18193,1,""],[18198,0," position is computed in order to transform the events into this list. Note, this assumes the order of"],[18288,12,""],[18288,0,"they are pro"],[18269,31,""],[18268,1,""],[18258,10,""],[18258,0,"the following list - assuming "],[18276,12,""],[18276,0,". Note, "],[18276,8,""],[18276,0,":"],[18278,0,"\n```\n{id: A, event: Insert('A', 0), parents: []}\n{id: B, event: Insert('B', 1), parents: [A]}\n{id: C, event: Insert('C', 1), parents: [A]} // <-- Concurrent with B!\n{id: D, event: Insert('D', 2), parents: [B, C]} // Inserted between B and C.\n```\n"],[18472,47,""],[18401,41,""],[18356,15,""],[18312,14,""],[18402,0,"}"],[18372,0,"}"],[18342,0,"}"],[18312,0,"}"],[18372,1,""],[18372,0,"2"],[18375,0," // <-- NOTE "],[18383,5,""],[18383,0,"Position was changed!"],[18439,0,"\n\nThis list of "],[18441,13,""],[18441,0,"Order "],[18441,6,""],[17381,21,""],[17381,0,"this"],[17377,8,""],[17377,0,"this set of events"],[17382,4,""],[17382,0,"graph "],[17377,14,""],[17377,0,"these "],[17663,0,"event "],[17377,12,""],[17377,0,"tjis"],[17377,4,""],[17377,0,"these events"],[17377,5,""],[17377,0,"the "],[17380,1,""],[17380,0," following set / graph of"],[17396,1,""],[17395,1,""],[17395,0,"("],[17401,0,")"],[17396,0,"& "],[17391,7,""],[17396,1,""],[17371,5,""],[17371,0,"consider"],[17677,17,""],[17677,0," these "],[17683,1,""],[17682,1,""],[17681,1,""],[17681,0," ee"],[17683,1,""],[17683,0,"vents"],[17707,11,""],[17707,0,"ion "],[17710,1,""],[17709,1,""],[17708,1,""],[17708,0,"n this case"],[17768,4,""],[17779,4,""],[17800,17,""],[17800,0,"into"],[17832,8,""],[17832,0,"the CRDT"],[18124,3,""],[18124,0,"a"],[18237,25,""],[18237,0,", producing the following list of transformed events:"],[18453,0,"\nNote this final list is "],[18459,19,""],[18459,0,"order matters in this final list. If "],[18454,42,""],[18454,0,"Note order matters in this final list. If events were processed in the order of $[A, C, B, D]$, the r"],[18554,1,""],[18554,0,"transformed positions would di"],[18583,1,""],[18582,1,""],[18582,0,"insetad b"],[18582,9,""],[18576,6,""],[18575,1,""],[18574,1,""],[18574,0," for each"],[18575,8,""],[18574,1,""],[18574,0,"s would be different. But "],[18599,1,""],[18598,1,""],[18597,1,""],[18596,1,""],[18595,1,""],[18595,0,"\n\nThese transformed events can be applied in order to produce"],[18645,0," to an empty document"],[18677,0," the document \"ABC"],[18694,0,"D"],[18696,0,"\"."],[18677,13,""],[16677,326,""],[19189,3,""],[19189,0,"this"],[18898,0,"\n"],[18898,0,"\n\nWe first describe the _full replay_ case for the algorithm, when eg-walker processes _all_ events in the event graph and builds a document entirely from scratch. This is a special case of _partial replay_, where $V_0 = emptyset$. In section [xxx], we describe how the algorithm can be generalised to support partial updates.\n"],[18079,3,""],[18079,0,"has"],[18150,15,""],[18150,0,"the list of transformed operations"],[18269,0,"for each event "],[18303,0," But the result"],[18408,0,"\n"],[18319,1,""],[18407,0,"\nNote order matters in the list of transformed operations. If events were processed in the order of $[A, C, B, D]$, the transformed positions for each event would be different. But the result"],[18128,191,""],[18216,0,"\n"],[18408,0,"ing document "],[18402,19,""],[18402,0,"result after a"],[18415,1,""],[18415,0,"merging all events in order would b eth"],[18453,1,""],[18452,1,""],[18451,1,""],[18450,1,""],[18449,1,""],[18449,0,"still be the same."],[18434,9,""],[18461,536,""],[18460,1,""],[18463,0,"// "],[18884,0," in sequence"],[18928,25,""],[18911,17,""],[18911,0,"CRDT "],[18907,9,""],[18907,0,"CRDT an"],[18913,1,""],[18912,1,""],[18912,0,"events "],[18912,7,""],[18912,0,"messages and merge them in to the local state"],[19017,6,""],[19017,0,"naively"],[19066,48,""],[19066,0," and g"],[19071,1,""],[19070,1,""],[19069,1,""],[19068,1,""],[19067,1,""],[19066,1,""],[19066,0," using FugueMax's "],[19067,17,""],[19066,1,""],[19066,0," on the voso"],[19077,1,""],[19076,1,""],[19075,1,""],[19075,0,"isited events"],[19070,4,""],[19070,0,"eahc "],[19074,1,""],[19073,1,""],[19072,1,""],[19072,0,"ch "],[19070,5,""],[19067,17,""],[19067,0,"using the state we have constructed so f"],[19073,34,""],[19073,0,"FugueMax's state"],[19073,11,""],[19066,12,""],[19066,0," using the state assembled so far"],[19747,0,"\n"],[19747,0,"\nWe can see both of "],[19759,8,""],[19759,0,"this at play in the example above. The insert of \"C\""],[19794,17,""],[19794,0,"Event #"],[19800,1,""],[19800,0,"$X$"],[19802,1,""],[19801,1,""],[19801,0,"X$"],[19802,1,""],[19801,1,""],[19801,0,"C$"],[19799,0,"s #"],[19801,1,""],[19801,0,"$V"],[19802,1,""],[19802,0,"B$ and"],[19812,0," are concurrent. When processing event $C$, _parepa"],[19862,1,""],[19861,1,""],[19860,1,""],[19859,1,""],[19858,1,""],[19858,0,"repare-update_ must function *"],[19887,1,""],[19887,0,"*as if* "],[19894,1,""],[19893,1,""],[19887,1,""],[19887,0,"_"],[19893,0,"_ the CRDT's state only"],[19903,13,""],[19903,0," only contained C's parents (${A}$)"],[19932,6,""],[19931,1,""],[19930,1,""],[19930,0," (in this case, simply "],[19946,7,""],[19946,0,"only event A)."],[19958,0,"$"],[19957,0,"$"],[19904,5,""],[19913,0," only"],[19951,0,"the "],[19951,4,""],[19083,9,""],[19083,0,"constructed"],[19077,5,""],[19077,0,"aggregate CRDT state of all "],[19077,10,""],[19077,0,"con"],[19079,1,""],[19078,1,""],[19077,1,""],[19077,0,"constructed "],[19099,27,""],[19207,3,""],[19207,0,"There are"],[19228,0," for this"],[19977,0," If this were nopt the case"],[19981,23,""],[19981,0,"we nait"],[19987,1,""],[19987,0,"vely interpret event $C$ in the contexte"],[20026,1,""],[20026,0," created so far (eith "],[20043,5,""],[20043,0,"containing both events A and B), we would generate this CRDT message:\n\n\n{id: C, originLeft: A,       originRight: (end), x: 'C'}"],[20114,0,"```"],[20174,0,"\n```"],[20141,6,""],[20154,5,""],[20154,0,"B"],[20164,0," // originRi"],[20168,8,""],[20168,0,"originRight has changed!"],[20196,0,"\n\nAnd the document would incorrectly become \"ACDB\""],[20202,4,""],[20202,0,"we wopuld "],[20211,1,""],[20210,1,""],[20209,1,""],[20208,1,""],[20207,1,""],[20207,0,"uld create the resulting "],[20240,25,""],[20240,0," of"],[20250,0," - which would"],[20201,0," our local replica"],[20219,4,""],[20219,0," "],[20279,0," not converge "],[20198,95,""],[20198,0,"And our local replica would create the resulting document of \"ACDB\" - which would not converge"],[19976,0," in ro"],[19981,1,""],[19980,1,""],[19980,0,"order to correctly set originRight to the "],[19976,46,""],[20085,0,"incorrectly "],[20192,12,""],[20192,0,"is incorrect"],[20213,0," then"],[20282,27,""],[20282,0,". This "],[20210,79,""],[20210,0,"And then our local replica would create the resulting document of \"ACDB\". This"],[18393,0," However,"],[18402,4,""],[18393,1,""],[18393,0,"\n\n"],[18403,0," no matter the traversal order,"],[18459,36,""],[18459,0," must always be the same. (This i"],[18491,1,""],[18491,0,"follows from the CRDT's commutivity property)."],[18521,0,"at"],[18244,7,""],[18243,1,""],[18243,0," outpu"],[18244,5,""],[18243,1,""],[18265,1,""],[18265,0," list"],[18217,0,"\n"],[18217,0,"\nNote the order of events output by "],[18236,17,""],[18236,0,"transformed events matters"],[18255,7,""],[18255,0,"depends on "],[18265,1,""],[18255,0," "],[18255,1,""],[18255,0,"- abnd"],[18260,1,""],[18259,1,""],[18258,1,""],[18258,0,"nd their transformed positions - "],[18301,0," the tran"],[18309,1,""],[18309,0,"versal order. "],[18218,105,""],[18218,0,"Note the order of transformed events - and their transformed positions - depends on the traversal order."],[18322,55,""],[18380,0,"not only would hte "],[18398,1,""],[18397,1,""],[18396,1,""],[18395,1,""],[18395,0,"the output order change, but "],[18471,13,""],[18471,0,"also change. ("],[18484,1,""],[18483,1,""],[18631,0,"Events may also be missing entirely from the transfore"],[18684,1,""],[18684,0,"med output. This can happen if an item is concurrently deleted "],[18715,32,""],[18715,0,"multiple "],[18715,9,""],[18715,0,"an item "],[18701,4,""],[18701,0,"will "],[18724,0,"has been concurrently deleted by multiple peers."],[18757,15,""],[18757,0,"different peers."],[18716,0,",u"],[18717,1,""],[18716,1,""],[18716,0,"multiople "],[18725,1,""],[18724,1,""],[18723,1,""],[18722,1,""],[18721,1,""],[18721,0,"ple peers concurrently deleted the same "],[18761,3,""],[18765,50,""],[18765,0,". "],[18766,1,""],[18575,1,""],[18626,1,""],[18484,0,"\nCLAIM"],[18489,1,""],[18488,1,""],[18487,1,""],[18486,1,""],[18485,1,""],[18485,0,"**Claim"],[18486,1,""],[18491,0,":*"],[18493,1,""],[18493,0," "],[18494,10,""],[18494,0,"N"],[18549,5,""],[18549,0," will"],[18692,0," stet"],[18696,1,""],[18695,1,""],[18695,0,"ream"],[18705,5,""],[18712,0,"s"],[18714,2,""],[18714,0,"when"],[18718,9,""],[18744,1,""],[18743,1,""],[18743,0,"e"],[19257,0," _prea"],[19262,1,""],[19262,0,"pare_update"],[19257,1,""],[19257,0," "],[19266,1,""],[19266,0,"-"],[19273,0,"_ takes the C"],[19285,1,""],[19284,1,""],[19283,1,""],[19282,1,""],[19281,1,""],[19281,0,"a CRDT state as input, and uses that state to compute the CRDT message. The input CRDT "],[19357,11,""],[19357,0,"version of the CRDT passed to _prepare-update_ must match the "],[19418,1,""],[19418,0," version of the event's parentsf"],[19449,1,""],[19449,0," field."],[19455,0," in order to correctly interpret the event"],[19455,323,""],[19455,0,", for two reason:"],[19471,1,""],[19471,0,"s:"],[19376,0," state"],[20003,0,"\n"],[20003,0,"\n. However, in the presence of concurrent changes, we cannot naively run fugue-max's _prepare-update_ function using the constructed CRDT state. The _prepare-update_ function must be run in the context of the CRDT state at the event's parent version. There are two reasons for this:"],[20004,12,""],[20004,0,"As a result, i"],[20056,2,""],[20056,0,"during our traversal we"],[20146,12,""],[20143,3,""],[20143,0,"the"],[20143,4,""],[20143,0,"a "],[20155,0," constructed by merging all events visited so far"],[20205,138,""],[20017,39,""],[20166,2,""],[20166,0," "],[20385,60,""],[20385,0,"_prepare-U"],[20394,1,""],[20394,0,"update_ runs using the CRDT generated by all visited events"],[20455,11,""],[20460,7,""],[20500,5,""],[20500,0,"fo"],[20501,1,""],[20500,1,""],[20500,0,"the following "],[20616,5,""],[20641,6,""],[20641,0,"produce"],[20652,22,""],[20652,0," document"],[20641,0,"incorrectly "],[20660,13,""],[20668,5,""],[20667,1,""],[20667,0," "],[20667,1,""],[20667,0,", as items \"B\" and \"C\" would be ordered by the traversal"],[20707,2,""],[20707,0,"accco"],[20711,1,""],[20710,1,""],[20710,0,"ording to our"],[20723,4,""],[20733,0," order instead of ordered according"],[20751,0,"(corere"],[20757,1,""],[20756,1,""],[20755,1,""],[20755,0,"rectly) "],[20671,0," concurrently inserted"],[20729,0,"as an acc"],[20732,6,""],[20731,1,""],[20730,1,""],[20729,1,""],[20672,22,""],[20672,0,"the resulting "],[20667,1,""],[20667,0,". The"],[20672,7,""],[20683,5,""],[20683,0,"order of items"],[20719,20,""],[20719,0,"dependent on "],[20731,1,""],[20731,0," the"],[20735,4,""],[20751,0," rather than"],[20763,41,""],[20691,0," concurrently inserted"],[20738,12,""],[20738,0,"depend"],[20779,0," tie-breaking based on the"],[20802,3,""],[20802,0,"a comparison of the event IDs."],[20834,13,""],[21123,0,"// "],[21353,3,""],[18494,32,""],[18494,0,"T"],[18497,0," fuin"],[18501,1,""],[18500,1,""],[18499,1,""],[18498,1,""],[18498,0,"final document state is not "],[18526,45,""],[18526,0,"dependent "],[18522,14,""],[18522,0,"independent of the tras"],[18544,1,""],[18544,0,"versal order"],[18519,2,""],[18519,0,"will be"],[18546,15,""],[18546,0,"order in which the algorithm processes events"],[17433,0,", chosen arbitrarily"],[17833,0," as they are generated"],[17834,21,""],[17833,1,""],[17833,0,", to produce "],[17845,0," the document state \"ABDC\"."],[17872,2,""],[17871,1,""],[17871,0," ("],[17872,1,""],[17871,1,""],[17871,0," using "],[17871,7,""],[17871,0,". ("],[17873,1,""],[17872,1,""],[17871,1,""],[17871,0," (assuming item B is "],[17889,3,""],[17889,0,"appears before o"],[17904,1,""],[17904,0,"item C in the resulting "],[17910,18,""],[17910,0,")."],[17889,7,""],[17889,0,"is sorted"],[17914,1,""],[17914,0,"\n\n"],[17942,16,""],[17942,0," inserted"],[17943,8,""],[17943,0,"fugue tree is inspected to"],[17969,33,""],[17919,5,""],[17919,0,"CRD "],[17922,1,""],[17922,0,"T messages"],[17942,0,"d"],[17976,23,""],[17976,0,"in order to calculate the resulting insert positions."],[18028,1,""],[17998,0,"and return "],[18039,1,""],[18039,0,". A s"],[18043,1,""],[18042,1,""],[18042,0,"s a result, the algoruith"],[18041,26,""],[18041,0,"The algorithm generates the"],[18068,52,""],[18068,0," resulting list of "],[18086,1,""],[18083,3,""],[18078,5,""],[18068,10,""],[18068,0," producing the following list of transformed events:"],[18068,14,""],[18065,0,"and restu"],[18073,1,""],[18072,1,""],[18071,1,""],[18071,0,"turns "],[17835,14,""],[17835,0,"representing the"],[17835,0,"which "],[17833,1,""],[17851,1,""],[17850,1,""],[17849,1,""],[17849,0,"s"],[17924,0,"each "],[17941,1,""],[17941,0," is"],[17944,4,""],[17970,3,""],[17970,0," can be"],[17987,9,""],[18000,11,""],[18014,7,""],[18023,1,""],[18023,0," of each event"],[18015,0,"transformed "],[18064,0," can"],[18077,1,""],[18375,0," the same "],[18380,5,""],[18380,0,"resulting document state (again,"],[18419,0,")"],[18511,0,"chosen "],[18662,33,""],[18662,0,"would laso ch"],[18668,7,""],[18668,0,"also change (C would be inserted at position"],[18681,0,"In this case, "],[18726,0," 1)."],[18894,0,"Some "],[18899,6,""],[18899,0,"events"],[18910,5,""],[18984,5,""],[18984,0,"multiple events"],[18984,0,"the event graph contains "],[19024,0," which"],[19396,0,"\n== Prepare-"],[19407,1,""],[19407,0,"-update and versions"],[17331,0,"\n"],[17331,0,"\n> DIAGRAM"],[0,0,"\n"],[0,0,"#import \"pre"],[11,1,""],[10,1,""],[9,1,""],[9,0,"#"],[9,1,""],[9,0,"@previes"],[16,1,""],[16,0,"w/cetz:0.1.2\"\n"],[62,0,"\n"],[62,0,"\n#ce"],[64,2,""],[64,0,"cetz.canvas({\n  \n  "],[78,2,""],[79,2,""],[79,0,"})"],[78,0,"  import cetz.draw: *\n  "],[100,2,""],[100,0,"  circle((90"],[111,1,""],[110,1,""],[110,0,"0, 0), name: \"circle\")"],[62,74,""],[0,0,"#import \"@preview/cetz:0.1.2\"\n"],[48,4,""],[48,0,"fletcher"],[57,5,""],[57,0,"0.2.0"],[96,0,"\n#fletcher.diagram(cell-size: 15mm, {\n\tlet (src, img, quo) = ((0, 1), (1, 1), (0, 0))\n\tnode(src, $G$)\n\tnode(img, $im f$)\n\tnode(quo, $G slash ker(f)$)\n\tedge(src, img, $f$, \"->\")\n\tedge(quo, img, $tilde(f)$, \"hook-->\", label-side: right)\n\tedge(src, quo, $pi$, \"->>\")\n})\n"],[63,0,"as fletcher: node, edge"],[63,0," "],[120,266,""],[119,1,""],[17420,0,"\n"],[17420,0,"\n\n#fletcher.diagram(cell-size: 15mm, {\n\tlet (src, img, quo) = ((0, 1), (1, 1), (0, 0))\n\tnode(src, $G$)\n\tnode(img, $im f$)\n\tnode(quo, $G slash ker(f)$)\n\tedge(src, img, $f$, \"->\")\n\tedge(quo, img, $tilde(f)$, \"hook-->\", label-side: right)\n\tedge(src, quo, $pi$, \"->>\")\n})"],[17688,11,""],[17420,1,""],[17459,0,"// "],[17459,3,""],[17656,0,"// "],[17598,0,"// "],[17571,0,"// "],[17542,0,"// "],[17523,0,"// "],[17507,0,"// "],[17459,0,"// "],[17457,0,"\n  node("],[17458,7,""],[17457,1,""],[17459,3,""],[17464,13,""],[17464,0,"a, b, c, d"],[17483,1,""],[17483,0,"0"],[17488,0,"-"],[17492,1,""],[17492,0,"0"],[17492,1,""],[17492,0,"1"],[17496,0,"(1, 1), (0, 2)"],[17510,6,""],[17511,0,"\n  node(a, [A])"],[17512,0,"  node(a, [A])\n  node(a, [A])\n  node(a, [A])\n"],[17534,1,""],[17534,0,"b"],[17538,1,""],[17538,0,"B"],[17553,1,""],[17553,0,"C"],[17568,1,""],[17568,0,"D"],[17549,1,""],[17549,0,"b"],[17549,1,""],[17549,0,"c"],[17564,1,""],[17564,0,"d"],[17571,0,"\n  edge*am"],[17580,1,""],[17579,1,""],[17578,1,""],[17578,0,"(a, b)"],[17492,0,"-"],[17501,0,"-"],[17510,0,"-"],[17586,0,", '->'"],[17591,1,""],[17591,0,"\""],[17588,1,""],[17588,0,"\""],[17575,0,"  edge(a, b, \"->\")\n"],[17604,1,""],[17604,0,"C"],[17604,1,""],[17604,0,"c"],[17594,0,"  edge(a, c, \"->\")\n"],[17620,1,""],[17620,0,"b"],[17623,1,""],[17623,0,"d"],[17613,0,"  edge(b, d, \"->\")\n"],[17639,1,""],[17639,0,"c"],[17420,0,"\n"],[17420,0,"\nR"],[17421,1,""],[17421,0,"Representing the following graph:"],[17549,0,"\n  "],[17549,3,""],[17492,0,"\n  node."],[17499,1,""],[17499,0,"-stroke"],[17495,11,""],[17495,0,"spacing: (15mm, 8mm)"],[17495,20,""],[17493,2,""],[17492,1,""],[17485,2,""],[17485,0,"4"],[17485,1,""],[17485,0,"3"],[17489,1,""],[17489,0,"\n"],[17474,0,"\n  "],[17492,0,"\n  spacing: (15mm, 8mm),"],[17477,0,"// "],[17477,3,""],[17477,0,"// "],[17508,2,""],[17508,0,"8"],[17498,0,"// "],[17477,3,""],[17488,1,""],[17488,0,"1"],[17477,0,"// "],[17498,3,""],[17518,0,"\n  node-fill: blue,"],[17536,0,".lighten(90%)"],[17521,0,"// "],[17518,0,"\n  node-stroke: black,"],[17539,0," + 0.5pt"],[17548,0,"\n  node-"],[17549,7,""],[17548,1,""],[17717,1,""],[17717,0,".."],[17718,1,""],[17718,0,"."],[17718,1,""],[17717,1,""],[17717,0,"-"],[17655,1,""],[17653,1,""],[17654,0,"$"],[17653,0,"$"],[17668,0,"D"],[17668,1,""],[17698,1,""],[17683,1,""],[17668,1,""],[17696,0,"$"],[17682,0,"$"],[17668,0,"$"],[17700,1,""],[17685,1,""],[17670,1,""],[17698,0,"$"],[17684,0,"$"],[17670,0,"$"],[17157,5,""],[17157,0,"set"],[17777,196,""],[17546,0,"\\"],[17546,1,""],[17546,0,"\n  debug: 1,"],[17725,0," ."],[17726,1,""],[17726,0,"bend: 10deg,"],[17732,0,"-"],[17759,0,"bend: -10deg, "],[17792,0,"bend: -10deg, "],[17825,0,"bend: -10deg, "],[17765,1,""],[17830,1,""],[17549,0,"// "],[17446,0,"event "],[18086,0,", producing the eve"],[18104,1,""],[18103,1,""],[18103,0,"quivalent FugueMax events"],[18368,3,""],[18368,0,"These are"],[18406,6,""],[18415,1,""],[18415,0,"ing"],[18422,0," final"],[17750,0,">"],[17750,1,""],[17552,0,"\n  node-shape: rectangel"],[17575,1,""],[17574,1,""],[17574,0,"le,"],[17567,9,""],[17567,0,"rectangular"],[17882,0,"#fletcher.diagram(\nspacing: (8mm, 3mm), // wide columns, narrow rows\nnode-stroke: 1pt, // outline node shapes\nedge-thickness: 1pt, // thickness of lines\nmark-scale: 60%, // make arrowheads smaller\nedge((-2,0), (-1,0)),\nedge((-1,0), (0,+1), $f$, \"..>\", corner: left),\nedge((-1,0), (0,-1), $g$, \"->\", corner: right),\nnode((0,+1), $F(s)$),\nnode((0,-1), $G(s)$),\nedge((0,+1), (1,0), \"..>\", corner: left),\nedge((0,-1), (1,0), \"->\", corner: right),\nnode((1,0), $ + $, inset: 1pt),\nedge((1,0), (2,0), \"->\"),\n)"],[17881,0,"\n"],[17555,0,"// "],[17905,0,"// "],[17905,3,""],[17955,0,"// "],[17955,3,""],[17996,0,"// "],[17996,3,""],[17996,0,"// "],[18042,0,"// "],[18207,0,"// "],[18207,3,""],[18335,0,"// "],[18335,3,""],[18237,1,""],[18237,0,"-"],[18215,1,""],[18215,0," "],[18367,0,"// "],[18335,0,"// "],[18293,0,"// "],[18251,0,"// "],[18229,0,"// "],[18159,0,"// "],[18111,0,"// "],[18089,0,"// "],[18418,0,"\n"],[17905,0,"// "],[17958,0,"// "],[17958,3,""],[17525,0,"// "],[17555,0,"\n  node-stroke: 1pt,"],[17502,0,"// "],[17502,3,""],[17655,0,"\n  node((0,"],[17665,1,""],[17664,1,""],[17664,0,"2,2), $F(s)$),"],[17678,2,""],[17656,0,"{\n"],[17679,1,""],[17675,1,""],[17675,0,"x"],[17676,1,""],[17675,1,""],[17674,1,""],[17674,0,"(x)"],[17676,1,""],[17675,1,""],[17674,1,""],[17674,0,"s"],[17674,2,""],[17673,1,""],[17672,1,""],[17672,0,"[]"],[17673,0,"F(x)"],[17678,0,", shape: circukler"],[17695,1,""],[17694,1,""],[17693,1,""],[17692,1,""],[17692,0,"lar"],[17678,17,""],[17658,22,""],[17909,537,""],[17459,0,"\n\n#align(center)["],[17925,0,"]\n"],[17922,0,"  "],[17890,2,""],[17890,0,"    "],[17857,2,""],[17857,0,"    "],[17825,2,""],[17825,0,"    "],[17792,2,""],[17792,0,"    "],[17777,2,""],[17777,0,"    "],[17762,2,""],[17762,0,"    "],[17747,2,""],[17747,0,"    "],[17732,2,""],[17732,0,"    "],[17675,1,""],[17675,0,"    "],[17673,0,"  "],[17638,2,""],[17638,0,"    "],[17623,2,""],[17623,0,"    "],[17593,2,""],[17593,0,"    "],[17573,2,""],[17573,0,"    "],[17540,2,""],[17540,0,"    "],[17517,2,""],[17517,0,"    "],[17496,2,""],[17496,0,"    "],[17477,0,"  "],[19106,0," This "],[19107,5,""],[19107,0,"As described in the "],[19123,4,""],[19123,0,"[time machines], this behaviour can also "],[19155,9,""],[19155,0,"is not eg-walker"],[19106,65,""],[19106,0," As described in [time machines], this behaviour is not eg-walker"],[19162,0,"specific to "],[19183,0,", but can be perf"],[19199,1,""],[19198,1,""],[19197,1,""],[19196,1,""],[19196,0,"done with "],[19201,5,""],[19201,0,"using FugueMax directly."],[19162,8,""],[19162,0,"a property"],[19163,9,""],[19162,1,""],[19162,0,"specific"],[19162,8,""],[19162,0,"an "],[19164,1,""],[19163,1,""],[19163,0," special property of"],[19183,3,""],[19193,1,""],[19193,0,". It"],[19197,4,""],[19106,1,""],[19106,0,"\n\n"],[19146,9,""],[19145,1,""],[19144,1,""],[19143,1,""],[19143,0,"e ability to transform"],[19156,9,""],[19156,0,"generate transformed operations is "],[19190,1,""],[19189,1,""],[19188,1,""],[19187,1,""],[19216,0," th"],[19218,1,""],[19217,1,""],[19216,1,""],[19197,7,""],[19197,0,"unique"],[19227,21,""],[19235,0," can be modified to support this capability"],[19242,0," direclt"],[19249,1,""],[19248,1,""],[19248,0,"tly"],[19288,8,""],[19287,1,""],[19597,0,"\n"],[19289,1,""],[19596,0,"\nAs described in [time machines], the ability to generate transformed operations is not a unique property of eg-walker. FugueMax can be directly modified to support this capability."],[19108,181,""],[19415,0,"\n"],[19108,6,""],[19108,0,"T"],[19592,1,""],[19592,0,"\n"],[19595,162,""],[19594,1,""],[18605,0,"*Claim:* The final document state will be independent of the order in which the algorithm processes events. This follows from the CRDT's commutativity property.\n\n"],[18605,0,"\n"],[18767,1,""],[18821,0," also"],[20303,4,""],[20396,0,"on each event "],[20489,5,""],[20489,0,"ne"],[20490,1,""],[20489,1,""],[20489,0,"takes"],[20501,0,"'s"],[20518,1,""],[20518,0,". The CRDT "],[20520,9,""],[20519,1,""],[20518,1,""],[20518,0,","],[20554,0," resulting"],[20555,9,""],[20555,0,"corresponding"],[20644,0,"*"],[20640,0,"*"],[22012,22,""],[22012,0,"tie-breaking based on "],[20295,0,"\n"],[20295,0,"\nC"],[20296,1,""],[20296,0,"We can typically describe the version of a CRDT state based on the set of all events e"],[20381,1,""],[20381,0,"merged"],[20381,0,"which ahve been "],[20387,5,""],[20387,0,"have "],[20403,0," into the CRDT's state."],[20303,10,""],[20316,0,"_"],[20334,0,"_"],[20334,1,""],[20340,0,"_"],[20340,1,""],[20315,2,""],[20315,0," "],[20333,0,"'s"],[20404,13,""],[20403,1,""],[20402,1,""],[20401,1,""],[20400,1,""],[20399,1,""],[20398,1,""],[20398,0," to the CRDT"],[20699,1,""],[20699,0,"\n\nIm"],[20702,1,""],[20701,1,""],[20700,1,""],[20699,1,""],[20699,0," "],[22772,5,""],[22772,0,"describes the state of the CRDT"],[22799,0,"corresponding fu"],[22814,1,""],[22813,1,""],[22813,0,"FugueMax tree "],[22822,5,""],[22826,0," at"],[17766,1,""],[17766,0,"{}"],[17767,0,"V in G "],[17773,1,""],[17773,0,": forall X"],[17782,1,""],[17782,0,"v: "],[17784,1,""],[17783,1,""],[17783,0," in V v_i < 2"],[17585,0,"// "],[17585,3,""],[17794,2,""],[17792,2,""],[17788,4,""],[17786,2,""],[17783,3,""],[17783,0,": "],[17784,1,""],[17782,2,""],[17782,0,"X"],[17781,2,""],[17774,7,""],[17773,1,""],[17773,0," "],[17773,1,""],[17771,2,""],[17768,3,""],[17767,1,""],[17766,2,""],[17766,0,"A"],[17946,1,""],[17912,1,""],[17877,1,""],[17843,1,""],[17943,0,"2"],[17910,0,"2"],[17876,0,"2"],[17843,0,"2"],[17946,1,""],[17912,1,""],[17877,1,""],[17843,1,""],[17943,0,"1"],[17910,0,"1"],[17876,0,"1"],[17843,0,"1"],[17598,1,""],[17598,0,"0.5"],[17641,3,""],[17641,0,"// "],[17641,3,""],[17648,1,""],[17648,0,"2"],[17648,1,""],[17648,0,"3"],[17648,1,""],[17648,0,"1"],[17641,0,"// "],[18607,0,"\n#box["],[18774,0,"\n]"],[18614,0,"  "],[18612,0,"()"],[18613,0,"margin: 2em"],[18613,6,""],[18613,0,"v"],[18613,1,""],[18613,0,"baseline"],[18623,1,""],[18623,0,"10"],[18625,2,""],[18625,0,"mm"],[18609,3,""],[18609,0,"block"],[18615,8,""],[18615,0,"inset"],[18623,1,""],[18622,1,""],[18622,0,"2"],[18622,1,""],[18622,0,"3"],[18622,1,""],[18622,0,"4"],[18625,0,", bor"],[18629,1,""],[18628,1,""],[18627,1,""],[18627,0,"stroke: 0.5px black"],[18635,6,""],[18640,0," 0.5px"],[18645,1,""],[18644,1,""],[18643,1,""],[18642,1,""],[18641,1,""],[18640,1,""],[18635,5,""],[18635,0,"auto"],[18635,4,""],[18635,0,"black"],[18635,5,""],[18635,0,"stroke()"],[18642,0,"black "],[18635,14,""],[18635,0,"0.5px + l"],[18643,1,""],[18642,1,""],[18642,0," black"],[18639,1,""],[18638,1,""],[18638,0,"pt"],[18714,45,""],[18714,0,"traversal order"],[18637,1,""],[18637,0,"3"],[20776,1,""],[20780,1,""],[20780,0," exactly"],[21540,1,""],[21540,0,"\n\n"],[21557,8,""],[21837,9,""],[21837,0,"it would "],[22040,10,""],[22136,0,", correctly"],[22136,1,""],[22146,0,")"],[22137,0,"("],[20660,4,""],[20660,0,"inspects"],[21561,0," problem"],[21592,35,""],[21682,32,""],[21691,1,""],[21691,0," ($C$'s parents)"],[21699,0,"transitive "],[22693,0,"To solve this problem, eg-walker's state differs from FGu"],[22749,1,""],[22748,1,""],[22748,0,"ugueMax in one important way: "],[22789,11,""],[22789,0,"representing the CRDT"],[22806,4,""],[22806,0,"state at"],[22831,0," (the union"],[22837,5,""],[22837,0,"set of all seen versions)"],[22864,4,""],[22873,15,""],[22934,0,"different "],[22934,9,""],[22934,0,"separate"],[22934,8,""],[22933,1,""],[22933,0," different"],[22968,1,""],[22968,0,"\n\n- "],[22995,0,", used by _pre-"],[23009,1,""],[23009,0,"pare-update)"],[23020,1,""],[23020,0,"_"],[23014,7,""],[23014,0,"_effect_update_"],[23014,15,""],[23014,0,"update_"],[23025,1,""],[23025,0,"\n- "],[23050,0,", used by _apply_"],[23066,1,""],[23066,0,"-update)"],[23073,1,""],[23073,0,"_"],[23075,1,""],[23075,0,"\n\n"],[23077,57,""],[23077,0,"During traversal, "],[23107,0,",mo"],[23109,1,""],[23108,1,""],[23107,1,""],[23107,0,"modified to "],[23074,1,""],[23076,17,""],[23076,0,"Before visiting each node "],[23101,1,""],[23096,5,""],[23091,5,""],[23082,9,""],[23076,6,""],[23076,0,"During traversal, befo"],[23097,1,""],[23096,1,""],[23095,1,""],[23094,1,""],[23093,1,""],[23099,3,""],[23099,0,"is"],[23101,3,""],[23101,0," be"],[23099,2,""],[23099,0,"can"],[23093,0," befo"],[23093,5,""],[23074,0,"."],[23074,1,""],[23106,0,"set to "],[23113,21,""],[23125,0," before "],[23125,1,""],[23150,165,""],[23074,0,"."],[23074,1,""],[23074,0,"\n\n$"],[23076,1,""],[23076,0,"#vout is the set of all no"],[23101,1,""],[23100,1,""],[23100,0,"events visited so far"],[23076,0,"During traversal, "],[23139,0,"."],[23075,1,""],[23074,1,""],[23074,0,". "],[23142,17,""],[23142,0,"Uniquely,"],[23207,1,""],[23207,0," by adding and removing event "],[23236,1,""],[23236,0,"s from the "],[23243,4,""],[23242,1,""],[23242,0,"."],[23242,1,""],[23242,0," the version"],[23247,7,""],[23211,36,""],[23142,69,""],[23142,0,"Uniquely, #vin can be set to any version before or equal to #vout by"],[23075,1,""],[23075,0,"\n\n"],[23141,2,""],[23141,0,"\n\n"],[23165,46,""],[23165,0,"modified at any time to contain any version l"],[23209,1,""],[23209,0,"less than or equai"],[23226,1,""],[23226,0,"l to $"],[23231,1,""],[23231,0,"#vout."],[23174,12,""],[23165,19,""],[23165,0,"set to"],[23142,1,""],[23141,1,""],[23141,0," "],[23142,10,""],[23201,0," B"],[23202,1,""],[23202,0,"Immediately before each event is visited by the traversal, "],[23243,3,""],[23243,0,"during "],[23265,0,"$"],[23265,1,""],[23265,0,"#vin is set the "],[23280,1,""],[23279,1,""],[23278,1,""],[23278,0,"o the event's parent version. This allows _prepare-update_ to cor"],[23342,1,""],[23341,1,""],[23340,1,""],[23340,0,"corre"],[23344,1,""],[23343,1,""],[23342,1,""],[23341,1,""],[23340,1,""],[23340,0,"produce to"],[23349,1,""],[23349,0,"he correct C"],[23360,1,""],[23360,0,"CRDT message."],[23359,0," corresponding"],[23077,65,""],[23077,0,"During traversal, #vout is the set of all events visited so far. "],[23093,48,""],[23093,0,","],[23340,0,"\n\n, #vout is the set of all events visited so far"],[23342,2,""],[23350,0," simply"],[23394,0,". It coc"],[23401,1,""],[23401,0,"rresponds to the state"],[23395,28,""],[17119,0,"\n\n"],[17120,0,"\n```\n\n```"],[17125,0,"replay("],[17125,0,"function "],[17141,0,"graph) {\n  \n  "],[17150,2,""],[17151,2,""],[17151,0,"}"],[17150,0,"  for event e in traverse(graph)"],[17163,0,")"],[17162,0,"(i, p, "],[17168,1,""],[17167,1,""],[17166,1,""],[17167,0,", p"],[17190,0," {\n    \n    "],[17193,4,""],[17194,4,""],[17194,0,"  }"],[17193,0,"    "],[17193,4,""],[17149,0,"\n  state <- "],[17160,1,""],[17159,1,""],[17158,1,""],[17158,0,":= EmptyState()"],[17161,0,"new "],[17221,0,"    state.setVin"],[17236,1,""],[17235,1,""],[17234,1,""],[17234,0,"InputVersion(p)\n    message := prepareUpdate(e)"],[17279,0,"i, "],[17284,0,"\n    state.add"],[17297,1,""],[17296,1,""],[17295,1,""],[17295,0,"applyUpdate"],[17265,0,"state."],[17312,0,"(message)"],[17177,0,"\n  result := []\n  "],[17193,2,""],[17311,0,"result"],[17316,1,""],[17315,1,""],[17314,1,""],[17313,1,""],[17312,1,""],[17311,1,""],[17311,0,"transformedEvent := "],[17357,0,"\n    \n    "],[17358,4,""],[17363,0,"result "],[17369,1,""],[17369,0,".push(transformed"],[17375,11,""],[17375,0,"transformedEvent)"],[17396,0,"\n  \n  "],[17397,2,""],[17400,0,"return result"],[17120,0,"\n"],[17120,0,"\nAt a high level, the algorithm o"],[17152,1,""],[17152,0,"is as follows:"],[17225,15,""],[17225,0,"  result := []\n"],[17227,0,"// "],[17413,0,"// "],[17453,0,"// "],[17469,0,"\n  return state.querty("],[17491,1,""],[17490,1,""],[17489,1,""],[17489,0,"y()"],[17225,18,""],[17343,20,""],[17370,38,""],[17375,19,""],[17338,0," // U"],[17342,1,""],[17342,0,"prepareP"],[17349,1,""],[17349,0,"Update from FugueMax"],[17400,0," // applyUpdate from fugue"],[17421,5,""],[17421,0,"FugueMax"],[17212,10,""],[17212,0,"Fu"],[17213,1,""],[17212,1,""],[17212,0,"EgWalkerState"],[17403,29,""],[17341,31,""],[17407,0,"\n(prepareUpdate, applyUpdate, query are all te"],[17452,1,""],[17452,0,"aken directly from FugueMax)."],[17408,1,""],[17478,1,""],[17408,0,"The "],[17425,0,"_"],[17412,0,"_"],[17440,0,"_"],[17429,0,"_"],[17449,0,"_"],[17444,0,"_"],[17451,0," functions"],[17121,16,""],[17121,0,"We can describe"],[17253,0,"in"],[17254,1,""],[17253,1,""],[17253,9,""],[17258,1,""],[17258,0,".inorderTraversal"],[17261,1,""],[17261,0,"O"],[17275,0,"()"],[17354,0,"transformedEvent := "],[17400,0,"\n    yield trasnf"],[17416,1,""],[17415,1,""],[17414,1,""],[17414,0,"nsformed"],[17411,11,""],[17411,0,"transformedEvent"],[17431,24,""],[17405,5,""],[17405,0,"emit"],[17405,4,""],[17405,0,"yield"],[17405,5,""],[17405,0,"emit"],[17409,1,""],[17409,0,"("],[17426,0,")"],[17400,0,"\n    "],[17401,4,""],[17406,4,""],[17406,0,"output"],[17406,6,""],[17406,0,"yield"],[17460,1,""],[17460,0," and"],[17478,9,""],[17478,0," f"],[17479,1,""],[17478,1,""],[17493,4,""],[17522,0," _i"],[17524,1,""],[17524,0,"setInputversion_ wil"],[17532,1,""],[17532,0,"I"],[17532,1,""],[17532,0,"V"],[17541,3,""],[17541,0,"id"],[17542,1,""],[17542,0,"s described below."],[17121,44,""],[17121,0,"Equi"],[17124,1,""],[17123,1,""],[17122,1,""],[17121,1,""],[17120,1,""],[17119,1,""],[16966,0," convert events into the equivalent CRDT message, and "],[17020,1,""],[17030,34,""],[17030,0,"t"],[17030,1,""],[17030,0,"CRDT messages for "],[17044,4,""],[17044,0,"t"],[17044,1,""],[17044,0,"in order to generate the resulting document state"],[17094,107,""],[17014,1,""],[17014,0,"."],[17014,1,""],[17014,0,"s. These CRDT messages are "],[17041,79,""],[17041,0,"transfo"],[17041,7,""],[17041,0,"used to "],[17041,8,""],[17041,0,"merged in to the local state, and in doing so w"],[17087,1,""],[17087,0,"they are transformed."],[17107,0," to t"],[17111,1,""],[17110,1,""],[17110,0," output "],[17111,7,""],[17111,0,"operat"],[17069,48,""],[17069,0,"."],[16945,29,""],[16945,0,"Each"],[16955,1,""],[16955,0," is first converted"],[17007,1,""],[17007,0,", and that message is merged in to the CRDT"],[17046,4,""],[17045,1,""],[17044,1,""],[17043,1,""],[17042,1,""],[17042,0,"our local state"],[17057,56,""],[17057,0,". When merging eve"],[17074,1,""],[17073,1,""],[17072,1,""],[17072,0,"messages, we calculate the event's transfo"],[17113,1,""],[17112,1,""],[17112,0,"formed"],[17107,0,"resulting "],[17128,0," operation. "],[17095,3,""],[17095,0,"each"],[17140,1,""],[17140,0," The transformed operations can be used to ca"],[17184,1,""],[17184,0,"ompute the resulting document state."],[17490,0,"\n\nfunction "],[17492,9,""],[17492,0,"function"],[17248,0," -> Iterator<Event>"],[17261,0,"Transformed"],[17530,0," getState"],[17538,1,""],[17537,1,""],[17536,1,""],[17535,1,""],[17534,1,""],[17534,0,"Document(s"],[17543,1,""],[17543,0,"graph) -> Document {\n  \n  "],[17564,2,""],[17565,2,""],[17565,0,"}"],[17564,0,"  replay(graph).o"],[17580,1,""],[17580,0,"fo"],[17581,1,""],[17580,1,""],[17580,0,"reduce(E"],[17587,1,""],[17587,0,"[], (doc, event) => doc.apply(event))"],[17617,5,""],[17617,0,"o"],[17597,5,""],[17597,0,"o"],[17614,0,"p"],[17598,0,"p"],[17604,0,"{\n    "],[17623,0,"\n    "],[17624,4,""],[17624,0,"}"],[17624,0,"  "],[17563,0,"\n  for "],[17566,4,""],[17566,0,"doc := []\n  for op"],[17583,1,""],[17582,1,""],[17582,0,"x"],[17582,1,""],[17582,0,"transformedEvent in tre"],[17604,1,""],[17603,1,""],[17602,1,""],[17602,0,"replay(graph) {"],[17618,42,""],[17632,2,""],[17632,0,"transf"],[17632,6,""],[17632,0,"transformedEvent"],[17653,1,""],[17653,0,"\n  return dco"],[17665,1,""],[17664,1,""],[17664,0,"oc"],[17235,0,"*"],[17235,1,""],[17235,0,"*"],[17235,1,""],[16955,0," is v"],[16945,15,""],[16945,0,"All events in the event graph are visited, "],[16987,1,""],[16978,9,""],[16974,4,""],[16968,6,""],[16963,5,""],[16962,1,""],[16958,4,""],[16955,3,""],[16948,7,""],[16945,3,""],[16945,0,"Each event is v"],[16958,2,""],[16955,3,""],[17042,3,""],[17042,0,"the"],[17058,1,""],[17058,0,"\n\n"],[17059,1,""],[17058,1,""],[17058,0," "],[17063,0," the CRDT message is merged in to the local state,"],[17113,18,""],[17114,35,""],[17114,0,"we calculate each event's resulting"],[17114,35,""],[17114,0,"the state is used to"],[17145,1,""],[17144,1,""],[17144,0," the message into a transforemd"],[17174,1,""],[17173,1,""],[17172,1,""],[17172,0,"med"],[17185,0," (a la [time machine paper)"],[17211,1,""],[17211,0,"])."],[17213,1,""],[17218,0," stream of"],[17263,0," directly, or uesd"],[17280,1,""],[17279,1,""],[17278,1,""],[17278,0,"sed"],[17321,0," after all changes have been merged"],[17357,0,"\n\nIn pesud"],[17366,1,""],[17365,1,""],[17364,1,""],[17363,1,""],[17363,0,"seudocode, "],[17359,15,""],[17359,0,"In pseudocode, this looks li"],[17386,1,""],[17385,1,""],[17385,0,"somethi"],[17374,18,""],[17374,0,"the algorithm works as follows:"],[16898,1,""],[16898,0," a"],[16899,1,""],[16899,0,"temporary,"],[16954,0," During iteration, "],[16972,3,""],[16972,0," e"],[16986,6,""],[17017,0,"FugueMax "],[17043,5,""],[17043,0," then the"],[17038,0," - and that message is immediately"],[17072,25,""],[17102,1,""],[17102,0,"\n\n"],[17403,0,"\n"],[17403,0,"\nBefore "],[17404,7,""],[17403,1,""],[17402,1,""],[16844,1,""],[16844,0,"\n\n"],[16845,1,""],[16844,1,""],[16844,0," "],[16571,0," or move "],[16579,1,""],[16531,5,""],[16530,1,""],[16521,4,""],[16548,5,""],[16548,0,"support"],[17230,0,"_"],[17209,0,"_"],[17324,7,""],[17324,0,"combined in order to"],[17432,32,""],[20840,328,""],[18007,0,"\n"],[18007,0,"\n\n// We first describe the _full replay_ case for the algorithm, when eg-walker processes _all_ events in the event graph and builds a document entirely from scratch. This is a special case of _partial replay_, where $V_0 = emptyset$. In section [xxx], we describe how the algorithm can be generalised to support partial updates."],[18009,3,""],[18007,1,""],[18008,0," "],[18008,3,""],[18008,0,"The above algorithm describes"],[18028,9,""],[18028,0,"assum"],[18028,12,""],[18036,0,"s"],[18027,0," processes all events in the event graph "],[18067,1,""],[18067,0,". This is a"],[18027,51,""],[18008,3,""],[18008,0,"As you can see, the"],[18027,6,""],[18037,0," above"],[18043,67,""],[18085,0," to"],[18088,4,""],[18094,1,""],[18171,0," case"],[18177,0," where we have an existing document state at a recent version and want to merge a subset of events."],[18276,24,""],[18171,5,""],[18129,25,""],[18129,0,"W"],[18129,1,""],[18129,0,"We will later describe how this algorithm can b e"],[18177,1,""],[18176,1,""],[18176,0,"e e"],[18178,1,""],[18178,0,"generalized to"],[18193,0,"support "],[18228,63,""],[18228,0,"only need to"],[18258,0," recent"],[18272,0," in to "],[18278,1,""],[18277,1,""],[18276,1,""],[18275,1,""],[18275,0,"to an existing document state"],[18306,0,"//"],[18008,17,""],[18008,0,"T"],[19746,0,"\n\n$"],[19748,1,""],[19748,0,"#alig"],[19749,4,""],[19749,0,"align()"],[19755,0,"center"],[19762,0,"[\n  \n  "],[19764,2,""],[19765,2,""],[19765,0,"]"],[19764,0,"  $"],[19766,1,""],[19766,0,"#fletcher.diagram(\n    \n    "],[19785,4,""],[19790,0,"\n    "],[19786,4,""],[19787,4,""],[19787,0,"  )"],[19789,0,"{}"],[19790,0,"\n    \n  "],[19791,4,""],[19785,1,""],[19790,0,"    "],[19790,4,""],[18962,60,""],[18744,0,"    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n"],[18744,4,""],[18744,0,"  "],[18744,2,""],[18744,0,"    "],[18744,60,""],[18962,0,"    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n"],[18962,60,""],[18744,0,"    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n"],[18744,4,""],[18744,0,"  "],[18743,0,"{"],[19232,0,"}"],[19235,0,"\nx"],[19236,1,""],[19236,0,"x"],[19235,2,""],[19232,1,""],[18743,1,""],[18744,2,""],[18744,0,"    "],[18744,60,""],[18962,0,"    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n"],[19763,0,"\n  xxx"],[19796,0,"    let "],[19803,1,""],[19802,1,""],[19801,1,""],[19800,1,""],[19800,0,"node(()"],[19806,0,"0,0"],[19810,0,", [start])"],[19764,5,""],[19763,1,""],[19812,1,""],[19806,1,""],[19806,0,"["],[19812,0,"]"],[19806,1,""],[19806,0,"italic(\""],[19819,1,""],[19819,0,"\")"],[19806,0,"["],[19822,0,"]"],[19807,7,""],[19806,2,""],[19806,0,"[_"],[19813,2,""],[19813,0,"_"],[19790,0,"    node((0,0), [_start_])\n"],[19827,1,""],[19827,0,"1"],[19829,1,""],[19829,0,"-1"],[19835,7,""],[19835,0,"A"],[19785,0,"\n    spacing: (8mm, 8mm),"],[19784,1,""],[19804,1,""],[19804,0,"4"],[19799,1,""],[19799,0,"4"],[19862,0,"\n    edge((0,0), (1,-1))"],[19813,0,"\n    let (start, a, b, c, d) = (("],[19845,1,""],[19845,0,")"],[19845,0,"(0,0), (1,01"],[19856,1,""],[19855,1,""],[19855,0,"-1), (2, -2), (), ()"],[19874,0,"3, -3)"],[19870,0,"4, -2"],[19946,5,""],[19946,0,"s"],[19897,5,""],[19897,0,"s"],[19943,0,"t"],[19898,0,"t"],[19945,0,"a"],[19899,0,"a"],[19947,0,"r"],[19900,0,"r"],[19949,0,"t"],[19901,0,"t"],[19953,6,""],[19953,0,"a"],[19924,6,""],[19924,0,"a"],[19949,0,", ->\""],[19951,0,"\""],[19886,1,""],[19914,0,"    node(a, [A])\n"],[19940,1,""],[19940,0,"b"],[19944,1,""],[19944,0,"B"],[19931,0,"    node(b, [B])\n    node(b, [B])\n"],[19957,1,""],[19957,0,"c"],[19974,1,""],[19974,0,"d"],[19960,1,""],[19960,0,"["],[19961,1,""],[19961,0,"C"],[19978,1,""],[19978,0,"D"],[19982,0,"    edge(start, a, \"->\")\n"],[20016,5,""],[20016,0,"a"],[20019,1,""],[20019,0,"b"],[20007,0,"    edge(a, b, \"->\")\n"],[20037,1,""],[20037,0,"b"],[20040,1,""],[20040,0,"d"],[20028,0,"    edge(b, d, \"->\")\n"],[20058,1,""],[20058,0,"a"],[20061,1,""],[20061,0,"c"],[19784,0,"\n    cell-size: 1mm,"],[19800,1,""],[19800,0,"0"],[19800,1,""],[19800,0,"0"],[20086,1,""],[20065,1,""],[20044,1,""],[20023,1,""],[20083,0,"-"],[20063,0,"-"],[20043,0,"-"],[20023,0,"-"],[20086,1,""],[20065,1,""],[20044,1,""],[20023,1,""],[19999,0,"$"],[19998,0,"$"],[19982,0,"$"],[19981,0,"$"],[19965,0,"$"],[19964,0,"$"],[19948,0,"$"],[19947,0,"$"],[20003,1,""],[19984,1,""],[19965,1,""],[19946,1,""],[20003,1,""],[19985,1,""],[19967,1,""],[19949,1,""],[19747,0,"\n"],[19747,0,"\nThius "],[19753,1,""],[19752,1,""],[19751,1,""],[19751,0,"s set of messages"],[19760,0,"CRDT "],[19773,0," describes the following CRDT "],[19798,5,""],[19798,0,"f"],[19798,1,""],[19798,0,"FugueMax tree:"],[19798,0,"Le"],[19799,1,""],[19798,1,""],[19798,0,"left-origin "],[19823,0,". The right-opr"],[19837,1,""],[19836,1,""],[19836,0,"o"],[19836,1,""],[19829,0,"corresponding "],[19850,0,"rigin tree is not shown"],[19873,1,""],[19873,0,"."],[20222,126,""],[19747,0,"\nThese are merged into a FugueMax tree representing the final document state \"ABDC\" (assuming item B is sorted before item C).\n"],[19753,0," messages"],[19780,0," local"],[19800,0,", as sho"],[19807,1,""],[19806,1,""],[19805,1,""],[19804,1,""],[19803,1,""],[19802,1,""],[19801,1,""],[19800,1,""],[19796,4,""],[19796,0,"state tree"],[19796,10,""],[19796,0,"tree."],[19802,47,""],[19802,0,"A"],[19842,1,""],[19841,1,""],[19841,0,", the "],[19748,99,""],[19748,0,"These messages are merged into a local FugueMax tree. Assuming item B is sorted before item C, the"],[19846,52,""],[19846,0," "],[19872,0," is as follows"],[19886,1,""],[19886,0,"."],[19800,0,", with state \"\""],[19814,0,"ABCD"],[19821,0,"("],[19822,1,""],[19822,0,"A"],[19861,0,")"],[19862,1,""],[19862,0,"."],[19864,1,""],[19864,0,"T"],[19893,0," shown"],[19899,3,""],[19911,50,""],[19868,0,"corresponding "],[20272,1,""],[20330,0," set fo "],[20337,1,""],[20336,1,""],[20335,1,""],[20335,0,"of CRDT messages (and the"],[20381,0,")"],[20331,7,""],[20383,0," entirely"],[20407,4,""],[20424,0," //"],[20619,80,""],[20619,0,"In this se"],[20628,1,""],[20627,1,""],[20627,0,"example, assuming the events are visited in order of #$"],[20681,1,""],[20680,1,""],[20680,0,"$[A, B, C, D]$, the tranf"],[20704,1,""],[20704,0,"sformed operations would look like this:"],[20850,0,"Note the "],[20859,1,""],[20859,0,"p"],[21002,9,""],[21002,0,"final"],[21724,1,""],[21724,0,"C"],[21724,1,""],[21724,0,"V"],[21724,0,"CRDT "],[21770,1,""],[21770,0,"the"],[21770,3,""],[21770,0,"a"],[21770,1,""],[21770,0,"any"],[21746,8,""],[21746,0,"define"],[21742,4,""],[21742,0,"can "],[21746,6,""],[21746,0,"describe"],[21746,8,""],[21746,0,"define"],[21746,6,""],[21746,0,"describe"],[22148,0," However,"],[22157,2,""],[22157,0," t"],[22148,1,""],[22148,0,"\n\n"],[22472,1,""],[22471,1,""],[22471,0,"M"],[22632,8,""],[22632,0,"are populated with"],[22632,18,""],[22632,0,"contain"],[22779,0,"CRDT tree "],[22779,5,""],[22779,0,"fugue "],[22883,9,""],[22883,0,"FugueMax"],[22871,7,""],[22871,0,"simply"],[22989,28,""],[22989,0,"Consider t"],[23009,0," given"],[23382,0,"Given this message, "],[23402,4,""],[23445,0," the document content"],[24299,31,""],[24299,0," (the set of all seen versions)"],[24321,8,""],[24321,0,"me"],[24322,1,""],[24321,1,""],[24321,0,"events"],[24316,5,""],[24316,0,"witnessed "],[24344,0,"s"],[24344,1,""],[24344,0,"'s state"],[24366,13,""],[24394,0," state"],[24579,3,""],[24579,0,"moved around "],[24585,7,""],[24585,0,"to any"],[24598,0," arbitrary"],[24617,12,""],[24617,0,"before opr"],[24626,1,""],[24625,1,""],[24625,0,"r"],[24617,18,""],[24617,0,"containinga  sub"],[24632,1,""],[24631,1,""],[24630,1,""],[24629,1,""],[24628,1,""],[24627,1,""],[24627,0," a subset of the events represetn"],[24659,1,""],[24658,1,""],[24658,0,"nted by"],[24779,11,""],[24779,0,"Prep"],[24782,1,""],[24781,1,""],[24780,1,""],[24779,1,""],[24779,0,"The"],[24799,0," method uses this "],[24812,5,""],[24812,0,"$"],[24812,1,""],[24812,0,"the state described by #"],[24835,1,""],[24835,0,"$v"],[24836,1,""],[24835,1,""],[24835,0,"#vi"],[24836,2,""],[24836,0,"vin"],[24944,0," in the tr"],[24953,1,""],[24952,1,""],[24952,0,"event graph traversal"],[24980,18,""],[24980,0,"Eg-Walker State"],[24990,5,""],[24989,1,""],[24980,0,"Formalizing "],[25001,0,"'s state"],[25032,6,""],[25032,0,"alsmo"],[25036,1,""],[25035,1,""],[25034,1,""],[25034,0,"most"],[25032,19,""],[25032,0,"a modified version of"],[25071,1,""],[25071,0,"\n\n"],[25033,0," slightly"],[25174,26,""],[25094,11,""],[25094,0," made up of"],[25094,11,""],[25094,0," conta"],[25099,1,""],[25092,7,""],[25092,0,"contains"],[25310,0,"\n\n"],[25310,1,""],[25309,1,""],[25325,23,""],[25334,0," node's"],[25528,0,"// "],[25912,0,"either "],[25919,6,""],[25919,0,"containing"],[25949,3,""],[25948,1,""],[25948,0," $x$)"],[25949,0,"("],[25953,1,""],[25949,1,""],[25952,0,")"],[25949,0,"("],[25953,0," in [fugue paper]"],[25996,3,""],[25996,0,"a"],[26007,6,""],[26014,0,","],[26014,14,""],[26014,0,", respectively"],[25184,0," "],[25184,1,""],[25183,1,""],[25183,0," and a _delete map_ ("],[25203,1,""],[25202,1,""],[25202,0,".\n\n"],[25205,1,""],[25202,0,", mappign"],[25210,1,""],[25209,1,""],[25209,0,"ng from the ID fo "],[25226,1,""],[25225,1,""],[25224,1,""],[25224,0,"of each delete event to the e"],[25252,1,""],[25252,0,"corresponding deleted "],[25251,23,""],[25251,0," ID of the deleted item"],[25400,1,""],[25400,0," where:"],[26129,0,"// "],[26337,40,""],[26337,0," using the "],[26356,0," algorithm"],[26367,0," Notably, they do not contain their value ($x4"],[26412,1,""],[26412,0,"$) "],[26367,48,""],[26368,0,"\n"],[26368,0,"\nThe "],[26369,4,""],[26369,0,"The"],[26367,0," T"],[26368,1,""],[26368,0,"There are two small departures from t"],[26404,1,""],[26404,0,"FugueMax, "],[26413,1,""],[26412,1,""],[26412,0," as written in the paper:\n\n1. Th"],[26443,1,""],[26442,1,""],[26441,1,""],[26440,1,""],[26439,1,""],[26439,0,"+ The value of each node is not stored in the rtee"],[26488,1,""],[26487,1,""],[26486,1,""],[26485,1,""],[26485,0,"tree, as it is not needed"],[26471,0,"actually "],[26508,11,""],[26508,0," redundant"],[26509,9,""],[26509,0,"not actually needed\n+ T"],[26531,1,""],[26531,0,"We do not store the _side_ variable"],[26558,8,""],[26558,0,"parameter, as this is also not "],[26585,4,""],[26585,0,"redundant."],[26580,5,""],[26541,0,"explicitly "],[26557,0," FugueMax's"],[26568,4,""],[26590,4,""],[26590,0,"it"],[26608,5,""],[26634,0," on $"],[26638,1,""],[26638,0,"#vin"],[26639,3,""],[26639,0,"vin"],[26637,0," the state of the node at"],[26663,0,"version "],[26655,4,""],[26655,0,"intere"],[26660,1,""],[26659,1,""],[26658,1,""],[26657,1,""],[26657,0,"serted item"],[26684,0,":"],[26686,0,"\n"],[26686,0,"\n#"],[26687,1,""],[26687,0,"$$"],[26688,0,"exi"],[26688,3,""],[26688,0,"exists d in G"],[26700,1,""],[26700,0,"ceil(vin)"],[26695,1,""],[26695,0,"Delete("],[26695,7,""],[26695,0,"d"],[26709,0,": d = []"],[26716,0,"Delete"],[26715,1,""],[26715,0,"\""],[26722,1,""],[26722,0,"\""],[26722,0,"()"],[26687,39,""],[26686,1,""],[26685,1,""],[26923,2,""],[26924,0," id"],[26926,1,""],[26926,0,"s"],[26975,8,""],[26975,0,"$$"],[26976,0,"i"],[26981,0,"Recally, "],[26989,1,""],[26988,1,""],[26987,1,""],[26987,0," "],[26988,1,""],[26988,0,"i"],[26988,1,""],[26987,1,""],[26987,0,", i"],[27036,0,"delete "],[27054,0,",u"],[27055,1,""],[27054,1,""],[27054,0,"mutually "],[26981,9,""],[26981,0,"I"],[27069,3,""],[27078,5,""],[27073,0,"eg-walker "],[27089,0,"thus "],[27068,0,"\n"],[27068,0,"\nInvariants:*"],[27069,0,"*"],[27082,0,"\n\n1. "],[27086,1,""],[27085,1,""],[27084,1,""],[27083,1,""],[27083,0,"\n1. The state of the eg-walker"],[27100,4,""],[27087,13,""],[27096,0,"'s state exactly matches the corresponding FugueMax tree at $"],[27156,1,""],[27156,0,"#vout, where $"],[27169,1,""],[27169,0,"#sout represents whether the item contains its original value $x$ or a tombstone $perp$.\n2. eg-walker's state exactly matches the corresponding FugueMaxTr"],[27322,1,""],[27321,1,""],[27321,0," tree at $"],[27330,1,""],[27330,0,"#vin, where #sing "],[27347,1,""],[27346,1,""],[27346,0," "],[27344,0,"s"],[27258,90,""],[27258,0,"2. eg-walker's state exactly matches the corresponding FugueMax tree at #vin, where #ssin"],[27068,0,"\n\n#block(inset: 4mm, stroke: 0.3pt + black)["],[27392,0,"\n"],[27392,0,"]"],[27302,0,"  "],[27128,0,"  "],[27113,0,"  "],[27125,1,""],[27125,0," 1"],[27400,0,"\n  2. eg-walker's state exactly matches the corresponding FugueMax tree at #vin, where #ssin"],[27307,92,""],[27308,0,"\n  1. eg-walker's state exactly matches the corresponding FugueMax tree at #vout, where #sout represents whether the item contains its original value $x$ or a tombstone $perp$."],[27131,176,""],[27132,0,"\n"],[27130,1,""],[27070,0,"#block(inset: 4mm, stroke: 0.3pt + black)[\n"],[27155,17,""],[27113,0,"  *Invariant 1:*\n"],[27172,2,""],[27130,0,"]\n"],[27174,1,""],[27132,0,"\n"],[27444,0,"]\n"],[27351,0,"\n#block(inset: 4mm, stroke: 0.3pt + black)["],[27133,43,""],[27308,0,"\n"],[27132,1,""],[27307,0,"\n]"],[27130,2,""],[27132,3,""],[27129,0,"\n  "],[27130,2,""],[27113,0,"  *Invariant 1:*\n"],[27146,1,""],[27130,0,"\n"],[27147,173,""],[27131,0,"  eg-walker's state exactly matches the corresponding FugueMax tree at #vout, where #sout represents whether the item contains its original value $x$ or a tombstone $perp$.\n"],[27320,2,""],[27304,0,"]\n"],[27322,1,""],[27306,0,"\n"],[27323,43,""],[27307,0,"#block(inset: 4mm, stroke: 0.3pt + black)[\n"],[27366,0,"\n  "],[27367,2,""],[27363,1,""],[27363,0,"2"],[27370,3,""],[27387,16,""],[27387,0," describes"],[27437,13,""],[27437,0," by p"],[27441,1,""],[27440,1,""],[27439,1,""],[27438,1,""],[27437,1,""],[27437,0," by the floo"],[27448,1,""],[27447,1,""],[27446,1,""],[27446,0,"ollowing projection:\n  \n  "],[27467,2,""],[27470,0,"- Any items in eg-walker"],[27485,9,""],[27484,1,""],[27484,0," eg-walker"],[27485,9,""],[27484,1,""],[27483,1,""],[27482,1,""],[27482,0,"with $ssin = "],[27468,27,""],[27468,0,"  - Any items with $ssin = mono(\"NotInsertedYet\")$ are elided frin tge "],[27538,1,""],[27537,1,""],[27536,1,""],[27535,1,""],[27534,1,""],[27533,1,""],[27532,1,""],[27532,0,"om the tree"],[27438,2,""],[27438,0,"through"],[27486,0," in eg-walker"],[27547,14,""],[27547,0,". (If an item has"],[27548,16,""],[27548,0," ("],[27549,1,""],[27548,1,""],[27548,0,"\n  - "],[27549,4,""],[27549,0,"  -"],[27548,0," The"],[27551,1,""],[27550,1,""],[27549,1,""],[27549,0,"The "],[27552,1,""],[27551,1,""],[27550,1,""],[27549,1,""],[27549,0,"Entire subtree"],[27549,14,""],[27549,0,"If an item has $ssin = mono(\"NotInsertedYet\")$, all of its children will also "],[27548,79,""],[27548,0," (All children of any mono(\"NotInsertedYet\")$"],[27570,0,"$"],[27594,0," will also be mono(\"NotInsertedYet\")$"],[27608,0,"$"],[27632,0,")."],[27605,3,""],[27605,0,"have "],[27611,0,"ssin = "],[27566,28,""],[27566,0,"such elements"],[27554,0,"tree-"],[27558,1,""],[27558,0," "],[27558,1,""],[27558,0,"="],[27558,1,""],[27558,0,"-"],[27554,5,""],[27562,0," in the tree"],[27644,0," Othweri"],[27651,1,""],[27650,1,""],[27649,1,""],[27648,1,""],[27648,0,"ersiw"],[27652,1,""],[27651,1,""],[27650,1,""],[27650,0,"wise, the "],[27641,19,""],[27641,0,"  - Otherwise, the"],[27638,0,", and can be elided en masse"],[27638,28,""],[27563,12,""],[27566,4,""],[27566,0,"these"],[27647,1,""],[27645,2,""],[27645,0,"##"],[27646,1,""],[27645,1,""],[27645,0,"$"],[27645,1,""],[27645,0,"#ssin co"],[27652,1,""],[27651,1,""],[27651,0,"x"],[27651,1,""],[27651,0,"e"],[27651,1,""],[27651,0,"expresses if the item should have o"],[27685,1,""],[27685,0,"its i"],[27689,1,""],[27689,0,"original value $x4"],[27706,1,""],[27706,0,"$"],[27651,0,"is "],[27645,18,""],[27645,0,"$ssin = mono(\"Ins\")$"],[27712,0,", or $ssin = mono(\"Ins\")$"],[27731,3,""],[27731,0,"Del"],[27736,0,")"],[27736,1,""],[27736,0,"(_)"],[27737,1,""],[27737,0,"d"],[27740,0," if the item should be "],[27753,10,""],[27753,0,"h"],[27753,1,""],[27753,0,"should be a "],[27760,5,""],[27760,0,"have a tombstone value ("],[27783,1,""],[27783,0,"$perp$."],[27634,11,""],[27701,5,""],[27701,0,"\n  - "],[27779,0,"\n  \n  "],[27780,2,""],[27783,0,"PROVE ME!"],[27370,0,"The "],[27373,1,""],[27373,0," fugu"],[27377,1,""],[27376,1,""],[27375,1,""],[27374,1,""],[27374,0,"FugueMax tree at #v"],[27392,1,""],[27392,0,"vin can be "],[27396,7,""],[27396,0,"is the same as "],[27396,14,""],[27396,0,"matches"],[27421,0,", "],[27422,1,""],[27421,1,""],[27421,0,", with the following projection"],[27452,83,""],[27487,31,""],[27459,0,"$ssin = mono(\"NotInsertedYet\")$ "],[27458,0," If"],[27493,0,", the item"],[27503,33,""],[27503,0," is"],[27504,0,"and its subtree "],[27548,5,""],[27548,0,"such"],[27068,0,"\nWehn "],[27073,1,""],[27072,1,""],[27071,1,""],[27070,1,""],[27070,0,"hen messages as "],[27083,3,""],[27073,10,""],[27073,0," the _apply-update_ funct"],[27093,5,""],[27093,0,"method merges messages into th"],[27122,1,""],[27121,1,""],[27121,0,"eg-walker's state, b"],[27140,1,""],[27140,0,"both $"],[27145,1,""],[27145,0,"#vin and $"],[27154,1,""],[27154,0,"#vout are updated according to the new mess"],[27193,4,""],[27192,1,""],[27192,0," m"],[27193,1,""],[27193,0,"m"],[27193,1,""],[27172,21,""],[27171,1,""],[27171,0,"."],[27140,4,""],[27140,0,"the event is added to both"],[27181,13,""],[27181,0,", and "],[27183,4,""],[27182,1,""],[27181,1,""],[27181,0,". $"],[27183,1,""],[27183,0,"#ssin and #ss"],[27195,1,""],[27195,0,"out an"],[27200,1,""],[27200,0,"re updated accordingly."],[27183,0,"The "],[27202,0," fields of any "],[27213,4,""],[27212,1,""],[27211,1,""],[27210,1,""],[27209,1,""],[27234,0," "],[27182,0," Insertd eve"],[27183,11,""],[27183,0,"Inserted"],[27183,8,""],[27183,0,"Newly inserted items have $$"],[27210,0,"ssin = ssout"],[27221,1,""],[27220,1,""],[27219,1,""],[27218,1,""],[27218,0,"out = mono(\"Ins\")"],[27236,0,". And deleted items have $$"],[27262,0,"sount = "],[27269,1,""],[27268,1,""],[27267,1,""],[27266,1,""],[27265,1,""],[27264,1,""],[27264,0,"ut = "],[27267,0,":"],[27270,0,"asdf"],[27222,0,":"],[27271,4,""],[27271,0,"mono(\"Del\")"],[27284,52,""],[27181,0,", with The #ssin and #sout fields are updated accordingly. "],[27239,1,""],[27238,1,""],[27188,3,""],[27187,1,""],[27204,6,""],[27204,0,"being"],[27336,0,"and $$"],[27341,0,"ssin = "],[27347,1,""],[27346,1,""],[27346,0,":= mono(\"del\")"],[27355,1,""],[27355,0,"D"],[27360,0,"(n)"],[27362,0," + 1"],[27368,0," where $n$ is the previous delete count (or 0, if the item has never been previously deleted)."],[27234,1,""],[27234,0,"\n"],[27234,1,""],[27233,1,""],[27233,0,"\n"],[27233,1,""],[27233,0,":\n\n- "],[27238,7,""],[27238,0,"I"],[27286,7,""],[27286,0,"\n- D"],[27303,4,""],[27303,0,"s"],[27253,4,""],[27253,0,"s"],[27301,0,"e"],[27254,0,"e"],[27303,0,"t"],[27255,0,"t"],[27068,0,"\n"],[27068,0,"\n"],[26627,7,""],[26627,0,"always matches"],[26627,14,""],[26627,0,"c"],[26627,1,""],[26626,1,""],[26626,0," c"],[26627,1,""],[26627,0,"always matches"],[27076,0,"N"],[27076,1,""],[27076,0,"Before each eve"],[27083,8,""],[27083,0,"_prepare_update"],[27091,1,""],[27091,0,"-"],[27098,0,"_ processes each event, the "],[27122,4,""],[27122,0,"#vin (via #ssin on all nodes)"],[27141,9,""],[27141,0,"the"],[27141,3,""],[27141,0,"all nodes"],[27151,0,"i"],[27151,1,""],[27151,0," is updated "],[27141,9,""],[27140,1,""],[27138,2,""],[27137,1,""],[27127,12,""],[27130,8,""],[27130,0,"set to the events' parents' "],[27157,1,""],[27156,1,""],[27147,1,""],[27136,19,""],[27136,0," match the event's parent "],[27161,1,""],[27161,0,"s."],[27147,0,"state according ot t"],[27166,1,""],[27165,1,""],[27164,1,""],[27163,1,""],[27163,0,"to the "],[27137,49,""],[27137,0,"the event's parents."],[27120,0," "],[27120,1,""],[27120,0," $i$"],[27160,0," $P_i$"],[27167,0," This is done by modifying th "],[27196,1,""],[27196,0,"e"],[27196,1,""],[27195,1,""],[27194,1,""],[27194,0,"#ssin on all nodes in the state to mat"],[27225,7,""],[27225,0,". "],[27213,12,""],[27212,1,""],[27206,0," relevant"],[27223,0,"This operation can be performed differentially, by"],[27272,1,""],[27271,1,""],[27270,1,""],[27238,3,""],[27238,0,"is"],[27240,3,""],[27238,2,""],[27238,0,"can be"],[27223,0,"Importantly, "],[27236,1,""],[27236,0,"t"],[27282,1,""],[27282,0,"."],[27223,14,""],[27223,0,"T"],[27223,0,"For performance, "],[27227,0,"improved "],[27249,1,""],[27249,0,"t"],[27295,1,""],[27295,0,":\n\n```\n\n```"],[27302,0,"function setVinput"],[27311,9,""],[27311,0,"setInput "],[27319,1,""],[27319,0,"Versiopn("],[27327,1,""],[27326,1,""],[27325,1,""],[27325,0,"n(state, oldVin, new"],[27334,11,""],[27334,0,"parentVersion) {\n  \n  "],[27351,2,""],[27352,2,""],[27352,0,"}"],[27351,0,"  (addedEvents, removedEvents) = "],[27351,33,""],[27351,0,"  (addedEvents, removedEvents) = diff(state.vin, paren"],[27400,5,""],[27400,0,"parentVersion)"],[27384,0,"set"],[27387,1,""],[27387,0,"D"],[27391,0,"erence"],[27350,0,"\n  addedEvents := parentVersion - state.vin\n  removedEvents := paren"],[27413,5,""],[27394,19,""],[27394,0,"  removedEvents := state.vin - parentVer"],[27425,9,""],[27425,0,"parentVersion"],[27439,73,""],[27438,0,"\n  \n  "],[27439,2,""],[27442,0,"for e in removed"],[27451,7,""],[27451,0,"removedEvents."],[27464,1,""],[27464,0," in reverese"],[27475,1,""],[27474,1,""],[27473,1,""],[27473,0,"se order {\n    \n    "],[27484,4,""],[27485,4,""],[27485,0,"  }"],[27484,0,"    state.remove(e)"],[27507,0,"\n  \n  "],[27508,2,""],[27511,0,"for e in addedEvents {\n    \n    "],[27534,4,""],[27535,4,""],[27535,0,"  }"],[27534,0,"    state."],[27494,6,""],[27494,0,"d"],[27494,1,""],[27494,0,"disable"],[27545,0,"enable(e)"],[27560,0,"\n\nfunction enable(state, e) {\n  \n  "],[27590,2,""],[27591,2,""],[27591,0,"}"],[27590,0,"  match e {\n    \n    "],[27602,4,""],[27603,4,""],[27603,0,"  }"],[27602,0,"    | "],[27607,1,""],[27606,1,""],[27606,0,"Del(id) => "],[27602,15,""],[27602,0,"    Del(id) =>"],[27589,0,"\n  let id = "],[27592,9,""],[27592,0,"id := e.id"],[27624,1,""],[27623,1,""],[27623,0,"_"],[27628,0," {\n      \n      "],[27631,6,""],[27632,6,""],[27632,0,"    }"],[27631,0,"      te"],[27638,1,""],[27638,0,"arget = "],[27645,1,""],[27644,1,""],[27644,0,":= state.deleteMap(id)"],[27665,1,""],[27664,1,""],[27663,1,""],[27662,1,""],[27662,0,"[id]\n      state.nodes[target].sin := "],[27699,1,""],[27698,1,""],[27697,1,""],[27697,0,"+= 1"],[27707,0,"\n    Ins(_) => {\n      \n      "],[27724,6,""],[27725,6,""],[27725,0,"    }"],[27724,0,"state.nodes[target].sin += 1  "],[27724,0,"      "],[27754,6,""],[27742,6,""],[27742,0,"id"],[27750,0,"= Insert"],[27757,1,""],[27756,1,""],[27755,1,""],[27701,0," // Ins -> Del(0"],[27716,1,""],[27716,0,"1), Del(n) -> Del(n+1)."],[27561,0,"\nfunction enable(state, e) {\n  id := e.id\n  match e {\n    Del(_) => {\n      target := state.deleteMap[id]\n      state.nodes[target].sin += 1 // Ins -> Del(1), Del(n) -> Del(n+1).\n    }\n    Ins(_) => {\n      state.nodes[id].sin = Ins\n    }\n  }\n}\n"],[27816,6,""],[27816,0,"disable"],[27943,1,""],[27943,0,"-"],[27951,7,""],[27957,0," -> Ins"],[27981,1,""],[27981,0,"-"],[27761,0,"\n      // Precondition: "],[27762,23,""],[27761,1,""],[28036,3,""],[28036,0,"NotYetI\n      "],[28043,7,""],[28043,0,"nn"],[28044,1,""],[28044,0,"serted"],[27295,0," by comparing #vin and $P_i$ and only modifying nodes which "],[27343,12,""],[27343,0,"a (usually small) subset of nodes"],[27342,0," #ssin on"],[27440,0,"\n  // Set difference."],[27460,1,""],[27712,0,"\n  if e is delete"],[27723,6,""],[27723,0,"Delete"],[27728,1,""],[27727,1,""],[27726,1,""],[27726,0,"()"],[27727,1,""],[27726,1,""],[27726,0,"ete {\n    \n    "],[27732,4,""],[27733,4,""],[27733,0,"  }"],[27732,0,"    "],[27732,4,""],[27732,0,"    id := "],[27732,10,""],[27732,0,"    id := state.deleteMap[id]"],[27765,0,"\n  "],[27766,2,""],[27766,0,"state.nodes[id].sin = Ins"],[27766,0,"  "],[27788,5,""],[27788,0,"+= 1 // NotY"],[27796,4,""],[27796,0,"NotYetInserted -> Ins, Ins -> Del(1), Del(n) -> Del(n+1)"],[27792,60,""],[27671,0,"\n"],[27671,0,"\nenum SIn {\n  \n  "],[27683,2,""],[27686,0," // NotYetInserted -> Ins, Ins -> Del(1), Del(n) -> Del(n+1)"],[27687,3,""],[27682,1,""],[27701,0,"= -1"],[27704,1,""],[27703,1,""],[27703,0,"0,"],[27705,3,""],[27705,0,"\n   "],[27712,0," = 1,"],[27703,1,""],[27703,0,"-1"],[27716,1,""],[27716,0,"0"],[27718,1,""],[27718,0,"\n   "],[27722,16,""],[27729,11,""],[27729,0,"= n\n   "],[27733,3,""],[27733,0,"}"],[27857,201,""],[27902,0,"  if e is Delete {\n    id := state.deleteMap[id]\n  }\n"],[27955,70,""],[27955,0,"    "],[27955,4,""],[27955,0,"  "],[27969,6,""],[27969,0,"id"],[27981,38,""],[27982,75,""],[27548,0,"\n  addedEvents := parentVersion - state.vin"],[27461,43,""],[27506,43,""],[27576,0,"\n  addedEvents := parentVersion - state.vin"],[27505,1,""],[27667,0,"\n  state.vin := parentV"],[27683,7,""],[27683,0,"parentVersion"],[27667,0,"\n  "],[27668,2,""],[28194,1,""],[28193,1,""],[28194,5,""],[28194,0,"messages"],[28234,0," "],[28234,1,""],[28235,0," in the new node"],[28260,1,""],[28259,1,""],[28259,0,"e"],[28261,5,""],[28261,0,"messages"],[29280,564,""],[15844,0,"\n"],[15844,0,"\nWe belie"],[15848,5,""],[15848,0,"have "],[15845,8,""],[15845,0,"This algor"],[15845,10,""],[15845,0,"We will describe eg-walker based "],[15848,5,""],[15848,0,"have implemented"],[15864,8,""],[15875,6,""],[15875,0,"around FugueMax"],[15882,0,"the "],[15894,0," CRDT, however"],[15901,7,""],[15901,0,"but the algorithm is no "],[15924,1,""],[15924,0,"t necs"],[15929,1,""],[15901,28,""],[15901,0,"and this paper will describe this impleme"],[15935,7,""],[15916,19,""],[15916,0,"describes this implementation. However, we believe eg-walker"],[15959,0,"have imp"],[15966,1,""],[15965,1,""],[15964,1,""],[15964,0,"also in"],[15970,1,""],[15970,0,"mplemented eg-walker for Y"],[15995,1,""],[15995,0,"many other sequence CRDTs, including Yjs and Fugue, "],[16046,1,""],[16045,1,""],[16045,0,". We "],[16067,0," could be easily adapted to work for"],[16095,8,""],[16094,1,""],[16093,1,""],[16092,1,""],[16092,0,"to most "],[15875,0,"to match"],[15883,10,""],[15892,5,""],[15892,0,"'s semantics"],[15892,58,""],[15906,21,""],[15906,0,"believe"],[15923,0," is a "],[15924,5,""],[15924,0,"can be adapted to "],[15941,1,""],[15940,1,""],[15939,1,""],[15939,0,"for u"],[15943,1,""],[15942,1,""],[15941,1,""],[15940,1,""],[15939,1,""],[15938,1,""],[15968,1,""],[15968,0,". (We have implementations using"],[16000,10,""],[15995,5,""],[15995,0,"matching"],[16017,0,", but "],[15974,0,"also "],[16000,8,""],[16000,0,"which match the behaviour of"],[16047,1,""],[16046,1,""],[16045,1,""],[16044,1,""],[16043,1,""],[16042,1,""],[16042,0,")"],[15883,0," the sematics of"],[15892,0,"n"],[16061,54,""],[15987,1,""],[15989,5,""],[16053,2,""],[16011,0,"based around "],[16024,29,""],[16037,0,", "],[16009,1,""],[16008,1,""],[16007,1,""],[16006,1,""],[16005,1,""],[16004,1,""],[16004,0,"ed i"],[16007,1,""],[16006,1,""],[16006,13,""],[16021,1,""],[16020,1,""],[16020,0," variants with equiv"],[16035,5,""],[16035,0,"identical performance."],[16034,0," seemi"],[16034,6,""],[16045,12,""],[16045,0,"behaviour and performan"],[16030,38,""],[16029,1,""],[16007,0,"variants based on "],[16038,9,""],[16038,0,", and we suspect the same approach woudl "],[16078,1,""],[16077,1,""],[16076,1,""],[16076,0,"ld work for many other s"],[16088,12,""],[16040,48,""],[16040,0,"though we will not discuss the differences in this pape"],[16094,1,""],[16094,0,"er."],[16038,1,""],[16038,0,". The differences are minor, and we will"],[16078,7,""],[16079,8,""],[16090,16,""],[15956,0,"to match the semat"],[15973,1,""],[15973,0,"ntics of "],[15982,4,""],[16038,0,"ourselkves "],[16048,1,""],[16047,1,""],[16046,1,""],[16045,1,""],[16044,1,""],[16044,0,"ves "],[16070,0,", though these variants will not be "],[16106,67,""],[16106,0,"discyuss"],[16113,1,""],[16112,1,""],[16111,1,""],[16110,1,""],[16110,0,"ussed in this ap"],[16125,1,""],[16124,1,""],[16124,0,"paper."],[16070,0," with minimal code changes"],[28012,64,""],[27704,0,"\n\nenum SIn {\n   NotYetInserted = -1,\n   Ins = 0,\n   Del(n) = n\n}\n"],[27704,1,""],[27704,0,"\n// sin wi"],[27713,1,""],[27712,1,""],[27712,0,"is described "],[27715,10,""],[27715,0,"im"],[27716,1,""],[27715,1,""],[27715,0,"implemented with an integer:"],[28270,92,""],[28269,1,""],[28239,32,""],[27970,16,""],[27970,0,"  id := e.id\n  if e is Delete {\n    id := state.deleteMap[id]\n  }\n  state.nodes[id].sin -= 1"],[28036,2,""],[28036,0,"    "],[28032,2,""],[28032,0,"    "],[28002,4,""],[28002,0,"      "],[27983,2,""],[27983,0,"    "],[28042,4,""],[28042,0,"      "],[28036,4,""],[28036,0,"      "],[28004,6,""],[28004,0,"        "],[27983,4,""],[27983,0,"      "],[28048,6,""],[28048,0,"    "],[28040,6,""],[28040,0,"    "],[28006,8,""],[28006,0,"      "],[27983,6,""],[27983,0,"    "],[27966,6,""],[27966,0,"    "],[28227,92,""],[28226,1,""],[28197,31,""],[28146,15,""],[28146,0,"  id := e.id\n  if e is Delete {\n    id := state.deleteMap[id]\n  }\n  state.nodes[id].sin += 1"],[28212,2,""],[28212,0,"    "],[28208,2,""],[28208,0,"    "],[28178,4,""],[28178,0,"      "],[28159,2,""],[28159,0,"    "],[28142,6,""],[28142,0,"    "],[27497,9,""],[27497,0,"setting"],[27511,0,"to the correct value "],[27539,9,""],[27544,0," in the state tree"],[27726,1,""],[27726,0,". The differential up"],[27732,15,""],[27732,0,"logic to differentially update "],[27741,15,""],[27748,0,"#sin"],[27751,1,""],[27750,1,""],[27750,0,"sin differentially is given by ht"],[27782,1,""],[27781,1,""],[27781,0,"the following algorithm. We present an optimizat"],[27828,1,""],[27827,1,""],[27826,1,""],[27820,6,""],[27820,0,"approach to "],[27820,12,""],[27819,1,""],[27818,1,""],[27818,0," high performance way to calculate the difference between versions in [optimization t"],[27902,1,""],[27902,0,"chapter]."],[27835,4,""],[27835,0," algorithm for"],[27849,3,""],[27858,1,""],[27858,0,"ing"],[28222,0,"\n      // modify "],[28232,1,""],[28232,0,"M"],[28239,0,"the item the "],[28243,9,""],[28243,0,"deleted node."],[28239,0,"state of "],[28297,0,"\n      // State will"],[28298,19,""],[28297,1,""],[28549,0,"\n"],[28549,0,"\n_prepare-update_ wo"],[28568,1,""],[28567,1,""],[28567,0,"operates on the pre"],[28585,1,""],[28585,0,"ojection of the state tree described by @"],[28625,1,""],[28625,0,"#ssin."],[29962,80,""],[28631,0,"\n\n\n$ op(\"len\")_italic(\"in\") := cases(\n  1 \"if\" ssin = mono(\"Ins\"),\n  0 \"else\"\n) $\n"],[28632,0,"\nFirst, we can define the length of each node at $"],[28681,1,""],[28681,0,"#vin as follows:"],[28778,0,"\nDelete events delete the $n_th$"],[28807,0,"\""],[28810,0,"\""],[28812,0," item "],[28813,5,""],[28813,0,"node in the "],[28804,21,""],[28804,0,"item "],[28793,16,""],[28793,0,"mark the item at position $n$ for delete"],[28832,1,""],[28832,0,"ion. The itm"],[28843,1,""],[28843,0,"em is found by "],[28779,79,""],[28779,0,"Delete events mark the item at position $n$ for deletion. The item is found by"],[28793,64,""],[28793,0,"find the first item"],[28802,10,""],[28802,0,"next in"],[28808,1,""],[28807,1,""],[28807,0,"item with #ssin = mono)"],[28829,1,""],[28829,0,"(\"Ins\")$"],[28836,1,""],[28836,0,"# after"],[28778,0,"\nThen "],[28779,5,""],[28778,1,""],[28835,2,""],[28835,0,")$"],[28817,1,""],[28817,0,"$"],[28631,0," Delete events mark the $i$th"],[28659,1,""],[28658,1,""],[28657,0,"_\"th\""],[28663,0," item with "],[28550,124,""],[28550,0,"_prepare-update_ operates on the projection of the state tree described by #ssin. Delete events mark the $i_\"th\"$ item with $ssin = mono(\"Ins\")$ "],[28669,0,"in the tree "],[28707,0,"as deleted."],[28657,2,""],[28657,0,"$-"],[28662,1,""],[28661,1,""],[28716,0," Insert sev"],[28726,1,""],[28725,1,""],[28724,1,""],[28724,0,"events have the following properties set:\n\n\\ asdf: asdf"],[28767,1,""],[28767,0,"/"],[28769,4,""],[28769,0,"originLeft"],[28781,4,""],[28781,0,"The ID of the ("],[28795,1,""],[28795,0,"$$"],[28796,0,"i - 1"],[28796,5,""],[28796,0,")"],[28796,1,""],[28796,0,"i - 1)"],[28796,0,"("],[28804,0,"-th item in the "],[28808,12,""],[28808,0,"node with "],[28767,51,""],[28767,0,"/ originLeft: The ID of the $(i - 1)$-th node with $ssin = mono(\"Ins\")$, or $"],[28843,1,""],[28843,0,"_root_ other"],[28850,5,""],[28850,0,"if $i - 0$"],[28767,0,"/ originLeft: The ID of the $(i - 1)$-th node with $ssin = mono(\"Ins\")$, or _root_ if $i - 0$\n"],[28872,1,""],[28871,1,""],[28870,1,""],[28869,1,""],[28869,0,"Right"],[28886,26,""],[28886,0,"n"],[28886,1,""],[28886,0,"the next node after _originLeft_ with $ssin = mono(\"Ins\")$"],[28919,4,""],[28919,0,"where"],[28931,0,"\\"],[28931,1,""],[28931,0,"!"],[28940,3,""],[28940,0,"NotIn"],[28940,5,""],[28940,0,"NotInsertedYet"],[28957,43,""],[28957,0,", or "],[28861,101,""],[28861,0,"/ originRight: The ID of the next node after _originLeft_ where $ssin != mono(\"NotInsertedYet\")$, or"],[28847,1,""],[28846,1,""],[28845,1,""],[28844,1,""],[28844,0,"start"],[28962,0," _end_."],[28724,6,""],[28724,0,"messages"],[28732,35,""],[28732,0," set the following properties:"],[28639,6,""],[28639,0,"messages"],[28648,4,""],[28648,0,"target"],[28682,0,"'s traversal"],[28720,11,""],[28972,0,"\n\n\n\n\n"],[29595,857,""],[28549,0,"\n#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Invariant 1:*\n\n  eg-walker's state exactly matches the corresponding FugueMax tree at #vout, where #sout represents whether the item contains its original value $x$ or a tombstone $perp$.\n]\n\n#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Invariant 2:*\n\n  The FugueMax tree at #vin matches eg-walker's state, with the following projection:\n\n  - If $ssin = mono(\"NotInsertedYet\")$, the item and its subtree is elided. (All children of such elements will also have $ssin = mono(\"NotInsertedYet\")$).\n  - $ssin = mono(\"Ins\")$ if the item should have its original value $x$\n  - $ssin = mono(\"Del\")(d)$ if the item should have a tombstone value $perp$.\n\n  PROVE ME!\n]\n\nThe eg-walker state thus simultaneously represents the equivalent FugueMax's tree at two versions: #vin and #vout, with $vin <= vout$ at all times.\n\n"],[27650,0,"the graph "],[27653,7,""],[27653,0," set of events at "],[27640,9,""],[27640,0,"finding the difference between"],[27670,4,""],[27671,0,"tghe "],[27675,1,""],[27674,1,""],[27673,1,""],[27672,1,""],[27672,0,"he "],[27640,0,"on"],[27641,1,""],[27640,1,""],[27640,51,""],[27640,0,"comparing"],[27693,1,""],[27693,0,"the"],[27728,0," which have changed state"],[27832,115,""],[27650,0,"the set of events at "],[27668,0,"in the graph "],[27788,0,"  We present a high performance algorithm for calculating the difference between versions in [optimization chapter]."],[27789,1,""],[27789,0,"("],[27904,0,")"],[27905,1,""],[27905,0,"\n\n"],[28144,17,""],[28142,2,""],[28141,1,""],[28186,0," // Set difference"],[28442,0," // Set difference"],[28628,0,"\n\nWe make the following claims about the the "],[28672,1,""],[28671,1,""],[28670,1,""],[28669,1,""],[28669,0,"state of the "],[28678,4,""],[28665,13,""],[28665,0,"eg-walker's state at all times"],[28682,13,""],[28682,0,":"],[28682,0," throughout the traversal"],[28993,9,""],[28993,0,"C"],[28756,9,""],[28756,0,"C"],[28986,0,"l"],[28757,0,"l"],[28988,0,"a"],[28758,0,"a"],[28990,0,"i"],[28759,0,"i"],[28992,0,"m"],[28760,0,"m"],[28939,0,"\n  \n  "],[28940,2,""],[28943,0,"This follows "],[28941,15,""],[28940,1,""],[28939,1,""],[29557,1,""],[29981,0,"#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim 2:*\n\n  The FugueMax tree at #vin matches eg-walker's state, with the following projection:\n\n  - If $ssin = mono(\"NotInsertedYet\")$, the item and its subtree is elided. (All children of such elements will also have $ssin = mono(\"NotInsertedYet\")$).\n  - $ssin = mono(\"Ins\")$ if the item should have its original value $x$\n  - $ssin = mono(\"Del\")(d)$ if the item should have a tombstone value $perp$.\n\n  PROVE ME!\n]\n"],[30033,1,""],[30033,0,"3"],[29980,0,"\n"],[29980,0,"\n"],[30040,393,""],[30039,1,""],[30038,1,""],[30038,0,"\n  \n  "],[30039,2,""],[30042,0,"_parep"],[30047,1,""],[30046,1,""],[30045,1,""],[30044,1,""],[30044,0,"repa"],[30042,6,""],[30042,0,"_prepare-update_ as described "],[30059,13,""],[30058,1,""],[30042,0,"The "],[30062,0," method (immediately following"],[30070,22,""],[30070,0,"will "],[30070,5,""],[30070,0,"(called immediately after"],[30078,17,""],[30078,0,"after "],[30063,6,""],[30063,0,"function"],[30086,0,"setting #vin = $$"],[30102,0,"P-"],[30103,1,""],[30103,0,"_i"],[30106,0,") will produce an iden"],[30121,7,""],[30121,0,"the same C"],[30130,1,""],[30130,0,"CRDT message as FugueMax."],[30121,3,""],[30121,0,"an identical"],[30133,5,""],[30158,1,""],[30158,0," when calling _prepare-update_"],[30159,0,"for the same event, "],[30208,0," with "],[30177,37,""],[30177,0,".\n  "],[30179,2,""],[30071,0," defined above"],[29530,0,"ceil("],[29538,0,")"],[29540,2,""],[29540,0,"subset"],[29547,0,"ceil("],[29556,0,"0"],[29556,1,""],[29556,0,")"],[29546,0,".eq"],[30210,1,""],[30210,0,", with a CRDT state at $$"],[30234,0,"O_"],[30235,1,""],[30234,1,""],[30234,0,"P_i"],[30238,0,"."],[30000,1,""],[29999,1,""],[30323,79,""],[30863,0,"\n$ op(\"len\")_italic(\"in\") := cases(\n  1 \"if\" ssin = mono(\"Ins\"),\n  0 \"else\"\n) $\n"],[31047,0,"// "],[31014,0,"// "],[30980,0,"// "],[30944,0,"// "],[30939,0,"// "],[30928,0,"// "],[30899,0,"// "],[30864,0,"// "],[30325,66,""],[30257,67,""],[30256,1,""],[30255,1,""],[30254,1,""],[30253,1,""],[30347,14,""],[30347,0,"both #vin and "],[30347,14,""],[30359,10,""],[30370,4,""],[30416,7,""],[30497,126,""],[30496,1,""],[30253,243,""],[28629,0,"\n\n"],[28630,0,"\nWhen the _apply-update_ method merges messages into eg-walker's state, the event is added to #vout, with #sout being updated accordingly:\n\n- Insert messages set $sout := mono(\"Ins\")$ in the new node\n- Delete messages set $sout := mono(\"Del\")$"],[28629,1,""],[28872,0,"\n\nThe event may also be #vin, but because _setInputVersion_ is called before _prepare-update_"],[28935,0,"always "],[28972,0,", it do"],[28978,1,""],[28977,1,""],[28977,0,"has no bearing on the algorithm's co"],[29008,5,""],[29008,0,"."],[28974,2,""],[28974,0,"this choice"],[29007,0," base"],[28895,0," added"],[28906,0," b"],[28907,1,""],[28907,0,"(setting $"],[28916,1,""],[28916,0,"#ssin)"],[28921,0," on the modified node"],[28943,1,""],[28943,0,". However,"],[28953,4,""],[29026,0," algori"],[29032,1,""],[29031,1,""],[29031,0,"rithmic"],[29068,5,""],[29068,0,"base "],[29027,12,""],[24862,18,""],[24987,0,"calling _prepare-update_ during event traveres"],[25032,1,""],[25031,1,""],[25030,1,""],[25030,0,"rsal, "],[25036,44,""],[25077,0," using the _prepare"],[25089,7,""],[25089,0,"setInputVersion_ method des"],[25115,1,""],[25114,1,""],[25113,1,""],[25113,0,"defined below"],[25120,6,""],[25120,0," in [Algorithm X]"],[25138,1,""],[25138,0,"\n\n"],[25139,1,""],[25138,1,""],[25138,0," "],[25182,0,"as "],[25218,21,""],[25218,0,"resul"],[25218,5,""],[25218,0,"correct corresponding"],[25218,22,""],[25214,4,""],[25214,0,"its "],[29100,0,"\n"],[29100,0,"\nD"],[29101,1,""],[29101,0,"Delete messasg"],[29114,1,""],[29113,1,""],[29112,1,""],[29112,0,"ages also update the state's _delete map_, setting "],[29101,6,""],[29101,0,"Merged"],[29155,8,""],[29154,1,""],[29153,1,""],[29153,0," "],[29153,1,""],[29153,0," for u"],[29158,1,""],[29157,1,""],[29156,1,""],[29155,1,""],[29154,1,""],[29154,0,"for use in _setInputVersion_."],[29163,0," "],[29163,1,""],[29164,0," later calls to"],[29277,0," "],[29277,1,""],[29277,0,", after each "],[29279,11,""],[29279,0,"before and after visiting each event"],[29607,0,"\n"],[29607,1,""],[29636,7,""],[29636,0,"can be calculated from"],[29678,30,""],[29678,0,"by projecting all nodes in the following way:"],[29702,0,"in eg-walker "],[30537,1,""],[30537,0,"="],[30909,0,"// "],[31623,0,"// "],[31520,0,"// "],[31335,0,"// "],[31257,0,"// "],[31188,0,"// "],[31760,0,"\n/*"],[39090,0,"&"],[39090,1,""],[39090,0,"*/"],[30906,0,"\n\n\n"],[30906,0,"== Partial "],[30909,8,""],[30909,0,"Partial traversal\n\nOn careful inspection of this algorithm , "],[30969,1,""],[30968,1,""],[30967,1,""],[30967,0,", the actgu"],[30977,1,""],[30976,1,""],[30976,0,"ual ac"],[30981,1,""],[30980,1,""],[30980,0,"content of each nodea "],[31001,1,""],[31000,1,""],[31000,0," "],[30987,14,""],[30987,0,"s of each node is only relevant in a few situations:"],[31001,3,""],[31001,0," are"],[31040,0,"\n\n- The _irign_"],[31048,0,"_"],[31049,6,""],[31049,0,"originLeft"],[31059,1,""],[31059,0," "],[31059,1,""],[31059,0,"_ and __"],[31066,0,"originRight"],[31078,0," fields are only read when "],[31086,19,""],[31086,0,"n"],[31086,1,""],[31086,0,"only have a bearing on the resulting document state when concurrent inserts happen at the same original locatio in"],[31199,1,""],[31198,1,""],[31197,1,""],[31197,0,"n in the document.\n- Deleted items are only"],[31232,8,""],[31231,1,""],[31231,0," are only relevant when concurrent"],[30973,15,""],[30973,0,"fields"],[31077,51,""],[31077,0,"are only "],[31085,1,""],[31080,5,""],[31077,3,""],[31077,0,"only have a bearing on the resulting document state"],[31223,33,""],[31223,0,"lie"],[31225,1,""],[31225,0,"kewise have no "],[31232,8,""],[31232,0,"only nmatt"],[31241,1,""],[31240,1,""],[31239,1,""],[31238,1,""],[31237,1,""],[31237,0,"matter when there are concurrent edits, and"],[31275,5,""],[31275,0,". OC"],[31278,1,""],[31277,1,""],[31277,0,"Cons"],[31280,1,""],[31280,0,"current inserts may be ordered by "],[31300,0,"depend on "],[31310,14,""],[31310,0,"a deleted item for ordering (since _"],[31345,1,""],[31344,1,""],[31343,1,""],[31342,1,""],[31341,1,""],[31340,1,""],[31339,1,""],[31338,1,""],[31337,1,""],[31337,0,", and a deleted item may be \"revived\" if the "],[31378,4,""],[31378,0,"#vuin"],[31382,1,""],[31381,1,""],[31380,1,""],[31380,0,"in is ever set to a versio nbe"],[31409,1,""],[31408,1,""],[31407,1,""],[31406,1,""],[31406,0,"nm "],[31408,1,""],[31407,1,""],[31407,0," before the item was deleted.\n\nIf all "],[31438,7,""],[31438,0,"Whenever all concurrent "],[31438,24,""],[31438,0,"Sometimes the causal graph "],[31438,11,""],[31438,0,"T"],[31455,0," "],[31455,1,""],[31455,0,"in real editing traces often contains moments where the changes are fully ordered, and "],[31463,0,"world "],[31512,4,""],[31544,0,"there exists a document state "],[31559,15,""],[31557,2,""],[31557,0,"versions $V$ where all events are either strictly before or strictly after $V$. (Ie, \\for"],[31645,1,""],[31644,1,""],[31643,1,""],[31642,1,""],[31642,0,"$$"],[31643,0,"forall i in G, xor "],[31658,4,""],[31658,0,"i in ceil(V) or V <- i"],[31671,2,""],[31671,0,"xor"],[31675,0,"forall v in "],[31690,1,""],[31689,1,""],[31688,1,""],[31688,0,", v <-"],[31697,0,"."],[31538,1,""],[31538,0,". When this happens"],[31540,17,""],[31497,1,""],[31497,0," critical"],[31521,0,"peers syncronize sufficiently for all "],[31531,0,"h"],[31536,1,""],[31536,0,"s"],[31560,0,"future "],[31574,18,""],[31574,0," to be causally after "],[31455,0,"for "],[31459,3,""],[31597,0,"som"],[31599,1,""],[31598,1,""],[31597,1,""],[31597,0,"some specific docu"],[31611,4,""],[31611,0,"version"],[31575,0," in the graph"],[31609,0,"_"],[31604,0,"_"],[31438,357,""],[30927,0,"\nThe causal graph for real world editing traces often contain critical moments where peers synchronise sufficiently for all future changes in the graph to be causally _after_ some specific version.  and there exists versions $V$ where all events are either strictly before or strictly after $V$. (Ie, $forall i in G, i in ceil(V) xor forall v in V, v <- i$.\n"],[30975,5,""],[30975,0,"usually "],[30982,1,""],[30990,0," many"],[31012,0,"_"],[30996,0,"_"],[31014,0,",."],[31015,1,""],[31014,1,""],[31014,0,". At the "],[31016,7,""],[31016,0,"A c"],[31018,1,""],[31017,1,""],[31016,1,""],[31015,1,""],[31006,7,""],[31006,0,"versions"],[31017,0," "],[31017,1,""],[31016,0," A criticia"],[31026,1,""],[31025,1,""],[31025,0,"al version is a version where all "],[31049,10,""],[31049,0,"which separates all events into two disjoint sets: Events which happened"],[31100,21,""],[31035,0," $V$"],[31037,1,""],[31037,0,"C"],[31098,0,"sub"],[31105,0," $S$ and %G%$"],[31117,1,""],[31116,1,""],[31115,1,""],[31114,1,""],[31114,0,"$G$"],[31116,1,""],[31115,1,""],[31114,1,""],[31114,0,"$T$ where "],[31080,0,"in the event graph $G$ "],[31146,1,""],[31148,1,""],[31147,1,""],[31147,0,"\n\n\n"],[31148,0,"\n- Every event in S$"],[31166,0,"$"],[31169,0," happeend"],[31177,1,""],[31176,1,""],[31175,1,""],[31175,0,"ned-before_"],[31170,0,"_"],[31187,0," $C$. Ie, "],[31149,48,""],[31149,0,"- Every event in $S$ _happened-before_ $C$. Ie,"],[31130,1,""],[31130,0,"ceil(C)"],[31145,0," = G - C"],[31152,1,""],[31152,0,"ceil(C)"],[31166,1,""],[31166,0," all events in T$"],[31181,0,"$ceil(C) "],[31189,1,""],[31189,0,"$$"],[31190,0," happened-before all events in "],[31224,0,". "],[31206,0,"_"],[31191,0,"_"],[31228,0,"Ie, $$"],[31233,0,"forall i"],[31240,1,""],[31240,0,"i in T, "],[31161,5,""],[31161,0,"such that"],[31250,0,"m "],[31251,1,""],[31250,1,""],[31250,0,", j in ceil(C)"],[31266,0,"i <- j"],[31273,0,".\n\nThese moments are very useful"],[31275,0,"\n"],[31275,0,"\nThese moments "],[31276,14,""],[31276,0,"Critical versions are useful for a l"],[31309,3,""],[31309,0,"all sorts of "],[31298,0,"very "],[31276,51,""],[31276,0,"Critical versions are very useful for all sorts of"],[30927,0,"\n\n\n\n\n"],[30928,5,""],[30927,0,"\n\n\n"],[30928,0,"ARGH"],[30928,4,""],[30928,0,"We will now consider the problem of partially "],[30973,1,""],[30972,1,""],[30971,1,""],[30971,0," merging. "],[30972,9,""],[30971,1,""],[30971,0,"ly replaying "],[30964,20,""],[30964,0,"replaying part of an event log. Consider "],[30996,9,""],[30996,0,"If a user a"],[31001,6,""],[31001,0,"replica a"],[31001,9,""],[31001,0,"peer already has the"],[31018,3,""],[31018,0,"a copy of the document state at ever"],[31053,1,""],[31052,1,""],[31051,1,""],[31051,0,"vers"],[31054,1,""],[31053,1,""],[31052,1,""],[31051,1,""],[31050,1,""],[31050,0,"version$$"],[31058,1,""],[31057,1,""],[31057,0," $$"],[31059,0,"V_0"],[31063,0," and wants to merge all events from another branch, ,"],[31115,1,""],[31115,0,"or o"],[31118,1,""],[31118,0,"from a remote peer at version $$"],[31149,0,"V_m"],[31153,0,", ideally, the "],[31155,13,""],[31155,0,"the algorithm should ideally merge "],[31184,6,""],[31184,0,"do as little work as possible.\n\nTh"],[31217,1,""],[31216,1,""],[31215,1,""],[31214,1,""],[31155,0,"we want to "],[31166,59,""],[31166,0,"gen"],[31168,1,""],[31168,0,"en"],[31169,1,""],[31168,1,""],[31168,0,"nerate a list of transformed operations whcih "],[31213,1,""],[31212,1,""],[31211,1,""],[31210,1,""],[31210,0,"ich will convert the document state at $$"],[31250,0,"V_0"],[31254,0," into the state at version $$"],[31282,0,"V_0 union V_M"],[31294,1,""],[31294,0,"m"],[31296,0,".\n\n"],[31297,0,"\n\nThisi s "],[31306,1,""],[31305,1,""],[31304,1,""],[31303,1,""],[31303,0," is "],[31299,8,""],[31298,1,""],[31297,1,""],[31297,0," Ideally, this function sohuld "],[31321,7,""],[31321,0,"should requrie as "],[31328,11,""],[31328,0,"require as little data"],[31336,14,""],[31336,0,"reading as few events as possible."],[31297,1,""],[31297,0,"\n\n"],[31371,0,"\n\n"],[31299,10,""],[31299,0,"T"],[31312,0," "],[31312,1,""],[31319,0," also"],[31324,8,""],[31331,1,""],[31330,1,""],[31329,1,""],[31356,0," It is very common for $$"],[31380,1,""],[31379,1,""],[31379,0,"a single event to be merged - and "],[31299,114,""],[31299,0,"This function should also read as few events as possible. It is very common for a single event to be merged - and"],[31298,0,"\n"],[31298,0,"\nIn this section we will present a simple alg"],[31299,44,""],[31299,0,"We will present a simple modification"],[31299,37,""],[31299,0,"There is a simple modification of the algorithm listed above that makes this possible. However, "],[31299,96,""],[31299,0,"There is a simple modification of the algorithm listed above that makes this possible. However,"],[31298,0,"\n"],[31298,0,"\nThe simplest way to do this is to simply change the traversal order. First, visi"],[31375,4,""],[31375,0,"generate the re"],[31389,1,""],[31388,1,""],[31388,0,"eg-walker state at version $$"],[31416,0,"V_0"],[31420,0,", discarding any transf"],[31442,1,""],[31442,0,"formed operations generated this way. Afterwards, traverse the set of operations in $V_m - $"],[31533,1,""],[31533,0,"V_0$"],[31512,0,"added "],[31512,6,""],[31512,0,"new "],[31541,0,", and "],[31546,1,""],[31545,1,""],[31544,1,""],[31543,1,""],[31543,0,"transforming as necessar.y"],[31568,1,""],[31567,1,""],[31567,0,"y."],[31479,0," Once this is deo"],[31495,1,""],[31494,1,""],[31494,0,"one, the "],[31479,24,""],[31479,0," Once this is done, the document state"],[31479,38,""],[31542,0," and emit the transformed events/"],[31574,27,""],[31575,0,"\n\n\nfunction replay(graph) -> Iterator<TransformedEvent> {\n  state := new EgWalkerState()\n\n  for event (i, e, p) in graph.inOrderTraversal() {\n    state.setInputVersion(p)\n    message := state.prepareUpdate(i, e)\n    transformedEvent := state.applyUpdate(message)\n\n    yield(transformedEvent)\n  }\n}"],[31577,0,"```"],[31875,0,"\n```"],[31602,0,", v0, vm"],[31724,0,"emptyset, v0"],[31723,0,"Between"],[31676,0,"  for event (i, e, p) in graph.inOrderTraversalBetween(emptyset, v0) {\n    state.setInputVersion(p)\n    message := state.prepareUpdate(i, e)\n    transformedEvent := state.applyUpdate(message)\n\n    yield(transformedEvent)\n  }\n\n"],[31868,29,""],[31821,20,""],[31847,0," // Transformed event is discarded."],[31943,10,""],[31945,0,", v0 "],[31949,1,""],[31949,0,".union(vm)"],[31576,0,"\n"],[31576,0,"\nThis algorithm is given below "],[31606,1,""],[31606,0," [Algorithm X}"],[31619,1,""],[31619,0,"]"],[31601,5,""],[31601,0,"in"],[31617,0,".\n\nUsing this algorithm"],[31620,20,""],[31620,0,"We can see that "],[31620,16,""],[31620,0,"We can see that"],[31656,0,"Partial"],[31620,15,""],[31620,0,"This algorithm is a generalization "],[31648,1,""],[31648,0,"s"],[31655,0,"of the algoirthm "],[31662,10,""],[31662,0,"algorithm given above, with $v_4"],[31693,1,""],[31693,0,"0$"],[31691,1,""],[31691,0,"V"],[31640,14,""],[31640,0,"more general case"],[31698,0," configuratb"],[31709,1,""],[31708,1,""],[31708,0,"ble (instead of always being $$"],[31738,0,"emptyset"],[31619,0,"\nThe algorhtm "],[31624,9,""],[31624,0,"algorithm from "],[31634,5,""],[31634,0,"given "],[31634,6,""],[31634,0,"above [XX] is a special case of this algorithm, with $$"],[31688,0,"V_0 = emptyset and "],[31706,1,""],[31705,1,""],[31704,1,""],[31703,1,""],[31702,1,""],[31703,0," and $$"],[31709,0,"V_m"],[31713,0," = "],[31715,1,""],[31714,1,""],[31712,0," = floor(G)"],[31724,1,""],[31724,0,"."],[31726,128,""],[32280,0,"\n\n"],[32281,0,"\n"],[32281,1,""],[32281,0,"Unfortunately, this algorithm i"],[32311,1,""],[32311,0,"will be very slow in practice, as it must visit every node in the graph. We will revisit this "],[32382,0," every time it is called"],[32429,0,"algorithm in [section X]"],[32442,0,"the optimization chapter"],[32442,24,""],[32453,0," of the optimization chapter, redicing"],[32483,8,""],[32482,1,""],[32481,1,""],[32481,0,". "],[32482,1,""],[32481,1,""],[32481,0,", reducing the number of nodes"],[32506,5,""],[32506,0,"events it needs to visit to the set from "],[32542,5,""],[32538,4,""],[32537,1,""],[32536,1,""],[32536,0,"e "],[32537,1,""],[32536,1,""],[32535,1,""],[32534,1,""],[32534,0,"the LIB"],[32540,1,""],[32539,1,""],[32539,0,"UB"],[32538,0,"$"],[32542,0,"$"],[32542,0,"\""],[32539,0,"\""],[32544,0,"(V_0, V_m)"],[32534,4,""],[32551,0,"."],[32531,3,""],[32531,0,"based on the least upper bound of "],[32565,7,""],[32565,0,"$"],[32569,0,"$ and"],[32574,2,""],[32574,0," $"],[32579,1,""],[32347,0," will be called ve"],[32364,1,""],[32363,1,""],[32363,0,"wtih "],[32367,1,""],[32366,1,""],[32365,1,""],[32364,1,""],[32363,1,""],[32363,0,"every time we recieve an event from a remote peer."],[32373,0," a node"],[32380,3,""],[32384,1,""],[32385,0,"i"],[32388,0,"s"],[32417,0,", and "],[32423,6,""],[32423,0,"it"],[32431,0,"s"],[32481,1,""],[32481,0,"\n\n"],[32656,0,"\n\n\n\n\n\n\n"],[32660,0,"= Optimization"],[32668,1,""],[32668,0,"s"],[32674,0,"\n\nIn this chapter ,"],[32692,1,""],[32691,1,""],[32691,0,", we will"],[32696,4,""],[32696,0,"preset "],[32702,1,""],[32701,1,""],[32701,0,"nt a set o"],[32706,5,""],[32706,0,"number of optimiz"],[32722,1,""],[32722,0,"sations "],[32706,6,""],[32706,0,"series"],[32730,0,"which can be applied to both sequence CRDT algorithms as"],[32785,1,""],[32785,0,"nd event graph"],[32788,11,""],[32788,0,"reg-"],[32791,1,""],[32790,1,""],[32789,1,""],[32788,1,""],[32788,0,"eg-walker in order to improve performance by many order s"],[32844,1,""],[32843,1,""],[32843,0,"s of mang"],[32851,1,""],[32850,1,""],[32850,0,"gnitude.\n\nMany of these optimiz"],[32880,1,""],[32880,0,"sations are not novel in industir"],[32912,1,""],[32911,1,""],[32911,0,"rialy "],[32916,1,""],[32915,1,""],[32915,0," software. We"],[32927,1,""],[32926,1,""],[32925,1,""],[32925,0," We suspect many of them are "],[32950,4,""],[32950,0,"have been discovered many times, but not written up in a formal"],[32981,32,""],[32981,0," by practicioner "],[32985,13,""],[32985,0,"r"],[32985,1,""],[32985,0,"p"],[32985,1,""],[32985,0,"different engiene"],[33001,1,""],[33000,1,""],[32999,1,""],[32998,1,""],[32998,0,"ineering teams, but not "],[33018,0,"simply "],[33029,0,"written up.\n\nThe "],[33045,1,""],[33045,0,"se optimizations"],[33054,1,""],[33054,0,"s"],[33061,0," are dif"],[33068,1,""],[33068,0,"vidie"],[33072,1,""],[33071,1,""],[33071,0,"ed into two categories:\n\n1. Optimisations which can be applied to both traditional CRDT"],[33142,11,""],[33142,0,"s"],[33142,1,""],[33142,0,"existing"],[33155,0," algorithms and to re"],[33175,1,""],[33174,1,""],[33174,0,"eg-walker\n2. Optimisations which only apply to eg-walker\n\nThe complexity of eg-walker "],[33259,1,""],[33232,17,""],[32783,0," like FU"],[32790,1,""],[32790,0,"ugueMax"],[33246,10,""],[33246,0,"We present these optimia"],[33269,1,""],[33269,0,"sations to b"],[33280,1,""],[33246,34,""],[33246,0,"We present these optimisations to"],[33245,0,"\n"],[33245,0,"\nOur goal in the benchmarking chapter [link] is to present our algorithm fari"],[33321,1,""],[33320,1,""],[33320,0,"irly "],[33324,1,""],[33324,0,", compared to a similarly optimisat"],[33358,1,""],[33357,1,""],[33357,0,"ed CRDT. We "],[33368,1,""],[33367,1,""],[33366,1,""],[33365,1,""],[33364,1,""],[33364,0," implementation."],[33350,9,""],[33350,0,"tuned"],[32811,0,". Together these optimiz"],[32834,1,""],[32834,0,"sations"],[32841,12,""],[32861,0," in "],[32864,1,""],[32863,1,""],[32862,1,""],[32861,1,""],[32933,23,""],[32933,0," "],[32933,1,""],[32954,4,""],[32954,0,"thse"],[32957,1,""],[32956,1,""],[32956,0,"ese tricks"],[33059,321,""],[32891,0,"\nThese optimisations are divided into two categories:\n\n1. Optimisations which can be applied to both existing CRDT algorithms and to eg-walker\n2. Optimisations which only apply to eg-walker\n\nOur goal in the benchmarking chapter [link] is to present our algorithm fairly, compared to a similarly tuned CRDT implementation.\n"],[32987,0,"all tested algorithnms"],[33008,1,""],[33007,1,""],[33006,1,""],[33006,0,"ms - "],[33045,3,""],[33103,49,""],[33103,0,"QW"],[33104,1,""],[33103,1,""],[33103,0,"W"],[33103,1,""],[33103,0,"W"],[33103,1,""],[33103,0,"QW"],[33103,2,""],[33103,0,"Our goal in the benchmarking chapter [link] is to"],[33103,10,""],[33103,0,"I"],[33137,0," we aim"],[33144,3,""],[33176,1,""],[33176,0,". To that end, we have"],[33178,20,""],[32813,8,""],[32813,0,"In aggregate,"],[33183,0,"To that end, we have also implemented "],[33204,5,""],[33216,0,"fugue-"],[33221,1,""],[33220,1,""],[33219,1,""],[33218,1,""],[33217,1,""],[33216,1,""],[33216,0,"M"],[33216,1,""],[33216,0,"FugueMax"],[33181,0,", without language"],[33293,0,"\n"],[33107,1,""],[33292,0,"\n2. Optimisations which only apply to eg-walker"],[33060,47,""],[33245,0,"\n1. Optimisations which can be applied to all tested algorithms - both existing CRDT algorithms and eg-walker"],[32951,109,""],[33136,0,"\n"],[32950,1,""],[33135,0,"\nThese optimisations are divided into two categories:"],[32897,53,""],[33082,0,"\n"],[32988,0," choice or "],[32970,1,""],[32970,0,". "],[32971,1,""],[32970,1,""],[32970,0,","],[32999,0," "],[32999,1,""],[32999,0,"iom"],[33001,1,""],[33000,1,""],[32999,1,""],[32970,1,""],[32970,0,". We hope that"],[32979,5,""],[32974,5,""],[32971,3,""],[32970,1,""],[32970,0,", controling for"],[32986,8,""],[32979,0,"l"],[33003,4,""],[33003,0," and impleem"],[33014,1,""],[33013,1,""],[33012,1,""],[33012,0,"ementation detail"],[33008,21,""],[33008,0,"assuming "],[33004,13,""],[33003,1,""],[33003,0,", libraries"],[33005,0,"and "],[33017,1,""],[33016,1,""],[33015,1,""],[33015,0,"y and data structure choices "],[33036,8,""],[33035,1,""],[33035,0,"s"],[32970,0," compared to equivilane"],[32992,1,""],[32983,9,""],[32983,0,"equivalently optimised "],[32983,0,"an "],[33009,0,"CRDT"],[33009,0,"tra"],[33011,1,""],[33010,1,""],[33009,1,""],[33008,1,""],[33008,0,", tradic"],[33015,1,""],[33014,1,""],[33014,0,"itional "],[33026,0," algorihtm"],[33027,9,""],[33027,0,"algior"],[33027,6,""],[33027,0,"algorithm. Some of the "],[33038,12,""],[33037,1,""],[33036,1,""],[33036,0," "],[33036,1,""],[33036,0,". "],[33036,0," written "],[33037,8,""],[33036,1,""],[33036,0," written in the same highly optimized "],[33073,1,""],[33072,1,""],[33071,1,""],[33070,1,""],[33070,0,"sed manner in rust, using (as much as possible "],[33116,1,""],[33116,0,") the same libraries and optimisation techniques"],[33166,68,""],[33136,0,", data structures "],[33153,1,""],[33182,1,""],[33182,0,"\n\n"],[32934,7,""],[32934,0," aim to"],[32970,0,". To that end, we have implementae"],[33003,1,""],[33002,1,""],[33002,0,"ed a"],[32993,13,""],[32993,0,"also implemented a highly optmi"],[33023,1,""],[33022,1,""],[33022,0,"imised Fugue"],[33029,5,""],[33029,0,"implementation of FugueMax in Rust. This implementation "],[33063,0,"m, "],[33065,1,""],[33064,1,""],[33063,1,""],[33063,0,", hereafter fugue-rs"],[33075,8,""],[33075,0,"dt-fugu"],[33081,1,""],[33080,1,""],[33079,1,""],[33078,1,""],[33077,1,""],[33076,1,""],[33075,1,""],[33075,0,"fugue-crdt_"],[33075,0,"_"],[32675,0,"\n\n"],[32676,0,"On the surface, "],[32676,16,""],[32676,0,"In order to assess "],[32676,19,""],[32676,0,"In the next chapter we will asses "],[32709,1,""],[32709,0,"s "],[32696,0,"[X] "],[32715,0,"eg-walker against a more"],[32733,6,""],[32733,0,"omre "],[32737,1,""],[32736,1,""],[32735,1,""],[32734,1,""],[32733,1,""],[32733,0,"other"],[32733,5,""],[32733,0,"an equivalently optimised "],[32676,83,""],[32676,0,"In the next chapter [X] we will assess eg-walker against an equivalently optimised"],[32675,0,"\n"],[32675,0,"\nWe have implemented a highly optimised implementation of e"],[32733,1,""],[32733,0,"our eg-walker algorithm in rust."],[32764,1,""],[32764,0,", using many optimisations - some novel, and some well knonw"],[32823,1,""],[32822,1,""],[32822,0,"wn."],[32809,16,""],[32808,1,""],[32797,0," well known and some "],[32817,1,""],[32823,5,""],[32823,0," tricks. In order to fairly assess our work, we have also implemented a highly optimised implementation of FugueMax, using as many"],[32940,13,""],[32940,0,"sharing as many of the same optimisation tricks as possible "],[32980,0,"s"],[32981,7,""],[32993,1,""],[32993,0,". Our FugueMax implementation is "],[32995,31,""],[32994,1,""],[32994,0," We "],[32894,0,"n equivalently"],[32952,0,". This implementation\\"],[32973,2,""],[32980,1,""],[32979,1,""],[32978,1,""],[32978,0,"es"],[33028,3,""],[33027,1,""],[33026,1,""],[33026,0,", and "],[33026,6,""],[33026,0,". "],[33027,1,""],[33027,0," In t"],[33031,1,""],[33030,1,""],[33029,1,""],[33028,1,""],[33027,1,""],[33027,0,"\n\nIn the benchmarking chapter [x] below, we will assess eg-walker against "],[33029,72,""],[33029,0,"In the benchmarking chapter [x] below, we will assess eg-walker against"],[32952,0,"m"],[32952,1,""],[32952,0,", hereafter _fugue-crdt_"],[33124,0," fugue-crdt and other contemporary CRDT algori"],[33164,6,""],[33164,0,"iumple"],[33164,6,""],[33164,0,"implmeente"],[33173,1,""],[33172,1,""],[33171,1,""],[33170,1,""],[33170,0,"ntations on a number of metrics."],[33025,0,"library choices and "],[32978,19,""],[32978,0,"fugue-crdt"],[32995,3,""],[33046,12,""],[33046,0," in order to make the comparison as fari"],[33085,1,""],[33084,1,""],[33084,0,"ir as possible"],[32831,0," Unfortun"],[32832,8,""],[32832,0,"MAny of th"],[32832,10,""],[32832,0,"Many of the optimisations we use are "],[32865,4,""],[32865,0,"have not been implemented in contemporary algorithms "],[32907,11,""],[32907,0,"libraries ("],[32917,1,""],[32917,0,"("],[32917,1,""],[32917,0,"like Automerge and Yjs. "],[32940,1,""],[32864,0," for eg-walker"],[32953,0,", so p"],[32958,1,""],[32957,1,""],[32956,1,""],[32955,1,""],[32955,0,"making it hard"],[32965,4,""],[32965,0,"difficult to fairly evaluate performance"],[33006,1,""],[33006,0,"\n\n"],[33019,7,""],[33019,0," "],[33006,0," "],[33006,1,""],[33006,0," "],[33006,1,""],[33006,0," "],[33006,1,""],[33005,1,""],[33005,0," - as w"],[33011,1,""],[33010,1,""],[33009,1,""],[33008,1,""],[33007,1,""],[33006,1,""],[33005,1,""],[33005,0,"."],[32772,4,""],[32772,0,"a lot of"],[32794,40,""],[32794,0," t "],[32796,1,""],[32796,0,"o improve perofmrnace"],[32806,11,""],[32806,0,"performance as much as possibnle"],[32837,1,""],[32836,1,""],[32835,1,""],[32835,0,"le"],[32865,21,""],[32906,0," CRDT"],[32945,0," which"],[32957,1,""],[32956,1,""],[32955,1,""],[32955,0,"es"],[33003,0,"\nTo fix this, "],[33004,13,""],[33004,0,"To fix this,"],[33016,31,""],[33016,0," "],[33030,11,""],[33030,0,"written"],[33394,1,""],[33394,0," like "],[33394,6,""],[33394,0,". "],[33395,1,""],[33387,0,"real world"],[33387,10,""],[33394,1,""],[33394,0,", using a set of real-world editing "],[33404,0,"large"],[33404,5,""],[33404,0,"variety "],[33412,4,""],[33434,0,"traces that we have recorded for this "],[33463,9,""],[33463,0,"in"],[33464,1,""],[33463,1,""],[33463,0,"as wp"],[33467,1,""],[33466,1,""],[33466,0,"part of this work.\n\nIn this chapter, "],[33486,17,""],[33486,0,"In this chapter,"],[33485,17,""],[33245,0,"\n"],[33245,0,"\n\nIn this chapter,"],[33245,1,""],[33262,0," we will list these optimisations "],[33275,0," and describe"],[33308,1,""],[33308,0,"."],[33271,9,""],[33299,1,""],[33299,0," and where possible, measure their per"],[33320,17,""],[33320,0,"show their performance "],[33325,18,""],[33325,0,"how they "],[33303,0,","],[33321,14,""],[33321,0,"benchmark their isolated "],[33337,9,""],[33337,0,"performance in isolation.\n\nSome of these optimisations are"],[33364,31,""],[33364,0,"Each optimisation will "],[33364,23,""],[33364,0,"Fo"],[33365,1,""],[33364,1,""],[33364,0,"Some optimisations describe "],[33383,9,""],[33383,0,"can "],[33383,4,""],[33383,0,"improve the performance"],[33383,23,""],[33383,0,"also help "],[33388,5,""],[33388,0,"improve the performance of traditional"],[33382,0," can"],[33391,0," be used to"],[33441,0," CRDTs. We will "],[33449,8,""],[33449,0,"Whenever "],[33449,9,""],[33449,0,"We "],[33449,3,""],[33449,0,"All optimisations like this have been "],[33482,5,""],[33482,0,"also been apl"],[33494,1,""],[33494,0,"plied to our fugue-crdt implementation."],[33500,3,""],[33500,0,"in "],[33534,0,"\n\n"],[33535,1,""],[33534,1,""],[33775,1038,""],[33940,0," We will give "],[33949,5,""],[33949,0,"attribute "],[33949,10,""],[33949,0,"give attribution where we can, but worry that "],[33978,17,""],[33978,0,".\n\n\n\n\n"],[33984,37,""],[33982,0,"== "],[33982,3,""],[33982,0,"=="],[32674,0,"s"],[33651,0,"e"],[33968,5,""],[33968,0,"eh"],[33969,1,""],[33968,1,""],[33968,0,"whwe"],[33971,1,""],[33970,1,""],[33970,0,"erever"],[33989,0," Optimisations affecting "],[33990,24,""],[33990,0,"Gloo"],[33993,1,""],[33992,1,""],[33987,5,""],[33987,0,"=== "],[33990,1,""],[33989,1,""],[33989,0," Run-length encoding\n\n"],[33985,0,"\n\n== Agent & Sequence number for event IDs"],[34053,0,"== Local "],[34053,9,""],[34053,0,"== Local"],[34032,0,"Internal "],[34060,0,"\n\n+ "],[34063,1,""],[34062,1,""],[34062,0,"And file based RLE."],[34071,6,""],[34085,0," versions and Remote versions"],[34093,1,""],[34093,0," IDs"],[34093,4,""],[34093,0,"s"],[33985,0,"\n\n== Global optimisations\n\n... Which affect both intner"],[34039,1,""],[34038,1,""],[34034,4,""],[34034,0,"CRDT and event graph implemetnations:"],[34055,16,""],[34055,0,"implementations"],[34113,0,"\n"],[34113,0,"\n... Rather than haseh"],[34134,1,""],[34133,1,""],[34133,0,"sh"],[34134,1,""],[34133,1,""],[34133,0,"hes or random IDs for each event."],[34254,0,"\n\n== Range tree for CRDT structure"],[34255,0,"\n"],[34255,0,"\n== Tree -> List transformation"],[34320,0," - store the list as a tra"],[34345,1,""],[34345,0,"ee again"],[34354,0,"\n\n"],[34214,0,"\n\nAnd backspace optimisation"],[34316,0,"="],[34284,0,"="],[34244,0,"="],[34168,0,"="],[34072,0,"="],[34388,0,"\n== Event"],[34392,5,""],[34392,0,"Eg-walker specific optimio"],[34417,1,""],[34417,0,"sations\n\n=== Quer"],[34430,4,""],[34430,0,"LUB containment"],[34434,0,"partial merge "],[34434,14,""],[34445,0," of merging\n\n\n=== Fast forward mode"],[34463,0,"Clearing "],[34471,1,""],[34471,0," and "],[34493,0,"\n\n=== Query op"],[34506,1,""],[34505,1,""],[34505,0,"plan (tran"],[34514,1,""],[34514,0,"versal order) optimisation\n\n"],[34543,220,""],[34544,1269,""],[34425,0,"\n"],[34425,0,"\nThe causal graph for real world editing traces usually contain many _critical versions_. A critical version $C$ is a version which separates all events in the event graph $G$ into two disjoint subsets $ceil(C)$ and $T = G - ceil(C)$ such that all events in $ceil(C)$ _happened-before_ all events in $T$. Ie, $forall i in T, j in ceil(C), i <- j$.\n\nCritical versions are very useful for all sorts of\n\nThese moments are very useful\n\n- Every event in $S$ _happened-before_ $C$. Ie,\n\nwhere peers synchronise sufficiently for all future changes in the graph to be causally _after_ some specific version.  and there exists versions $V$ where all events are either strictly before or strictly after $V$. (Ie, $forall i in G, i in ceil(V) xor forall v in V, v <- i$.\n\nOn careful inspection of this algorithm, the fields of each node are only relevant in a few situations:\n\n- The _originLeft_ and _originRight_ fields only have a bearing on the resulting document state when concurrent inserts happen at the same original location in the document.\n- Deleted items likewise only matter when there are concurrent edits. Concurrent inserts may depend on a deleted item for ordering, and a deleted item may be \"revived\" if #vin is ever set to a version before the item was deleted.\n"],[35816,0,"= Benchmarking```lang\ncode\n```"],[35833,4,""],[35833,0,"\n"],[35833,1,""],[35833,0,"lang"],[35830,16,""],[35830,0,"\n\n== Edti"],[35838,1,""],[35837,1,""],[35837,0,"iting traces\n\nTalk abuot "],[35856,6,""],[35856,0,"about how r"],[35866,1,""],[35866,0,"random data is very different from human generated data\n\n3 y"],[35925,1,""],[35925,0,"types of benchmark data:\n\n="],[35951,1,""],[35951,0,"- Sequential traces (o"],[35972,1,""],[35972,0,"single user editing traces)\n- Concurrent traces (multiple users typing concurrently)\n- Traces from Git "],[36074,1,""],[36074,0," (reconstructed from diffs, much more complex CGs)\n\n== Benchmarking "],[36129,13,""],[36129,0,"Goals"],[36129,0,"Performance "],[36141,1,""],[36141,0,"G"],[36146,0,"\n\n- Low memory footprint\n- Fas"],[36175,1,""],[36174,1,""],[36173,1,""],[36172,1,""],[36172,0," Performance\n- Small disk space\n\n== Bnech"],[36208,5,""],[36208,0,"Benchmarks"],[36204,0,"\n"],[36204,0,"\n\n"],[36205,1,""],[36205,0,"== Implementations\n\n- eg-walker\n- fugue-crdt\n- automerge\n- yjs"],[36252,1,""],[36252,0,"A"],[36264,1,""],[36264,0,"Y"],[647,4,""],[665,4,""],[665,0,"Stored"],[665,6,""],[665,0,"CRDT"],[506,0,"text "],[670,0,"The "],[670,4,""],[670,0,"Transmitted"],[681,4,""],[681,0," and stored"],[697,38,""],[721,0," so inno"],[728,1,""],[727,1,""],[726,1,""],[725,1,""],[725,0,"innovations in CRDT algorithsm"],[754,1,""],[753,1,""],[753,0,"ms"],[764,1,""],[763,1,""],[762,1,""],[762,0,"e"],[764,62,""],[756,8,""],[756,0,"usually require entire systems to be rewritten from scratch"],[778,0," collaborative editing"],[866,19,""],[866,0,"docuym"],[871,1,""],[870,1,""],[870,0,"ments grow"],[898,14,""],[898,0," they are"],[2158,1,""],[2157,1,""],[2156,1,""],[2280,101,""],[2943,0,"\n"],[2943,0,"\n This data format is used to persist the CRDT to disk and to replicate the change across the network."],[2944,0,"In a CRDT based system, the CRDT events are"],[2987,36,""],[2987,0," "],[2988,12,""],[2988,0,"persisted to"],[3010,3,""],[3019,0,"d between peers"],[3034,30,""],[1549,0,"modern realtime "],[1565,2,""],[1549,7,""],[1577,1,""],[1576,1,""],[1576,0,"ing "],[1579,1,""],[1579,0," systems,"],[1588,21,""],[2357,12,""],[2356,1,""],[2355,1,""],[2355,0,"the local"],[2355,9,""],[2355,0,"a local document"],[1586,1,""],[1586,0,"s build around CRDTs"],[3000,0," (*3)"],[3004,1,""],[3003,1,""],[3003,0,"@)"],[3004,1,""],[3003,1,""],[3003,0,"2*)"],[3693,0,"(*1)"],[3696,1,""],[3696,0,"*): "],[3710,13,""],[3728,0,"along with "],[3739,4,""],[4013,1,""],[4026,1,""],[4028,1,""],[4028,0,"-"],[3832,0,"\n"],[3832,0,"\nTje "],[3836,1,""],[3835,1,""],[3834,1,""],[3834,0,"he event graph contains enough information to simulate and replay the entire net"],[3900,14,""],[3900,0,"all edits made by the network"],[3857,22,""],[3857,0," information"],[3858,0,"the "],[3873,0," needed to"],[3933,0," c"],[3934,1,""],[3934,0,"of collaborating peers."],[3934,22,""],[3933,1,""],[3933,0," of collaborating peers"],[3957,0," However, simulating this "],[3967,0,"simply "],[3990,0,"p"],[3990,1,""],[3990,0,"network of peers"],[3967,39,""],[3967,0,"simulating the entire network of peers "],[4000,6,""],[4000,0,"collaborating "],[3997,17,""],[3982,0,"work performed by the "],[4019,0,"on each peers"],[4031,1,""],[3858,3,""],[3858,0,"all"],[3893,29,""],[3953,49,""],[3953,0,"entire network of "],[3970,1,""],[3969,1,""],[3968,1,""],[3968,0,"on each peer is comu"],[3987,1,""],[3987,0,"putationally expensive."],[3938,0,"naively "],[4008,10,""],[4008,0,"wasteful."],[3992,25,""],[3992,0,"slow and wasteful.\n\nSome "],[4012,5,""],[4012,0,"Some"],[3992,0,"computationally "],[4008,9,""],[4016,0,", and p"],[4022,1,""],[4022,0,"does not solv th"],[4037,1,""],[4036,1,""],[4035,1,""],[4035,0,"e the problem of pruning old data"],[4064,0,"historical "],[4031,0,"entirely "],[4016,73,""],[4016,0,"."],[3832,0,"\n"],[3832,0,"\n"],[3832,1,""],[3831,1,""],[3928,1,""],[3928,0,"\n\n\n"],[3928,0," Some effort has been made to adea"],[3961,1,""],[3960,1,""],[3960,0,"apt existing CRDTs to work in this "],[3987,8,""],[3987,0,"usuing"],[3992,1,""],[3991,1,""],[3990,1,""],[3989,1,""],[3989,0,"ing simply"],[3987,12,""],[3987,0,"simply using the operation log [po-ol"],[4023,1,""],[4022,1,""],[4021,1,""],[4020,1,""],[4020,0,"-"],[4020,1,""],[4020,0,"o-log followup]. "],[4036,1,""],[3928,1,""],[3928,0,"\n\n"],[4128,0,"\n"],[4039,1,""],[4127,0,"\n"],[4038,1,""],[4126,0,"\nSome effort has been made to adapt existing CRDTs to work simply using the operation log [po-log followup]."],[3930,108,""],[4018,0,"\n"],[3929,1,""],[3928,1,""],[3928,0," "],[3992,25,""],[3992,0,"computationally wasteful."],[4008,8,""],[4008,0,"expensive, and still does not solve the problem of pruning (as each peer needs the "],[4071,20,""],[4071,0,"the entire history of document edits is needed for p"],[4122,1,""],[4121,1,""],[4120,1,""],[4119,1,""],[4118,1,""],[4118,0,"to simulate"],[4067,62,""],[4066,1,""],[4144,0,"\"pure "],[4163,0,"\""],[4183,0," However, as far as we know this is the first work to directly address the problem of seq"],[4271,1,""],[4270,1,""],[4269,1,""],[4269,0,"text "],[4269,0,"collaborative "],[4288,0,"editing (or, more generally "],[4315,1,""],[4315,0,", e"],[4317,1,""],[4317,0,"sequence editing) on top of a "],[4346,1,""],[4346,0,"n event graph."],[4361,8,""],[4362,128,""],[4651,34,""],[4651,0,"supporting partial replay (a"],[4678,1,""],[4677,1,""],[4677,0,"and transformation."],[4676,0," (so "],[4680,1,""],[4679,1,""],[4678,1,""],[4678,0,"not all "],[4678,8,""],[4678,0,"only a subset of the events "],[4678,28,""],[4677,1,""],[4676,1,""],[4677,0,"(allowing pruning "],[4694,1,""],[4694,0,") "],[4678,16,""],[4678,0,"only a subset of the se"],[4700,1,""],[4699,1,""],[4699,0,"events are visited during "],[4706,19,""],[4706,0,"need to be loadd"],[4721,1,""],[4721,0,"ed to merge recent changes"],[4753,14,""],[4661,0," transformation and"],[4767,5,""],[4611,10,""],[4611,0,"contemporary"],[5787,0,"\n"],[5787,0,"\nThis formalism is equivalent to "],[5806,14,""],[5806,0,"similar to "],[5788,29,""],[5787,1,""],[5786,1,""],[7288,0,"\n"],[7288,0,"\nThis formalism is similar to po"],[7319,1,""],[7318,1,""],[7318,0,"_Partially Ordered Logs_ [Pap"],[7346,1,""],[7345,1,""],[7344,1,""],[7344,0,"po-log paper] but "],[7358,4,""],[7358,0,"however "],[7293,10,""],[7293,0," construction"],[7369,0,"our definition "],[7310,7,""],[7310,0,"semantically similar"],[7373,0,","],[7398,0,"is quite different ("],[7417,1,""],[7417,0,"- as it does not depend on a logical "],[7289,165,""],[7289,0,"This construction is semantically similar to _Partially Ordered Logs_ [po-log paper], however our definition is quite different - as it does not depend on a logical"],[7288,165,""],[5015,1,""],[5015,0,"\n\n"],[5015,0," \nThis construction is semantically similar to _Partially Ordered Logs_ [po-log paper], however our definition is quite different - as it does not depend on a logical"],[4790,226,""],[4790,0,"Rather than replicating a CRDT's internal state between peers, our system instead replicates the _Event Graph_ - which is the set of all editing events created on every collaborating peer while editing our document $d in DD$."],[5015,1,""],[5015,0," "],[5050,7,""],[5050,0,"equivalent"],[5037,23,""],[5037,0,"similar"],[5133,25,""],[5133,0,"as we define event grah"],[5155,1,""],[5155,0,"phsd "],[5159,1,""],[5158,1,""],[5157,1,""],[5157,0,"s pu"],[5160,1,""],[5159,1,""],[5159,0,"and versions purely using graph theory"],[5197,9,""],[5197,0,"."],[5185,0,"set and "],[5179,5,""],[5179,0,"in terms of "],[5190,1,""],[5100,11,""],[5100,0," formal definition of the concept"],[5193,0," (logical clocks)"],[5258,15,""],[5258,0,"event in the event graph_"],[5271,0,"_"],[5283,1,""],[5271,1,""],[5330,0,")"],[5309,0,"("],[5331,1,""],[5309,1,""],[5332,0,"Formally, "],[5342,1,""],[5342,0,"t"],[5385,0,"{"],[5387,0,"}"],[5387,0,"_1, o"],[5391,1,""],[5391,0,"i_2, i_3, .."],[5406,5,""],[5406,0,"each of which"],[5374,0,"globally unique "],[5435,0," has some associated data"],[5540,0,"_n"],[5401,0,"G = "],[5404,1,""],[5402,2,""],[5401,1,""],[5436,8,""],[5436,0,"is assocated with"],[5444,0,"i"],[5454,16,""],[5454,0," "],[5454,1,""],[5454,0," associated data"],[5444,1,""],[5448,5,""],[5438,10,""],[5436,2,""],[5436,0,"has some"],[5540,2,""],[5540,0,"_n"],[5436,8,""],[5436,0,"is"],[5422,16,""],[5422,0,"with"],[6665,9,""],[6665,0,"stores"],[6702,8,""],[6718,0," //"],[6718,0,"."],[6700,11,""],[6700,0," => "],[6702,1,""],[6701,1,""],[6701,0,"italic(\"iff\")"],[6700,0," iff"],[6703,1,""],[6702,1,""],[6701,1,""],[6700,1,""],[6774,90,""],[6774,0,"The"],[6809,0,"can also be defined "],[6829,7,""],[6829,0,"between"],[6848,0,"s"],[6849,7,""],[6860,4,""],[6860,0,"event "],[6701,7,""],[6706,1,""],[7068,0,"\nP"],[7069,1,""],[7069,0,"Repli"],[7073,1,""],[7072,1,""],[7071,1,""],[7070,1,""],[7069,1,""],[7069,0,"Replicas store "],[7078,6,""],[7078,0,"each store a copy of the event graph."],[7357,0,"\n"],[7204,1,""],[7356,0,"\nThe set of events $G$ is append-only. Once added, events are never modified or removed."],[7116,88,""],[7268,0,"\nReplicas each store a copy of the event graph."],[7069,47,""],[7221,0,"\n"],[7221,0,"\nEvents must be added to the graph in causal order. If event $i$ is in $G$, then all of its parents must also be in $G$. Ie, $i in G => P_i subset.eq G$."],[7222,0,"// "],[7069,49,""],[7069,0,"The event graph must "],[7089,1,""],[7088,1,""],[7087,1,""],[7086,1,""],[7085,1,""],[7085,0,"cannot contain "],[7085,15,""],[7085,0,"must contain the transitive parents of all items"],[7128,0,"of its "],[7178,3,""],[7178,0,"the parents of $i$"],[7069,3,""],[7069,0,"An"],[7195,8,""],[7250,156,""],[7264,0," typically"],[7306,1,""],[7306,0," and "],[7310,1,""],[7309,1,""],[7308,1,""],[7307,1,""],[7307,0,"(and associatd "],[7321,1,""],[7320,1,""],[7320,0,"ed "],[7312,11,""],[7312,0,"the parents "],[7316,0,"set of "],[7316,7,""],[7316,0,"associated set of "],[7342,0,"and events)."],[7306,0,"."],[7306,1,""],[7306,0,","],[7307,27,""],[7307,0," with associated"],[7342,1,""],[7259,5,""],[7259,0," each"],[7259,5,""],[7259,0," will"],[7343,1,""],[7343,0," "],[7362,3,""],[7361,1,""],[7344,17,""],[7344,0,"The set of een"],[7357,1,""],[7356,1,""],[7356,0,"vents on eah "],[7368,1,""],[7367,1,""],[7367,0,"ch replica"],[7392,1,""],[7392,0,":"],[7392,1,""],[7392,0,"."],[7443,0," Replicas use "],[7443,14,""],[7675,0,"// "],[8131,14,""],[8131,0,"$$"],[8132,0,"G"],[8763,0," "],[8792,0," "],[8710,0,":\n\n"],[8713,1,""],[8714,0," "],[8761,0," "],[8763,1,""],[8553,1,""],[8553,0,":"],[8554,1,""],[8554,0,"\n\n"],[8557,0," "],[8613,0," "],[8615,1,""],[8799,1,""],[8766,0,"\n"],[8766,0,"\nThe floor and ceiling functions are inverses:"],[8865,0," $$"],[8867,0,"P_i"],[8874,3,""],[8874,0," a"],[8874,2,""],[8874,0," an"],[8883,0," $i$"],[8888,18,""],[8888,0,"is"],[8889,1,""],[8888,1,""],[8888,0,"is the"],[8961,0," Ie, $$"],[8967,0,"_"],[8967,1,""],[8967,0,"floor(G)"],[8976,0," on the "],[8977,7,""],[8976,1,""],[8976,0," fo"],[8978,1,""],[8977,1,""],[8977,0,"given $G$ immediately before the event happened."],[8977,5,""],[8977,0,"where"],[8986,0," is thee"],[8993,1,""],[8993,0," event bra"],[9002,1,""],[9001,1,""],[9000,1,""],[9000,0,"graph"],[9034,9,""],[9034,0," happened"],[8948,12,""],[8948,0," happened"],[8938,10,""],[8938,0,"$i$"],[8950,0," on the editing t"],[8966,1,""],[8966,0,"replica"],[8974,83,""],[8976,0,"// "],[9089,0,"\n\n("],[9090,2,""],[9090,0,"\n(Claui"],[9096,1,""],[9095,1,""],[9095,0,"im: The version is never gre"],[9122,1,""],[9121,1,""],[9120,1,""],[9120,0,"larger than the quivale"],[9136,0,"e"],[9144,0,"nt vector clock)"],[9341,8,""],[9341,0," of"],[44620,7,""],[43549,7,""],[42939,7,""],[42112,7,""],[41995,7,""],[41366,7,""],[41190,7,""],[40814,7,""],[40258,7,""],[40086,7,""],[39911,7,""],[38695,7,""],[37852,7,""],[37782,7,""],[31718,7,""],[31232,7,""],[30036,7,""],[28428,7,""],[26147,7,""],[25999,7,""],[25794,7,""],[25285,7,""],[25090,7,""],[24997,7,""],[24471,7,""],[24367,7,""],[24210,7,""],[23794,7,""],[23516,7,""],[23351,7,""],[23219,7,""],[20758,7,""],[9513,7,""],[2002,7,""],[44424,7,""],[9571,7,""],[9793,0," This property canb b"],[9808,6,""],[9808,0,"can be "],[9794,21,""],[9793,1,""],[9794,25,""],[9794,0,"Form"],[9794,4,""],[9794,0,"The delivery precondition"],[9794,0,"Formally, "],[9804,1,""],[9804,0,"t"],[9889,0," This property can be trivially guaranteed byt "],[9935,1,""],[9934,1,""],[9934,0," the network protocol."],[9935,0,"require"],[9941,1,""],[9940,1,""],[9940,0,"ing "],[9943,1,""],[9942,1,""],[9941,1,""],[9940,1,""],[9939,1,""],[9939,0,"iring "],[9965,1,""],[9965,0," to deliver "],[9969,8,""],[9969,0,"send events in causal r"],[9991,1,""],[9991,0,"order."],[9969,5,""],[9969,0,"transmit "],[9984,0," between peers"],[10431,0," $d in DD$"],[10444,89,""],[10444,0,"The event graph is a record of the edits made by all collaborating peers on the network. "],[10444,89,""],[10444,0,"The event graph is a record of the edits made by all collaborating peers on the network. "],[10442,0,"\n\nRecall that the event graph contains "],[10444,37,""],[10444,0,"Recall that the event graph contains"],[10480,17,""],[10479,1,""],[10478,1,""],[10477,1,""],[10476,1,""],[10475,1,""],[10474,1,""],[10473,1,""],[10472,1,""],[10471,1,""],[10471,0," "],[10471,1,""],[10544,0," The replay function answers the quies"],[10581,1,""],[10580,1,""],[10579,1,""],[10579,0,"u"],[10579,1,""],[10579,0,"estion of: What doc"],[10595,3,""],[10595,0,"should be"],[10603,1,""],[10602,1,""],[10602,0,"the observable document state be after"],[10635,5,""],[10635,0,"on peers"],[10638,0,"each "],[10647,1,""],[10647,0," after \n"],[10444,210,""],[10444,0,"Recall that the event graph is a record of the edits made by all collaborating peers on the network. The replay function answers the question of: What should the observable document state be on each peer after"],[10654,0,"\n//"],[10605,11,""],[10606,0,"visible "],[10595,10,""],[10595,0,"is the"],[10624,22,""],[10624,0," gi"],[10626,1,""],[10625,1,""],[10625,0,"computa"],[10631,1,""],[10631,0,"ed by "],[10625,12,""],[10625,0,"after all events "],[10505,3,""],[10505,0,"a set of"],[10514,14,""],[10519,15,""],[10519,0," collaboratively editing a document"],[10605,48,""],[10601,4,""],[10601,0,"given this "],[10607,5,""],[10607,0,"the set of edits defined by"],[10624,10,""],[10624,0,"described by $G$, what should the "],[10647,11,""],[10647,0,"does the document"],[10656,0,"resulting "],[10674,0," look like?"],[10647,4,""],[10647,0,"should"],[10688,0,"\n"],[10688,0,"\n"],[10688,1,""],[10687,1,""],[11044,0,"\n\nInterestingly, we can define many replay functions"],[11064,0,"have a great ea"],[11078,1,""],[11077,1,""],[11077,0,"deal of freedom in de"],[11093,5,""],[11093,0,"when defining this replay function. "],[11129,32,""],[11129,0,"Replay functions can differe "],[11157,1,""],[11156,1,""],[11156,0," in both semantics (what "],[11175,6,""],[11174,1,""],[11174,0," (what h"],[11181,1,""],[11180,1,""],[11179,1,""],[11178,1,""],[11177,1,""],[11176,1,""],[11176,0,"producing different document states given the same set of events) and "],[11174,0," and implementation. Semanitca"],[11203,1,""],[11202,1,""],[11201,1,""],[11200,1,""],[11200,0,"tically different replay functions"],[11234,2,""],[11234,0," "],[11243,1,""],[11242,1,""],[11241,1,""],[11241,0,"e"],[11235,0,"will "],[11302,6,""],[11258,0,"resulting "],[11312,0,", while different implementations of the same"],[11312,45,""],[11312,0,"."],[11312,1,""],[11312,0,", while different implementations will produ"],[11346,5,""],[11346,0,"may "],[11355,0,"ce the same result but with "],[11378,5,""],[11378,0,"have large differences in performance and features"],[11427,1,""],[11427,0," sets."],[11435,63,""],[11434,0,"\nWe can implement this function in a variety of different ways. "],[11435,0,"// "],[11501,0,"\n"],[11435,66,""],[11435,0,"// We can implement this function in a variety of different ways."],[11502,5,""],[11502,0,"T"],[11501,0,"\nFor the remainder of this paper we will consider replay functions de"],[11569,1,""],[11568,1,""],[11568,0,"semantically defined by "],[11502,90,""],[11502,0,"For the remainder of this paper we will consider replay functions semantically defined by"],[11591,51,""],[11589,2,""],[11589,0,"using"],[11595,3,""],[11608,0,"s"],[11619,12,""],[11619,0,"define this further in"],[11641,3,""],[14581,0," <correct>"],[11642,13,""],[11642,0,"#"],[11642,1,""],[11642,0,"@correct"],[12263,0,"// "],[12369,0,"\n\nIt is "],[12371,6,""],[12371,0,"The performance - ba"],[12390,1,""],[12389,1,""],[12389,0,"and by extension viability - of this approach to bu"],[12439,1,""],[12438,1,""],[12438,0,"building collaborative editing systems depends on our abli"],[12495,1,""],[12494,1,""],[12494,0,"i"],[12494,1,""],[12493,1,""],[12405,0," practical"],[12503,0,"bility m"],[12510,1,""],[12510,0,"to make the replay function performant."],[12538,10,""],[12538,0,"perform well"],[37610,0," <benchmarking>"],[12551,0," E"],[12552,1,""],[12552,0,"Sd er "],[12552,6,""],[12552,0,"As we will showin i"],[12570,1,""],[12569,1,""],[12568,1,""],[12567,1,""],[12567,0," in @be"],[12572,2,""],[12572,0,"benchmarking, our eg-walker algorithm "],[12586,3,""],[12586,0,"the"],[12610,0,"introduced in this paper is "],[12600,0,"replay function "],[12616,10,""],[12641,3,""],[12641,0,"performs very well in practical "],[12672,1,""],[12671,1,""],[12670,1,""],[12670,0,"e."],[12697,0,"\n"],[12697,0,"\nThe problem of "],[12702,11,""],[12702,0,"problem of "],[12698,15,""],[12698,0,"Discussion of transformation "],[12712,0,"operation "],[12737,0,"is curiously absent from most modern "],[12767,7,""],[12767,0,"of the CRDT literature. "],[12790,1,""],[12789,1,""],[12789,0,", but it is very useful "],[12801,0,"a "],[12801,2,""],[12813,0,"i"],[12813,1,""],[12813,0,"when h"],[12818,1,""],[12818,0,"building practical systems. Most text CRDT"],[12851,5,""],[12851,0,"sequence "],[12864,0," algoriothms "],[12865,12,""],[12865,0,"algorithms [fugue, RGA]"],[12887,1,""],[12887,0,", etc] are defined assuming the "],[12906,13,""],[12906,0,"monolo"],[12911,1,""],[12911,0,"ithically. The "],[12925,1,""],[12925,0," content "],[12926,8,""],[12926,0,"CRDT data structure is entangled wtih its "],[12959,9,""],[12959,0,"with its "],[12930,0,"'s"],[12920,0," in their papers - entanglign"],[12948,1,""],[12947,1,""],[12947,0,"ng the stored content "],[12961,8,""],[12961,0,"data with the c"],[12975,1,""],[12975,0,"tree"],[12975,4,""],[12975,0,"CRDT's data structure"],[12997,49,""],[12997,0," However, there are many reasons to separate this d"],[13033,15,""],[13033,0,"instead store the document content and co"],[13073,1,""],[13072,1,""],[13072,0,"CRDT state in separate "],[13083,12,""],[13083,0,"separately:\n\n- Most editors (exp"],[13114,1,""],[13113,1,""],[13113,0,"specially text editors) store"],[13137,5,""],[13137,0,"already "],[13137,8,""],[13137,0,"sto"],[13139,1,""],[13138,1,""],[13137,1,""],[13137,0,"a"],[13137,1,""],[13137,0,"already define "],[13137,15,""],[13137,0,"define "],[13137,7,""],[13137,0,"have very specialized "],[13158,1,""],[13157,1,""],[13156,1,""],[13155,1,""],[13155,0,"sed data store"],[13142,4,""],[13142,0,"use"],[13142,3,""],[13142,0,"very"],[13137,5,""],[13137,0,"use "],[13168,0,"s to store the text buffer contents. "],[13204,1,""],[13141,5,""],[13198,1,""],[13198,0,", w"],[13200,1,""],[13199,1,""],[13198,1,""],[13198,0,". These data da"],[13212,1,""],[13211,1,""],[13211,0,"stores optimize "],[13226,1,""],[13225,1,""],[13224,1,""],[13224,0,"se "],[13218,9,""],[13218,0,"allow optimised cursor events"],[13218,6,""],[13218,0,"allow "],[13232,1,""],[13246,0,", insert"],[13137,0,"already "],[13226,6,""],[13248,8,""],[13242,0,"movement "],[13257,0,", syntax highlighting, line editing and various "],[13096,209,""],[13096,0,"- Most editors (especially text editors) already use specialised data stores to store the text buffer contents. These data stores optimise cursor movement events, syntax highlighting, line editing and various"],[12906,33,""],[12906,0,"assuming "],[12915,11,""],[12930,0," is entangled "],[12943,1,""],[12943,0," "],[12943,1,""],[12906,28,""],[12906,0,"to "],[12917,1,""],[12894,15,""],[12933,0," "],[12933,1,""],[12933,0," with its stored content"],[12696,0," <transform>"],[12886,1,""],[12886,0," papers"],[12858,4,""],[12858,0,"M"],[12858,1,""],[12858,0,"Most"],[12921,40,""],[12935,0," and the CRDT's data structure"],[12936,0,"into "],[12941,5,""],[12941,0,"t"],[12967,1,""],[12967,0,"\n\n"],[12967,0," Presumably, th"],[12981,1,""],[12980,1,""],[12980,0,"after recieving "],[12989,1,""],[12990,0,"i"],[12996,0,"CRDT m"],[12996,6,""],[12996,0,"messages"],[12996,8,""],[12996,0,"updates from other peers, an implementation is expected to re-run the CRDT's query*"],[13073,0,"*"],[13080,0," function and "],[13073,1,""],[13073,0,"_"],[13079,1,""],[13079,0,"_"],[13094,0,"replace wholesale the "],[13094,8,""],[13104,0,"replace "],[13116,0,"user's local editing buffer "],[13143,1,""],[13143,0,"."],[13116,0,"text "],[13116,5,""],[13116,0,"content "],[13089,0," (which is a slow operation)"],[12996,24,""],[12996,0,"each individual update from "],[13000,24,""],[13000,0," update from remote peers"],[12986,10,""],[12998,0,"is recieve"],[13007,1,""],[13006,1,""],[13005,1,""],[13004,1,""],[13004,0,"eived "],[13014,0," a"],[13028,1,""],[12997,0," message"],[13037,0," "],[13038,4,""],[13052,0,"s are"],[13057,3,""],[13133,3,""],[13133,0,"then"],[13137,10,""],[13137,0," wholesale"],[13137,10,""],[13145,0," wholesale"],[13159,8,""],[13172,0," text"],[13192,1,""],[13192,0," with a new string."],[12893,0," focusing on text editing"],[12936,0,")"],[12919,0,"("],[12939,9,""],[12944,1,""],[12944,0," user"],[12958,4,""],[12958,0,"wi"],[12959,1,""],[12958,1,""],[12958,0,"in"],[12939,5,""],[12939,0,"describe"],[12960,0," as if it were stored"],[13010,0," itself"],[13262,0," Th"],[13264,1,""],[13263,1,""],[13262,1,""],[13262,0," How is the local cursor position updated? A"],[13305,1,""],[13305,0,"Is syntax highlighting recomputed with each remote keystroke? "],[13366,1,""],[13182,0," - usually *O"],[13194,1,""],[13193,1,""],[13193,0,"$O(n)$ with the size of the document"],[13200,4,""],[13200,0,"where $n$ is"],[13185,7,""],[13185,0,"at best"],[13304,1,""],[13304,0,"the"],[12803,3,""],[12803,0,"given"],[12808,6,""],[12808,0," "],[12809,5,""],[12809,0," "],[12809,1,""],[12809,0,"how"],[12819,0," it is"],[12864,8,""],[12864,0,"text editing"],[12868,8,""],[12864,4,""],[12863,1,""],[12864,0,"CRRD"],[12867,1,""],[12866,1,""],[12865,1,""],[12864,1,""],[12940,5,""],[12931,9,""],[12931,0,"define their data structures "],[12960,8,""],[12966,2,""],[12966,0,"user content"],[12993,0,"line"],[12991,6,""],[12991,0,"inside"],[13279,7,""],[13428,1,""],[13428,0,", or is the data"],[13440,4,""],[13440,0,"CRDT's data structure somehow augments"],[13477,1,""],[13477,0,"ed"],[13470,9,""],[13470,0,"tightly coupled with "],[13486,5,""],[13486,0,"to these concerns?\n\n"],[13506,309,""],[13505,0,"\n\n\n"],[21879,0,"#fighr"],[21884,1,""],[21883,1,""],[21883,0,"ure("],[22394,0,"\n)"],[21888,16,""],[22377,2,""],[21890,1,""],[22377,0," <eg-x>"],[22375,0,"\n  "],[22376,2,""],[22375,1,""],[22375,0,",\n  capt"],[22379,4,""],[22379,0,"caption: []"],[22389,0,"A simple event graph"],[22417,1,""],[22417,0,"simple"],[21855,10,""],[21866,1,""],[21866,0," in @eg"],[21871,2,""],[21871,0,"eg-simple"],[21838,28,""],[21838,0,"Visyua"],[21843,1,""],[21842,1,""],[21841,1,""],[21841,0,"ually repre"],[21838,14,""],[21838,0,"This event graph is visually represented"],[21858,20,""],[21858,0,"shown"],[21877,0,"."],[21867,11,""],[21838,29,""],[21838,0,"This event graph is shown in"],[21837,29,""],[21836,1,""],[21589,0,", as shown in @eg"],[21604,2,""],[21604,0,"eg-simple"],[21591,2,""],[21591,0,"with the graph"],[23106,5,""],[23106,0,"figyur"],[23111,1,""],[23110,1,""],[23109,1,""],[23109,0,"ure"],[23112,9,""],[23112,0,"("],[23116,1,""],[23440,1,""],[23440,0,")"],[23439,0,",\n  caption: FugueMax]"],[23452,0,"["],[23461,0," tree of the event graph described e"],[23496,1,""],[23496,0,"above"],[23453,0,"Left-origin "],[23497,16,""],[23482,15,""],[23482,0,"this data set"],[23498,0," <fuguemax-simple>"],[23092,11,""],[23092,0,"in @fuguemax-simple."],[12960,5,""],[12960,0,"assuming"],[12982,4,""],[12982,0,"is"],[13032,1,""],[13032,0,"\n\n// "],[13032,0," This cau"],[13038,3,""],[13038,0,"entangles th"],[13038,12,""],[13038,0,"casu"],[13041,1,""],[13040,1,""],[13040,0,"uses all "],[13038,11,""],[13038,0,"is generally a bad idea"],[12898,12,""],[12897,1,""],[12896,1,""],[12864,0,"text editing "],[12898,11,""],[13049,0," - as it conflates text edit"],[13076,1,""],[13076,0,"tor concerns (highlighting, "],[13090,0,"sym"],[13092,1,""],[13092,0,"ntax "],[13111,0,"cursor positions, lin"],[13129,3,""],[13129,0,"etc) with "],[13068,0,"concerns of the "],[13095,9,""],[13146,0,"concerns of the CRDT (tombstoned items"],[13168,0,"the tree of edits, "],[13203,0,", etc)."],[12919,0,"embed user contenti"],[12937,1,""],[12937,0," inside the "],[12949,13,""],[12964,0," they define"],[12976,72,""],[13007,1,""],[13006,1,""],[13006,0,","],[13102,63,""],[13024,0,"concerns of the CRDT (the tree of edits, tombstoned items, etc) "],[13058,5,""],[13058,0,"items"],[13050,0,"editing "],[13083,6,""],[13073,10,""],[13073,0,"tombstones"],[13090,0," "],[13090,1,""],[13090,0,"with "],[13014,9,""],[13014,0,"complects"],[13014,9,""],[13014,0,"complicates"],[13169,6,""],[13165,3,""],[13165,0,"and so on"],[13656,1,""],[13655,1,""],[13654,1,""],[13653,1,""],[13679,0,"_"],[13665,0,"_"],[13680,1,""],[13665,16,""],[13674,0," for the mathematical formalism of our model"],[13720,21,""],[13720,0,"we "],[13847,0," some"],[13858,0," in order to"],[13853,0,"version "],[13913,0," version"],[14154,0,"\n\nThis allows "],[14156,12,""],[14156,0,"This allows"],[14169,0,"// "],[14167,0," for two important features:"],[14186,8,""],[14168,0,"our"],[14170,1,""],[14169,1,""],[14168,1,""],[14168,0,"our system to have "],[14187,4,""],[14201,0,"characteristics"],[14217,0,"\n\n+ The e"],[14225,1,""],[14219,6,""],[14219,0,"+ The"],[14221,3,""],[14221,0,"It dis"],[14224,3,""],[14224,0,"separates the concerns of _storing_ "],[14250,10,""],[14250,0,"sto"],[14252,1,""],[14251,1,""],[14250,1,""],[14250,0,"th"],[14251,1,""],[14250,1,""],[14250,0,"our system from the concerns of the text editing"],[14297,1,""],[14296,1,""],[14295,1,""],[14295,0,"or itself"],[14250,10,""],[14250,0,"col"],[14252,1,""],[14251,1,""],[14251,0,"ollaborative editing"],[14315,0," "],[14315,1,""],[14315,0," (such as "],[14315,10,""],[14315,0," - and "],[14321,1,""],[14320,1,""],[14319,1,""],[14319,0,"s our system never needs to actually "],[14321,35,""],[14320,1,""],[14319,1,""],[14318,1,""],[14317,1,""],[14316,1,""],[14315,1,""],[14315,0,". The visible document never needs to actually be stored or maintained "],[14321,65,""],[14321,0,"text buffer can be stored using any data structure ch"],[14373,1,""],[14372,1,""],[14371,1,""],[14357,0,"ab"],[14358,1,""],[14358,0,"ppropriate "],[14353,4,""],[14353,0,"an "],[14356,12,""],[14355,1,""],[14354,1,""],[14354,0," "],[14369,0," "],[14369,1,""],[14369,0," appropriate to the text editing evnv"],[14405,1,""],[14404,1,""],[14403,1,""],[14403,0,"nvironment itself\n+ This approoa"],[14434,1,""],[14433,1,""],[14432,1,""],[14431,1,""],[14431,0,"o"],[14431,1,""],[14431,0,"roach allwos "],[14421,23,""],[14421,0,"+ This approach allwos"],[14420,0,"."],[14443,1,""],[14442,1,""],[14441,1,""],[14441,0,"ows document"],[14445,0,"te "],[14447,1,""],[14446,1,""],[14446,0,"he local "],[14463,0," content to be incrementally updated. Suppose "],[14478,14,""],[14485,0," incrementally"],[14500,9,""],[14499,1,""],[14499,0,"."],[14499,1,""],[14499,0," as changes are fed in from a remote "],[14522,0,"slowly "],[14543,0,"peer."],[14500,2,""],[14500,0,"w"],[14500,1,""],[14500,0,"as"],[14515,13,""],[14515,0,"reciev"],[14520,1,""],[14519,1,""],[14518,1,""],[14518,0,"eived"],[14478,8,""],[14491,0," updated"],[14543,0,"\n\nIt al"],[14549,1,""],[14548,1,""],[14548,0,"also opens the door to several optimisations "],[14592,1,""],[36127,0," <optimisations>"],[14592,0," - which will "],[14601,5,""],[14601,0,"are discussed in much "],[14618,5,""],[14618,0,"detail in {"],[14628,1,""],[14628,0,"@optim"],[14629,5,""],[14629,0,"optimisations."],[14161,6,""],[14161,0,"grants"],[14027,0,")"],[14021,1,""],[14021,0,"ceil"],[14012,5,""],[14012,0,"such that"],[14089,1,""],[14088,1,""],[14088,0,"ceil("],[14022,87,""],[14022,0,"\n"],[13655,367,""],[13655,0,"While not necessary for the mathematical formalism of our model, we also define a _partial transform_ function which outputs a _transformed_ list of events that can be applied to a document at some version $V_0$ in order to modify it to the document state at version $V_0 union V_m$. The transform function is denoted by $T(G, V_0, V_m) -> [e_1, e_2, ...]$ such that"],[14022,0,"\n\n\n"],[14023,0,"$r(ceil(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ... = r(ceil(V_0 union V_1))$"],[14024,0," "],[14110,0," "],[14114,3,""],[14114,0,"W"],[14114,1,""],[14114,0,"(w"],[14168,1,""],[14168,0,")"],[14168,0,"."],[13993,1,""],[13992,1,""],[13992,0,"="],[14010,0," where ##"],[14018,1,""],[14017,1,""],[14017,0,"@@"],[14018,1,""],[14017,1,""],[14017,0,"$$"],[14018,0,"e_1, e_2, ..."],[14032,0," are a series of transformed events "],[14037,31,""],[14037,0,"the events"],[14041,0,"transformed "],[14053,6,""],[14053,0,"operations."],[14065,0,"The transformed operations must semantically "],[14097,12,""],[14097,0,"semantically"],[14097,12,""],[14097,0,"preserve the semantics of the replay function."],[14064,1,""],[14064,0,"\n\n"],[14144,10,""],[14144,0," Formally,"],[14153,1,""],[14153,0,":"],[14119,1,""],[14119,0," definition"],[14379,0," Using a"],[14380,7,""],[14380,0,"Ou"],[14381,1,""],[14380,1,""],[14380,0,"U"],[14380,1,""],[14380,0,"Outputting a transformed series of events allows the "],[14422,11,""],[14422,0,"allows the "],[14429,4,""],[14429,0,"s"],[14429,1,""],[14429,0,"a separate sub"],[14442,1,""],[14441,1,""],[14440,1,""],[14429,10,""],[14429,0,"the editing buffer itself to be stored in a separate data "],[14468,19,""],[14468,0,"independently within the overall system. This"],[14513,4,""],[14513,0," has the effect of"],[14540,1,""],[14539,1,""],[14539,0,"ing"],[14509,96,""],[14508,1,""],[14507,1,""],[14507,0," - usually in a special buffer stored "],[14538,7,""],[14538,0,"stored "],[14538,7,""],[14538,0,"wtihin "],[14538,7,""],[14538,0,"wtihi"],[14538,5,""],[14538,0,"within the"],[14522,0,"n exotic data structure of some sort under the contr"],[14559,15,""],[14559,0,"managed by"],[14569,22,""],[14592,0," "],[14592,1,""],[49472,0,"\n\n#bib"],[49475,3,""],[49475,0,"bibliography()"],[49488,0,"wor"],[49490,1,""],[49489,1,""],[49488,1,""],[49488,0,"\"works.yaml"],[49498,1,""],[49497,1,""],[49496,1,""],[49496,0,"ml\""],[14698,0," #"],[14699,1,""],[14699,0,"@vscode-buffer"],[49514,0,", style: 'i"],[49524,1,""],[49523,1,""],[49523,0,"\"ieee\""],[14507,0,". This is"],[14516,2,""],[14524,0," "],[14524,1,""],[14517,7,""],[14517,0,"often"],[14509,13,""],[14509,0,"Text editors often have"],[14532,6,""],[14532,0," some "],[14537,1,""],[14528,9,""],[14528,0,"use"],[14553,0,"s"],[14554,47,""],[14532,0,"more "],[14536,1,""],[14532,4,""],[14554,0," to "],[14538,0,", highly optimised"],[14576,0,"c"],[14576,1,""],[14576,0,"accomplish this. Fro"],[14595,1,""],[14594,1,""],[14594,0,"or exampkle"],[14604,1,""],[14603,1,""],[14602,1,""],[14602,0,"le, @vs"],[14607,2,""],[14607,0,"vscode-buffer"],[14621,120,""],[14606,0,"VS Code uses a \"Piece Tree\": "],[14634,1,""],[14633,1,""],[14633,0," "],[13679,16,""],[13679,0,"the semantics "],[13692,1,""],[13691,1,""],[13655,62,""],[13655,0,"W"],[14055,10,""],[14055,0,"behaviour"],[14033,9,""],[14033,0,"express "],[13165,9,""],[13165,0,"etc"],[14093,0,"$ r(ceil(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ... = r(ceil(V_0 union V_1)) $\n"],[14093,0,"// "],[14213,35,""],[14213,0,"T(G, V_0, V_m)"],[14467,13,""],[14467,0,"separately from the col"],[14487,3,""],[14486,1,""],[14486,0," the replayable event graph code"],[14518,26,""],[14513,5,""],[14513,0," implementa"],[14483,4,""],[14466,0,", and optimised,"],[14536,0,"tion itself"],[14692,0,"Using "],[14692,6,""],[14692,0,"Allowing a par"],[14705,1,""],[14704,1,""],[14703,1,""],[14702,1,""],[14701,1,""],[14701,0,"partial replay "],[14716,21,""],[14692,10,""],[14692,0,"P"],[14706,0," allows many optimisations"],[14691,0," When changes are reciev"],[14714,1,""],[14713,1,""],[14712,1,""],[14712,0,"eived from a remote peer, they "],[14689,0,"\n+ The replay function must "],[14712,0,"typically "],[14712,10,""],[14712,0,"t"],[14712,1,""],[14712,0,"often depends on the "],[14718,15,""],[14718,0,"neesd "],[14723,1,""],[14722,1,""],[14721,1,""],[14721,0,"ds "],[14692,37,""],[14692,0,"Particularly for text ed"],[14690,26,""],[14689,1,""],[14689,0,"\n+ This a"],[14692,6,""],[14692,0,"U"],[14692,1,""],[14692,0,"Partial replay allows for much more efficient merging of incremental updates, as mo"],[14774,1,""],[14773,1,""],[14773,0,"updates often "],[14773,14,""],[14761,12,""],[14760,1,""],[14760,0," "],[14760,1,""],[14760,0,"l"],[14760,1,""],[14749,11,""],[14749,0,"events. E"],[14757,1,""],[14756,1,""],[14738,0,"incremental "],[14768,0," N"],[14769,1,""],[14769,0,"Events often do not "],[14776,13,""],[14776,0,"can "],[14769,11,""],[14768,195,""],[14767,1,""],[14767,0," - particularly in a l"],[14788,1,""],[14787,1,""],[14786,1,""],[14786,0,"live collaborative editing scenarios where the local document state is updated requ"],[14868,1,""],[14867,1,""],[14866,1,""],[14865,1,""],[14865,0,"frequently."],[14876,27,""],[14833,6,""],[14869,0," as changes are recieved from"],[14689,0,"\n+ "],[14691,1,""],[14690,1,""],[14689,1,""],[14822,0,". "],[14823,1,""],[14691,0," The transformed events o"],[14715,1,""],[14715,0,"can often be calculated directly "],[14739,9,""],[14739,0,"without reference"],[14739,17,""],[14739,0,"with little or no reference to other"],[14770,5,""],[14770,0,"earlier events in the event graph. "],[14805,282,""],[14805,0," Partial replay allows for much more efficient incremental merging of events - particularly in live collaborative editing scenarios. where the document state is updated frequently as changes are recieved from. several optimisations - which are discussed in detail in @optimisations."],[14805,266,""],[14805,0,"This o"],[14810,1,""],[14810,0,"idea ex"],[14816,1,""],[14815,1,""],[14805,10,""],[14805,0,"This"],[14808,1,""],[14807,1,""],[14807,0,"e implmica"],[14809,8,""],[14809,0,"implications of this are explored in much more detail in the "],[14869,1,""],[14884,1,""],[14884,0," "],[14884,1,""],[14884,0,"."],[14866,4,""],[3639,8,""],[3639,0,"@polog"],[3639,0,"@ci"],[3641,1,""],[3640,1,""],[3639,1,""],[3638,1,""],[3638,0," #cite("],[3645,1,""],[3645,0,"<"],[3651,0,">)"],[3652,0,", style: \""],[3654,8,""],[3654,0,"form: \""],[3660,1,""],[3660,0,"\"author\""],[3661,6,""],[3661,0,"full"],[3661,4,""],[3661,0,"auhtor"],[3661,6,""],[3661,0,"author"],[3661,6,""],[3661,0,"proz"],[3664,1,""],[3664,0,"se"],[3661,5,""],[3661,0,"normal"],[3639,7,""],[3639,0,"@"],[3645,18,""],[5064,14,""],[5064,0,"@polog"],[12891,5,""],[12891,0,"#"],[12891,1,""],[12891,0,"@fugue"],[12890,1,""],[12898,0,"["],[12902,0,"]"],[12908,1,""],[29700,1,""],[29700,0,"@"],[29706,7,""],[30149,13,""],[30149,0,"@fugue"],[6320,7,""],[6320,0,"@shap"],[6321,4,""],[6321,0,"shapiro"],[6318,1,""],[6318,0," "],[6319,1,""],[6319,0,"("],[6333,1,""],[6333,0,")"],[10887,1,""],[9384,1,""],[10886,0,"@"],[9384,0,"@"],[10895,1,""],[9392,1,""],[14239,1,""],[14239,0,"m"],[14170,1,""],[14170,0,"m"],[14348,0," practical"],[14339,10,""],[14339,0,"important "],[14804,0," This allows our system to prune or archive old events, and dramatically improves perform,an"],[14895,1,""],[14894,1,""],[14893,1,""],[14893,0,"ance particularly udrin"],[14911,5,""],[14911,0,"during live e"],[14923,1,""],[14922,1,""],[14922,0," collaborative editing sessions."],[14955,28,""],[14955,0,"This is"],[15009,0," - Optimisations"],[15009,16,""],[14303,0,"\n"],[14303,0,"\nBecause @"],[14312,1,""],[14312,0,"##"],[14313,1,""],[14312,1,""],[14312,0,"##"],[14313,1,""],[14312,1,""],[14312,0,"$$"],[14313,0,"r(empt"],[14315,4,""],[14315,0,"emptyset) = s_0"],[14331,0,",\n\n$ $"],[14335,0," "],[14332,0," t"],[14333,1,""],[14333,0,"it all"],[14338,1,""],[14338,0,"so follows that:"],[14356,4,""],[14356,0,"$ r(ceil(V_0)) plus.circle T(G, V_0, V_m) = r(ceil(V_0 union V_m)) $"],[14367,1,""],[14366,1,""],[14358,0,"forall V "],[14366,1,""],[14366,0,", "],[14378,27,""],[14381,0,"s_0 plus.circle T(G, V_"],[14403,1,""],[14402,1,""],[14402,0,"emptyset, V)"],[14414,22,""],[14366,1,""],[14366,0,":"],[14401,1,""],[14207,1,""],[13900,1,""],[14398,1,""],[14205,1,""],[13899,1,""],[14395,1,""],[14203,1,""],[13898,1,""],[14408,0,"\n"],[14408,0,"\nThus "],[14413,1,""],[14413,0,", the partial transform function is the only function we need to actually define in our code."],[14486,7,""],[14486,0," implement"],[14504,5,""],[14504,0,"system."],[14496,14,""],[14330,5,""],[10878,0,","],[10878,1,""],[10882,0,")"],[10879,0,"("],[10432,0,"\nThe remaining piece is defining a _replay_ function $r : G => DD$, which converts an event graph into the corresponding document state $d in DD$."],[10318,0," how "],[10323,53,""],[10323,0,"the"],[10338,0," is transformed into"],[10357,1,""],[10356,1,""],[10355,1,""],[10354,1,""],[10353,1,""],[10318,0," a systems'"],[10328,1,""],[10327,1,""],[10327,0,"'s _replay function_, which defintes"],[10362,1,""],[10361,1,""],[10360,1,""],[10360,0,"in"],[10361,1,""],[10360,1,""],[10360,0,"n"],[10360,1,""],[10360,0,"es"],[10367,3,""],[10367,0,"any"],[10367,3,""],[10367,0,"a"],[10367,1,""],[10367,0,"any given"],[10389,3,""],[10389,0,"is "],[10441,0,".\n\nWe define "],[10453,1,""],[10455,5,""],[10458,1,""],[10458,0," as the set of all possible document states ("],[10502,1,""],[10502,0,"for our system. (For text documents this "],[10537,0,","],[10544,0,"is the set of sall"],[10561,1,""],[10560,1,""],[10559,1,""],[10558,1,""],[10558,0,"all striongs)"],[10562,8,""],[10562,0,"strings"],[10570,0,". #"],[10572,1,""],[10572,0,"$$"],[10573,0,"d_0"],[10577,0," is the \""],[10585,1,""],[10585,0,"initial "],[10572,55,""],[10572,0,"The"],[10583,1,""],[10592,0,"_ is defined as"],[10701,0," $$"],[10703,0,"R"],[10703,1,""],[10703,0,"r(emptyset) = d_0"],[10701,0," The empty "],[10706,6,""],[10706,0,"initial document state $$"],[10730,0,"d_i"],[10732,1,""],[10732,0,"0 in DD"],[10740,0," corresponds to the document state before any events have happened. Ie,"],[10808,3,""],[10807,1,""],[10807,0," Ie,"],[10827,3,""],[10826,1,""],[10825,1,""],[10824,1,""],[10813,0,"d_0 = "],[10831,0,"."],[10834,0,"// "],[10389,3,""],[10389,0,"tr"],[10390,1,""],[10389,1,""],[10399,1,""],[10398,1,""],[10398,0,"s"],[10389,10,""],[10389,0,"maps"],[10355,21,""],[10355,0,"map "],[10358,1,""],[10358,0,"s an"],[10374,5,""],[11217,0,"loosely "],[11217,8,""],[11235,0," CRDT state run through the CRDT's"],[11293,11,""],[11292,1,""],[11291,1,""],[11291,0,")"],[11203,0,"in @shapiro, "],[11203,2,""],[11203,0,"In"],[11216,1,""],[11216,0,"t"],[11305,1,""],[11305,0,". However,"],[11315,4,""],[11333,0," "],[11333,1,""],[11333,0," to $$"],[11338,0,"r"],[11205,0," existing CRDT literature (eg"],[11243,0,")"],[11278,0," corresponding"],[11303,0," (generated "],[11303,12,""],[11303,0," (generated"],[11304,10,""],[11303,1,""],[11279,24,""],[11279,0,"output "],[11286,16,""],[11286,0,"of the"],[11360,16,""],[11360,0," the"],[11373,88,""],[11365,0,"original "],[11382,0,"the replay function also contains"],[11402,0,"must "],[11419,1,""],[11419,0," "],[11412,0,"functionally "],[11433,0,"all the complexity and behaviour of the CRDT"],[11412,13,""],[11464,0,"'s _prepare_ and _effect_ functions."],[11427,15,""],[11427,0," complexity and"],[11427,15,""],[11412,15,""],[11412,0,"effectively perform"],[11431,13,""],[11475,0," on the entire event graph"],[11203,301,""],[11816,0,"\nIn existing CRDT literature (eg @shapiro), this function corresponds to the output of the CRDT's _query function_ ($q$). However, because the input to $r$ is the original events, the replay function must also effectively perform the CRDT's _prepare_ and _effect_ functions on the entire event graph.\n\n"],[11859,0," the replay function"],[11879,14,""],[11879,0,"'s output"],[11951,0," r"],[11952,1,""],[11952,0,"when run on the corresponding CRDT state"],[12035,0,"set al"],[12040,1,""],[12039,1,""],[12039,0,"of all "],[12063,3,""],[12063,0,"our"],[12113,3,""],[12113,0,"all the work of the"],[12133,0,"equi"],[12136,1,""],[12136,0,"ivalent "],[11768,47,""],[11767,1,""],[12162,0," We will define this further in @correct, below."],[12163,47,""],[12162,1,""],[12162,0,"\n\nWe will define this further in @correct, below."],[12184,7,""],[12183,1,""],[12183,0," equuival"],[12191,1,""],[12190,1,""],[12189,1,""],[12188,1,""],[12187,1,""],[12186,1,""],[12185,1,""],[12184,1,""],[12183,1,""],[12182,1,""],[12181,1,""],[12180,1,""],[12179,1,""],[12179,0,"the relationship between "],[12203,1,""],[12195,8,""],[12182,13,""],[12179,3,""],[12179,0,"this equuival"],[12183,9,""],[12183,0," further"],[12164,47,""],[12163,1,""],[12162,1,""],[12162,0," "],[12162,1,""],[11767,0," We will define this further in @correct, below."],[12003,8,""],[12055,0,"no t"],[12058,1,""],[12057,1,""],[12057,0,"t the corresponding CRDT state. Thus, "],[12119,5,""],[12131,0," also"],[12131,5,""],[12119,0," also"],[12094,1,""],[12094,0," "],[12119,5,""],[12119,0," also"],[12215,0," to generate the"],[12219,12,""],[12218,1,""],[12217,1,""],[12216,1,""],[12215,1,""],[12214,1,""],[12214,0,"s"],[12241,0," t "],[12243,1,""],[12243,0,"o generate the CRDT state"],[12119,0," first"],[12130,12,""],[12130,0," effectively"],[12120,6,""],[13163,1,""],[13163,0,"\n\n"],[13164,1,""],[13163,1,""],[13163,0," "],[13284,0," "],[13284,1,""],[13283,1,""],[13283,0,"."],[13198,0,"thank"],[13198,5,""],[13285,0,"\n"],[13563,0,"CRDT's "],[13584,13,""],[13591,42,""],[13591,0,"combines the"],[13599,4,""],[13591,8,""],[13591,0,"is generally a bad idea, as it complicates"],[13614,0," in practical systems"],[13643,11,""],[13643,0,"combi"],[13643,5,""],[13643,0,"complicates"],[13643,11,""],[13643,0,"conflates"],[13673,0,"'s data structure"],[13769,1,""],[13768,1,""],[13768,0,", such a s"],[13777,1,""],[13776,1,""],[13776,0,"s "],[13817,4,""],[13817,0,"and so on"],[14306,0,"To avoid this issue, "],[14327,1,""],[14327,0,"w"],[14373,0,"$$ "],[14374,0,"T(V-"],[14377,1,""],[14377,0,"_0, V_m)"],[14716,7,""],[14716,0,"match"],[15070,1,""],[15021,1,""],[15069,0,"d"],[15021,0,"d"],[15356,16,""],[15322,14,""],[15322,0,"d"],[15322,1,""],[15322,0,"d"],[15322,1,""],[15322,0,"editing buffer"],[15330,6,""],[15330,0,"document to remain"],[15348,86,""],[15348,0," in the text editign app"],[15366,1,""],[15367,0,"g"],[15372,0,"lication's buffer."],[15454,19,""],[15454,0," "],[15454,1,""],[15454,0," f"],[15455,1,""],[15454,1,""],[15454,0," for their editing buffers"],[15541,5,""],[15541,0,"T"],[15541,0,"Unlike the replay function, the partial tranform "],[15541,49,""],[15661,0," for optimised tra"],[15678,1,""],[15677,1,""],[15676,1,""],[15676,0,"partial transform implementations to "],[15650,63,""],[15650,0,"Using a part"],[15650,12,""],[15650,0,"Defining our system in terms of a pa"],[15685,1,""],[15685,0,"artial transform function allows many optimisations that would b"],[15748,1,""],[15748,0,"not be possible"],[15737,26,""],[15736,1,""],[15736,0," to "],[15739,1,""],[15738,1,""],[15737,1,""],[15736,1,""],[15736,0,"."],[15736,0," to be made that would oth"],[15761,1,""],[15760,1,""],[15759,1,""],[15759,0,"not otherwise be possible. For example, increnme"],[15806,1,""],[15805,1,""],[15804,1,""],[15804,0,"mental updates"],[15818,15,""],[15818,0,","],[15824,1,""],[15824,0,"ing"],[15838,0,")"],[15828,0,"("],[15838,1,""],[15838,0,"ing"],[15853,95,""],[15763,10,""],[15763,0,"otherwise "],[15820,0,"on-demand loading "],[15820,18,""],[15811,0,"per-character "],[15832,0," during live editing sessions"],[15861,1,""],[15861,0," "],[15861,1,""],[15861,0,", and"],[16586,0,"// "],[16410,0,"// "],[16315,0,"// "],[16247,0,"// "],[17683,0," /"],[17684,1,""],[17684,0,"Implementations must match the semantic definition of the "],[17715,0,"replay"],[17715,6,""],[17742,0,"replay function, but may still differ in the exact event stream"],[17799,6,""],[17798,1,""],[17798,0," stream they return."],[17741,0,"ir corresponding"],[17833,1,""],[17833,0," for any given input."],[18067,7,""],[18067,0,"replicating"],[18082,7,""],[18103,3,""],[18103,0,"some"],[18053,0," using a CRDT to"],[18077,1,""],[18076,1,""],[18075,1,""],[18075,0,"e"],[18091,1,""],[18090,1,""],[18089,1,""],[18089,0,"e"],[18115,4,""],[18115,0,"the"],[18235,41,""],[18130,0," #G"],[18132,1,""],[18131,1,""],[18131,0,"$G$"],[18296,27,""],[18008,1,""],[18008,0,"\n\n"],[49384,0," <generic-crdt-replay>"],[18303,12,""],[18303,0,"@gen"],[18304,3,""],[18304,0,"generic-crdt-replay"],[18327,7,""],[18327,0,"list"],[18380,8,""],[18416,4,""],[18416,0,"the set of"],[18448,10,""],[18447,1,""],[18550,0,"for collaborative text editing "],[18685,24,""],[18685,0,"@ben"],[18686,3,""],[18686,0,"benchmarking"],[18749,18,""],[18748,1,""],[18747,1,""],[18747,0,"a partial tranf"],[18761,1,""],[18761,0,"sform"],[18812,9,""],[18812,0,"in this way"],[18875,12,""],[18875,0,"semantic"],[18850,0," a network of"],[18870,11,""],[18870,0,"agree "],[18875,1,""],[18870,5,""],[18870,0,"coordinate "],[20202,0,"\n"],[20134,1,""],[20201,0,"\nFor replayable event graphs to be used in place of CRDTs in collaborative text editing, they must not only be well defined and correct but also demonstrate comparable performance to existing CRDT based solutions."],[19921,213,""],[19988,0,"\n"],[19920,1,""],[19987,1,""],[19920,0,"\n"],[19988,0,"\n"],[19973,1,""],[19973,0,", which "],[19973,8,""],[19973,0,", which is a novel algorithm for replaying event graphs of "],[20031,1,""],[20030,1,""],[20029,1,""],[20028,1,""],[20028,0," of sequence editing events. Its b"],[20061,1,""],[20060,1,""],[20059,1,""],[20058,1,""],[20057,1,""],[20056,1,""],[20055,1,""],[20055,0," according the"],[20066,0,"to "],[20072,0," semantics of the FugueMax CRDT."],[20103,0," @fug"],[20105,3,""],[20105,0,"fugue"],[20111,1,""],[20111,0,"\n\n"],[20128,0,"// "],[20005,0," efficiently"],[20421,11,""],[20421,0,"()"],[20422,0,"@fugue"],[20651,22,""],[20651,0,"@ben"],[20652,3,""],[20652,0,"benchmarking"],[20717,0," partial"],[20735,0,"ation"],[20676,0," partial"],[20826,165,""],[20828,21,""],[20828,0,"E"],[20837,0,", as presented in this paper,"],[20866,3,""],[20872,0,"es"],[21133,14,""],[21133,0,"here."],[20973,4,""],[20973,0,"most"],[20998,0," without changing the "],[21007,13,""],[21007,0,"large changes to the algorithm"],[21128,6,""],[21127,1,""],[21126,1,""],[21126,0,". However,"],[21152,5,""],[21152,0,"are "],[21160,3,""],[21169,5,""],[21169,0," in this paper"],[21152,3,""],[21152,0,"wo;"],[21154,1,""],[21153,1,""],[21153,0,"iol"],[21155,1,""],[21154,1,""],[21154,0,"ll"],[21160,0," be"],[21267,16,""],[21267,0,"@opt"],[21268,3,""],[21268,0,"optimisations"],[21286,7,""],[21286,0,"@ben"],[21287,3,""],[21287,0,"benchmarking"],[21282,18,""],[21290,0,"s"],[21322,3,""],[21321,1,""],[21359,7,""],[21359,0,"@ben"],[21360,3,""],[21360,0,"benchmarking"],[21351,8,""],[21402,0,"\n\n"],[21403,0,"== H"],[21406,1,""],[21406,0,"Eg-walker from "],[21415,6,""],[21406,0,"High level overview of "],[21425,13,""],[21427,0,"Sequence editing "],[21444,1,""],[21444,0,"e"],[21444,1,""],[21444,0,"E"],[21443,1,""],[21435,8,""],[21427,8,""],[21426,0,"\n// Blergh."],[21660,1,""],[21659,1,""],[21669,0," index"],[21681,44,""],[21739,0,", and positions"],[21681,0,"// "],[21683,1,""],[21681,2,""],[21713,0," will typically be"],[21731,3,""],[21769,0," specify the "],[21754,28,""],[21777,0,"s"],[21863,0,"Max"],[22123,0," the"],[22137,0," algorithm"],[22156,0,"s"],[22156,1,""],[22274,7,""],[22274,0,"cop"],[22274,3,""],[22274,0,"instance"],[22308,0," (with some minor moni"],[22329,1,""],[22328,1,""],[22328,0,"difications described below)"],[22357,1,""],[22357,0,"\n\n"],[22359,16,""],[22359,0,"As "],[22359,3,""],[22359,0,"The traversal iteratively visite"],[22390,1,""],[22390,0,"s every event in the event graph. As each "],[22432,2,""],[22442,0," is visitied"],[22453,1,""],[22452,1,""],[22451,1,""],[22451,0,"ed, i"],[22455,1,""],[22455,0,"it"],[22512,0,". Then"],[22518,6,""],[22454,0," we first j"],[22464,1,""],[22464,0,"adjust the state to resemble the event's parent version. Then the event"],[22535,3,""],[22590,0," using FugueMax's _par"],[22611,1,""],[22610,1,""],[22610,0,"repare_+ "],[22618,1,""],[22617,1,""],[22617,0," function"],[22457,0,":\n\n+"],[22462,7,""],[22462,0,"A"],[22518,20,""],[22518,0,"\n+ C"],[22529,1,""],[22528,1,""],[22529,0,"the event "],[22617,1,""],[22617,0,"\n+ "],[22620,22,""],[22620,0,"I"],[22620,13,""],[22620,0,"M"],[22625,1,""],[22625,0," the CRDT message"],[22645,1,""],[22663,1,""],[22663,0,", and emit the resulting transformed event in the process.\n\nEA"],[22724,1,""],[22724,0,"ach f "],[22729,1,""],[22728,1,""],[22728,0,"of these steps will be described in more detail below. We "],[22723,63,""],[22723,0,"Each of these steps will be described in more detail below. We"],[21402,0,"\n"],[21402,0,"\nCode is "],[21403,8,""],[21403,0,"Example "],[21403,8,""],[21403,0,"Example"],[21403,0,"Working "],[21411,1,""],[21411,0,"e"],[21418,0," code is provided in #"],[21439,1,""],[21439,0,"@ref"],[21440,3,""],[21440,0,"reference-reg"],[21423,0,", written in t"],[21436,1,""],[21436,0,"Typescript"],[21476,0,"."],[21411,0,"reference "],[21421,8,""],[21448,0,","],[21480,0," And a "],[21486,1,""],[21486,0,"n optimized "],[21485,13,""],[21485,0,"we pro"],[21480,0," This library is as simple"],[21497,9,""],[21497,0,"intentionally simplified and mi"],[21527,1,""],[21526,1,""],[21526,0,"is missing many of the "],[21542,7,""],[21542,0,"optimisations. We also provide a much more fully featured implementation of eg-walker in @t"],[21632,1,""],[21632,0,"dt"],[21634,11,""],[21634,0," - which is used to "],[21646,8,""],[21646,0,"benchmarked."],[21646,0,"the version we "],[21671,1,""],[21670,1,""],[21670,0," in @be"],[21675,2,""],[21675,0,"benchmarking"],[21650,7,""],[21650,0,"codebase"],[21425,24,""],[21487,18,""],[21473,14,""],[21499,0," to remain simple"],[21473,0,"fully featured, but "],[21519,0," in order"],[21636,0,"also "],[21721,0,"// "],[21804,0,"\nSequence editing events are defined as per @fug"],[21849,3,""],[21849,0,"fugue"],[21841,0,"the same way "],[21856,4,""],[21863,0,", as either:"],[21863,1,""],[21841,15,""],[21841,0,"according to"],[21860,0,","],[21860,1,""],[21860,0,". Each event is "],[21875,12,""],[21875,0," either:"],[21876,6,""],[21876,0,"one of"],[22673,0," in order to compute "],[22686,8,""],[22686,0,"merge cno"],[22694,1,""],[22693,1,""],[22693,0,"oncurrent changes. The internal state"],[22730,6,""],[22730,0," has"],[22776,1,""],[22775,1,""],[22775,0,"."],[22745,0," departi"],[22752,1,""],[22752,0,"ures from FugueMa"],[22768,1,""],[22767,1,""],[22767,14,""],[22731,0,"cpmta"],[22735,1,""],[22734,1,""],[22733,1,""],[22732,1,""],[22732,0,"ontains "],[22740,4,""],[22715,9,""],[22763,0,", which are"],[21854,6,""],[21841,13,""],[21841,0,"in the same way as the Fugue paper"],[21859,0," in"],[22844,6,""],[22849,0,"s"],[22919,0," local"],[22974,66,""],[22974,0,"Use "],[23007,0," to compute the equivalent CRDT message"],[23034,0,"FugueMax "],[23102,0," (using FugueMax's _effect_ function). In the process, we"],[23159,1,""],[23160,0,"calculate "],[23210,15,""],[23277,0,"// "],[23213,0,"// "],[23440,1,""],[23440,0,"\n\n"],[23628,6,""],[23628,0,"get"],[23630,1,""],[23629,1,""],[23628,1,""],[23628,0,"getTransformed"],[23628,14,""],[23628,0,"tra"],[23630,1,""],[23629,1,""],[23628,1,""],[23628,0,"transformEvents"],[23933,11,""],[23933,0,"replay"],[23637,0,"All"],[24002,6,""],[24002,0,"transformAllEvents"],[24044,16,""],[24044,0,"o"],[23982,16,""],[23982,0,"o"],[24030,0,"p"],[23983,0,"p"],[23902,16,""],[23902,0,"o"],[23844,16,""],[23844,0,"o"],[23888,0,"p"],[23845,0,"p"],[23681,1,""],[23680,1,""],[23679,1,""],[23678,1,""],[23677,1,""],[23677,0,"Operation"],[24064,6,""],[24046,6,""],[24052,6,""],[24052,0,"e"],[24052,1,""],[24052,0,"_apply"],[24057,1,""],[24056,1,""],[24055,1,""],[24054,1,""],[24053,1,""],[24053,0,"effect"],[23831,6,""],[23831,0,"Update"],[23831,6,""],[23864,1,""],[23854,10,""],[23854,0,"effect"],[27964,0," <"],[27965,1,""],[27964,1,""],[27964,0," <inpout"],[27971,1,""],[27970,1,""],[27969,1,""],[27969,0,"utversion>"],[24124,0," in @inpu"],[24129,4,""],[24129,0,"inputversion"],[24060,23,""],[24060,0,"mirror"],[24146,0," listed"],[24202,0,"in order "],[24230,0," snapshot"],[24231,9,""],[24231,0,"snapshot "],[24201,60,""],[24477,0,"\n\n"],[24478,0,"#"],[24478,1,""],[24478,0,"=== Algorithm Example"],[25345,8,""],[25345,0,"Example"],[24523,0,"an event graph containing "],[24576,25,""],[24576,0,":"],[24577,12,""],[24823,0,"\n\nThe corresponding graph"],[24825,23,""],[24824,1,""],[24823,1,""],[25371,0,"In order to compute the resulting document state, "],[25421,1,""],[25421,0,"e"],[25468,1,""],[25467,1,""],[25467,0,"."],[25468,2,""],[25468,0," I"],[25481,0," the traversal must "],[25455,0,"some "],[25501,5,""],[25501,0,"will "],[25505,1,""],[25512,0," be in order"],[25715,6,""],[25715,0,"messages"],[26810,53,""],[26810,0,"the"],[26858,0," is computed"],[26953,0,"list of "],[26870,0," based onth"],[26880,1,""],[26879,1,""],[26879,0," the po"],[26885,1,""],[26884,1,""],[26884,0,"modified position "],[26884,18,""],[26884,0,"op"],[26885,1,""],[26884,1,""],[26884,0,"position of the modified item"],[26900,13,""],[26900,0,"inserre"],[26906,1,""],[26905,1,""],[26905,0,"ted or delte"],[26916,1,""],[26915,1,""],[26915,0,"eted item in the tree"],[27474,1,""],[27474,0,"\n"],[27368,0,"// "],[27535,138,""],[27535,0,"not only would the output order change, but the transformed positions would also change (In this case, C would be inserted at position 1)."],[27534,1,""],[27534,0,"\n//"],[27534,0," the transfor"],[27539,8,""],[27539,0,"output"],[27539,0,"list of transformed operations would change, but "],[27588,6,""],[27588,0,"the output"],[27592,6,""],[27592,0,"result "],[27598,1,""],[27598,0,"ing document (\"ABC"],[27615,1,""],[27615,0,"DC\") would stay the same."],[27539,8,""],[27602,0," after applying them"],[27568,6,""],[27568,0,"be returned in "],[27582,1,""],[27579,3,""],[27570,9,""],[27570,0," slightly differetn"],[27588,1,""],[27587,1,""],[27587,0,"nt"],[27505,0," a different"],[27517,4,""],[27524,2,""],[27524,0,"(eg"],[27542,0,")"],[28072,0," (or replaced with _no-op_ operations)"],[28020,8,""],[28020,0," elided"],[28071,38,""],[28077,0," will"],[28089,1,""],[27818,0,"\n\n\n```\n{id: A, event: Insert('A', 0)}\n{id: B, event: Insert('B', 1)}\n{id: C, event: Insert('C', 2)} // <-- Note the position has changed!\n{id: D, event: Insert('D', 2)}\n```"],[27819,1,""],[27916,38,""],[27916,0,"\n{id: B, event: Insert('B', 1)}"],[27855,31,""],[27882,1,""],[27882,0,"1"],[27948,0,"// "],[27917,0,"// "],[27886,0,"// "],[27855,0,"// "],[27824,0,"// "],[27820,0,"// "],[28105,9,""],[28141,0," directly"],[8119,0," The version is a simple, direct loca"],[8155,1,""],[8154,1,""],[8154,0,"gical timestamp for the "],[8145,7,""],[8171,0,"graph "],[8176,1,""],[8176,0,"."],[8132,0,"can be used as "],[8147,11,""],[8147,0,"a"],[8148,1,""],[8166,0,"_"],[8149,0,"_"],[8176,0," event"],[8132,14,""],[8132,0,"a"],[8132,1,""],[8132,0,"is"],[8146,9,""],[8146,0,"clock"],[8119,1,""],[8119,0,"\n\n"],[8173,0," "],[8173,1,""],[8173,0," at the moment when it is computed"],[28471,0,"\n"],[28471,0,"\nt"],[28472,1,""],[28472,0,"It is not often recon"],[28492,1,""],[28492,0,"gnised, but the CRDT state"],[28504,4,""],[28504,0,"any "],[28518,0," can also "],[28519,9,""],[28519,0,"also has a version - "],[28539,1,""],[28538,1,""],[28537,1,""],[28524,0,"exists at "],[28534,5,""],[28534,0,"some"],[28472,33,""],[28472,0,"AS"],[28473,1,""],[28514,0,", defined by "],[28472,55,""],[28472,0,"Any CRDT state also exists at some version, defined by"],[28585,60,""],[28528,57,""],[28528,0,"We can describe the version of any CRDT's state based on"],[28526,0," the set of all events which have been merged in to the CRDT."],[28587,58,""],[28559,0,", so far,"],[46999,0,"_"],[46985,0,"_"],[45204,0,"_"],[45190,0,"_"],[43131,0,"_"],[43117,0,"_"],[34996,0,"_"],[34982,0,"_"],[31209,0,"_"],[31195,0,"_"],[30544,0,"_"],[30530,0,"_"],[30399,0,"_"],[30385,0,"_"],[28670,0,"_"],[28656,0,"_"],[47000,14,""],[47000,0,"e"],[45203,14,""],[45203,0,"e"],[43128,14,""],[43128,0,"e"],[34991,14,""],[34991,0,"e"],[31202,14,""],[31202,0,"e"],[30535,14,""],[30535,0,"e"],[30388,14,""],[30388,0,"e"],[28657,14,""],[28657,0,"e"],[46910,0,"f"],[45126,0,"f"],[43064,0,"f"],[34940,0,"f"],[31164,0,"f"],[30510,0,"f"],[30376,0,"f"],[28658,0,"f"],[46918,0,"f"],[45133,0,"f"],[43070,0,"f"],[34945,0,"f"],[31168,0,"f"],[30513,0,"f"],[30378,0,"f"],[28659,0,"f"],[46926,0,"e"],[45140,0,"e"],[43076,0,"e"],[34950,0,"e"],[31172,0,"e"],[30516,0,"e"],[30380,0,"e"],[28660,0,"e"],[46934,0,"c"],[45147,0,"c"],[43082,0,"c"],[34955,0,"c"],[31176,0,"c"],[30519,0,"c"],[30382,0,"c"],[28661,0,"c"],[46942,0,"t"],[45154,0,"t"],[43088,0,"t"],[34960,0,"t"],[31180,0,"t"],[30522,0,"t"],[30384,0,"t"],[28662,0,"t"],[28784,1,""],[28783,1,""],[28950,0,"event's parent "],[28965,36,""],[28965,0,"version"],[28875,0," "],[28875,1,""],[28876,0," coirre"],[28882,1,""],[28881,1,""],[28880,1,""],[28879,1,""],[28878,1,""],[28878,0,"orrectly "],[28877,0,"in order to "],[28899,0,"convert the event into a CRDT message,"],[29033,18,""],[29033,0,". There are two reasons for this:"],[29068,1,""],[29068,0,"+"],[29161,1,""],[29161,0,"+"],[29141,3,""],[29141,0,"that"],[29167,10,""],[29167,0," resulting"],[29749,0,"We can see ths problem "],[29762,0,"i"],[29772,0," in"],[29775,9,""],[29806,10,""],[29806,0,"converting"],[29822,0," in"],[29824,1,""],[29823,1,""],[29822,1,""],[29826,0," into the corresponding CRDT message"],[30237,0," conclude that "],[30251,1,""],[30246,5,""],[30237,9,""],[30237,0," conclude that \"c\""],[30254,1,""],[30253,1,""],[30253,0,"C\" must appear before \"B\" in the resulting document, and"],[30318,21,""],[30325,0," Worse, this behaviour would depend on the "],[30354,14,""],[30354,0,"change depending on the traversal order chosen by the oa"],[30409,1,""],[30408,1,""],[30408,0,"alogri"],[30413,1,""],[30412,1,""],[30411,1,""],[30410,1,""],[30410,0,"gorithm. //"],[31075,0,"In order to "],[31087,3,""],[31368,1,""],[31370,5,""],[31370,0,"prepare"],[31417,0,"An "],[31421,6,""],[31421,0,"ev"],[31422,1,""],[31422,0,"ffect"],[43465,1,""],[43426,1,""],[43221,1,""],[42910,1,""],[42194,1,""],[37318,1,""],[36715,1,""],[36187,1,""],[35493,1,""],[34281,1,""],[34036,1,""],[33883,1,""],[33809,1,""],[33727,1,""],[33604,1,""],[32701,1,""],[31788,1,""],[31633,1,""],[31466,1,""],[31390,1,""],[43445,1,""],[43407,1,""],[43203,1,""],[42893,1,""],[42178,1,""],[37303,1,""],[36701,1,""],[36174,1,""],[35481,1,""],[34270,1,""],[34026,1,""],[33874,1,""],[33801,1,""],[33720,1,""],[33598,1,""],[32696,1,""],[31784,1,""],[31630,1,""],[31464,1,""],[31389,1,""],[43426,0,"p"],[43389,0,"p"],[43186,0,"p"],[42877,0,"p"],[42163,0,"p"],[37289,0,"p"],[36688,0,"p"],[36162,0,"p"],[35470,0,"p"],[34260,0,"p"],[34017,0,"p"],[33866,0,"p"],[33794,0,"p"],[33714,0,"p"],[33593,0,"p"],[32692,0,"p"],[31781,0,"p"],[31628,0,"p"],[31463,0,"p"],[31389,0,"p"],[43614,1,""],[43455,1,""],[42903,1,""],[36711,1,""],[35991,1,""],[35304,1,""],[32836,1,""],[31820,1,""],[31564,1,""],[31440,1,""],[43604,1,""],[43446,1,""],[42895,1,""],[36704,1,""],[35985,1,""],[35299,1,""],[32832,1,""],[31817,1,""],[31562,1,""],[31439,1,""],[43594,1,""],[43437,1,""],[42887,1,""],[36697,1,""],[35979,1,""],[35294,1,""],[32828,1,""],[31814,1,""],[31560,1,""],[31438,1,""],[43585,0,"e"],[43429,0,"e"],[42880,0,"e"],[36691,0,"e"],[35974,0,"e"],[35290,0,"e"],[32825,0,"e"],[31812,0,"e"],[31559,0,"e"],[31438,0,"e"],[22404,1,""],[22403,1,""],[22403,0,"["],[22403,1,""],[22403,0,"p"],[22430,3,""],[22430,0,"e"],[22419,1,""],[22418,1,""],[22418,0,"p"],[22444,3,""],[22444,0,"e"],[43395,4,""],[43395,0,"s"],[42935,4,""],[42935,0,"s"],[37119,4,""],[37119,0,"s"],[37011,4,""],[37011,0,"s"],[36891,4,""],[36891,0,"s"],[36816,4,""],[36816,0,"s"],[36493,4,""],[36493,0,"s"],[36421,4,""],[36421,0,"s"],[36383,4,""],[36383,0,"s"],[36268,4,""],[36268,0,"s"],[35477,4,""],[35477,0,"s"],[34497,4,""],[34497,0,"s"],[34288,4,""],[34288,0,"s"],[34076,4,""],[34076,0,"s"],[33791,4,""],[33791,0,"s"],[33710,4,""],[33710,0,"s"],[33614,4,""],[33614,0,"s"],[33517,4,""],[33517,0,"s"],[32688,4,""],[32688,0,"s"],[32640,4,""],[32640,0,"s"],[32083,4,""],[32083,0,"s"],[22454,4,""],[22454,0,"s"],[43333,0,"p"],[42876,0,"p"],[37063,0,"p"],[36958,0,"p"],[36841,0,"p"],[36769,0,"p"],[36449,0,"p"],[36380,0,"p"],[36345,0,"p"],[36233,0,"p"],[35445,0,"p"],[34468,0,"p"],[34262,0,"p"],[34053,0,"p"],[33771,0,"p"],[33693,0,"p"],[33600,0,"p"],[33506,0,"p"],[32680,0,"p"],[32635,0,"p"],[32081,0,"p"],[22455,0,"p"],[35959,4,""],[35959,0,"s"],[35391,4,""],[35391,0,"s"],[35331,4,""],[35331,0,"s"],[35275,4,""],[35275,0,"s"],[32818,4,""],[32818,0,"s"],[32770,4,""],[32770,0,"s"],[32085,4,""],[32085,0,"s"],[22513,4,""],[22513,0,"s"],[35939,0,"e"],[35374,0,"e"],[35317,0,"e"],[35264,0,"e"],[32810,0,"e"],[32765,0,"e"],[32083,0,"e"],[22514,0,"e"],[22470,2,""],[22470,0,"p"],[22528,3,""],[22528,0,"e"],[31351,0,"\n#v"],[31353,1,""],[31353,0,"xp\n"],[31353,1,""],[31353,0,"v"],[31352,5,""],[43438,4,""],[43438,0,"v"],[43430,4,""],[43430,0,"v"],[36674,4,""],[36674,0,"v"],[32295,4,""],[32295,0,"v"],[43430,0,"e"],[43425,0,"e"],[36672,0,"e"],[32296,0,"e"],[43409,3,""],[43409,0,"v"],[43402,3,""],[43402,0,"v"],[43173,3,""],[43173,0,"v"],[36652,3,""],[36652,0,"v"],[35136,3,""],[35136,0,"v"],[34973,3,""],[34973,0,"v"],[34701,3,""],[34701,0,"v"],[33719,3,""],[33719,0,"v"],[33636,3,""],[33636,0,"v"],[33585,3,""],[33585,0,"v"],[43392,0,"p"],[43387,0,"p"],[43160,0,"p"],[36641,0,"p"],[35127,0,"p"],[34966,0,"p"],[34696,0,"p"],[33716,0,"p"],[33635,0,"p"],[33586,0,"p"],[31799,81,""],[31446,0,"\n#ve is simply the set of all events visited so far in the event graph traversal.\n"],[31504,12,""],[31504,0," event graph"],[31504,12,""],[31514,0," of the"],[31501,0,"our "],[31505,5,""],[31505,0,"t"],[31521,0," event graph"],[37368,0," <partial"],[37370,0,"eg-"],[37380,0,">"],[24279,0,"@par"],[24280,3,""],[24280,0,"eg-partial generalises the algorithm "],[24317,61,""],[24317,0," "],[24317,1,""],[24328,1,""],[24342,1,""],[24343,0," for instances "],[24344,14,""],[24344,0,"to support instances"],[31447,17,""],[31447,0,"contains"],[31455,3,""],[31523,0," initially contains the same version "],[31523,37,""],[31523,0," is initially set to #v2"],[31546,1,""],[31546,0,"e (or $$"],[31553,0,"emp"],[31553,3,""],[31553,0,"emptyset"],[31562,0," when processing all events). But #vp"],[31607,5,""],[31607,0,"adjusted"],[31615,7,""],[31694,1,""],[31694,0,"\n\n"],[31547,43,""],[31519,0,"\n"],[31519,0,"\nThe state can be aj"],[31538,1,""],[31538,0,"djhu"],[31541,1,""],[31540,1,""],[31539,1,""],[31539,0,"justed at a "],[31550,1,""],[31550,0,"ny time such that $"],[31568,1,""],[31568,0,"#vp "],[31520,52,""],[31520,0,"The state can be adjusted at any time such that #vp"],[31397,0,"\n"],[31397,1,""],[31442,0,"\n"],[31442,0,"\nTge"],[31445,1,""],[31444,1,""],[31444,0,"hese "],[31443,6,""],[31443,0,"This is implemented in practice by two "],[31478,4,""],[31478,0,"storing two state variables on each item in the CRDT s"],[31531,1,""],[31530,1,""],[31526,4,""],[31526,0,"tree"],[31514,16,""],[31514,0,"node in the tree: $"],[31532,1,""],[31532,0,"#sp and #se "],[31543,1,""],[31543,0," w"],[31544,1,""],[31543,1,""],[31543,0,", which p"],[31551,1,""],[31551,0,"store the node's state at $vp "],[31580,1,""],[31579,1,""],[31578,1,""],[31577,1,""],[31577,0,"#vp and #ve respectively."],[31489,0," seoa"],[31493,1,""],[31492,1,""],[31492,0,"parate"],[31611,2,""],[31611,0," "],[31686,1,""],[31686,0,", and thus #se repre"],[31701,5,""],[31701,0,"mirrors the state in FugueMax "],[31730,1,""],[31730,0,". (In FugueMax this is represented by the item storing its original value $x$ or the stom"],[31818,1,""],[31817,1,""],[31816,1,""],[31815,1,""],[31815,0,"tombstone value $perp$)."],[31443,34,""],[31443,0,"Eg-walker implements this b"],[31469,1,""],[31468,1,""],[31468,0," by"],[31610,8,""],[31610,0,"represents the set of"],[31693,5,""],[31693,0,". "],[31695,2,""],[31695,0,"T"],[31704,7,""],[31704,0,"has the same"],[31716,4,""],[31723,2,""],[31723,0,"as"],[31737,0,"Though \\"],[31745,1,""],[31744,1,""],[31744,0,"i"],[31755,0,", the state of each node"],[31605,1,""],[31605,0,"\n\n"],[31705,21,""],[31705,0,"mirrors the state of "],[31725,1,""],[31725,0," the equivalent"],[31749,0," CRDT"],[31757,6,""],[31757,0,"However"],[31896,0,"\n"],[31896,0,"\n#vp, on the other hand, can be "],[31897,31,""],[31897,0,"#vp, on the other hand, can be"],[31927,18,""],[31949,13,""],[31949,0,"in order to ad"],[31962,1,""],[31961,1,""],[31960,1,""],[31949,11,""],[31897,52,""],[31897,0,"#vp, on the other hand, can be adjusted at any time"],[31948,54,""],[31948,0,","],[31952,0," represent"],[31896,0,"\n"],[31896,0,"\nHowever, as we process"],[31912,7,""],[31912,0,"call"],[31906,10,""],[31906,0,"before calling _prepare_ during t"],[31938,1,""],[31938,0,"event traveras"],[31951,1,""],[31950,1,""],[31950,0,"sal, $"],[31955,1,""],[31955,0,"#vp m"],[31959,1,""],[31959,0,"is moved to represent "],[31959,22,""],[31959,0,"("],[31959,1,""],[31897,62,""],[31897,0,"However, before calling _prepare_ during event traversal, #vp"],[32103,0,"// "],[31960,0,"// "],[31897,0,"// "],[31607,0,"// "],[32364,1,""],[32399,0,"With theo"],[32407,1,""],[32406,1,""],[32405,1,""],[32404,1,""],[32404,0,"all that theory out of the way, we arra"],[32442,1,""],[32442,0,"ive at "],[32449,1,""],[32449,0,"e"],[32439,9,""],[32439,0,"can define"],[32467,0,". Eg-walker's state"],[32537,1,""],[32537,0,", where"],[32537,7,""],[32537,0,". The p"],[32543,1,""],[32543,0,"principle change is that each node in the tree store"],[32543,10,""],[32543,0,"main "],[32547,1,""],[32543,4,""],[32543,0,"relevant "],[32594,0,"s an additional state variable $"],[32625,1,""],[32625,0,"#sp representing the state at some version $"],[32668,1,""],[32668,0,"#vp used by the _prepare_ function. "],[32703,1,""],[32538,1,""],[32538,0,"\n\n"],[32544,8,""],[32544,0,"most important"],[32565,0," from FugueMax"],[32724,0," "],[32724,1,""],[32724,0," Th"],[32726,1,""],[32725,1,""],[32725,0,"$"],[32725,1,""],[32725,0,"#sp is modified throughout the traversal in order to "],[32766,12,""],[32766,0,"such "],[32770,1,""],[32766,4,""],[32766,0,"in order to mkae"],[32781,1,""],[32780,1,""],[32779,1,""],[32779,0,"ake $"],[32783,1,""],[32783,0,"_prepare_ function corec"],[32806,1,""],[32805,1,""],[32804,1,""],[32803,1,""],[32802,1,""],[32802,0,"correctly."],[32468,1,""],[32468,0,"\n\n"],[32540,1,""],[32539,1,""],[32539,0," "],[32986,16,""],[32986,0,"item which was deleted"],[32832,1,""],[32832,0,":\n\n/ "],[32837,1,""],[32837,0,"A"],[32915,0,"\n/ "],[32854,0,":"],[32919,1,""],[32937,1,""],[32937,0,":"],[32919,5,""],[32919,0,"A"],[33011,1,""],[32916,0," as ep"],[32921,1,""],[32920,1,""],[32920,0,"per FugueMax"],[33131,19,""],[33117,10,""],[33121,0," of events processed so far,"],[33148,1,""],[33148,0,"."],[33149,7,""],[33223,1,""],[33223,0," and"],[33339,4,""],[33340,6,""],[33340,0,"@fugue"],[33340,0,"the Fugue P"],[33350,1,""],[33350,0,"paper ("],[33363,0,")"],[33363,1,""],[33356,1,""],[33356,0,"("],[33363,0,")"],[33792,10,""],[33788,1,""],[33791,1,""],[33796,0,"the value having "],[33703,0," In the fugue paper,"],[33723,2,""],[33723,0," t"],[33751,0," exactly"],[34134,1,""],[34134,0,"\n\n"],[34266,1,""],[34266,0,". Because transformed items are emitted during traversal, there is no need to store the value of each item in the tree"],[34384,29,""],[34384,0,". "],[34385,1,""],[34384,1,""],[34384,0," itseklf."],[34392,1,""],[34391,1,""],[34390,1,""],[34389,1,""],[34389,0,"lf."],[34276,17,""],[34276,0,"inserts"],[34282,1,""],[34282,0,"ed items"],[34276,0,"the content of "],[34306,3,""],[34306,0,"is"],[34316,0," by"],[34318,1,""],[34317,1,""],[34316,1,""],[34316,0," directly"],[34412,0," See @tran"],[34418,4,""],[34418,0,"transform "],[34427,1,""],[34427,0," for more discussion of this approach."],[34413,4,""],[34424,0,"contains "],[34433,8,""],[34433,0,"a"],[34433,1,""],[34433,0,"a longer"],[34471,0,"// "],[34207,0,"// "],[34136,0,"// "],[34558,0,"\n\n"],[34559,0,"Before visiting each item, $"],[34586,1,""],[34586,0,"#"],[34566,21,""],[34566,0,"running _prepare_ on each event, we first "],[34599,9,""],[34599,0,"the algorihtm "],[34603,10,""],[34603,0,"algorihtm "],[34612,1,""],[34611,1,""],[34610,1,""],[34609,1,""],[34609,0,"thm first adjuts"],[34624,1,""],[34623,1,""],[34622,1,""],[34622,0,"usts $"],[34627,1,""],[34627,0,"#sp on all nodes  in "],[34647,1,""],[34646,1,""],[34645,1,""],[34644,1,""],[34644,0,"in the tree to the state of the "],[34619,7,""],[34619,0,"sets"],[34669,4,""],[34669,0,"this item at the events' parent version $V_i$"],[34597,0," $i$"],[34718,0,"."],[34672,5,""],[34672,0," the"],[34720,0,"// "],[34627,0," $"],[34628,1,""],[34628,0,"#vp to $"],[34635,1,""],[34635,0,"#V_i#"],[34639,1,""],[34639,0,"$"],[34635,1,""],[34635,0,"$"],[34640,0,". $"],[34642,1,""],[34642,0,"#vp "],[34643,3,""],[34642,1,""],[34641,1,""],[34640,1,""],[34640,0,", by adjusting"],[34636,1,""],[34636,0,"P"],[34745,0,"\nBefore running _prepare_ on each event $i$, the algorithm first sets #vp to $P_i$, by adjusting #sp on all nodes in the tree to the state of the item at the events' parent version $V_i$."],[34559,0,"// "],[34807,28,""],[34807,0,"first "],[34821,1,""],[34820,1,""],[34819,1,""],[34819,0,"s"],[34813,7,""],[34813,0,"sets"],[34903,1,""],[34903,0,"P"],[35189,0,"_"],[35187,0,"_"],[35150,0,"_"],[35148,0,"_"],[35111,0,"_"],[35109,0,"_"],[35068,0,"_"],[35066,0,"_"],[35018,0,"_"],[35016,0,"_"],[35196,2,""],[35196,0,"O"],[35155,2,""],[35155,0,"O"],[35114,2,""],[35114,0,"O"],[35069,2,""],[35069,0,"O"],[35017,2,""],[35017,0,"O"],[35192,1,""],[35192,0,"vp"],[35152,1,""],[35152,0,"vp"],[35112,1,""],[35112,0,"vp"],[35068,1,""],[35068,0,"vp"],[35017,1,""],[35017,0,"vp"],[35198,1,""],[35195,1,""],[35157,1,""],[35154,1,""],[35116,1,""],[35113,1,""],[35071,1,""],[35068,1,""],[35019,1,""],[35016,1,""],[35189,0,"_"],[35187,0,"_"],[35150,0,"_"],[35148,0,"_"],[35111,0,"_"],[35109,0,"_"],[35068,0,"_"],[35066,0,"_"],[35018,0,"_"],[35016,0,"_"],[35198,1,""],[35195,1,""],[35157,1,""],[35154,1,""],[35116,1,""],[35113,1,""],[35071,1,""],[35068,1,""],[35019,1,""],[35016,1,""],[35187,2,""],[35187,0,"P"],[35148,2,""],[35148,0,"P"],[35109,2,""],[35109,0,"P"],[35066,2,""],[35066,0,"P"],[35016,2,""],[35016,0,"P"],[35184,0,"_"],[35146,0,"_"],[35108,0,"_"],[35066,0,"_"],[35017,0,"_"],[35189,0,"i"],[35150,0,"i"],[35111,0,"i"],[35068,0,"i"],[35018,0,"i"],[35190,1,""],[35110,1,""],[35189,0,"$"],[35110,0,"$"],[35194,0,"$"],[35114,0,"$"],[35025,0,":"],[35122,0,":"],[35204,0,":"],[35540,1,""],[35540,0,"\n\n"],[35376,0,"// "],[35570,0," rather than recomputing $"],[35595,1,""],[35595,0,"#si"],[35597,1,""],[35597,0,"p for ea"],[35604,1,""],[35604,0,"very item in the tree,"],[35545,83,""],[35545,0,"T"],[35740,0," This masi"],[35749,1,""],[35749,0,"sively improves the performance of the alogirht"],[35788,8,""],[35788,0,"algr"],[35791,1,""],[35791,0,"orithm."],[35799,1,""],[35913,1,""],[35799,0,"Calculating this set difference between versions can itself be optimised "],[35872,114,""],[35872,0,"quite effectively"],[35852,7,""],[35831,17,""],[35847,18,""],[35847,0," further"],[35848,7,""],[35848,0,"via an algorithm presented in @#"],[35879,1,""],[35878,1,""],[35878,0,"#"],[35878,1,""],[35878,0,"@optim"],[35879,5,""],[35879,0,"optimisations. TODO: ADD THE ALGORTIHM!"],[35908,9,""],[35908,0,"ALGORITHM AN D"],[35921,1,""],[35920,1,""],[35920,0,"D REFERENCE IT DIRECTLY"],[35893,1,""],[35893,0,"\n\n> "],[36618,3,""],[36618,0,"s"],[36425,3,""],[36425,0,"s"],[36033,3,""],[36033,0,"s"],[36615,0,"p"],[36424,0,"p"],[36034,0,"p"],[36073,3,""],[36073,0,"Sp"],[36074,1,""],[36074,0,"P"],[38395,0,", as defined by the FugueMax paper (#"],[38431,1,""],[38431,0,"@fugu"],[38432,4,""],[38432,0,"fugue)"],[38422,1,""],[38421,1,""],[38420,1,""],[38408,3,""],[38408,0,"in "],[38782,3,""],[38804,0,"s"],[38769,5,""],[38776,0,"s"],[38814,47,""],[38814,0,"in all cases."],[39251,0,"We can imp"],[39260,1,""],[39259,1,""],[39258,1,""],[39258,0,"implmeen"],[39258,8,""],[39258,0,"implement this quite simply"],[39285,34,""],[39285,0," by "],[39289,7,""],[39294,1,""],[39294,0,"ing"],[39289,9,""],[39289,0,"modifying "],[39320,5,""],[39320,0,"This will first"],[39335,1,""],[39381,1,""],[39381,0,". All "],[39387,16,""],[39428,0," are discarded"],[39319,1,""],[39318,1,""],[39318,0,":\n\n"],[39321,9,""],[39321,0,"+"],[39323,1,""],[39323,0,"F"],[39437,12,""],[39436,1,""],[39436,0,"\n+ "],[39439,1,""],[39439,0,"T"],[39459,3,""],[39459,0,"added"],[39464,11,""],[39464,0," events"],[39459,6,""],[39465,0," added"],[39479,6,""],[39507,6,""],[39507,0,"operations"],[39480,0," in the usual way using the prepared state"],[39725,13,""],[39725,0,"transformAllEvents"],[39742,1,""],[39741,1,""],[39740,1,""],[39739,1,""],[39738,1,""],[39737,1,""],[39736,1,""],[39735,1,""],[39734,1,""],[39734,0,"Partial"],[39784,1,""],[39783,1,""],[39782,1,""],[39781,1,""],[39780,1,""],[39780,0,"Opeat"],[39769,16,""],[39769,0,"TransformedOperation"],[40259,1,""],[40201,1,""],[40257,1,""],[40200,1,""],[40255,1,""],[40199,1,""],[40253,1,""],[40198,1,""],[40251,1,""],[40197,1,""],[40250,0,"O"],[40197,0,"O"],[40252,0,"p"],[40198,0,"p"],[40254,0,"e"],[40199,0,"e"],[40242,14,""],[40242,0,"TransformedOperation"],[40186,14,""],[40186,0,"TransformedOperation"],[40311,4,""],[40311,0,"is still"],[40319,3,""],[40423,0," it"],[40426,3,""],[40482,0,"\n\nOne solution to this is"],[40484,23,""],[40484,0,"We can solve this by caching the state, however, "],[40532,1,""],[40531,1,""],[40531,0," a "],[40505,0,"locally "],[40542,0,"better solution exists"],[40540,24,""],[40540,0,"u"],[40540,1,""],[40540,0,"it t"],[40542,2,""],[40540,2,""],[40540,0,"u"],[40540,1,""],[40540,0,"a better solution exists: We "],[40501,0," in mut"],[40507,1,""],[40507,0,"ltiple ways. One approach is to"],[40538,3,""],[40533,2,""],[40533,0,"would be"],[40559,1,""],[40558,1,""],[40557,1,""],[40557,0,"e"],[40568,39,""],[40568,0,". However, this would preclude us from "],[40598,9,""],[40598,0," the system from ever pruning old events away. A better approach only "],[40663,5,""],[40663,0,"is to only generate the state back to the leat"],[40708,1,""],[40708,0,"st upper bound of versions $V_0$ and $_"],[40746,1,""],[40746,0,"V_m$. This approach is "],[40484,285,""],[40484,0,"We can solve this in multiple ways. One approach would be to locally cache the state. However, this would preclude the system from ever pruning old events away. A better approach is to only generate the state back to the least upper bound of versions $V_0$ and $V_m$. This approach is"],[40768,54,""],[40768,0," discussed in th"],[40783,1,""],[40782,1,""],[40781,1,""],[40781,0," []"],[40783,0,"SECTION X"],[40793,0," of the"],[40821,1,""],[40821,0,". Doing so"],[40839,1,""],[40838,1,""],[40837,1,""],[40837,0,"es"],[40929,1,""],[40822,107,""],[121,174,""],[121,0,"#align(center, text(17pt)[\n  *Eg-walker: Text editing on the Event Graph*\n])\n\n#grid(\n  columns: (1fr, 1fr),\n  align(center)[\n    Joseph Gentle \\\n    #link(\"mailto:me@josephg.com\")\n  ],\n\n  align(center)[\n    ?Martin Kleppmann? \\\n    #link(\"mailto:martin@kleppmann.com\")\n  ]\n)\n"],[395,1,""],[40445,0,":\n\n- "],[40450,2,""],[40450,0,"I"],[40522,7,""],[40522,0,"\n- I"],[40582,1,""],[40584,0,"We could solve this by "],[40607,61,""],[40619,1,""],[40619,0,"ing"],[40653,30,""],[40653,0," makin"],[40658,1,""],[40657,1,""],[40657,0,"e"],[40666,16,""],[40666,0," more difficult"],[38947,0," Naive"],[40386,0,"\n"],[40386,0,"\n== Optimized"],[40398,1,""],[40397,1,""],[40396,1,""],[40396,0,"sed Partial Traversal"],[40434,4,""],[40434,0,"the algorithm givne above"],[40454,5,""],[40454,0,"g"],[40448,7,""],[40448,0,"given above"],[40459,10,""],[40490,4,""],[40490,0,", as"],[40731,1,""],[40731,0,"\n\n"],[40732,0,"\n"],[40732,0,"\nFortunately, there is another viable approach.\n\nIf we carefully consider the algorithm above, nodes in the data structure are use"],[40859,3,""],[40859,0,"needed for 2 pru"],[40874,1,""],[40873,1,""],[40873,0,"urposes:\n\n+ "],[40883,2,""],[40883,0,"+ The prepare state "],[40885,18,""],[40885,0,"Y"],[40885,1,""],[40885,0,"t"],[40885,1,""],[40885,0,"Transforming positions from \"prepare\" positions"],[40913,19,""],[40912,1,""],[40912,0," original"],[40898,0,"event "],[40919,0,"\""],[40928,0," positions\" to "],[40919,24,""],[40898,6,""],[40898,0,"insert and delete "],[40926,5,""],[40926,0,"into their final"],[40926,16,""],[40926,0,"from the original offset "],[40931,4,""],[40947,0,"to final"],[40950,0,"th"],[40951,1,""],[40950,1,""],[40955,0," "],[40950,0,"their "],[40962,0,"f"],[40962,1,""],[40962,0,"offset\n+ "],[40969,2,""],[40969,0,"+"],[40968,0,". The data structure described above achieves this by toggling $"],[41031,1,""],[41031,0,"#sp on nodes in the tree "],[41038,18,""],[41038,0,"earlier nid"],[41048,1,""],[41047,1,""],[41047,0,"odes in the tree"],[41035,28,""],[41035,0,"on nodes in the tree to match the event's parent version"],[41021,0," correctly setting"],[41039,9,""],[41043,0," and $"],[41048,1,""],[41048,0,"#s"],[41049,1,""],[41049,0,"se"],[41108,0,", and the version of the transformed event "],[41145,6,""],[41145,0,"output."],[41154,0," When concurrent inserts happen in the same location in the document"],[41179,7,""],[41179,0,"land "],[41179,5,""],[41155,6,""],[41155,0,"C"],[41173,0," iun "],[41177,1,""],[41177,0," "],[41177,1,""],[41173,4,""],[41155,1,""],[41155,0,"When c"],[41178,0," hpap"],[41182,1,""],[41181,1,""],[41180,1,""],[41180,0,"appen"],[41185,1,""],[41185,0," "],[41155,6,""],[41155,0,"C"],[41155,0,"When "],[41160,1,""],[41160,0,"c"],[41222,0,", the _origin"],[41228,7,""],[41228,0,"_originLeft_ and _ori"],[41245,4,""],[41245,0,"_originRight_ fields are needed"],[41241,3,""],[41240,1,""],[41240,0,","],[41255,0," and _id "],[41263,1,""],[41263,0,"_"],[41259,5,""],[41259,0," _id_"],[41256,9,""],[41273,0," to correctly order "],[41159,11,""],[41159,0," users concurrently insert text at the same location in the document, the inserts must be ordered consistently "],[41269,1,""],[41269,0,", and free of interleaving, o"],[41297,1,""],[41297,0,"according to the rules of FugueMax. "],[41256,40,""],[41257,25,""],[41257,0,"using the logic of"],[41267,5,""],[41267,0,"orde"],[41270,1,""],[41269,1,""],[41268,1,""],[41267,1,""],[41266,1,""],[41265,1,""],[41264,1,""],[41263,1,""],[41262,1,""],[41262,3,""],[41271,0,"'s ordering rules"],[41202,0," final"],[41155,12,""],[41155,0,"C"],[41166,1,""],[41165,1,""],[41164,1,""],[41164,0,"t"],[41172,0,"s"],[41173,5,""],[41216,13,""],[41266,0,"Ti"],[41267,1,""],[41267,0,"his "],[41266,62,""],[41266,0,"This logic requires the"],[41317,0," and )_"],[41323,1,""],[41322,1,""],[41322,0,"_id_"],[41333,0," of concurrent inserts "],[41356,31,""],[41356,0,"to be set correctly."],[40778,1,""],[40778,0,": In the case of partial transform, we only need to recompute the "],[40746,35,""],[40746,0,"i"],[40810,0,"state"],[40810,0,"eg-walker "],[40825,0," from the _least upper bound_ of versions $_"],[40868,1,""],[40868,0,"V_9"],[40870,1,""],[40870,0,"0$ and $_"],[40878,1,""],[40878,0,"V_m$"],[40881,1,""],[40881,0,"$."],[40730,1,""],[40730,0," and "],[40703,0,"undermine many of the o"],[40725,1,""],[40725,0,"advantages of this approach: "],[40754,6,""],[40754,0,"P"],[40762,0,"would be "],[40790,0,"\"light\" clients woul dbe"],[40754,60,""],[40753,1,""],[40752,1,""],[40752,0,", "],[40753,1,""],[40752,1,""],[40752,0,", as this cached state would need to be held in memory on all peers."],[40807,0,"at all times "],[40792,14,""],[40792,0,"available"],[40842,0," the"],[40845,1,""],[40844,1,""],[40843,1,""],[40843,0,"there is another solution."],[40870,1,""],[40870,0,"I"],[40631,0,"\n== Optimised Partial Traversal"],[40387,31,""],[40600,0,"\n"],[40386,1,""],[40599,0,"\n```"],[40382,4,""],[40595,4,""],[40382,0,"```\n"],[40600,0,"\n"],[40829,0,"\n"],[40633,1,""],[40828,0,"\n== Optimised Partial Traversal"],[40602,31,""],[40797,0,"\n"],[40601,49,""],[40601,0,"Caching the state "],[40618,1,""],[40612,6,""],[40608,4,""],[40601,7,""],[40601,0,"We could solve this by locally caching the state"],[40601,48,""],[40601,0,"W"],[40601,1,""],[40601,0,"One approach would be to cache the state"],[40698,14,""],[40698,0," using an "],[40707,1,""],[40706,1,""],[40705,1,""],[40705,0,"the event graph directly"],[40737,1,""],[40736,1,""],[40736,0,"e"],[40767,0," made"],[40842,1,""],[40881,1,""],[40881,0,":"],[40916,0," t"],[40917,1,""],[40916,1,""],[40916,0," the algorithm"],[40930,3,""],[40940,0,"s"],[41032,0," The"],[41035,1,""],[41034,1,""],[41033,1,""],[41032,1,""],[41032,0," "],[41032,1,""],[41032,0,"\n\nThe reason this is "],[41050,3,""],[41050,0,"produces correct "],[41034,33,""],[41034,0,"The reason this produces correct"],[41032,0," I"],[41033,1,""],[41033,0,"In "],[41035,1,""],[41034,1,""],[41033,1,""],[41033,0,"The only modification needed to the algorithm"],[41033,45,""],[41032,1,""],[41032,0," When this is generated, the list n"],[41061,6,""],[41061,0,"tr"],[41062,1,""],[41061,1,""],[41061,0,"tree needs to be populated in a"],[41091,1,""],[41090,1,""],[41089,1,""],[41088,1,""],[41088,0,"wt"],[41089,1,""],[41089,0,"ith a "],[41094,1,""],[41094,0," list of "],[41032,71,""],[41059,7,""],[41034,25,""],[41034,0,"This modification has no impact on the final document ordering."],[41073,0,"resulting "],[41083,24,""],[41083,0,"output"],[41083,6,""],[41083,0,"output."],[41089,1,""],[41089,0,", but the reason is not obvious"],[41113,0,"a "],[41114,1,""],[41113,1,""],[41109,11,""],[41109,0,"quite complex."],[41109,14,""],[41109,0,"nonintuitive."],[41039,0,"algorithmic "],[39126,5,""],[39126,0,"wiushe"],[39131,1,""],[39130,1,""],[39129,1,""],[39128,1,""],[39128,0,"shes"],[39158,0,"either "],[39053,0," Consider a "],[39065,6,""],[39069,26,""],[39069,0," with a local"],[39114,0,". The peer "],[39125,5,""],[39152,31,""],[39158,0,"nother"],[39164,7,""],[39186,1,""],[39186,0,". To"],[39189,1,""],[39188,1,""],[39187,1,""],[39186,0,", to generate the document at version $floor($"],[39231,1,""],[39231,0,"V_0 union V_m)$"],[39248,1,""],[39248,0,"W"],[39248,21,""],[39248,0,"Our transform m"],[39262,1,""],[39262,0,"function needs to generate a"],[39333,78,""],[39289,0,"the "],[39292,1,""],[39291,1,""],[39290,1,""],[39289,1,""],[39289,0,"an "],[39291,1,""],[39290,1,""],[39289,1,""],[39289,0,"the"],[39292,1,""],[39324,11,""],[39247,77,""],[39247,0," T "],[39249,1,""],[39249,0,"o do this, "],[39259,1,""],[39247,12,""],[39186,1,""],[39186,0,". To do that, we need the list of transformed operations which will "],[39243,11,""],[39243,0,", when applied to"],[39243,1,""],[39243,0,"which may be"],[39255,5,""],[39266,0," a document at #$"],[39282,1,""],[39281,1,""],[39281,0,"#"],[39281,1,""],[39281,0,"$V_0$"],[39298,24,""],[39298,0," the document at"],[39338,0,"\n\n"],[39340,2,""],[40365,0,"// "],[40363,0,"// "],[40359,0,"// "],[40327,0,"// "],[40271,0,"// "],[40230,0,"// "],[40201,0,"// "],[40126,0,"// "],[40121,0,"// "],[40055,0,"// "],[40014,0,"// "],[39985,0,"// "],[39914,0,"// "],[39882,0,"// "],[39805,0,"// "],[39801,0,"// "],[39694,0,"// "],[39651,0,"// "],[40638,12,""],[40638,0,"We could a"],[40647,1,""],[40647,0,"solve these problems by"],[40670,12,""],[40675,1,""],[40675,0,"ing"],[40683,0,"docuemnt "],[40683,9,""],[40683,0,"eg-walker "],[40825,5,""],[40908,28,""],[40908,0,"t"],[40908,1,""],[40908,0,"i"],[41028,0," (LEB)"],[41033,1,""],[41032,1,""],[41031,1,""],[41031,0,"UB)"],[41063,0," The reason this works"],[41080,5,""],[41080,0,"produces the doc"],[41095,1,""],[41094,1,""],[41093,1,""],[41093,0,"correct output is far from ob"],[41110,12,""],[41110,0," bnot "],[41115,1,""],[41114,1,""],[41113,1,""],[41112,1,""],[41111,1,""],[41111,0,"not at all obvious."],[41130,102,""],[41249,18,""],[41249,0,"the "],[41261,1,""],[41261,0," of events"],[41277,0,"their "],[41341,16,""],[41712,0,"\n\nIn both cases "],[41727,1,""],[41722,0,"of these "],[41714,22,""],[41714,0,"Both of these cases only requires"],[41746,1,""],[41739,7,""],[41739,0,"matter "],[41714,0,"In each "],[41722,5,""],[41737,12,""],[41736,1,""],[41736,0,", "],[41714,24,""],[41714,0,"I"],[41714,1,""],[41714,0,"Each of these cases only matter when "],[41746,5,""],[41746,0,"in the case of concurrent "],[41746,26,""],[41746,0,"when concurrent edits are involved. "],[41781,1,""],[24251,0,", "],[24252,1,""],[24251,1,""],[24251,0,", though they "],[24260,5,""],[24260,0,"in pre"],[24265,1,""],[24265,0,"actice they can be "],[24277,7,""],[24276,1,""],[24275,1,""],[24275,0,"ir effect can be combined"],[24251,8,""],[24251,0," "],[24251,1,""],[24251,0,". In"],[24255,3,""],[24265,12,""],[24265,0,"the functions"],[24286,8,""],[24286,0,"b"],[24286,1,""],[24286,0,"b"],[24286,1,""],[24286,0,"combined as the messages"],[24302,0,"\"crdt "],[24303,5,""],[24303,0,"CRDT "],[24315,1,""],[24315,0,"\" itself its "],[24295,33,""],[24294,1,""],[24251,0,", though"],[24259,3,""],[24259,0," i"],[24292,9,""],[24292,0," l"],[24293,1,""],[24293,0,"blended"],[24251,49,""],[41782,0,"\n"],[41782,0,"\nThe ID of items is also used t "],[41813,1,""],[41813,0,"o "],[41783,32,""],[41783,0,"The ID of items is also used to communicate between the _preapare"],[41847,1,""],[41846,1,""],[41845,1,""],[41844,1,""],[41843,1,""],[41843,0,"pare_ and _effect "],[41860,1,""],[41860,0,"_ functions"],[41838,0," CRDT's"],[41878,0,", "],[41879,1,""],[41878,1,""],[41826,0," positions"],[41836,8,""],[41836,0," from"],[41863,3,""],[41863,0,"to its"],[41887,1,""],[41887,0,". However, "],[41783,115,""],[41783,0,"The ID of items is also used to communicate positions from the CRDT's _prepare_ to its _effect_ function. However,"],[41781,0,"\n\n\n\n"],[41221,1,""],[41221,0,"3"],[41712,0,"\n+ Messaging between the CRDT's "],[41713,31,""],[41713,0,"+ Messaging between the CRDT's _prepare_ to its _effect_"],[41754,6,""],[41754,0,"and"],[41766,0," fyc"],[41769,1,""],[41768,1,""],[41768,0,"unctions"],[41724,0," positions"],[41786,0,". However, the IDs themselves "],[41713,103,""],[41712,1,""],[41711,1,""],[41711,0,".\n"],[41712,1,""],[41781,0,"\n\n+ Messaging positions between the CRDT's _prepare_ and _effect_ functions. However, the IDs themselves "],[41783,103,""],[41783,0,"Messaging positions between the CRDT's _prepare_ and _effect_ functions. However, the IDs themselves"],[41221,1,""],[41221,0,"3"],[41221,1,""],[41221,0,"2"],[41783,0,"The ID is also used to "],[41806,9,""],[41806,0,"communicate insert"],[41818,6,""],[41818,0,"positions"],[41827,10,""],[41908,0," are"],[41909,3,""],[41890,19,""],[41890,0,"so long as the IDs themsevles"],[41909,10,""],[41909,0,"themes"],[41914,1,""],[41913,1,""],[41913,0,"selves are globally unique, it doesn't matter what they contain."],[41959,9,""],[41888,81,""],[41888,0,", for this use case we only require that the IDs are unique."],[41899,4,""],[41783,162,""],[41712,0,"\n+ The ID is also used to communicate positions between the CRDT's _prepare_ and _effect_ functions. However, for this case we only require that the IDs are unique.\n"],[41715,24,""],[41715,0,"C"],[41725,1,""],[41725,0,"ing"],[41791,1,""],[41791,0,"\n\n\n"],[41221,1,""],[41221,0,"3"],[41927,0,"\n"],[41859,1,""],[41926,0,"\n"],[41858,1,""],[41925,0,"\nHowever, for this case we only require that the IDs are unique."],[41794,64,""],[41861,0,"\n"],[41793,1,""],[41793,0,"Cases ! a"],[41801,1,""],[41800,1,""],[41799,1,""],[41799,0,"1 and 2 only "],[41812,25,""],[41819,4,""],[41819,0,"in the case of"],[41850,14,""],[41850,0,"."],[41852,1,""],[41851,1,""],[41851,0," And case 3 only requires that"],[41881,48,""],[41881,0," document "],[41882,8,""],[41882,0,"node"],[41901,1,""],[41901,0," - not the"],[41901,10,""],[41901,0,"."],[41712,0," (The ID "],[41720,1,""],[41719,1,""],[41718,1,""],[41717,1,""],[41717,0," _id_ is "],[41712,14,""],[41714,0," CRDT messages (generated by"],[41742,33,""],[41742,0," "],[41763,0," function and con"],[41728,0," produce an"],[41729,10,""],[41729,0,"use the ID of items"],[41743,5,""],[41743,0,"nodes"],[41733,15,""],[41733,0,"node IDs to communicae "],[41755,1,""],[41754,1,""],[41754,0,"te "],[41745,12,""],[41745,0,"pass position information from the"],[41779,26,""],[41788,21,""],[41788,0," to the"],[41779,0," "],[41814,1,""],[41876,5,""],[41876,0,"C"],[41921,1,""],[41921,0," "],[41921,1,""],[41921,0,", no th"],[41927,1,""],[41926,1,""],[41925,1,""],[41925,0,"t tha"],[41921,9,""],[41921,0,"."],[41915,0,"locally "],[41937,116,""],[41931,0,"\n"],[9264,0,"// "],[9336,0,"\n\n\nThe causal graph for real world editing traces usually contain many _critical versions_. A critical version $C$ is a version which separates all events in the event graph $G$ into two disjoint subsets $ceil(C)$ and $T = G - ceil(C)$ such that all events in $ceil(C)$ _happened-before_ all events in $T$. Ie, $forall i in T, j in ceil(C), i <- j$.\n"],[9338,1,""],[9337,0,"\n"],[9337,0,"\nWe also "],[9338,8,""],[9338,0,"A _critical version_ in "],[9361,1,""],[9360,1,""],[9359,1,""],[9338,21,""],[9338,0,"A _critical version_"],[9358,110,""],[9358,0," "],[9366,1,""],[9366,0,"any "],[9369,1,""],[9363,0,"in $G$ "],[9366,0,"event graph "],[9337,0,"\n"],[9337,0,"\nEvent graphs "],[9338,13,""],[9338,0,"=== Critical Versions"],[7737,20,""],[7737,0,"Versions: "],[7746,1,""],[7745,1,""],[9348,0,"\n\n"],[9349,2,""],[9348,0,"\n"],[9348,0,"\nGraphs "],[9349,7,""],[9349,0,"Event graphs often contain moments in wim"],[9389,1,""],[9388,1,""],[9387,1,""],[9387,0,"time which "],[9392,6,""],[9392,0,"at which all peers are syncronized "],[9426,1,""],[9425,1,""],[9424,1,""],[9423,1,""],[9423,0,"sed "],[9426,1,""],[9426,0,". "],[9410,18,""],[9410,0," syncronise "],[9421,1,""],[9421,0,"."],[9415,0,"h"],[9411,0,"are "],[9426,1,""],[9426,0,"d. All changes "],[9433,8,""],[9433,0,"events "],[9429,11,""],[9429,0,"The "],[9432,1,""],[9432,0,"se moments cleanly "],[9443,8,""],[9429,14,""],[9428,1,""],[9428,0," All events in the graph are "],[9453,4,""],[9453,0,"can be subdivided into two subgra"],[9485,1,""],[9484,1,""],[9483,1,""],[9482,1,""],[9481,1,""],[9480,1,""],[9459,0," cleanly"],[9428,0," All events after "],[9376,0,"_critical versions_ - which are "],[9349,189,""],[9349,0,"Event graphs often contain _critical versions_ - which are moments in time at which all peers are synchronised. All events after  All events in the graph can be cleanly subdivided into two"],[9348,0,"\n"],[9348,0,"\nWe dewfine "],[9352,8,""],[9352,0,"define _critical versions_ as moments in time at which all peers temporarily synr"],[9432,1,""],[9432,0,"cronize "],[9439,1,""],[9438,1,""],[9437,1,""],[9437,0,"s"],[9433,0,"h"],[9439,0,"e"],[9390,50,""],[9382,8,""],[9382,0,"versions which cleanly sub"],[9405,3,""],[9397,8,""],[9397,0,"cut teh "],[9404,1,""],[9403,1,""],[9402,1,""],[9402,0,"he event graph in 2"],[9420,1,""],[9419,1,""],[9419,0,"to 2 distinct subsets. Intuitively, these moments are created whenever all peers syncr"],[9504,1,""],[9504,0,"hronize "],[9511,1,""],[9510,1,""],[9509,1,""],[9509,0,"se their state, before future edits "],[9532,13,""],[9532,0,"more edits "],[9537,0,"concurrent "],[9554,0,"are created. All events before the critical verion"],[9603,1,""],[9602,1,""],[9601,1,""],[9601,0,"sion happen before all events av"],[9632,1,""],[9632,0,"fter the critical version.\n\nFormally, "],[9660,10,""],[9660,0,"Formally,"],[9669,193,""],[9669,0," a"],[9717,3,""],[9717,0,"a"],[9671,0," version $C$ is a"],[9683,0," in event graph $C"],[9700,1,""],[9700,0,"G$"],[9726,53,""],[9726,0," "],[9727,38,""],[9727,0,"if it"],[9729,3,""],[9727,2,""],[9727,0,"all events in the event graph $G$ into"],[9726,1,""],[9726,0," $C$ in event graph $G$ is a version which separates "],[9726,53,""],[9726,0," "],[9727,38,""],[9727,0,"if itseparates "],[9732,0," "],[9743,0,"all events in $G$ into"],[9523,135,""],[9523,0,". "],[9524,1,""],[9524,0," A"],[9525,1,""],[9524,1,""],[9524,0," From the perspective of a critical version "],[9567,1,""],[9567,0,", all events "],[9569,11,""],[9569,0,"events are totally"],[9576,11,""],[9576,0,"have a total order: "],[9525,0,"//"],[9349,249,""],[9349,0,"We define _critical versions_ as versions which cut the event graph into 2 distinct subsets. Intuitively, these moments are created whenever all peers synchronise their state. //From the perspective of a critical version, events have a total order:"],[9608,0," we say"],[9854,1,""],[9854,0,":"],[9854,1,""],[9854,0,","],[9868,1,""],[9868,0,":"],[9878,0,"\n\nThe root "],[9888,1,""],[9887,1,""],[9886,1,""],[9885,1,""],[9884,1,""],[9884,0,"\"root\" version $$"],[9900,0,"emp"],[9900,3,""],[9900,0,"emptyset"],[9884,6,""],[9884,0,"starting"],[9884,8,""],[9884,0,"emt"],[9886,1,""],[9886,0,"py"],[9887,1,""],[9887,0,"ty"],[9908,0," is a critical version in all even"],[9931,11,""],[9931,0,"for "],[9880,55,""],[9880,0,"The empty version $emptyset$ is a critical version for"],[9878,0," Note that "],[9878,1,""],[9878,0,"\n\n"],[9890,0,"a version might stop"],[9880,11,""],[9880,0,"A"],[9880,20,""],[9879,1,""],[9878,1,""],[9878,0,"\n\nCritical versions are easy to spot in the"],[9918,3,""],[9918,0,"a rendered graph, because "],[9880,64,""],[9880,0,"Critical versions are easy to spot in a rendered graph, because"],[9915,28,""],[9915,0,"visia"],[9919,1,""],[9918,1,""],[9917,1,""],[9917,0,"sually in graphs, because they "],[9880,68,""],[9879,1,""],[9878,1,""],[9878,0,"\n\n> DIAGRAM SHOWING SOME CRITICAL VERSIONS"],[9973,3,""],[9973,0,"in all event graphs."],[9879,0,"\n"],[9879,0,"\nNote taht "],[9889,1,""],[9888,1,""],[9887,1,""],[9886,1,""],[9886,0,"hat something might be a critical version in "],[9889,0," a version may be"],[9906,21,""],[9916,11,""],[9880,0,"// "],[9880,39,""],[9880,0,"// Note that a version may be critical"],[10033,0," And the "],[10038,4,""],[10038,0,"a "],[10039,1,""],[10039,0,"n event graph's current version $G"],[10072,1,""],[10072,0,"ceil(V)$ is also "],[10088,1,""],[10087,1,""],[10086,1,""],[10085,1,""],[10084,1,""],[10084,0,"also always a c"],[10084,15,""],[10032,0,", splitting th"],[10045,1,""],[10044,1,""],[10044,0,"$G$ into $empt"],[10054,4,""],[10054,0,"emptyset$ and $G$"],[10053,0,"("],[10053,1,""],[10054,0,"()"],[10055,1,""],[10063,7,""],[10063,0,", "],[10066,0,")"],[10070,36,""],[10070,0,"And"],[10087,0,"also always a critical version, splitting the graph into $$"],[10145,0,"()"],[10146,0,"G, empt"],[10149,4,""],[10149,0,"emptyset"],[10043,0," any graph"],[9401,3,""],[9401,0,"an"],[9438,1,""],[9438,0,"s of s"],[9443,1,""],[9443,0,"events: the events before the "],[9376,1,""],[9376,0,"s"],[9381,0," any"],[9385,9,""],[9385,0," version #"],[9394,1,""],[9394,0,"$V$"],[9407,0,"s"],[9397,0," in event graph $G$"],[9428,8,""],[9428,0,"$G$"],[9431,6,""],[9485,4,""],[9485,0,"$G$"],[9487,1,""],[9486,1,""],[9486,0,"V$ and the events after $G$"],[9512,1,""],[9511,1,""],[9511,0,"V$"],[9515,0,"//"],[9702,1,""],[9702,0,"V"],[9514,158,""],[9009,0,"With "],[9009,5,""],[9009,0,"Using this definition of versions, we can properly define "],[9067,3,""],[9067,0,"the"],[9106,3,""],[9106,0," a"],[9044,23,""],[9548,0," Critical versions are obvious in the "],[9579,7,""],[9579,0,"visually - they"],[9590,4,""],[9590,0,"they are any version"],[9587,0," when looking at a graph"],[9634,0," which "],[9549,92,""],[9549,0,"After "],[9549,6,""],[9549,0,"We can intu"],[9559,1,""],[9558,1,""],[9558,0,"tuitively think of them as moments of syncronizat"],[9606,1,""],[9605,1,""],[9604,1,""],[9604,0,"sation between peers."],[9600,0,"h"],[9593,33,""],[9593,0,"at s"],[9596,1,""],[9596,0,"which all peers came into "],[9612,10,""],[9612,0,"syncroni"],[9619,1,""],[9618,1,""],[9617,1,""],[9616,1,""],[9616,0,"hronised."],[9624,1,""],[9624,0," on a do"],[9625,7,""],[9624,1,""],[9624,0," their changes, "],[9639,1,""],[9638,1,""],[9638,0,". Af"],[9641,1,""],[9640,1,""],[9639,1,""],[9639,0," All changes"],[9644,7,""],[9644,0,"events"],[9631,7,""],[9625,6,""],[9624,1,""],[9636,0," after a critical version "],[9626,36,""],[9625,1,""],[9767,1,""],[9767,0,"V"],[9762,0,"("],[9770,0,", T)"],[9776,3,""],[9776,0,"where"],[9796,1,""],[9796,0,"V"],[9830,1,""],[9830,0,"V"],[9871,0,"// "],[9870,0," Ie, $forall i in T, j in ceil(C): i <- j$."],[9891,14,""],[9890,1,""],[9889,1,""],[9889,0,": "],[9896,1,""],[9896,0,"V"],[9889,0,", exists v in V"],[9911,1,""],[9911,0,"v"],[9911,1,""],[9910,1,""],[9909,1,""],[9908,1,""],[9907,1,""],[9906,1,""],[9906,0,"v <- i"],[9891,21,""],[9891,0,"V ,"],[9893,1,""],[9893,0,"<- i"],[9762,1,""],[9769,0,"$ and "],[9775,2,""],[9775,0,"$"],[9777,1,""],[9778,0," "],[9778,1,""],[9874,32,""],[9999,0,"\nAll event graphs $G$ ja"],[10022,1,""],[10021,1,""],[10021,0,"have $empt"],[10027,4,""],[10027,0,"emptyset$ and $ceail"],[10046,1,""],[10045,1,""],[10044,1,""],[10043,1,""],[10043,0,"eil(V)$ as "],[10053,1,""],[10052,1,""],[10051,1,""],[10050,1,""],[10000,16,""],[10000,0,"In all event graps"],[10017,1,""],[10017,0,"hs"],[10023,5,""],[10023,0,","],[10049,0," are both critical versions."],[10076,1,""],[10076,0," "],[10000,77,""],[10000,0,"In all event graphs $G$, $emptyset$ and $ceil(V)$ are both critical versions"],[10076,73,""],[10076,0," "],[10086,11,""],[10086,0," "],[10111,75,""],[10111,0," and"],[10131,0," respectively."],[10046,1,""],[10046,0,"G"],[10000,4,""],[10000,0,"A"],[10016,0," h"],[10017,1,""],[10016,1,""],[10020,1,""],[10020,0," have both"],[10055,9,""],[10055,0," as"],[10016,4,""],[10021,5,""],[10021,0," both"],[10072,0,". They"],[10087,1,""],[10086,1,""],[10085,1,""],[10084,1,""],[10084,0," event graph"],[10085,12,""],[9904,1,""],[9904,0,"V"],[9896,10,""],[9890,0,"in ceil(V)"],[9890,10,""],[9888,2,""],[9888,0,"in ceil(V), "],[9900,4,""],[9899,0," j in G - ceil(V):"],[9917,4,""],[9916,0,")"],[9905,0,"("],[9905,13,""],[9905,0,"T"],[9916,0,"\n\nA critical "],[9920,9,""],[9920,0,"version is only a _"],[9938,1,""],[9938,0,"c"],[9938,1,""],[9937,1,""],[9937,0," critical version in the context of some even"],[9981,1,""],[9978,3,""],[9973,5,""],[9973,0,"a specific set of events. If $G$"],[10004,1,""],[10003,1,""],[10003,0,"V$ is critical in $G$, it may not be critical in version $G"],[10061,1,""],[10061,0,"G union {i}$ "],[10073,1,""],[10073,0,"."],[10052,8,""],[10052,0," ege"],[10055,1,""],[10054,1,""],[10053,1,""],[10052,1,""],[10052,0,"event graph "],[9984,13,""],[9984,0,"event graph"],[10304,0,"\n"],[10304,0,"\n"],[10304,1,""],[10304,0,"=="],[10305,1,""],[10304,1,""],[10304,0,"\n\n---"],[10308,1,""],[10307,1,""],[10306,1,""],[10306,0,"=== Common version"],[10318,6,""],[10318,0,"#\n"],[10319,1,""],[10318,1,""],[10318,0,"ersion\n\nIts com"],[10330,3,""],[10326,4,""],[10326,0,"M"],[10326,1,""],[10305,0,"\n"],[10305,0,"\nT"],[10306,1,""],[10306,0,"Given 2 versions $V$"],[10325,1,""],[10325,0,"_0$, $V_1)"],[10334,1,""],[10334,0,"$"],[10326,1,""],[10326,0,"1"],[10333,1,""],[10333,0,"2"],[10335,0,", we define the _comon"],[10356,1,""],[10355,1,""],[10355,0,"mon version_ $C(V_1, V_2)$ as the "],[10306,83,""],[10306,0,"Given 2 versions $V_1$, $V_2$, we define the _common version_ $C(V_1, V_2)$ as the version"],[10389,7,""],[10389,0,"largest version which "],[10396,15,""],[10396,0," version which "],[10396,0," "],[10389,0,"version f"],[10397,1,""],[10397,0,"of the "],[10411,16,""],[10411,0," graph "],[10389,29,""],[10389,0,"largest critical version "],[10380,0," = V_1 intersect V_2"],[10387,9,""],[10387,0,"int"],[10387,3,""],[10387,0,"set"],[10387,3,""],[10387,0,"union.minus"],[10393,5,""],[10392,1,""],[10392,0,".or"],[10393,2,""],[10392,1,""],[10392,0,".sq"],[10369,14,""],[10373,5,""],[10373,0,"sect"],[10401,17,""],[10401,0,"cr"],[10393,10,""],[10393,0,"critical version"],[10352,0,"greatest "],[10378,0,"C = "],[10335,1,""],[10335,0,"., "],[10337,1,""],[10336,1,""],[10336,0," "],[10336,1,""],[10335,1,""],[10335,0,". "],[10336,1,""],[10335,1,""],[10335,0," and the "],[10336,8,""],[10336,0,"in the event graph "],[10335,20,""],[10335,0,", and the event graph describing all eve"],[10368,7,""],[10357,11,""],[10357,0,"containing all events in both versions "],[10357,0,"$$"],[10358,1,""],[10358,0,"G$ "],[10386,4,""],[10386,0,"i"],[10386,1,""],[10386,0,"either"],[10400,1,""],[10400,0,": $G = ceil(V_1) in"],[10418,1,""],[10417,1,""],[10417,0,"union cil"],[10425,1,""],[10424,1,""],[10424,0,"eil(V_2)#."],[10433,1,""],[10432,1,""],[10432,0,"$."],[10434,1,""],[10434,0," There are "],[10441,4,""],[10435,6,""],[10435,0,"We define the _comm"],[10445,9,""],[10445,0,"a _common version_"],[10437,29,""],[10497,23,""],[10497,0,"on $G$ such that:\n\n- C is a critical version\n"],[10515,0,"\n- C"],[10518,1,""],[10518,0,"All events $i in ceil(C)$ re"],[10545,1,""],[10544,1,""],[10544,0,"are contained within both versions "],[10570,9,""],[10570,0,"$ceil(v"],[10576,1,""],[10576,0,"V"],[10528,49,""],[10528,0," in $C$ are in $V$"],[10545,1,""],[10545,0,"_1$ and $V_2$. Ie, $$"],[10565,0,"forall i in C, "],[10579,1,""],[10578,1,""],[10578,0,": C "],[10581,1,""],[10580,1,""],[10580,0,"i sub"],[10582,3,""],[10582,0,"subset ceil(V_1) and "],[10582,6,""],[10582,0,"in"],[10599,0,"i in ceil(V_2)"],[10542,0," bioth"],[10547,1,""],[10546,1,""],[10545,1,""],[10544,1,""],[10544,0,"oth"],[10645,0,"_"],[10629,0,"_"],[10627,1,""],[10627,0,"the"],[10649,0," containing "],[10620,41,""],[10620,0,"- C is the _critical version_ containing"],[10304,0,"\n"],[9917,160,""],[9999,0,"\nA version is only a critical version in the context of a specific event graph. If $V$ is critical in $G$, it may not be critical in event graph $G union {i}$.\n"],[9999,0,"\nSome notes about critical versions:\n"],[10004,6,""],[10004,0," observations"],[10044,0,"- "],[10205,1,""],[10205,0,"- "],[10350,0,"\n- All critical versions in #G#"],[10380,1,""],[10379,1,""],[10378,1,""],[10378,0,"$G$ are fully ordered."],[10378,0,"event graph "],[10398,0,"thsemvesl "],[10398,10,""],[10398,0,"themselves "],[10398,11,""],[10398,0,"thsemve"],[10404,1,""],[10403,1,""],[10402,1,""],[10401,1,""],[10400,1,""],[10400,0,"emselves "],[9457,4,""],[9457,0,"parti"],[9457,5,""],[9457,0,"cuts"],[9457,4,""],[9457,0,"partitions"],[10359,5,""],[10359,0,"C"],[10377,19,""],[10380,11,""],[10377,0,"in an event grapph"],[10394,1,""],[10393,1,""],[10393,0,"h "],[10359,0,"All "],[10363,1,""],[10363,0,"c"],[10418,1,""],[10417,1,""],[10359,5,""],[10359,0,"C"],[10382,0,"y given"],[10359,0,"all "],[10359,4,""],[10359,0,"All "],[10363,1,""],[10363,0,"c"],[10383,4,""],[10383,0," an"],[10386,6,""],[10359,0,"By their nature, "],[10376,1,""],[10376,0,"c"],[10376,1,""],[10376,0,"A"],[10376,1,""],[10376,0,"a"],[10435,0,"\n=== Cr"],[10441,1,""],[10440,1,""],[10440,0,"Greatest common versions\n"],[10561,1,""],[10560,1,""],[10560,0," ("],[10593,0,")"],[10593,1,""],[10560,2,""],[10560,0,": "],[10466,5,""],[10466,0,"Consider"],[10795,0,"greatest "],[10822,10,""],[10804,9,""],[10783,30,""],[10783,0,"- C is the _greatest version_"],[9583,4,""],[9583,0,"crui"],[9586,1,""],[9585,1,""],[9585,0,"itical versions"],[9624,0," editing"],[10234,27,""],[10258,0," are always"],[10269,3,""],[10287,0," in event graph $G$"],[10441,0,"themsl"],[10446,1,""],[10446,0,"elves "],[10441,11,""],[10455,0," If $V_1$ a"],[10465,1,""],[10464,1,""],[10463,1,""],[10463,0," || $V_2"],[10470,1,""],[10469,1,""],[10468,1,""],[10467,1,""],[10467,0,"V_2$"],[9169,0,"\n\nWe can extend the _hapepen"],[9196,1,""],[9195,1,""],[9194,1,""],[9193,1,""],[9193,0,"pened-before_ relationship to versions. "],[9232,1,""],[9231,1,""],[9231,0," e"],[9232,1,""],[9232,0,"and events. $i hapepne"],[9253,1,""],[9252,1,""],[9251,1,""],[9250,1,""],[9249,1,""],[9248,1,""],[9247,1,""],[9246,1,""],[9245,1,""],[9245,0,"i$ "],[9247,1,""],[9246,1,""],[9246,0," <- V$"],[9219,0," $-"],[9221,1,""],[9221,0,"<-$)"],[9220,0,"("],[9225,1,""],[9220,1,""],[9221,1,""],[9222,0,">"],[9252,1,""],[9253,0,">"],[9257,0," iff "],[9256,0," \"iff\""],[9257,5,""],[9256,1,""],[9262,0,"$$"],[9263,0,"i subset ceil(V)"],[9280,0,"."],[9271,0,"."],[9271,1,""],[9265,6,""],[9265,0,"in"],[9248,0," Event $I"],[9256,1,""],[9256,0,"i$ happened before version $V$ if $i4"],[9292,1,""],[9292,0,"$ is contain"],[9297,7,""],[9297,0,"within the event grea"],[9317,1,""],[9316,1,""],[9316,0,"ap "],[9318,1,""],[9318,0,"h described by $V$. Ie, "],[9341,1,""],[9370,0," Likewise, given two version s "],[9400,1,""],[9399,1,""],[9398,1,""],[9398,0,"s $V_1$ and $V-"],[9412,1,""],[9412,0,"_2$, $V_1 -> V_2$ iff $$"],[9435,0,"forall i in V_1: i -> V2"],[9458,0,"_"],[9248,1,""],[9247,1,""],[9247,0,":\n\n- "],[9373,1,""],[9373,0,"\n- "],[9376,11,""],[9376,0,"G"],[9438,0,"_1"],[9450,0,"_1"],[9460,0,".\n- Versions are concurrent if "],[9462,29,""],[9462,0,"- Versions are concurrent if"],[9473,0,"$V_1$ and $V_2$ "],[9505,1,""],[9504,1,""],[9504,0,"(written $$"],[9514,0,"V_1 || V_2"],[9525,0," iff "],[9525,0,")"],[9531,0,"$$"],[9532,0,"V_1 ->.not V_2"],[9541,1,""],[9540,1,""],[9539,1,""],[9538,1,""],[9537,0,"/"],[9537,1,""],[9536,0,"!"],[9536,1,""],[9537,1,""],[9536,1,""],[9536,0,"arrow.r.not"],[9551,0," and V_1 arrow.r.not V_2"],[9558,1,""],[9558,0,"1"],[9558,1,""],[9558,0,"2"],[9574,1,""],[9574,0,"1"],[9576,0,". This happens when $$"],[9597,0,"exists i_1 in V_1, i_2 in V_2: "],[9444,0,"ceil("],[9452,0,")"],[9629,0,"c"],[9617,0,"c"],[9631,0,"e"],[9618,0,"e"],[9633,0,"i"],[9619,0,"i"],[9635,0,"l"],[9620,0,"l"],[9637,0,"("],[9621,0,"("],[9642,0,")"],[9625,0,")"],[9583,64,""],[9468,0,"// "],[10880,4,""],[10880,0,"$ $"],[10882,0,"and "],[10891,0," are critical versions in $G$, $V_1 -> V_2$ or $V_2 -> V_1$.\n\nThe greatest c"],[10953,14,""],[10952,1,""],[10951,1,""],[8223,0," like"],[8246,0,". It decribes the p"],[8251,14,""],[8251,0,"describes the point in time at which a replica knows about the exa"],[8314,3,""],[8313,1,""],[8298,15,""],[8298,0,"only knows about the set of events in $G$."],[8340,55,""],[8223,7,""],[8223,0," a"],[8241,4,""],[8241,0,","],[8251,1,""],[8250,1,""],[8250,0,"ing"],[8290,5,""],[8306,0," exact"],[8969,28,""],[8969,0,"se functions"],[9066,0,"we de"],[9070,1,""],[9069,1,""],[9069,0,"can redefine "],[9123,0,"s"],[9172,0,"event "],[9216,15,""],[9216,0,"T"],[9255,0," can be extended"],[9283,11,""],[9283,0," and events"],[9317,1,""],[9317,0,"-"],[9324,0,"_"],[9309,0,"_"],[11297,0," //"],[11297,0," ##"],[11299,1,""],[11298,1,""],[11298,0,"$$"],[11299,0,"C subset V_1"],[11307,0,".eq"],[11314,0," and C subset.eq V_2"],[9461,0,"//"],[9462,1,""],[9461,1,""],[9478,0,"//"],[9478,0,"$$ "],[9479,0,"ceil(V_1) sube"],[9492,1,""],[9492,0,"set."],[9495,1,""],[9495,0," ceil(V_2)"],[9506,0,"."],[9506,1,""],[9506,0," (Or, equivalently,"],[9525,3,""],[9525,0," "],[9563,0,")"],[9527,0,"V_1 != V_2 and "],[9913,9,""],[9913,0,"A"],[9916,1,""],[9916,0,"c"],[9932,1,""],[9934,2,""],[9934,0,"is"],[9506,0,".//"],[10814,0," any"],[11032,0," either"],[11007,0,"distinct "],[11413,0,"."],[11468,0,"\n- C is a critical version"],[11506,18,""],[11506,0,"\"largest\" version meeting the above"],[11536,5,""],[11536,0,"aforementioned criteria. "],[11560,1,""],[11507,7,""],[11507,0,"greatest"],[11561,0," ("],[11562,1,""],[11561,1,""],[11561,0,"\n\nBecause critical versions are fully ordered, there is always "],[11563,61,""],[11563,0,"Because critical versions are fully ordered, there is always"],[11562,0,"\n"],[11562,0,"\nBecause the empty set $empt"],[11586,4,""],[11586,0,"emptyset$ is always a criticall "],[11617,1,""],[11616,1,""],[11616,0," version"],[11599,7,""],[11617,0," in every event graph, the greatest c"],[11653,1,""],[11653,0,"common version si"],[11669,1,""],[11668,1,""],[11668,0,"is "],[11668,3,""],[11668,0,"always exists."],[11684,0,"And "],[11688,1,""],[11688,0,"b"],[11561,0," (Where greatest means the version containingth"],[11607,1,""],[11606,1,""],[11606,0," the largest possible gre"],[11630,1,""],[11629,1,""],[11628,1,""],[11628,0,"set of events)."],[11644,0,"\n"],[11644,0,"\nThe greatest common version is always "],[11673,10,""],[11673,0,"always"],[11673,6,""],[11673,0,"is al"],[11677,1,""],[11676,1,""],[11675,1,""],[11674,1,""],[11673,1,""],[11673,0,"always exists  f"],[11688,1,""],[11687,1,""],[11686,1,""],[11686,0,"f"],[11686,1,""],[11686,0," for any two versions, an"],[11710,1,""],[11709,1,""],[11686,0,", and is always well defined "],[11714,1,""],[11736,1,""],[11736,0," "],[11736,1,""],[11735,1,""],[11735,0," because:"],[11745,0,"\n- "],[11746,2,""],[11746,0,"-"],[11747,10,""],[11747,0," T"],[11815,44,""],[11815,0,"\n"],[10758,0,"The se"],[10763,1,""],[10762,1,""],[10762,0,"empty set "],[11830,0,"- "],[11832,7,""],[11832,0,"B"],[11508,0," (defined above)"],[11591,82,""],[11591,0," (Where greatest means the version containing the largest possible set of events)."],[11591,82,""],[11591,0," (IF "],[11595,1,""],[11594,1,""],[11594,0,"f #"],[11596,1,""],[11596,0,"$$"],[11597,0,"C_1 a"],[11601,1,""],[11600,1,""],[11601,0," and $C_2$ both meet the above "],[11596,0,"versions "],[11641,0,"ac"],[11642,1,""],[11641,1,""],[11641,0,"criteria, and $C_1 -> C_2)"],[11666,1,""],[11666,0,"$, the "],[11672,1,""],[11671,1,""],[11670,1,""],[11669,1,""],[11669,0,"$C_2$ is chosen)."],[11684,0,"as t"],[11687,1,""],[11686,1,""],[11685,1,""],[11684,1,""],[11684,0," as the greatest common version"],[11892,9,""],[11892,0,"C"],[11927,17,""],[11927,0," by $$"],[11932,0,"->"],[11935,0,"."],[11935,1,""],[11935,0,"."],[10996,0," "],[10996,1,""],[10996,0," by $$"],[11001,0,"->"],[11945,22,""],[11945,0,"\n> DIAGRAMS"],[43603,4,""],[43613,0,"'s"],[43632,24,""],[43632,0,"greatest common version_"],[11130,0," <c"],[11132,1,""],[11132,0,"gcv>"],[43691,0," ("],[43692,1,""],[43692,0,"(The great"],[43701,1,""],[43700,1,""],[43699,1,""],[43698,1,""],[43697,1,""],[43696,1,""],[43695,1,""],[43694,1,""],[43693,1,""],[43693,0,"As described in s"],[43709,1,""],[43708,1,""],[43708,0," @gcv$"],[43713,1,""],[43713,0,")."],[43715,1,""],[43715,0,"\n\n"],[43727,0," computing"],[43728,9,""],[43728,0,"we only need the state from "],[43666,0,"the merged "],[43704,2,""],[43704,0,"Greated"],[43710,1,""],[43710,0,"s t"],[43712,1,""],[43711,1,""],[43711,0,"t common version is"],[43741,0," "],[43741,1,""],[43741,0,"above "],[43731,10,""],[43731,0,"defined "],[43795,0,"$C = V_1 sect.sq V_2$"],[43796,4,""],[43798,1,""],[43798,0,"0"],[43810,1,""],[43810,0,"m"],[43795,17,""],[43663,0,"$V_0 sect.sq V_m$ "],[43798,0,"to compute "],[43664,0,"C = "],[43828,0,"C rath"],[43833,1,""],[43832,1,""],[43831,1,""],[43830,1,""],[43829,1,""],[43776,0," All changes"],[43781,7,""],[43781,0,"edits before $C$ "],[43781,6,""],[43781,0,"events "],[43799,0,"are irreleva"],[43810,1,""],[43810,0,"ent "],[43813,1,""],[43803,10,""],[43803,0,"r"],[43803,1,""],[43803,0,"irrelevant when "],[43814,5,""],[43813,1,""],[43813,0," for the purpose of trans"],[43833,5,""],[43813,20,""],[43813,0,"."],[43688,11,""],[43688,0,"merged "],[43688,0,"the "],[43688,4,""],[43663,57,""],[43663,0,"of the merged versions."],[43756,0," the greatest common version"],[43784,4,""],[43799,0," "],[43799,1,""],[43800,0,"\n\n$C = V_0 sect.sq V_m$ of merged versions $V_0$ and $V_m$."],[43843,15,""],[43801,0,"\n"],[43801,0,"\n$V_0$ and $V_m$"],[43802,0,"Given we're "],[43813,1,""],[43812,1,""],[43811,1,""],[43810,1,""],[43810,0," wean"],[43814,1,""],[43813,1,""],[43813,0,"a"],[43813,1,""],[43812,1,""],[43812,0,"ant to merge versions "],[43849,0,", we can first compute"],[43802,0,"Ie, "],[43806,1,""],[43806,0,"g"],[43875,2,""],[43875,0," "],[43897,21,""],[43897,0,". The "],[43899,4,""],[43899,0,"Rather than start with an empty eg-walker state, the state is initially populated with an "],[43986,3,""],[43986,0,"som"],[43988,1,""],[43987,1,""],[43986,1,""],[43986,0,"a functionally infinite set of dummy nodes, with $"],[44035,1,""],[44035,0,"$sp and S"],[44043,1,""],[44043,0,"se = "],[44039,3,""],[44039,0,"="],[44046,0,"\"Ins\"$."],[43910,0," "],[43910,1,""],[43946,0," at the empty version $$"],[43969,0,"empty"],[43969,5,""],[43969,0,"emptyset"],[43980,0,"we can start the process "],[44004,0," "],[43899,0,"//"],[43898,1,""],[43898,0,"\n\n\n"],[43898,0," The process "],[43903,8,""],[43903,0,"transformation process can start at this version"],[43930,21,""],[43930,0,"proces"],[43935,1,""],[43935,0,"ed from this version"],[43943,12,""],[43943,0,"this point, with $$"],[43961,0,"vp = ve = C"],[43973,0,"."],[43943,10,""],[43943,0,"here"],[43903,14,""],[43903,0,"traversal over events"],[43924,8,""],[43941,5,""],[43941,0," $C$"],[43925,16,""],[43925,0,"only needs to consider "],[43939,9,""],[43939,0,"visite"],[43944,1,""],[43944,0," events which happened since"],[43976,1,""],[43976,0,". The i"],[43982,1,""],[43982,0,"eg-walker state is initialized"],[44011,1,""],[44010,1,""],[44009,1,""],[44009,0,"sed "],[44013,6,""],[44026,1,""],[44012,0," with a "],[44019,1,""],[44019,0,"n "],[44020,1,""],[44019,1,""],[44019,0," functionally infinite set of \"dummy nodes\", corresponding to the document at version $C$. "],[44109,1,""],[44108,1,""],[44108,0," and"],[44109,3,""],[44108,1,""],[44108,0,", with"],[44128,0,". T"],[44130,1,""],[44130,0,"Dummy nodes have arbitrary, but i"],[44162,1,""],[44162,0,"s"],[44162,1,""],[44162,0,"distinct IDs"],[44158,0,"("],[44171,0,")"],[44156,1,""],[44175,0,", and "],[43802,379,""],[43802,0,"Ie, given we want to merge versions $V_0$ and $V_m$, we can first compute $C = V_0 sect.sq V_m$. The traversal over events only needs to visit events which happened since $C$. The eg-walker state is initialised with a functionally infinite set of \"dummy nodes\", corresponding to the document at version $C$, with $vp = ve = C$. Dummy nodes have arbitrary (but distinct) IDs, and"],[44180,198,""],[44147,25,""],[44147,0,"dummy "],[44156,0," ("],[44157,1,""],[44157,0,"in the sequence of (_d"],[44178,1,""],[44177,1,""],[44177,0,"$d_0$, $D_1"],[44187,1,""],[44186,1,""],[44185,1,""],[44185,0,"d_1$, $d_1$, "],[44197,1,""],[44196,1,""],[44195,1,""],[44194,1,""],[44194,0,"2$, etc)"],[44147,0,"data:\n\n- "],[44156,6,""],[44179,1,""],[44199,6,""],[44199,0," etc"],[44160,18,""],[44160,0,"of"],[44156,0,"Dummy "],[44166,2,""],[44165,1,""],[44190,5,""],[44190,0,"```lang\ncode\n```"],[44193,4,""],[44193,0,"- "],[44194,1,""],[44193,1,""],[44193,0,"lang"],[44190,16,""],[44190,0,"\n- "],[44210,1,""],[44210,0,"\n- _originL"],[44213,8,""],[44213,0,"_originLeft_ of "],[44211,18,""],[44211,0,"- _originLeft_ of (start)_"],[44229,0,"_"],[44238,0,", $d_0$, $d_1$, etc"],[44231,5,""],[44231,0,"null"],[44256,0,"\n- ori"],[44261,1,""],[44260,1,""],[44259,1,""],[44259,0,"_irin"],[44263,1,""],[44262,1,""],[44261,1,""],[44260,1,""],[44260,0,"orig"],[44259,5,""],[44259,0,"_originRight_ of "],[44275,1,""],[44274,1,""],[44273,1,""],[44273,0,"$= "],[44275,1,""],[44275,0,"$ end)"],[44277,0,"("],[44277,1,""],[44280,1,""],[44277,1,""],[44277,0,"E"],[44231,5,""],[44230,1,""],[44230,0,"Start"],[44229,1,""],[44229,0,"*"],[44235,1,""],[44235,0,"*"],[44235,1,""],[44235,0,"_"],[44229,1,""],[44229,0,"_"],[44279,0,"_"],[44276,0,"_"],[44256,0,"// "],[44211,0,"// "],[44191,0,"// "],[44154,0,"// "],[44147,4,""],[44147,0,"dum"],[44149,1,""],[44148,1,""],[44147,1,""],[44147,0,"placeholder "],[44147,12,""],[44147,0,"arbitrary, \"dummy \""],[44165,1,""],[44164,1,""],[44164,0,"\" IDs and "],[44174,1,""],[44174,0,"$sp = se = \"Ins\"$."],[44156,9,""],[44156,0," but distinct"],[44157,12,""],[44157,0,")"],[44157,1,""],[44157,0,"but distinct"],[43977,1,""],[43977,0,"\n\n"],[44339,0,"\nThis produces an identical result"],[44354,19,""],[44354,0,"the sa"],[44357,3,""],[44354,3,""],[44354,0,"an identical result"],[44340,13,""],[44340,0,"Partially traverse"],[44340,18,""],[44340,0,"A partial tra"],[44340,13,""],[44340,0,"Partially traversing over the eve4nt "],[44376,1,""],[44375,1,""],[44374,1,""],[44373,1,""],[44373,0,"nt graph procues"],[44388,1,""],[44387,1,""],[44386,1,""],[44386,0,"d"],[44386,1,""],[44385,1,""],[44385,0,"dues"],[44387,0,"c"],[44339,0,"\n"],[44339,0,"\nIt"],[44341,1,""],[44340,1,""],[44340,0,"Traversing the event grea"],[44364,1,""],[44363,1,""],[44363,0,"aph from version $C$ produces an identical result to pr"],[44417,1,""],[44416,1,""],[44416,0,"traversing the graph from the "],[44442,4,""],[44442,0,"the root version $empty"],[44460,5,""],[44460,0,"emptyset$"],[44413,3,""],[44413,0,"as "],[44469,0,". "],[44340,131,""],[44340,0,"Traversing the event graph from version $C$ produces an identical result as traversing the graph from the root version $emptyset$."],[44470,73,""],[44470,0," But "],[44471,4,""],[44471,0,"However, "],[44480,3,""],[44480,0,"the"],[44490,77,""],[43802,2,""],[43802,0,"Practically speaking"],[43984,0,"-afe"],[43987,1,""],[43987,0,"ter"],[43990,6,""],[43990,0,"_"],[43976,0,"_"],[43991,1,""],[43976,1,""],[43990,0," since"],[43987,3,""],[43987,0,"e"],[43984,4,""],[43990,0," version"],[44005,0,"Instead of an empty eg-walker state, we "],[44045,34,""],[44045,0,"initialise the tree"],[44248,0,"\n\n> DIAGRAM?"],[44259,1,""],[44259,0," of the tree going off to the right forever"],[44444,0,"\nThis simplification "],[44450,15,""],[44450,0,"dramatically simplifies the "],[44450,28,""],[44450,0,"simplification has no i"],[44472,1,""],[44472,0,"effect on the output of our partial tran"],[44511,1,""],[44511,0,"versal "],[44486,32,""],[44486,0,"result of our partial traversal function."],[44518,9,""],[44517,1,""],[44517,0,"."],[44445,73,""],[44444,1,""],[44521,0,"if we "],[44536,1,""],[44535,1,""],[44535,0,"ed"],[44536,1,""],[44535,1,""],[44534,1,""],[44534,0,"ed"],[44622,47,""],[44622,0,"The reas o"],[44631,1,""],[44630,1,""],[44630,0,"on is that n"],[44673,0,"only "],[44641,0,"data "],[44646,6,""],[44653,4,""],[44653,0,"node tree"],[44662,10,""],[44653,5,""],[44657,0," of nodes "],[44666,1,""],[44622,76,""],[44622,0,"W"],[44622,1,""],[44622,0,"W"],[44622,1,""],[44622,0,"First, lets consider how data in the tree of nodes is used. There are 3 ways this data has an "],[44699,17,""],[44699,0,"this data is used by the alghorit"],[44724,8,""],[44724,0,"algorithm:"],[44581,39,""],[44580,2,""],[44580,0," The reason is that most fields"],[44581,30,""],[44581,0,"The reason is that most fields"],[44600,11,""],[44600,0,"data in the tree is only used in "],[44630,3,""],[44624,6,""],[44624,0," really used to "],[44624,16,""],[44624,0," needed in 3 distinct "],[44637,9,""],[44637,0,"ways:"],[44642,114,""],[44642,0,"\n"],[44625,0,"used"],[44629,6,""],[43685,0," $V_0$ and $V_m$"],[43932,0," Rather than star"],[43945,4,""],[43945,0,"visiting every event from $"],[43971,1,""],[43971,0,"the "],[43974,1,""],[43973,1,""],[43972,1,""],[43971,1,""],[43971,0,"the root version $emp"],[43989,3,""],[43989,0,"emptyset$, "],[44000,2,""],[44000,0,"t"],[43966,32,""],[43965,1,""],[43965,0," in the event graph"],[43990,0,"algorithm "],[44000,22,""],[44048,0,"the greatest common "],[44119,14,""],[44127,0," is initialised "],[44142,1,""],[44150,25,""],[44150,0,"series of"],[44159,3,""],[44204,0," state"],[44509,0,"\n"],[44509,0,"\nThis simplification has no efec"],[44540,1,""],[44539,1,""],[44539,0,"fect on the output of our partial transform function. But the reason is not at"],[44597,20,""],[44597,0,"this result is ano"],[44614,1,""],[44613,1,""],[44612,1,""],[44612,0,"not obvious:"],[44623,1,""],[44623,0,"."],[44593,31,""],[44510,83,""],[44510,0,"This simplification has no effect on the output of our partial transform function."],[44592,138,""],[44592,0," "],[45349,1,""],[45349,0," - which ou"],[45359,1,""],[45358,1,""],[45358,0,"we gu"],[45358,5,""],[45358,0,"our "],[45358,4,""],[45358,0,"our dummy nodes achieve."],[45357,0," is easily achieved by"],[45395,8,""],[45396,0,"\n\nIner"],[45401,1,""],[45400,1,""],[45399,1,""],[45399,0,"nserted"],[45398,8,""],[45398,0,"All n"],[45402,1,""],[45402,0,"events "],[45398,11,""],[45398,0,"Its impossible for "],[45398,19,""],[45398,0,"Considewr"],[45398,9,""],[45398,0,"Dr"],[45399,1,""],[45399,0,"uring this simplified traversal of the event graph, suppose we visit e"],[45468,1,""],[45468,0,"an "],[45398,73,""],[45398,0,"During this simplified traversal of the event graph, suppose we visit an"],[45397,0,"\n\n"],[45398,0,"\n"],[45398,1,""],[45397,1,""],[45396,1,""],[45470,0," event $"],[45477,1,""],[45476,1,""],[45471,5,""],[45398,73,""],[45398,0,"During this simplified traversal of the event graph, suppose we visit an"],[45397,0,"\n"],[45397,0,"\nLets consider insert events first. An insert event "],[45433,16,""],[45433,0,"The "],[45398,39,""],[45398,0,"Lets consider insert events first. The"],[45235,0,"\n+ Concurrent inserts at the same final location in the document must be ordered using FugueMax's ordering rules. This logic requires the _originLeft_, _originRight_ and _id_ fields of concurrent inserts to be set correctly."],[44909,224,""],[45011,0,"\n+ Transforming the position of events from their original offset to their final offset. The data structure achieves this by correctly setting #sp and #se on nodes in the tree to match the event's parent version, and the version of the transformed output."],[44654,255,""],[44756,0,"\n"],[44653,1,""],[44755,1,""],[44653,0,"\n"],[45235,0,"\n+ Transforming the position of events from their original offset to their final offset. The data structure achieves this by correctly setting #sp and #se on nodes in the tree to match the event's parent version, and the version of the transformed output."],[44757,255,""],[45236,0,"\n"],[45236,0,"\n\n"],[45237,0,"Lets consider"],[45237,13,""],[45237,0,"In each of these 3 cases, the simplui"],[45273,1,""],[45272,1,""],[45272,0,"fi"],[45273,1,""],[45272,1,""],[45272,0,"ification will have no bearing on the result of the algorithm:\n\n"],[45335,1,""],[45334,1,""],[45333,1,""],[45333,0,".\n\nFor i"],[45340,1,""],[45339,1,""],[45338,1,""],[45337,1,""],[45336,1,""],[45336,0,"In case 1, "],[45336,11,""],[45336,0,"Case 1 only "],[45343,5,""],[45343,0,"requires that all nodes have unique IDs"],[45372,0,"locally "],[45390,0,". Our dummy items will "],[45408,5,""],[45408,0,"ca"],[45408,2,""],[45408,0,"can fit this criteria easily."],[45408,4,""],[45426,7,""],[45426,0," tr"],[45428,1,""],[45427,1,""],[45426,1,""],[45426,0,"trivially - by "],[45396,45,""],[45396,0,"tree (with a combination of dummy nodes\""],[45424,0,"\""],[45437,0," and eral"],[45442,4,""],[45442,0,"real nodes) will always meet this criteria. "],[45485,1,""],[45485,0," Dummy nodes can easily be given unique "],[45498,27,""],[45498,0,"have u"],[45503,1,""],[45503,0,"un"],[45504,1,""],[45503,1,""],[45503,0,"locally unique IDs too - from e"],[45533,1,""],[45533,0,"some space of "],[45538,9,""],[45525,13,""],[45525,0,".\n\nCase 2 only h"],[45535,6,""],[45528,0,"In "],[45531,1,""],[45531,0,"c"],[45537,1,""],[45537,0,", we m"],[45528,15,""],[45528,0,"F"],[45528,1,""],[45528,0,"For case 2, consider an event th"],[45559,1,""],[45558,1,""],[45557,1,""],[45549,8,""],[45549,0,"two concurrently inserted items "],[45549,32,""],[45549,0,"we're currently p"],[45565,1,""],[45565,0,"merging "],[45565,8,""],[45565,0,"processing an event "],[45579,0,"insert "],[45592,0,"$c"],[45593,1,""],[45593,0,"e$ hwich "],[45596,6,""],[45596,0,"which is conci"],[45609,1,""],[45608,1,""],[45608,0,"current with some o"],[45626,1,""],[45625,1,""],[45625,0," other insert event $"],[45594,0,"_1"],[45648,0,"r"],[45648,1,""],[45648,0,"e_2$. "],[45528,126,""],[45528,0,"For case 2, consider we're currently processing an insert event $e_1$ which is concurrent with some other insert event $e_2$."],[45454,12,""],[45458,0,"s"],[45473,0," by constructions"],[45489,1,""],[45473,16,""],[45473,0," -"],[45475,2,""],[45475,0," "],[45476,1,""],[45476,0,"c"],[45476,1,""],[45476,0,"d"],[45530,8,""],[45530,0,"imagine"],[45565,2,""],[45565,0,"some"],[45586,1,""],[45585,1,""],[45584,1,""],[45584,0,"i_1"],[45641,1,""],[45640,1,""],[45640,0,"i"],[45640,1,""],[45639,1,""],[45639,0,"i_2"],[45644,0," $$"],[45646,1,""],[45645,1,""],[45645,0,"$i_2$"],[45644,0," For $i_1$ "],[45589,9,""],[45588,1,""],[45588,0,", "],[45605,11,""],[45605,0," another"],[45606,7,""],[45605,1,""],[45554,10,""],[45554,0,"visiting"],[45554,8,""],[45554,0,"processing"],[45625,0," $i_1$ "],[45631,1,""],[45627,0,"-> "],[45627,0,"V"],[45627,1,""],[45627,0,"C "],[45625,0," We only visit $i_1$ because its "],[45657,1,""],[45656,1,""],[45655,1,""],[45654,1,""],[45653,1,""],[45664,0,". Because $C$ is a critical version, "],[45701,17,""],[45625,0," Because $#C"],[45636,1,""],[45635,1,""],[45635,0,"C$ is a critical version, either $$"],[45669,0,"C -> I"],[45674,1,""],[45674,0,"io"],[45675,1,""],[45675,0,"_1 and C -> "],[45677,10,""],[45677,0,"}"],[45674,0,"{"],[45678,0,", i_2"],[45685,0," or "],[45688,0,"4"],[45688,1,""],[45689,0,"$$"],[45690,0,"{i_1, i_2} -> C"],[45706,76,""],[45706,0," "],[45706,1,""],[45706,0,". However"],[45659,0," and $$"],[45665,0,"C"],[45665,1,""],[45665,0,"i_1 || i_2"],[45732,0,", "],[45733,1,""],[45732,1,""],[45725,7,""],[45725,0,"The traversal "],[45586,1,""],[45586,0,"2"],[45605,13,""],[45605,0," "],[45605,1,""],[45605,0," insert event"],[45622,1,""],[45622,0,"1"],[45725,14,""],[45724,1,""],[45724,0," Ho"],[45726,1,""],[45725,1,""],[45724,1,""],[45724,0," However, if "],[45518,219,""],[45518,0,"For case 2, imagine we're currently processing some insert event $i_2$, concurrent with insert event $i_1$. Because $C$ is a critical version and $i_1 || i_2$, either $C -> {i_1, i_2}$ or ${i_1, i_2} -> C$. However, if"],[43895,0," optimise partial transform by"],[43938,1,""],[43938,0,"i"],[43938,1,""],[43938,0,"u"],[43938,1,""],[43938,0,"ing"],[44021,0," optimised"],[44602,4,""],[44620,9,""],[44620,0," function"],[44620,9,""],[45372,0,"only "],[45372,5,""],[45371,1,""],[45365,0,"i"],[45365,1,""],[45365,0,"In "],[45368,1,""],[45368,0,"c"],[45374,0,", passing position information from _prepare_ to _effect_ "],[45432,28,""],[45432,0,"only requires that every nod in"],[45462,1,""],[45461,1,""],[45460,1,""],[45460,0,"e in the tree has a"],[45497,1,""],[45503,0,"optimised "],[45591,1,""],[45591,0,"as"],[45606,4,""],[45606,0,"are given"],[44955,4,""],[44954,1,""],[44953,1,""],[44952,1,""],[44951,1,""],[44950,1,""],[44923,0,"_id_, "],[44941,1,""],[44941,0," and"],[45748,1,""],[45748,0,"\n\n- "],[45752,8,""],[45751,0," Because"],[45711,0," (where #"],[45719,1,""],[45719,0,"$-"],[45720,1,""],[45720,0,"I"],[45720,1,""],[45720,0,"i_2"],[45720,0,"C -> "],[45728,0,"$)"],[45730,1,""],[45730,0," where #$"],[45738,1,""],[45737,1,""],[45737,0,"$i_2$ is"],[45783,1,""],[45782,1,""],[45781,1,""],[45881,11,""],[45881,0,"However, $C -> I"],[45896,1,""],[45896,0,"i_2$ the"],[45903,1,""],[45902,1,""],[45901,1,""],[45900,1,""],[45900,0,". So therefore, $"],[45916,1,""],[45915,1,""],[45781,0," To correctly order $"],[45782,20,""],[45782,0,"Corer"],[45786,1,""],[45785,1,""],[45785,0,"rectly ordering item $i_1$ and $i_2$ "],[45711,19,""],[45711,0," during the traver"],[45719,10,""],[45719,0,"the traversal."],[45733,6,""],[45733,0," And"],[45763,0,"some other "],[45834,0,"q"],[45834,1,""],[45834,0,"requires that both events"],[45853,6,""],[45853,0,"insert events are correctly"],[45871,9,""],[45871,0,"visited "],[45871,8,""],[45871,0,"pop"],[45853,21,""],[45853,0,"nodes are visited during the traversal"],[45862,0," populated with the correct _id_, _ori"],[45896,4,""],[45896,0,"_originLeft_ and _orin"],[45913,5,""],[45913,0,"_originRight_. This will happen when theo"],[45953,1,""],[45953,0," nodeas a"],[45961,1,""],[45960,1,""],[45959,1,""],[45958,1,""],[45958,0,"s are "],[45963,1,""],[45933,20,""],[45933,0,"requires that both"],[45990,0,"."],[45991,1,""],[45991,0,"\n\n"],[45660,1,""],[45660,0,"\n\n\n"],[45660,0," two concurrent insert events $i_1 "],[45694,1,""],[45694,0,"$ and I"],[45700,1,""],[45700,0,"$i-"],[45702,1,""],[45702,0,"_2$, which both insert content into the same location in our document."],[45759,3,""],[45759,0,"the"],[45772,0," To correctly order their content, both $i_1$"],[45807,10,""],[45807,0,"our algorithm must visit both nodes."],[45772,0," $"],[45773,1,""],[45773,0,"We're trying "],[45773,13,""],[45773,0,"$i_2$"],[45773,0,"During the traversal, we're currently processing "],[45827,0," - which i"],[45836,1,""],[45830,6,""],[45829,1,""],[45828,1,""],[45827,1,""],[45811,10,""],[45811,0,"running the effect function tom"],[45841,1,""],[45841,0," merge"],[45853,0," into our "],[45859,4,""],[45859,0,"th"],[45860,1,""],[45859,1,""],[45859,0,"eg-walker's state."],[45795,82,""],[45795,0,"these nodes need to be compared using FugueMax's "],[45843,1,""],[45843,0," "],[45818,8,""],[45818,0,"oprder"],[45823,1,""],[45822,1,""],[45821,1,""],[45820,1,""],[45819,1,""],[45819,0,"rdered correctly"],[45851,1,""],[45850,1,""],[45850,0,". O"],[45852,1,""],[45852,0,"Ordering these nodeas "],[45873,1,""],[45872,1,""],[45871,1,""],[45871,0,"s requires both nodes to be visited during the traversal, and _id_, _originLeft_ and _originRight_ to all be populated correctly in their nodes"],[46009,5,""],[46003,6,""],[46002,1,""],[46001,1,""],[46000,1,""],[45999,1,""],[45999,0,"."],[46000,73,""],[46000,0,"\n\nWe're "],[46002,6,""],[46002,0,"Traversing from $C$ will still guarantee that this happens. We have:\n\n$"],[46072,1,""],[46072,0,"- $i_2$"],[46074,5,""],[46074,0,"E"],[46074,1,""],[46074,0,"$i_1$ |"],[46080,1,""],[46079,1,""],[46078,1,""],[46078,0," || i_2$"],[46074,0,"The events are concurrent. IE, "],[46104,1,""],[46103,1,""],[46102,1,""],[46102,0,"e, "],[46099,6,""],[46099,0,": "],[46113,0,"\n- Because $C$ is a critical version and $i_1 || i_2$, either $C -> {i_1, i_2}$ or ${i_1, i_2} -> C$."],[46213,1,""],[46213,0,"\n\nIf both events ah"],[46231,1,""],[46230,1,""],[46230,0,"hapene"],[46235,1,""],[46234,1,""],[46233,1,""],[46233,0,"pened before $C$, their relative ordering is irrelevant "],[46251,38,""],[46251,0,"they are "],[46259,1,""],[46255,4,""],[46251,4,""],[46251,0,"their relative ordering is irrelevant "],[46215,74,""],[46215,0,"If both events happened before $C$, their relative ordering is irrelevant. All visited items"],[46290,17,""],[46290,0,"t"],[46290,1,""],[46289,1,""],[46288,1,""],[46288,0," - as the "],[46297,1,""],[46296,1,""],[46295,1,""],[46294,1,""],[46293,1,""],[46292,1,""],[46291,1,""],[46290,1,""],[46289,1,""],[46288,1,""],[46288,0,". Both "],[46290,5,""],[46290,0,"The inserted items are already present in $v"],[46333,1,""],[46333,0,"V_2"],[46335,1,""],[46335,0,"0$"],[46288,6,""],[46288,0,", as the "],[46340,0," and all events "],[46215,141,""],[46215,0,"If both events happened before $C$, their relative ordering is irrelevant, as the inserted items are already present in $V_0$ and all events"],[43816,0,"\n\nThe reason "],[43822,7,""],[43822,0,"intuitive reason for this is that critical versions provide s "],[43883,1,""],[43882,1,""],[43882,0,"a sort of \"firebreak\". Information "],[43905,12,""],[43905,0,"It is impossible for the order if items inserted before a critical version to have an y "],[43992,1,""],[43991,1,""],[43990,1,""],[43990,0,"y"],[43905,0,"In FugueMax (and many other sequence CRDT algorithms), "],[43960,1,""],[43960,0,"i"],[44038,8,""],[44038,0,"impact the order of items after that "],[44070,5,""],[44070,0,"a critical version."],[44091,20,""],[44091,0,"Algorithmically"],[44286,4,""],[44286,0,"this "],[44428,0," tree"],[44466,6,""],[44465,1,""],[44464,1,""],[44463,1,""],[44463,0," a series"],[44463,9,""],[44620,0," There needs to be at least a s"],[44650,1,""],[44649,1,""],[44649,0,"s many dummy nodes are there were items in the document at $C$. "],[44712,1,""],[44711,1,""],[44711,0,", "],[44712,1,""],[44711,1,""],[44711,0,". ("],[44713,1,""],[44712,1,""],[44711,1,""],[44711,0," - though with run-l"],[44726,5,""],[44726,0,"a"],[44726,1,""],[44726,0,"run-length encoding "],[44726,0,"th"],[44727,1,""],[44726,1,""],[44745,1,""],[44745,0,", the "],[44747,4,""],[44747,0,"our implementation can cheaply have a "],[44711,74,""],[44711,0,". (Run"],[44716,1,""],[44716,0,"nl"],[44717,1,""],[44717,0,"-length ecnodin"],[44725,7,""],[44725,0,"encoding "],[44714,0,"Using "],[44720,1,""],[44720,0,"r"],[44739,1,""],[44738,1,""],[44737,1,""],[44736,1,""],[44736,0,"ed items - described in SECTION XXX - makes it triv"],[44780,7,""],[44780,0,"it verys imp"],[44791,1,""],[44790,1,""],[44789,1,""],[44788,1,""],[44787,1,""],[44787,0," simple to hav a"],[44802,1,""],[44801,1,""],[44801,0,"e a functionally infinite number of "],[44783,54,""],[44783,0,"trivial to have a funciontall"],[44801,11,""],[44801,0,"functionally infinite number of dummy nodes)"],[44844,0,"."],[44713,1,""],[44844,1,""],[44779,65,""],[44779,0,"a functionally infinite number of ite"],[44813,3,""],[44813,0,"tree items consume a small, trivial"],[44823,25,""],[44773,7,""],[44773,0,"lets us store a"],[44831,0," in constant"],[44835,8,""],[44835,0,"a small "],[44842,1,""],[44842,0,", con"],[44837,10,""],[44837,0,"single run-length ecnded"],[44855,6,""],[44855,0,"encoded node."],[44745,1,""],[44744,1,""],[44743,1,""],[44743,0," ("],[44770,1,""],[44769,1,""],[44769,0,")"],[45063,0,"Remarkably, "],[45075,1,""],[45075,0,"t"],[45189,4,""],[45189,0,"relevant f"],[45198,1,""],[45198,0,"to the algorithm"],[45948,0," for inser"],[45948,10,""],[46396,0,"Correctly "],[46406,1,""],[46406,0,"o"],[46436,0,"that "],[46451,3,""],[46546,9,""],[46546,0,"normally"],[46616,1,""],[46616,0,"\n\n"],[46577,5,""],[46592,0,"s that"],[46598,5,""],[46614,12,""],[46624,0," must be"],[46625,7,""],[46614,0,"For the events to insert at the same location, "],[46661,1,""],[46661,0,"t"],[46671,1,""],[46614,48,""],[46614,0,"For or"],[46619,1,""],[46618,1,""],[46618,0,"o"],[46618,1,""],[46618,0,"the order to"],[46622,8,""],[46622,0,"insertion order to me "],[46643,1,""],[46642,1,""],[46641,1,""],[46641,0,"be ambiguous "],[46653,1,""],[46653,0,", the i"],[46659,1,""],[46659,0,"insertion"],[46668,2,""],[46676,3,""],[46676,0,"must be"],[46694,1,""],[46694,0,". Ie,"],[46712,0,"."],[46713,2,""],[46713,0," And"],[46717,2,""],[46717,0," b"],[46751,25,""],[46751,0,", this means either"],[46809,0,"."],[46614,105,""],[46614,0,"\nB"],[46615,1,""],[46614,1,""],[46614,0,"B"],[46647,0," and $$"],[46653,0,"i_1 || i_2"],[46652,0,"the events are concurrent (ie, "],[46695,0,"_"],[46682,1,""],[46681,1,""],[46680,1,""],[46679,1,""],[46691,1,""],[46691,0,")"],[46694,11,""],[46819,1,""],[46819,0,":\n\n- "],[46824,1,""],[46824,0,"T"],[46872,0,"(Since "],[46873,6,""],[46873,0,"since $$ "],[46880,0,"C -> V_0"],[46889,0," from teh d"],[46899,1,""],[46898,1,""],[46897,1,""],[46896,1,""],[46896,0,"he definition of rg"],[46914,1,""],[46913,1,""],[46913,0,"greatest common version)\n- "],[46940,15,""],[46938,2,""],[46938,0,"-"],[46865,0," both"],[46876,0," and $V_m$"],[46903,0,"}"],[46900,0,"{"],[46904,0,", V_m"],[46197,29,""],[46197,0,"consider two insertion"],[46308,0," "],[46308,1,""],[46308,0,". For the insertion or"],[46329,1,""],[46329,0,"rder to be ambivuou"],[46340,8,""],[46340,0,"ambiguous, "],[46318,0,"resulting "],[46361,0,"the events"],[46364,7,""],[46361,3,""],[46327,1,""],[46318,9,""],[46350,1,""],[46340,10,""],[46340,0,"ambivuou"],[46339,9,""],[46336,3,""],[46333,3,""],[46329,4,""],[46329,0,"r"],[46327,3,""],[46317,10,""],[46313,4,""],[46309,4,""],[46308,1,""],[46308,0," "],[46308,1,""],[46209,10,""],[46205,4,""],[46197,8,""],[46197,0,"imagine two concurrent insert"],[46905,4,""],[46905,0," V_m"],[46905,4,""],[46905,0," V_m"],[46961,0," Any inserted items "],[46960,21,""],[46960,0,"- Any inserted items "],[46960,21,""],[46960,0,"- Any inserted items"],[46555,0,"\n\n"],[46556,1,""],[46555,1,""],[46196,0," we consider cases where the final insertion order is dependant on FugueMax's ordering rules - using "],[46247,0,"of two or more inserts "],[46270,3,""],[46278,1,""],[46277,1,""],[46276,1,""],[46276,0,"s"],[46308,0," using _id_, _originLeft_ and _originRight_."],[46352,6,""],[46352,0," Thi"],[46355,1,""],[46354,1,""],[46353,1,""],[46353,0,"Inserted items only"],[46353,0,"The "],[46353,4,""],[46353,0,"This case only matters when "],[46353,28,""],[46353,0,"When inserted items are not concurrent "],[46358,15,""],[46358,0,"insert events "],[46390,0,", "],[46391,1,""],[46390,1,""],[46390,0," "],[46390,1,""],[46390,0,", "],[46353,62,""],[46353,0,"I"],[46364,11,""],[46394,0,". If the or"],[46404,1,""],[46403,1,""],[46402,1,""],[46402,0," order of events $i_1 "],[46423,1,""],[46423,0,"$ an"],[46426,1,""],[46425,1,""],[46424,1,""],[46399,25,""],[46399,0,"the events are sequential - ie, $i_1 -> i_2$ or $i_1 -> i_2$"],[46450,1,""],[46450,0,"2"],[46457,1,""],[46457,0,"1"],[46459,0,", the final order of the inserted content is well defined. The only time FugueMax's logic "],[46540,9,""],[46540,0," will "],[46541,5,""],[46532,9,""],[46353,0,"For FugueMax's ordering rules to matter, "],[46394,8,""],[46427,145,""],[46427,0," must be concurrent, and "],[46451,1,""],[46456,0," "],[46456,1,""],[46463,0," events must insert"],[46531,79,""],[46386,6,""],[46386,0,"c"],[46386,1,""],[46386,0,"have any bearing on the resulting insertion order"],[46253,8,""],[46261,0," $i_1$ and $i_2$"],[46445,18,""],[46484,19,""],[46496,0," their"],[46510,5,""],[46510,0," at"],[46512,1,""],[46511,1,""],[46511,0,"into"],[46524,0," "],[46524,1,""],[46525,0,"("],[46525,1,""],[46570,5,""],[46576,0,"$"],[46570,0,"$"],[46571,6,""],[46571,0,"i_1"],[46575,0," and I"],[46580,1,""],[46580,0,"$i_2$"],[46610,3,""],[46610,0," "],[46600,0,"we visit "],[46620,9,""],[46683,2,""],[46683,0,"must"],[47118,0,"."],[46983,1,""],[46982,1,""],[46981,1,""],[46980,1,""],[46979,1,""],[46978,1,""],[46978,0," t"],[47115,21,""],[47115,0,"\n\nAnd if "],[47123,1,""],[47122,1,""],[47121,1,""],[47120,1,""],[47119,1,""],[47118,1,""],[47117,1,""],[47117,0,"And if $$"],[47125,0,"c -> "],[47125,1,""],[47125,0,"C"],[47130,0,"{}"],[47131,0,"i_1, i_2"],[47141,0,", we will visit both nodes during"],[47146,28,""],[47146,0,"both nodes will be visited normally during the traversal of t"],[47206,1,""],[47206,0,"relevant events.\n\n\n"],[47221,1,""],[47221,0,", and "],[47117,110,""],[47117,0,"And if $C -> {i_1, i_2}$, we both nodes will be visited normally during the traversal of relevant events, and the _id_, _originLeft_ and _originRight_ fields will be populated normall;y"],[47301,1,""],[47300,1,""],[47300,0,"y."],[47303,0,"\n"],[47275,7,""],[47275,0,"are"],[45918,0,"_"],[45912,0,"_"],[45919,1,""],[45912,1,""],[45918,0,"*"],[45912,0,"*"],[46197,0,"*"],[46191,0,"*"],[47304,0,"For *case #"],[47314,1,""],[47314,0,"3*, when each node is visited, "],[47304,4,""],[47305,1,""],[47305,0,"C"],[47312,1,""],[47312,0," cpn"],[47315,1,""],[47314,1,""],[47304,0,"For "],[47309,1,""],[47309,0,"c"],[47317,1,""],[47317,0,"we considere"],[47328,1,""],[47328,0," deleted items."],[47319,52,""],[47319,0," need to be able to set $"],[47343,1,""],[47343,0,"#sp#"],[47346,1,""],[47346,0," to the version of each node "],[47316,0,", before "],[47318,7,""],[47317,1,""],[47316,1,""],[47316,0,","],[47304,72,""],[47304,0,"For *case 3*, we need to be able to set #sp to the version of each node"],[47303,0,"\n"],[47303,1,""],[47303,0,"\n"],[47303,1,""],[47317,0," consider the    "],[11963,0,"\nNote the greatest common version is not the same as the least upper bound of all "],[12041,4,""],[12041,0,"the set of all named version"],[12056,13,""],[12056,0,"versions in both"],[12068,4,""],[11996,0," f"],[11997,1,""],[11997,0,"of versions $V_1 "],[12013,1,""],[12013,0,"$ and V"],[12019,1,""],[12019,0,"$V_2$"],[12096,0,"both $V_1$ and $V_2#"],[12115,1,""],[12115,0,"$.\n\n> IS THIS TRUE?"],[12119,1,""],[12118,1,""],[12117,1,""],[12117,0," ("],[12133,0," MIGHT DEEP"],[12143,1,""],[12142,1,""],[12142,0,"PEND ON HOW LUB IS DEFINED> "],[12169,1,""],[12168,1,""],[12168,0,". CHECK! )"],[12117,1,""],[12117,0,"\n\n> ^-- "],[47369,3,""],[47521,0," _originLeft_ and _originRight_ may point to dummy nodes, but that "],[47557,5,""],[47557,0,"erw"],[47559,1,""],[47558,1,""],[47557,1,""],[47557,0,"refer"],[47588,0,"has no imp"],[47588,10,""],[47588,0,"n"],[47588,1,""],[47588,0,"has no impact on the resutlin"],[47609,8,""],[47609,0,"resulting order "],[47624,1,""],[47624,0,"."],[47609,10,""],[47609,0,"final "],[47620,0," chon"],[47624,1,""],[47624,0,"sen by FugueMAx"],[47638,1,""],[47637,1,""],[47637,0,"ax"],[47343,5,""],[47343,0,"I"],[47425,9,""],[47431,2,""],[47431,0,"."],[47432,7,""],[47432,0," The fields"],[47481,7,""],[47437,7,""],[47473,0," fields"],[47638,0," we must be abelt "],[47655,1,""],[47654,1,""],[47653,1,""],[47652,1,""],[47652,0,"le to set"],[46030,0,"\n+ Concurrent inserts at the same final location in the document must be ordered using FugueMax's ordering rules. This logic requires the _id_, _originLeft_ and _originRight_ fields of concurrent inserts to be set correctly."],[45552,224,""],[46419,1,""],[46419,0,"3"],[47624,113,""],[46408,0,"\nFor *case 3*, we must be able to set consider the     we need to be able to set #sp to the version of each node\n"],[46419,1,""],[46419,0,"2"],[46446,43,""],[46457,7,""],[46457,0,"parent version of"],[46474,3,""],[46480,4,""],[46480,0,"event before "],[46486,7,""],[46486,0,"as"],[46487,1,""],[46486,1,""],[46486,0,"we visit during the traversal. Critica"],[46517,7,""],[46517,0,"Any item deleted by v"],[46537,1,""],[46537,0,"$C$"],[46534,2,""],[46534,0,"at"],[46540,0," will not be present in the tree"],[46568,0,"state "],[46578,0," at all, and items inserted before "],[46526,0,"inserrte"],[46533,1,""],[46532,1,""],[46531,1,""],[46531,0,"ted before $C$ will not have its corect "],[46570,1,""],[46569,1,""],[46568,1,""],[46567,1,""],[46567,0,"rect ID, and any ti"],[46585,1,""],[46584,1,""],[46584,0,"item "],[46409,267,""],[46409,0,"For *case 2*, we must be able to set #sp to the parent version of each event we visit during the traversal. Any item inserted before $C$ will not have its correct ID, and any item deleted at $C$ will not be present in the state tree at all, and items inserted before"],[46648,27,""],[46648,0,". "],[46426,4,""],[46426,0,"need to "],[46433,1,""],[46653,0,"T"],[46653,1,""],[46652,1,""],[46652,0," Luckily, the traversal happens in causal "],[46676,0,"still "],[46700,0,"order_"],[46693,0,"_"],[46707,0,". I"],[46709,1,""],[46708,1,""],[46707,1,""],[46707,0,". Ie, if the traversal will visit events"],[46746,1,""],[46746,0," "],[46746,1,""],[46746,0,"s "],[46409,339,""],[46409,0,"For *case 2*, we need to be able to set #sp to the parent version of each event we visit during the traversal. Any item inserted before $C$ will not have its correct ID, and any item deleted at $C$ will not be present in the state tree at all. Luckily, the traversal still happens in _causal order_. Ie, if the traversal will visit events $i_1$ and $i_2$"],[46730,5,""],[46735,0,"s"],[46742,1,""],[46749,3,""],[46749,0,"followed by"],[46766,0,", either $i_1 -> $"],[46783,1,""],[46783,0,"i_2$ or $i1 |"],[46795,1,""],[46794,1,""],[46793,1,""],[46793,0,"_1 || i_2$."],[46520,0," "],[46520,1,""],[46804,0," "],[46804,1,""],[46652,1,""],[46652,0,"\n\n"],[46654,7,""],[46654,0,"However, "],[46663,5,""],[46663,0,"this works out ok because the"],[46702,6,""],[46652,0," The algorithm must not:\n\n- U"],[46680,1,""],[46680,0,"\"Un-insert\" any itme"],[46699,1,""],[46698,1,""],[46698,0,"ems befo"],[46705,1,""],[46704,1,""],[46703,1,""],[46702,1,""],[46702,0,"inserted before $C$"],[46680,11,""],[46680,0,"Set $"],[46684,1,""],[46684,0,"#sp to `NotInsertedYet` for"],[46741,0,"."],[46741,1,""],[46716,0,"dummy "],[46727,0," (which were"],[46759,0,")\n "],[46761,1,""],[46761,0,"- "],[46761,2,""],[46761,0,"- Set #sp to `NotInsertedYet`"],[46775,14,""],[46775,0,"Ins"],[46675,0," attempt"],[46672,3,""],[46672,0,"never "],[46677,1,""],[46685,0," to"],[46773,0,". This would fail because the \""],[46803,1,""],[46803,0,"item ID does not match the corresponding event ID."],[46872,0," "],[46854,19,""],[46854,0,"- Set #sp to `Ins`"],[46693,0,"Un-insert any items"],[46693,19,""],[46693,0,"A"],[46693,1,""],[46693,0,"\"Un-insert\" and"],[46707,1,""],[46707,0,"y "],[46709,32,""],[46724,0,". Set #sp to `NotInsertedYet` for "],[46726,0,"(Ie, i"],[46731,1,""],[46731,0,"we cannot "],[46741,1,""],[46741,0,"s"],[46773,12,""],[46773,0,"any events"],[46726,1,""],[46802,1,""],[46885,0,"\"Un-delete\" any "],[46709,4,""],[46897,0,"dummy items. Ie, we cannot "],[46924,1,""],[46924,0,"s"],[46940,0," for any items which were deleted at $C$ because "],[46980,9,""],[46980,0,". This would fail because the "],[47006,4,""],[47006,0,"there is no node in the tr"],[47030,2,""],[47030,0,"state tree corresponding to any iteme"],[47066,1,""],[47066,0,"s which were deleted at $C$."],[46423,21,""],[46423,0,"the algorithm needs to b"],[46446,1,""],[46445,1,""],[46445,0," be able to"],[46532,133,""],[46568,0,"\n// Any item inserted before $C$ will not have its correct ID, and any item deleted at $C$ will not be present in the state tree at all. "],[46569,136,""],[46569,0,"// Any item inserted before $C$ will not have its correct ID, and any item deleted at $C$ will not be present in the state tree at all."],[47110,0,"\n"],[47110,0,"\n"],[46531,0,"\n\n\n"],[46533,1,""],[46532,1,""],[46531,1,""],[46531,0," Due to the simil"],[46547,1,""],[46547,0,"p"],[46547,1,""],[46546,1,""],[46546,0,"plification,"],[46558,2,""],[46558,0," t"],[47138,0,"In both cases, errors would occur if the "],[47141,10,""],[47141,0,"euither"],[47147,1,""],[47146,1,""],[47145,1,""],[47144,1,""],[47143,1,""],[47142,1,""],[47142,0,"ither case"],[47138,0,"// "],[47138,45,""],[47138,0,"// In either case, errors would occur if the"],[47137,0,"\n"],[47137,0,"\n?"],[47138,1,""],[47138,0,"How"],[47138,3,""],[47138,0,"?"],[47137,3,""],[47138,44,""],[47138,0,"// In either case, errors would occur if the "],[47138,3,""],[47176,4,""],[47176,0,"we visit an event wi"],[47195,1,""],[47194,1,""],[47194,0,"iwt"],[47196,1,""],[47195,1,""],[47194,1,""],[47194,0,"with parent version $P$ where $$"],[47225,0,"P || C"],[47232,0," "],[47232,1,""],[47232,0," or $$"],[47237,0,"C -> P"],[47230,1,""],[47229,1,""],[47228,1,""],[47227,1,""],[47226,1,""],[47225,0,"$ "],[47226,1,""],[47225,1,""],[47225,0,"C -> "],[47240,1,""],[47239,1,""],[47239,0,"||"],[46559,36,""],[46559,0,"we"],[46560,1,""],[46559,1,""],[46559,0,"the algorithm would mis"],[46579,3,""],[46579,0,"misbehave if it ever attempted to:"],[47243,5,""],[47244,0," -> C"],[47255,1,""],[47255,0,"P"],[47260,1,""],[47260,0,"C"],[47262,0,"."],[47155,0,"\n"],[47155,0,"\nS"],[47156,1,""],[47156,0,"Both of these "],[47156,16,""],[47194,69,""],[47194,0,"items were"],[47199,5,""],[47194,5,""],[47194,0,"we visit an event with parent version $P$ where $P -> C$ or $P || C$."],[42502,773,""],[44511,0,"\n\n"],[44512,0,"\n// This algorithm is given in [Algorithm X].\n\n// The algorithm above [XX] is a special case of this algorithm, with $V_0 = emptyset$ and $V_m = floor(G)$.\n\n// ```\n// function transformPartial(graph, v0, vm) -> Iterator<TransformedOperation> {\n//   state := new EgWalkerState()\n\n//   for event (i, e, p) in graph.inOrderTraversalBetween(emptyset, v0) {\n//     state.setInputVersion(p)\n//     message := state.prepareUpdate(i, e)\n//     state.applyUpdate(message) // Transformed event is discarded.\n//   }\n\n//   for event (i, e, p) in graph.inOrderTraversalBetween(v0, v0.union(vm)) {\n//     state.setInputVersion(p)\n//     message := state.prepareUpdate(i, e)\n//     TransformedOperation := state.applyUpdate(message)\n\n//     yield(TransformedOperation)\n//   }\n// }\n// ```\n"],[45278,3,""],[45273,3,""],[45266,3,""],[45231,3,""],[45172,3,""],[45128,3,""],[45096,3,""],[45018,3,""],[45010,3,""],[44941,3,""],[44897,3,""],[44865,3,""],[44791,3,""],[44756,3,""],[44676,3,""],[44669,3,""],[44559,3,""],[44513,7,""],[44513,0,"The optimised partial traversal a"],[44545,1,""],[44544,1,""],[44583,0,"// "],[44804,0,"\n  state.addDummyNodes({\n    \n    "],[44829,4,""],[44830,4,""],[44830,0,"  })"],[44829,0,"    id: \"dummy\" + n,\n    "],[44850,4,""],[44827,27,""],[44828,0,"\n  \n  "],[44829,2,""],[44832,0,"cv := graph.greatestCommonVersion(v0, vm)"],[44930,8,""],[44930,0,"cv"],[45324,0,"\nThis simplification is "],[45325,23,""],[45325,0,"This simplification is"],[45324,23,""],[45323,1,""],[45323,0,"\n\nThe greatest"],[45329,8,""],[45325,4,""],[45325,0,"The greaterst "],[45338,1,""],[45337,1,""],[45336,1,""],[45335,1,""],[45335,0,"st common version $C$ is "],[45325,0,"In practice, "],[45338,1,""],[45338,0,"t"],[45373,0,"usually $V_0$, or "],[45381,0,"either "],[45398,0,"very close to "],[45398,0,"proportionately "],[45428,0,"$v_"],[45430,1,""],[45429,1,""],[45429,0,"V_9$"],[45432,1,""],[45431,1,""],[45431,0,"0$ in the graph. As a result, this change massively "],[45387,0," eu"],[45389,1,""],[45389,0,"qual to"],[45492,0,"improves performance of the algorithm."],[45532,0,"An"],[45533,1,""],[45532,1,""],[45563,0," also"],[45600,17,""],[45600,0,"the algorithm"],[45625,0," is quite subtel"],[45640,1,""],[45639,1,""],[45638,1,""],[45638,0,"l"],[45638,1,""],[45638,0,"tle."],[45642,10,""],[45642,0," D"],[45643,0,"I"],[45643,1,""],[45643,0,"If we "],[45643,6,""],[45643,0,"On careful inspectio of "],[45666,1,""],[45665,1,""],[45664,1,""],[45663,1,""],[45663,0,"n of the algorithm, "],[45683,1,""],[45683,0,"d"],[45716,17,""],[45722,5,""],[45722,0,"cases:"],[44827,0,"{\n    \n    "],[44829,4,""],[44830,4,""],[44830,0,"}"],[44830,0,"  "],[44829,0,"    id in [\"dummy 0\", \"dummy 1\", d"],[44862,1,""],[44862,0,"\"dummy 2\", ..]"],[44829,0,"    id in [\"dummy 0\", \"dummy 1\", \"dummy 2\", ..]\n"],[44881,2,""],[44881,0,"originLeft"],[44896,0,"(start), "],[44926,11,""],[44877,0,"    originLeft in [(start), \"dummy 0\", \"dummy 1\", ..]\n"],[44946,38,""],[44945,1,""],[44945,0,": "],[44946,1,""],[44945,1,""],[44944,1,""],[44943,1,""],[44942,1,""],[44941,1,""],[44941,0,"Right: (end)"],[44946,1,""],[44946,0," ="],[47004,0,"tje [a"],[47009,1,""],[47008,1,""],[47007,1,""],[47006,1,""],[47005,1,""],[47005,0,"he parent version of a visited event was ever earlier than (oc"],[47066,1,""],[47066,0,"r concurrent with) $C$. I"],[47090,1,""],[47089,1,""],[47088,1,""],[47088,0,". "],[47064,1,""],[47063,1,""],[47063,0," "],[47063,1,""],[47063,0,", "],[47064,1,""],[47063,1,""],[47063,0," "],[47063,1,""],[47063,0," ("],[47089,1,""],[47088,1,""],[47088,0,". I"],[47089,2,""],[47084,5,""],[47078,6,""],[47067,11,""],[47066,1,""],[47066,0,"c"],[47063,4,""],[47058,5,""],[47050,8,""],[47045,5,""],[47041,4,""],[47035,6,""],[47027,8,""],[47025,2,""],[47022,3,""],[47014,8,""],[47007,7,""],[47005,2,""],[47005,0,"je [a"],[47007,3,""],[47004,3,""],[44946,2,""],[44946,0," ="],[47004,0,"tje"],[47004,3,""],[47676,0,"\nDue to the simplification, the algorithm would misbehave if the parent version of a visited event was ever earlier than, or concurrent with) $C$\n"],[47568,14,""],[47568,0,"We "],[47570,1,""],[47569,1,""],[47568,1,""],[47568,0,"Both of these errors would occur if"],[47603,24,""],[47603,0," "],[47606,0," ever"],[47631,0," "],[47631,1,""],[47604,0,"the traversal ever "],[47623,8,""],[47628,0,"s"],[47690,148,""],[47690,0," "],[47699,0," this will h"],[47710,1,""],[47710,0,"never happen"],[47722,163,""],[47722,0," because #"],[47731,1,""],[47731,0,"$C$"],[47733,0," -> {V_0, V_m}"],[47716,6,""],[47716,0,"occur"],[47730,0,"$C$ is a critical version and "],[47777,0,"."],[47600,0," in the same situation -"],[47687,26,""],[47687,0,"if $P "],[47692,1,""],[47692,0,"$ is either earlier than- "],[47694,24,""],[47694,0,"either happened-before or was concurrent with $C$"],[47783,0,":\n-"],[47816,1,""],[47816,0,"\n- "],[47836,1,""],[47836,0,"\nby construction"],[47837,15,""],[47836,1,""],[47776,0,"b"],[47776,1,""],[47783,0," of the defini"],[47783,14,""],[47836,0,"\nBy con"],[47837,6,""],[47836,1,""],[47776,0,"by construction, "],[47986,0,","],[47988,2,""],[48030,0," to break ties\""],[48040,0,"\""],[48046,0," in the re"],[48046,10,""],[48046,0," in ambu"],[48053,1,""],[48053,0,"ivu"],[48055,1,""],[48054,1,""],[48054,0,"guous insertions"],[48046,24,""],[48046,0," in "],[48046,4,""],[48047,1,""],[48047,0,"\n\n"],[48087,3,""],[48087,0,"a"],[48087,1,""],[48087,0,"any"],[48239,0,"In this case, "],[48253,1,""],[48253,0,"c"],[48153,0,":\n"],[48154,1,""],[48153,1,""],[48153,0,":\n-"],[48156,2,""],[48156,0," B"],[48170,11,""],[48170,0,"```lang\ncode\n```"],[48173,4,""],[48173,0,"- "],[48174,1,""],[48173,1,""],[48173,0,"lang"],[48170,16,""],[48170,0,"\n- "],[48173,1,""],[48173,0,"I"],[48233,1,""],[48232,1,""],[48232,0,".\n\n"],[48235,33,""],[48250,0," will be ordered correctly if both"],[48284,28,""],[48290,0," are"],[48235,0,"For "],[48254,0," to be inserted correctly,"],[48280,29,""],[48291,0," must be visited"],[48332,5,""],[48332,0,". This will result in"],[48391,4,""],[48391,0,"to"],[48393,4,""],[48438,6,""],[48466,0," in all cases"],[48434,0,"versopm"],[48440,1,""],[48439,1,""],[48438,1,""],[48438,0,"ion "],[48570,6,""],[48570,0,"it follows that either"],[48637,31,""],[48637,0,"${i_1, i_2} -> C$"],[48660,1,""],[48659,1,""],[48677,0," of $i_1 "],[48685,1,""],[48685,0,"$ and $i_2$"],[49133,0,"\n"],[48852,1,""],[49132,0,"\nIf ${i_1, i_2} -> C$, the relative ordering of $i_1$ and $i_2$ is irrelevant, as the inserted items are already present in both $V_0$ and $V_m$ (since $C -> {V_0, V_m}$ from the definition of greatest common version)."],[48634,218,""],[48914,0,"\n"],[48722,5,""],[48722,0,", and"],[48794,0,", and compared usin"],[48809,4,""],[48809,0,"correctly using FugueMax's ordering rules"],[48935,26,""],[48943,0,"'s ordering algorithm"],[48967,0,"On the other hand, "],[48986,1,""],[48986,0,"i"],[49062,1,""],[49062,0," -"],[49064,1,""],[49063,1,""],[49062,1,""],[49062,0,", "],[49129,0,"."],[49132,5,""],[49132,0,"Recal"],[49132,5,""],[49130,69,""],[49130,0," ( $C -> {V_0, V_m}$ from the definition of greatest common version)."],[49133,0,"R"],[49133,1,""],[49132,0,"Recall that"],[49201,0,"v"],[49201,1,""],[49145,0,"C = "],[49145,3,""],[49145,0,"C = V_0 sect.sq V_m =>"],[49132,12,""],[49160,0,"/="],[49160,0," "],[49162,0," "],[49163,1,""],[49162,1,""],[49161,1,""],[49160,1,""],[49224,931,""],[49223,1,""],[43215,0,"which occurrec "],[43229,1,""],[43228,1,""],[43228,0,"d "],[43264,0," of $V_0$ and $V_m$"],[43474,2,""],[43474,0,"of"],[43499,1,""],[43499,0,"any"],[43645,4,""],[43713,0," Tras"],[43717,1,""],[43717,0,"versal proceeds from "],[43738,147,""],[43732,0," directly"],[43758,1,""],[43758,0,", with any earlier versions "],[43760,5,""],[43760,0,"skipping "],[43789,1,""],[43789,0,"."],[43642,2,""],[43642,0,"the"],[43654,0,"d"],[43673,0," algorithm works"],[43731,0," "],[43731,1,""],[43732,40,""],[43732,0,"Events are traversed"],[43732,20,""],[43731,1,""],[43731,0," All events from"],[43751,0," to $$"],[43756,0,"V_0"],[43760,0," are traversed, and transformed operations discarded. Then events from $$"],[43774,59,""],[43774,0,"."],[43732,3,""],[43732,0,"Only"],[43760,0," union $"],[43767,1,""],[43767,0,"V_m"],[43786,1,""],[43787,10,""],[43787,0,"A"],[43788,2,""],[43788,0,"ll events before $C$"],[43808,17,""],[43808,0," are skipped"],[43785,0,", in the manner described above"],[43899,0," "],[43899,1,""],[43904,0," of nodes"],[43933,3,""],[43949,0,"ea"],[43950,1,""],[43949,1,""],[43949,0,"where each node "],[43977,1,""],[43976,1,""],[43975,1,""],[43975,0,"s to a character"],[43982,9,""],[43981,1,""],[43981,0,"n items"],[43987,1,""],[43987,0," that exists in the"],[44006,7,""],[44036,1,""],[44036,0,"."],[44037,20,""],[43852,0," $vp = ve = C$"],[43853,0,"Initially, "],[44221,0," Dummy nodes can be inserted lazily, as needed "],[44267,1,""],[44267,0,". Or"],[44271,6,""],[44289,1,""],[44288,1,""],[44288,0,"ing"],[44291,6,""],[44272,0,"using "],[44272,25,""],[44272,0,"if nodes store a \"run\" of items"],[44305,9,""],[44305,0,"see Run Length e"],[44320,1,""],[44320,0,"Encoding optimisation"],[44268,3,""],[44268,0," Alternately,"],[44367,0,", we can"],[44369,6,""],[44369,0,"each node can "],[44383,9,""],[44369,0,"a single dummy "],[44384,5,""],[44370,0," run-length encoded"],[44452,5,""],[44457,36,""],[44452,0,"dummy "],[44222,97,""],[44225,0,"-"],[44226,1,""],[44222,0,"The "],[44259,0,"described "],[44283,98,""],[44283,0," m"],[44283,2,""],[44283,0,"), a run-length encoded single dummy node can store a functionally infinite number of dummy items."],[44283,1,""],[44283,0," makes this simple an d"],[44305,1,""],[44304,1,""],[44304,0,"d efficient, as a single"],[44328,22,""],[44328,0," node "],[44329,5,""],[44329,0,"dummy node c"],[44322,0,"RLE"],[44324,1,""],[44323,1,""],[44322,1,""],[44328,0," RLE"],[44345,0,"an "],[44348,23,""],[44388,6,""],[44378,16,""],[44378,0,"set of items."],[44348,5,""],[44348,0,"represet"],[44355,1,""],[44355,0,"bnt"],[44357,1,""],[44356,1,""],[44355,1,""],[44355,0,"nt"],[44348,0,"functionally "],[44348,13,""],[44347,0," be used to"],[44392,4,""],[44392,0," "],[44392,1,""],[44392,0," set"],[44392,4,""],[44392,0," list"],[44400,0," dummy"],[45052,0," for all nodes"],[45473,1,""],[45473,0,"t"],[45535,1,""],[45535,0,"t"],[45649,16,""],[45791,5,""],[46054,0," For example, `Delete(12)` becomes `Delete(id: xxx"],[46103,1,""],[46102,1,""],[46101,1,""],[46101,0,"X)`."],[46068,0,"The "],[46068,4,""],[46068,0,"a "],[46082,0," event"],[46096,0," CRDT message"],[46078,0,"pos "],[46081,1,""],[46081,0,": "],[46133,0," In order to in"],[46147,1,""],[46146,1,""],[46146,0,"correctly interpret the position in an event, "],[46191,91,""],[46191,0," the"],[46210,27,""],[46217,1,""],[46216,1,""],[46215,1,""],[46214,1,""],[46214,0,"s"],[46219,32,""],[46219,0," based on"],[46228,6,""],[46255,44,""],[46255,0,"."],[46220,0,"in each node "],[46383,23,""],[46383,0,"FugueMax uses"],[46433,49,""],[46433,0," to order items"],[46437,6,""],[46437,0,"decide on the resulting order of "],[46522,0," r"],[46523,1,""],[46523,0,"presented above"],[46749,5,""],[46749,0,"containing "],[46743,0,"state "],[46813,0,"still "],[47784,0,"_"],[47769,0,"_"],[47923,0,"\n\nNotably, dummy nodes can still be deleted. And th"],[47966,8,""],[47966,0," and \"un-deleted\". This works corre"],[47996,5,""],[47996,0,"as expected."],[47990,0,"still "],[47990,11,""],[47990,0,"functions correctly,"],[48009,1,""],[48404,3,""],[48404,0,"Events"],[48426,6,""],[48426,0," will be ordered"],[48442,9,""],[48452,1,""],[48452,0," if"],[48467,7,""],[48467,0,"are"],[48503,1,""],[48503,0,", as"],[48507,20,""],[48545,2,""],[48545,0,"will"],[48545,4,""],[48545,0,"are"],[48571,2,""],[48571,0," "],[48571,1,""],[48571,0,"\n"],[48571,0,"\n"],[48877,5,""],[48877,0,"."],[48937,10,""],[49028,5,""],[49028,0,"pouint"],[49033,1,""],[49032,1,""],[49031,1,""],[49030,1,""],[49030,0,"int"],[49314,46,""],[49273,0,"from the definition of greatest common version "],[49273,0,"This follows "],[49332,0," - as"],[49358,4,""],[49358,0,"$$"],[49359,0," implies "],[49385,1,""],[49389,0,"\n"],[49389,0,"\n\n= Evaluation\n\nIn "],[49407,1,""],[49406,1,""],[49405,1,""],[49405,0,"In order to "],[49405,12,""],[49405,0,"In order to"],[42518,28,""],[42518,0,"this will be"],[42642,0,"This algorithm"],[42656,2,""],[43544,0," inserted"],[43559,0,"_"],[43554,0,"_"],[43494,0,"_"],[43488,0,"_"],[43886,0,"."],[44033,1,""],[44033,0,"ed"],[44140,0," Dummy nodes can either be added on"],[44174,1,""],[44173,1,""],[44173,0,"as needed during "],[44173,17,""],[44173,0,"lazily "],[44141,40,""],[44141,0,"The state tree needs"],[44161,11,""],[44162,6,""],[44235,0," The sta"],[44236,7,""],[44236,0,"The state tree can "],[44240,15,""],[44239,1,""],[44238,1,""],[44237,1,""],[44236,1,""],[44235,1,""],[44235,0," They can "],[44235,10,""],[44427,0," The"],[44430,1,""],[44428,2,""],[44428,0,"Alternately, dummy nodes"],[44235,0," The number of "],[44236,14,""],[44235,1,""],[44298,35,""],[44298,0,"allows a functionally infinite number of diu"],[44341,1,""],[44340,1,""],[44340,0,"ummy no"],[44346,1,""],[44345,1,""],[44345,0,"items to be added using"],[44392,69,""],[44357,5,""],[44357,0,"represented"],[44424,0," can be add"],[44398,37,""],[44398,0,"."],[46120,0,"The _prepare_ function "],[46143,22,""],[46152,0,"s"],[46152,1,""],[46143,0,"In order to correctly "],[46142,1,""],[46133,9,""],[46123,10,""],[46120,3,""],[46129,2,""],[46129,0,"for _prepare_ to"],[46179,3,""],[46179,0,"of "],[46192,18,""],[46192,0,"_setInput"],[46192,9,""],[46192,0,"_setInputVersion_"],[46231,0," to the state"],[46239,0,"items' "],[46245,1,""],[46244,1,""],[46243,1,""],[46243,0,"'\ns"],[46245,1,""],[46244,1,""],[46244,0,"s "],[46252,12,""],[46252,0,"at the iv"],[46260,1,""],[46259,1,""],[46259,0,"visited"],[46192,23,""],[46208,0," is set"],[46242,8,""],[46269,0,"In the _effect_ function, "],[46295,1,""],[46295,0,"C"],[46294,1,""],[46284,10,""],[46275,9,""],[46271,4,""],[46269,2,""],[45489,5,""],[45489,0,"e"],[45249,5,""],[45249,0,"e"],[45486,0,"f"],[45250,0,"f"],[45488,0,"f"],[45251,0,"f"],[45490,0,"e"],[45252,0,"e"],[45492,0,"c"],[45253,0,"c"],[45494,0,"t"],[45254,0,"t"],[35808,0,"Each nodes "],[35818,1,""],[35817,1,""],[35817,0," stores "],[35824,0," the tuple of"],[35817,0," in the tree"],[35926,0,". Fields are defined below."],[36048,0,"."],[38599,14,""],[38599,0,"incrementally. Each time $s_p"],[38627,1,""],[38626,1,""],[38625,1,""],[38624,1,""],[38624,0,"$"],[38624,1,""],[38624,0,"#sp is set "],[38628,7,""],[38627,1,""],[38624,3,""],[38624,0,"an event is visited, we can record $"],[38659,1,""],[38643,16,""],[38643,0," and #sp is set, "],[38613,0," "],[38613,1,""],[38612,1,""],[38612,0,":\n\n\n"],[38614,0,"\n- At the start of the algorithm s"],[38647,1,""],[38646,1,""],[38646,0,", set #vp = "],[38651,2,""],[38651,0," @"],[38652,1,""],[38652,0,"#"],[38652,1,""],[38652,0,"$"],[38658,0,"emp"],[38658,3,""],[38658,0,"emptyset}"],[38666,1,""],[38666,0,"$.\n- Each "],[38671,5,""],[38669,2,""],[38669,0,"-"],[38648,3,""],[38648,0,"store"],[38672,0," _setInput"],[38673,9,""],[38673,0,"_setInputVersion_ compares the ev"],[38705,1,""],[38704,1,""],[38703,1,""],[38703,0," incoming event's parents "],[38728,1,""],[38727,1,""],[38727,0," version $V_i$ and "],[38671,75,""],[38671,0,"- _setInputVersion_ compares the incoming event's parent version $V_i$ and"],[38669,1,""],[38669,0,", correpon"],[38678,1,""],[38677,1,""],[38676,1,""],[38676,0,"sponding to the "],[38671,21,""],[38671,0,"representing the version "],[38671,12,""],[38671,0,"st"],[38672,1,""],[38671,1,""],[38670,1,""],[38669,1,""],[38669,0,". $"],[38671,1,""],[38671,0,"#vp stores"],[38694,0,"at whic"],[38697,4,""],[38697,0,"represented by @"],[38712,1,""],[38712,0,"#sp on all nodes in the tree."],[38813,3,""],[38813,0,"with the re"],[38823,1,""],[38822,1,""],[38822,0,"previous version #vp. "],[38742,102,""],[38742,0,"- _setInputVersion_ compares the incoming event's parent version $V_i$ with the previous version #vp."],[38843,114,""],[38843,0," #sp is"],[38848,3,""],[38852,0," needs to be"],[38873,1,""],[38872,1,""],[38871,1,""],[38870,1,""],[38870,0,"ied on"],[38876,7,""],[38937,0," between #v[ a"],[38950,1,""],[38949,1,""],[38948,1,""],[38948,0,"op "],[38950,1,""],[38949,1,""],[38948,1,""],[38948,0,"p and $V_i$"],[38808,1,""],[38808,0,"P"],[38955,1,""],[38955,0,"P"],[38960,1,""],[38960,0,"\n\n\n"],[38960,0,"\n- $vp := P_o"],[38972,1,""],[38972,0,"i$"],[38567,14,""],[38567,0,"#sp"],[38577,10,""],[38577,0," set"],[38581,1,""],[38581,0," "],[38578,4,""],[38578,0,"updated "],[38599,0," du"],[38567,0,"To prevent a full traversal of the node tree when each event is visited, "],[38673,3,""],[38672,1,""],[38672,0," "],[38672,1,""],[38672,0,":"],[38904,0,"The "],[38911,0," field on each node"],[38904,4,""],[38907,36,""],[38907,0," is only"],[38903,0," Thi"],[38906,1,""],[38905,1,""],[38904,1,""],[38904,0,"The difference w"],[38919,1,""],[38919,0,"between versions will show some added events "],[38941,0,"usually "],[38972,0,"and removed events."],[38975,0," some"],[39024,16,""],[39102,0," "],[39102,1,""],[39102,0,", and used as the bassis"],[39125,1,""],[39124,1,""],[39123,1,""],[39123,0,"is for com"],[38672,1,""],[38672,0," "],[38567,106,""],[38567,0,"To prevent a full traversal of the node tree when each event is visited, #sp can be updated incrementally"],[39088,0,"// "],[38801,0,"// "],[38674,0,"// "],[38672,0," based on the difference between the previous"],[38709,8,""],[38709,0,"previous parent version and the new parent version."],[38717,15,""],[38709,0,"parent version of the "],[38739,0," event"],[38753,0," parent version of the"],[38779,16,""],[38779,0," event."],[38686,0,"set "],[39352,23,""],[39352,0,"efficiently"],[39320,13,""],[39320,0,"T"],[39339,0," can be cal"],[39349,1,""],[39348,1,""],[39348,0,"omputed efficiently"],[39367,12,""],[39367,0," using an"],[39400,14,""],[39319,0," In @optimisations wepre"],[39342,1,""],[39341,1,""],[39341,0," p"],[39342,1,""],[39341,1,""],[39340,1,""],[39340,0," present an efficient"],[39361,82,""],[39361,0," algoruith"],[39370,1,""],[39369,1,""],[39368,1,""],[39367,1,""],[39367,0,"ithm for efff"],[39379,1,""],[39378,1,""],[39377,1,""],[39376,1,""],[39376,0,"computing this set diff"],[39386,13,""],[39386,0,"the set difference between versions."],[38566,0,"\n"],[38566,0,"\nA "],[38568,1,""],[38567,1,""],[38567,14,""],[38567,0,"A"],[38567,1,""],[38567,0,"\n\nTo prevent a"],[38567,0,"A "],[38568,1,""],[38566,3,""],[38672,0," a"],[38673,1,""],[38672,1,""],[38672,0,". The algorht"],[38684,1,""],[38683,1,""],[38683,0,"thm is quite simple: We "],[38706,1,""],[38705,1,""],[38704,1,""],[38704,0,"As each node is v"],[38712,9,""],[38712,0,"event is visited, we ca"],[38734,1,""],[38734,0,"ompute the"],[38744,13,""],[38703,0," We store the "],[38703,14,""],[38772,36,""],[38771,1,""],[38770,1,""],[38769,1,""],[38768,1,""],[38768,0,"the previous ver"],[38771,13,""],[38771,0," version @"],[38780,1,""],[38780,0,"#pv"],[38782,1,""],[38781,1,""],[38781,0,"vp "],[38783,1,""],[38772,0,"previous "],[38772,9,""],[38779,0," at which $sp"],[38791,1,""],[38790,1,""],[38789,1,""],[38788,1,""],[38768,20,""],[38767,1,""],[38771,0," (th e"],[38776,1,""],[38775,1,""],[38775,0,"e previous parent version)"],[38841,0,", $V_"],[38845,1,""],[38844,1,""],[38844,0,"P_i$"],[38849,0," "],[38849,1,""],[38849,0," Some"],[38850,4,""],[38850,0,"I"],[38850,1,""],[38849,1,""],[38849,0," The set difference yields a "],[38869,9,""],[38869,0,"tells us a set of events which have been removed, and a set of events which were added. $"],[38957,1,""],[38957,0,"#sp is updated on only the set of nodes which have changed."],[39015,0," betwen "],[39022,1,""],[39021,1,""],[39021,0,"en these two versions"],[39023,10,""],[38964,0,"only "],[38979,5,""],[38960,0," only needs to be"],[38977,8,""],[39000,5,""],[39000,0,"items"],[38806,37,""],[38811,0," (the parent version of the new event, "],[38849,1,""],[38848,1,""],[38848,0,")"],[38786,7,""],[38862,9,""],[38862,0," nan"],[38865,1,""],[38865,0,"mes"],[38936,4,""],[38936,0,"have been"],[39567,1,""],[39567,0,"\n\n"],[39509,60,""],[39612,1,""],[39611,1,""],[39611,0," "],[38683,0,"i"],[38731,11,""],[38749,0," is computed"],[38834,4,""],[38834,0,"visited "],[38850,18,""],[38850,0,"T"],[38850,1,""],[38850,0,"The set difference"],[38883,0," add "],[38887,1,""],[38887,0,"ed and"],[38894,0,"removed "],[38908,67,""],[38884,0,"events added and removed bwet"],[38912,1,""],[38911,1,""],[38910,1,""],[38910,0,"etween versions"],[38925,24,""],[38994,17,""],[38970,0,"changed "],[38983,19,""],[40723,9,""],[40724,0,"ghd "],[40724,4,""],[40724,0,"ghe "],[40727,1,""],[40726,1,""],[40725,1,""],[40724,1,""],[40724,0,"the "],[40737,0,"'s behaviour"],[42884,0," version"],[42985,0," in the algorithm presented ba"],[43014,1,""],[43013,1,""],[43013,0,"above"],[43180,42,""],[43113,9,""],[43076,5,""],[43076,0,"T"],[43098,10,""],[43995,16,""],[43995,0,"intuition"],[44013,0," optimisation"],[53318,437,""],[50103,0,"\n== Editing traces\n\nTalk about how random data is very different from human generated data\n\n3 types of benchmark data:\n\n- Sequential traces (single user editing traces)\n- Concurrent traces (multiple users typing concurrently)\n- Traces from Git (reconstructed from diffs, much more complex CGs)\n\n== Performance Goals\n\n- Low memory footprint\n- Performance\n- Small disk space\n\n== Implementations\n\n- eg-walker\n- fugue-crdt\n- Automerge\n- Yjs\n"],[50541,12,""],[50103,0,"\n"],[50103,0,"\nEg-walker is ver"],[50114,6,""],[50114,0,"has excellent "],[50104,24,""],[50104,0,"Eg-walker has excellent"],[50103,0,"\n\n"],[50104,0,"We have implemented a highly optimised implementation of our eg-walker algorithm in rust, using a lot of optimisations to improve performance as much as possible. "],[50266,1,""],[50266,0,"\n\nUI"],[50269,1,""],[50268,1,""],[50268,0,"In this sction"],[50276,6,""],[50276,0,"section, we "],[50287,1,""],[50287,0,":\n\n- dec"],[50294,1,""],[50293,1,""],[50292,1,""],[50292,0,"Describe "],[50290,11,""],[50290,0,"- Describe"],[50266,0," Our implementation is usually faster than most "],[50289,0,"almost always "],[50303,8,""],[50315,5,""],[50315,0,"comp"],[50315,4,""],[50315,0,"comparable CRDT algorithms in prac"],[50345,4,""],[50345,0,"almost all practical editing scenarios."],[50342,42,""],[50341,1,""],[50341,0,"."],[50288,1,""],[50288,0,":\n\n- "],[50293,1,""],[50293,0,"A"],[50346,0,"\n"],[50346,1,""],[50345,1,""],[50345,0,"\n- "],[50346,2,""],[50346,0,"-"],[50285,3,""],[50290,0,"Is "],[50293,1,""],[50293,0,"a"],[50347,0," Usua"],[50351,1,""],[50350,1,""],[50350,0,"es less RAM\n- P"],[50364,1,""],[50364,0,"U"],[50364,1,""],[50364,0,"Has a smaller file size\n"],[50267,0,"Compared to existing CRDT algorithms, "],[50293,10,""],[50293,0,"implementations"],[50279,9,""],[50279,0,"cone"],[50282,1,""],[50282,0,"temporary "],[50279,0,"the e"],[50283,1,""],[50282,1,""],[50281,1,""],[50280,1,""],[50279,1,""],[50279,0,"equivalent "],[50289,0,","],[50326,3,""],[50326,0,"reg-"],[50329,1,""],[50328,1,""],[50327,1,""],[50326,1,""],[50326,0,"eg-walker is"],[50338,15,""],[50335,3,""],[50363,32,""],[50382,4,""],[50382,0,"Stores editing traces in "],[50382,44,""],[50382,0,"Uses less space on "],[50382,19,""],[50382,0,"Has a smaller file size on disk"],[50414,0,"\n"],[50415,2,""],[50434,1,""],[50434,0," "],[50434,1,""],[50434,0,":"],[50447,0," our bencm"],[50456,1,""],[50456,0,"hmarking methodology"],[50447,0," and justify"],[50488,0,"\n- Introduce our s"],[50505,1,""],[50505,0,"testing data"],[50501,4,""],[50513,0,"\n- Name a series of optimisations. Some optimisations are applicable to all "],[50582,7,""],[50582,0,"to both eg-walker and traditional CRDT based approaches. "],[50638,1,""],[50637,1,""],[50637,0,", while others are only applicable to eg-walker."],[50516,4,""],[50516,0,"Introduce"],[50690,0," Some optimisations are novel, and "],[50721,4,""],[50691,30,""],[50690,1,""],[50690,0," Many of these optimisations are known in industry, "],[50691,51,""],[50691,0,"Whever"],[50696,1,""],[50695,1,""],[50694,1,""],[50694,0,"rever possible "],[50708,1,""],[50690,18,""],[50690,0," It is unclear how novel these optimisations are."],[50738,1,""],[50738,0," - "],[50740,1,""],[50739,1,""],[50738,1,""],[50691,47,""],[50691,0,"Wherever possible, we cite the source of "],[50722,10,""],[50722,0,"original "],[50691,40,""],[50690,1,""],[50690,0," Many of these optimisations are not novel, but as far as we know have never been documented in"],[50772,13,""],[50772,0,"formally documented. We attribute "],[50796,10,""],[50796,0,"give credit wherever we can."],[50808,0,"to original authors "],[50844,0,"\n\nEg-walker"],[50846,0,"Our optimised "],[50860,1,""],[50860,0,"e"],[50869,0," implementation is compared "],[50846,3,""],[50846,0,"We compare our"],[50896,12,""],[50896,0,"to:\n\n- "],[50902,1,""],[50901,1,""],[50900,1,""],[50899,1,""],[50845,0,"\n"],[50845,0,"\nW"],[50846,1,""],[50845,1,""],[50844,1,""],[50898,1,""],[50898,0," contemporary CRDT based approaches:\n\n- Yjs"],[50940,1,""],[50940,0,"*strong*"],[50940,8,""],[50940,0,"s\n- Automerge\n- ??? (Aht"],[50963,1,""],[50962,1,""],[50961,1,""],[50961,0,"The toerh"],[50969,1,""],[50968,1,""],[50967,1,""],[50966,1,""],[50965,1,""],[50965,0,"other al"],[50972,1,""],[50971,1,""],[50971,0,"CRDTs that have shown up on HN?)\n\nAs "],[51007,1,""],[51006,1,""],[51006,0,"s well as our own CRDT algorith"],[51029,8,""],[51029,0,"implementation"],[51024,0,"optimse"],[51030,1,""],[51029,1,""],[51028,1,""],[51028,0,"mised "],[51053,0,", also "],[51055,5,""],[51055,0,"written a"],[51063,1,""],[51063,0,"in rust and using most of the same libraries."],[51098,9,""],[51075,23,""],[51075,0,"a"],[51075,1,""],[51075,0,"sharing as mnuch"],[51090,1,""],[51089,1,""],[51088,1,""],[51087,1,""],[51087,0,"uch code as possible. This allows an apples-to-apples comparison"],[51120,1,""],[51120,0,", as much as possible, "],[51174,0," "],[51113,62,""],[51113,0," eliminates "],[51109,5,""],[51109,0,"To the best of our ability, this "],[51153,0,"implementation and language differences and allwos th"],[51197,9,""],[51197,0,"allows the algrir"],[51213,1,""],[51212,1,""],[51211,1,""],[51211,0,"orithms themselves to be compared."],[51244,0," fairly"],[51253,25,""],[51253,0,"\n"],[51245,0,"as "],[51254,0," as possible"],[51288,0,"\n\n"],[51289,0,"Unfortunately, one problem with "],[51304,17,""],[51304,0,"it is quite"],[51304,11,""],[51304,0,"con"],[51306,1,""],[51306,0,"llaborated "],[51316,1,""],[51304,12,""],[51304,0,"editing traces"],[51304,14,""],[51304,0,"humans "],[51304,7,""],[51304,0,"it is very difficult to accurate"],[51328,0,"generate "],[51345,0," testing data"],[51337,9,""],[51328,0,"randomly "],[51328,9,""],[51336,0," reali"],[51336,6,""],[51349,0," which is representative of actual human "],[51377,13,""],[51377,0,"editing sequ"],[51385,4,""],[51385,0,"traces written by humans."],[51350,5,""],[51350,0,"that"],[51303,0," "],[51304,25,""],[51304,0,"artifiic"],[51311,1,""],[51310,1,""],[51310,0,"cially "],[51324,1,""],[51324,0,"ing"],[51340,60,""],[51328,12,""],[51289,39,""],[51289,0,"Unfortunately, artificially generating"],[51288,0,"\n\n"],[51289,0,"\n"],[51289,1,""],[51289,0,"Fro"],[51291,1,""],[51290,1,""],[51290,0,"or fair evaluation, we want our system to perform well in realistic editing scenarios. "],[51358,0,"text "],[51289,22,""],[51289,0,"W"],[51327,0,"a variety of "],[51373,1,""],[51372,1,""],[51372,0,", including:\n\n- A single user editing a documnet "],[51420,1,""],[51419,1,""],[51418,1,""],[51417,1,""],[51417,0,"ent "],[51420,1,""],[51420,0,". All changes are made in sequence.\n- Multiple users concurrently editing the same document in realtime\n- Multipl eu"],[51535,1,""],[51534,1,""],[51533,1,""],[51533,0,"e users concurrently editing a document asyncronously. For example, a "],[51578,0,"h"],[51604,0,"source code file edited by a team"],[51628,0,"in Git "],[51644,0," of engineers.\n\n"],[51660,2,""],[51698,0," realistic editing traces is extremely difficult. And many optimisations which make "],[51777,5,""],[51777,0,"improve performance in realistic editing scen"],[51751,71,""],[51751,0," there are many properties of real editing traces that we can exploit for "],[51821,4,""],[51821,0,"to ipr"],[51826,1,""],[51825,1,""],[51825,0,"mprove performance that do "],[51849,3,""],[51849,0,"simply do not show up in random editing "],[51881,8,""],[51881,0,"sequences of edits. Fo"],[51902,1,""],[51901,1,""],[51901,0,"F"],[51901,1,""],[51901,0,"To address this problem, we have colledc"],[51940,1,""],[51939,1,""],[51939,0,"cted our own "],[51933,19,""],[51933,0," been collecting a set of standardised editing traces"],[51747,0," Real humans edit documents in v"],[51778,1,""],[51748,30,""],[51748,0,"Humans hav "],[51758,1,""],[51758,0,"e very "],[51659,0,"\n"],[51659,0,"\nReal editing traces from actual users are"],[51700,1,""],[51699,1,""],[51698,1,""],[51698,0,"often contain"],[51698,13,""],[51698,0,"contain many characteristic "],[51711,0,"surprising "],[51711,26,""],[51711,0,"features which optimisat"],[51734,1,""],[51733,1,""],[51733,0,"ed editing systems can explot "],[51762,1,""],[51761,1,""],[51761,0,"it to improveme"],[51775,1,""],[51774,1,""],[51774,0," performance. For example, u"],[51801,1,""],[51801,0,"humans typs in "],[51815,1,""],[51814,1,""],[51813,1,""],[51812,1,""],[51811,1,""],[51811,0,"e"],[51808,0,"typically "],[51822,0," in sequential runs of characters."],[51856,2,""],[51856,0," "],[51857,16,""],[51857,0,"A"],[51881,9,""],[51880,1,""],[51895,0," wi"],[51897,1,""],[51897,0,"hich contain"],[51857,0,"Unfortunately, "],[51872,1,""],[51872,0,"a"],[51925,0,"all of these charactersist"],[51950,1,""],[51949,1,""],[51948,1,""],[51947,1,""],[51947,0,"istic features "],[51985,172,""],[51985,0,"\n\n"],[52072,0,". The traces are published on githuh"],[52107,1,""],[52107,0,"b"],[52089,0,"licensed for po"],[52103,1,""],[52103,0,"ublic use, and "],[52137,0," @edi"],[52139,3,""],[52139,0,"editing-traces."],[52131,6,""],[52131,0,"GitHub"],[51438,7,""],[51438,0,"performn"],[51445,1,""],[51445,0,"ed in a linear"],[51453,6,""],[51453,0,"fully o"],[51448,12,""],[51448,0,"sequentially"],[51460,10,""],[51460,0," in time."],[51422,47,""],[51422,0,"None of the chnages"],[51434,7,""],[51434,0,"changes happen concurrently"],[51422,39,""],[51421,1,""],[51421,0," Changes a"],[51430,1,""],[51430,0,"are all performend "],[51438,11,""],[51438,0,"performed sequentially"],[51448,12,""],[51448,0,"in a purely linear history."],[51434,4,""],[51462,8,""],[51462,0," sequence "],[51471,1,""],[51471,0," through time"],[51553,0,"."],[51757,25,""],[51757,0,"well designed systems"],[51828,7,""],[51828,0,"people "],[52099,0," for use in benchmarking and performance tuning"],[52230,100,""],[51385,0,"\n/ Sequential Traces"],[51386,1,""],[51386,0,"\\"],[51405,0,": asdf\n"],[51386,1,""],[51386,0,"/"],[51415,97,""],[51413,2,""],[51413,0,"-"],[51407,4,""],[51407,0,"A single user editing a document. Changes are performed in a purely linear sequence through time."],[51505,0,"/ Concurrent traces"],[51518,1,""],[51518,0,"T"],[51524,4,""],[51524,0,":"],[51593,0,"/"],[51594,1,""],[51594,0," Asyncronous Traces:"],[52070,0,"\n"],[51748,1,""],[52069,0,"\n/ Asyncronous Traces: Multiple users concurrently editing a document asynchronously. For example, a source code file edited in Git by a team of engineers."],[51593,155,""],[51914,0,"\n/ Concurrent Traces: Multiple users concurrently editing the same document in realtime."],[51505,88,""],[51826,0,"\n/ Sequential Traces: A single user editing a document. Changes are performed in a purely linear sequence through time."],[51386,119,""],[51707,0,"\n"],[51385,1,""],[51706,0,"\nWe want our system to perform well in a variety of realistic text editing scenarios, including:"],[51289,96,""],[51610,0,"\n"],[51481,1,""],[51481,0,"\n\n"],[52288,0,"\n"],[52073,1,""],[52287,0,"\n"],[52072,1,""],[52286,0,"\n/ Asyncronous Traces: Multiple users concurrently editing a document asynchronously. For example, a source code file edited in Git by a team of engineers."],[51917,155,""],[52131,0,"\n/ Concurrent Traces: Multiple users concurrently editing the same document in realtime."],[51829,88,""],[52043,0,"\n/ Sequential Traces: A single user editing a document. Changes are performed in a purely linear sequence through time."],[51710,119,""],[51924,0,"\n"],[51709,1,""],[51923,0,"\nWe want our system to perform well in a variety of realistic text editing scenarios, including:"],[51613,96,""],[51827,0,"\n\nOur editing traces fall in 3 m"],[51858,1,""],[51858,0,"main categories:\n"],[51875,1,""],[51874,1,""],[51873,1,""],[51873,0,", representing different classes of "],[51909,50,""],[51908,1,""],[51941,1,""],[51941,0,":"],[51942,11,""],[52306,177,""],[52306,0,"\n"],[52158,0,"h"],[52306,1,""],[52307,0,"\n"],[52307,0,"\n"],[52307,1,""],[52306,1,""],[52328,0,"\n\nThere are 3 criteria "],[52330,5,""],[52330,0,"We a"],[52333,1,""],[52333,0,"evaluate our system across"],[52359,4,""],[52362,9,""],[52362,0,"main categories:\n\n"],[52330,50,""],[52330,0,"Eg-walker "],[52339,1,""],[52330,9,""],[52330,0,"We evaluate our system across 3 main categories:\n\n"],[52362,5,""],[52375,0,"- Memory"],[52375,1,""],[52375,0,"/"],[52383,0," footprint: Ideally, our system requires "],[52395,29,""],[52395,0,"How much resident m"],[52413,1,""],[52413,0,"RAM does our system use while diting a d"],[52443,10,""],[52443,0,"editing a document?\n/ Performance"],[52462,0,"\n/ Disk space: How large"],[52481,5,""],[52481,0,"much disk space do editing traces ("],[52515,1,""],[52514,1,""],[52514,0," or CRDT documents consume?"],[52481,18,""],[52481,0,"large are"],[52523,9,""],[52523,0," on disk?"],[52546,0,": "],[52547,1,""],[52547,0," Performance is"],[52535,0,"CPU "],[52539,1,""],[52539,0,"p"],[52566,0," broken up into a number of cub-"],[52597,1,""],[52596,1,""],[52595,1,""],[52594,1,""],[52594,0,"sub-categories:"],[52610,56,""],[52610,0,"\n\n"],[52610,1,""],[52609,1,""],[52608,1,""],[52608,0," based on how CRDT s"],[52627,1,""],[52626,1,""],[52626,0,"s are used:"],[52638,0,"\n- How much CPU overhead"],[52641,0,"Of a "],[52645,1,""],[52644,1,""],[52643,1,""],[52642,1,""],[52641,1,""],[52641,0,"f"],[52641,1,""],[52641,0,"Of"],[52642,1,""],[52641,1,""],[52641,0,"If a user sits down and types "],[52641,51,""],[52639,2,""],[52639,0,"-"],[52552,0," "],[52552,1,""],[52552,0,"CPU "],[52556,1,""],[52556,0,"[p"],[52557,1,""],[52556,1,""],[52556,0,"p"],[52571,70,""],[52571,0,"measured in a few different usage scenarios:"],[51268,0,"\n== Optimisations\n\n\n\n== Benchmarking"],[51303,1,""],[51302,1,""],[51301,1,""],[51301,0,"s"],[51304,0,"="],[52345,0,"="],[52658,0,"="],[52737,3153,""],[51285,0,"  <optimisations>\n\nWe have implemented a highly optimised implementation of our eg-walker algorithm in rust, using a lot of optimisations to improve performance as much as possible. Many of the optimisations have not been implemented in contemporary CRDT libraries like Automerge and Yjs, which makes it difficult to fairly evaluate performance.\n\nTo fix this, we have also written an equivalently highly optimised implementation of FugueMax, hereafter _fugue-crdt_. fugue-crdt shares many of the same library choices and optimisations in order to make the comparison as fair as possible.\n\nIn this chapter, we will describe these optimisations and, where possible, benchmark their performance in isolation.\n\nSome optimisations can also be used to improve the performance of traditional CRDTs. All optimisations like this have also been applied in our fugue-crdt implementation.\n\nIn the benchmarking chapter [x] below, we will assess eg-walker against fugue-crdt and other contemporary CRDT implementations on a number of metrics, using a variety of real-world editing traces that we have recorded as part of this work.\n\nMany of these optimisations are not novel. We suspect many of these tricks have been discovered many times by different engineering teams, but simply not written up. We will give attribution wherever we can.\n\n\n== Global optimisations\n\n... Which affect both CRDT and event graph implementations\n\n=== Agent & Sequence number for event IDs\n\n... Rather than hashes or random IDs for each event.\n\n=== Internal Run-length encoding\n\nAnd file RLE.\n\nAnd backspace optimisation\n\n=== Local versions and Remote versions\n\n\n=== Tree -> List transformation\n\n=== Range tree for CRDT structure - store the list as a tree again\n\n\n== Eg-walker specific optimisations\n\nThe causal graph for real world editing traces usually contain many _critical versions_. A critical version $C$ is a version which separates all events in the event graph $G$ into two disjoint subsets $ceil(C)$ and $T = G - ceil(C)$ such that all events in $ceil(C)$ _happened-before_ all events in $T$. Ie, $forall i in T, j in ceil(C), i <- j$.\n\nCritical versions are very useful for all sorts of\n\nThese moments are very useful\n\n- Every event in $S$ _happened-before_ $C$. Ie,\n\nwhere peers synchronise sufficiently for all future changes in the graph to be causally _after_ some specific version.  and there exists versions $V$ where all events are either strictly before or strictly after $V$. (Ie, $forall i in G, i in ceil(V) xor forall v in V, v <- i$.\n\nOn careful inspection of this algorithm, the fields of each node are only relevant in a few situations:\n\n- The _originLeft_ and _originRight_ fields only have a bearing on the resulting document state when concurrent inserts happen at the same original location in the document.\n- Deleted items likewise only matter when there are concurrent edits. Concurrent inserts may depend on a deleted item for ordering, and a deleted item may be \"revived\" if #vp is ever set to a version before the item was deleted.\n\n\n=== LUB containment of merging\n\n\n=== Clearing and Fast forward mode\n\n=== Query plan (traversal order) optimisation\n\n"],[51285,1,""],[52613,0,"="],[52700,0,"="],[52799,0,"="],[52878,0,"="],[52920,0,"="],[52954,0,"="],[53023,0,"="],[54332,0,"="],[54366,0,"="],[54403,0,"="],[54465,0," <benchmarking>"],[55917,48,""],[50448,12,""],[50476,0," and testing data"],[50436,0,"\n"],[50436,1,""],[51274,1,""],[52619,1,""],[52704,1,""],[52801,1,""],[52878,1,""],[52919,1,""],[52952,1,""],[53021,1,""],[54328,1,""],[54361,1,""],[54397,1,""],[51273,3169,""],[50089,0,"\n= Optimisations <optimisations>\n\nWe have implemented a highly optimised implementation of our eg-walker algorithm in rust, using a lot of optimisations to improve performance as much as possible. Many of the optimisations have not been implemented in contemporary CRDT libraries like Automerge and Yjs, which makes it difficult to fairly evaluate performance.\n\nTo fix this, we have also written an equivalently highly optimised implementation of FugueMax, hereafter _fugue-crdt_. fugue-crdt shares many of the same library choices and optimisations in order to make the comparison as fair as possible.\n\nIn this chapter, we will describe these optimisations and, where possible, benchmark their performance in isolation.\n\nSome optimisations can also be used to improve the performance of traditional CRDTs. All optimisations like this have also been applied in our fugue-crdt implementation.\n\nIn the benchmarking chapter [x] below, we will assess eg-walker against fugue-crdt and other contemporary CRDT implementations on a number of metrics, using a variety of real-world editing traces that we have recorded as part of this work.\n\nMany of these optimisations are not novel. We suspect many of these tricks have been discovered many times by different engineering teams, but simply not written up. We will give attribution wherever we can.\n\n\n== Global optimisations\n\n... Which affect both CRDT and event graph implementations\n\n=== Agent & Sequence number for event IDs\n\n... Rather than hashes or random IDs for each event.\n\n=== Internal Run-length encoding\n\nAnd file RLE.\n\nAnd backspace optimisation\n\n=== Local versions and Remote versions\n\n\n=== Tree -> List transformation\n\n=== Range tree for CRDT structure - store the list as a tree again\n\n\n== Eg-walker specific optimisations\n\nThe causal graph for real world editing traces usually contain many _critical versions_. A critical version $C$ is a version which separates all events in the event graph $G$ into two disjoint subsets $ceil(C)$ and $T = G - ceil(C)$ such that all events in $ceil(C)$ _happened-before_ all events in $T$. Ie, $forall i in T, j in ceil(C), i <- j$.\n\nCritical versions are very useful for all sorts of\n\nThese moments are very useful\n\n- Every event in $S$ _happened-before_ $C$. Ie,\n\nwhere peers synchronise sufficiently for all future changes in the graph to be causally _after_ some specific version.  and there exists versions $V$ where all events are either strictly before or strictly after $V$. (Ie, $forall i in G, i in ceil(V) xor forall v in V, v <- i$.\n\nOn careful inspection of this algorithm, the fields of each node are only relevant in a few situations:\n\n- The _originLeft_ and _originRight_ fields only have a bearing on the resulting document state when concurrent inserts happen at the same original location in the document.\n- Deleted items likewise only matter when there are concurrent edits. Concurrent inserts may depend on a deleted item for ordering, and a deleted item may be \"revived\" if #vp is ever set to a version before the item was deleted.\n\n\n=== LUB containment of merging\n\n\n=== Clearing and Fast forward mode\n\n=== Query plan (traversal order) optimisation\n\n"],[50240,1,""],[50240,0," \"tricks\""],[50121,0,"\n\nWe have implemented a highly optimised implementation of our eg-walker algorithm in rust, using a lot of optimisations to improve performance as much as possible. Compared to equivalent, contemporary CRDT implementations, eg-walker:\n\n\n"],[50356,0,"\nWe compare our optimised eg-walker implementation to contemporary CRDT based approaches:\n\n- Yjs\n- Automerge\n- ??? (The other CRDTs that have shown up on HN?)\n\nAs well as our own optimised CRDT implementation, written in rust and sharing as much code as possible. To the best of our ability, this eliminates implementation and language differences and allows the algorithms themselves to be compared as fairly as possible.\n"],[50123,660,""],[50462,3,""],[50462,0,"address"],[50293,1,""],[50293,0,"\n\n\n"],[50293,0," Inb"],[50296,1,""],[50296,0," this section, we describe a"],[50323,1,""],[50323,0,"the"],[50293,0," "],[50293,1,""],[50293,0," Poor performance"],[50299,0,"CRDT "],[50315,0," "],[50315,1,""],[50315,0," has"],[50294,0,"In the past, "],[50307,1,""],[50307,0,"p"],[50328,0," o"],[50329,1,""],[50312,5,""],[50323,0," of CRDT based approaches has stunted i"],[50361,1,""],[50361,0,"their adoption"],[50307,0,"the consistently "],[50392,0,". We hope that "],[50406,0," eg-walker "],[50394,23,""],[50393,1,""],[50370,7,""],[50370,0,"hampered"],[50393,0," in many areas"],[50409,6,""],[50429,12,""],[50429,0,"list a series of optimisations which, together"],[50465,1,""],[50474,0," make eg-walker"],[50480,0,"our "],[50493,0," implementation faster than "],[50516,5,""],[50516,0,"in almost every situation than"],[50509,37,""],[50509,0,"perform extremely well in almost all editing scenarios."],[50531,32,""],[50459,0," which can "],[50466,4,""],[50465,1,""],[50465,0,", we hope, will address this issue.\n\n\n\n"],[50481,0,"entirel"],[50481,7,""],[50499,0," entirely"],[50509,1,""],[50510,0,"\nSome of these optimistions "],[50525,13,""],[50516,9,""],[50516,0,"optimisations are applicable on "],[50545,3,""],[50545,0,"on"],[50546,1,""],[50545,1,""],[50545,0,"for both "],[50545,9,""],[50545,0,"in both CRDT"],[50553,0,"traditional "],[50569,0," based systems and eg-walker. Some "],[50599,5,""],[50599,0,"Other optimisations only "],[50511,113,""],[50511,0,"Some optimisations are applicable in both traditional CRDT based systems and eg-walker. Other optimisations only"],[50306,17,""],[50337,11,""],[50337,0," algorithms"],[50380,10,""],[50380,0,"industry"],[50389,0," We hope to "],[50389,12,""],[50388,1,""],[50388,0,", and given CRDTs a reputation for being slow and "],[50433,5,""],[50433,0,"."],[50429,4,""],[50429,0,"impractical in real systems"],[50457,1,""],[50457,0,"\n\n"],[50515,0," together make both CRDT based approaches and eg-walker perform extremely well."],[50594,3,""],[50594,0," W"],[50602,1,""],[50602,0," this"],[50621,4,""],[50621,0,"the"],[50660,0," listed here"],[50688,2,""],[50688,0,"for use in"],[50774,0," apply to eg-walker. "],[50642,153,""],[50642,0,"Some optimisations listed here are applicable for use in both traditional CRDT based systems and eg-walker. Other optimisations only apply to eg-walker."],[50642,231,""],[50642,0,"Some optimisations listed here are applicable for use in both traditional CRDT based systems and eg-walker. Other optimisations only apply to eg-walker.\n\n which together make our eg-walker implementation perform extremely well.\n\n\nM"],[50642,231,""],[50642,0,"M"],[50641,0,"\n"],[50641,0,"\nIn this section we also "],[50642,24,""],[50642,0,"Many of the optimisations listed here are also applicable to CRDT based text edt"],[50721,1,""],[50721,0,"iting systems. "],[50680,3,""],[50680,0,"can also be applied"],[50699,18,""],[50699,0," t"],[50735,3,""],[50735,0," However, they have no t"],[50758,1,""],[50757,1,""],[50757,0,"t all been implemented in "],[50783,55,""],[50833,0,". This"],[50839,7,""],[50735,1,""],[50735,0,"\n\n\n"],[50894,245,""],[50894,0,"To address this, we have also written an equivalently highly optimised implementation of FugueMax, hereafter _fugue-crdt_. fugue-crdt shares many of the same library choices and optimisations in order to make the comparison as fair as possible.\n"],[50735,0," E"],[50736,1,""],[50736,0,"We have also written an equivalently highly optimised implementation of FugueMax, hereafter _fugue-crdt_. fugue-crdt shares many of the same library choices and optimisations in order to make the comparison as fair as possible."],[50860,36,""],[50860,0,"as much code as possible with eg-walker"],[50890,0,"our optimised "],[50913,0," iomp"],[50917,1,""],[50916,1,""],[50916,0,"mple"],[50919,1,""],[50918,1,""],[50917,1,""],[50916,1,""],[50915,1,""],[50915,0,"mplementation. "],[50929,1,""],[50928,1,""],[50928,0,", and it contains all applicable "],[50960,1,""],[50928,56,""],[50928,0," in order "],[50960,0," bw"],[50962,1,""],[50962,0,"etween approaches"],[51000,0,"\n\n"],[51001,1,""],[51000,1,""],[51000,0,"\n\nWe also include comparision"],[51028,1,""],[51027,1,""],[51026,1,""],[51026,0,"ons with contemporary CRDT based libraries like Yjs and Automerge."],[51093,404,""],[51093,0,"\n"],[50595,45,""],[50459,136,""],[50459,0,"In this section, we list a series of optimisations which together make both CRDT based approaches and eg-walker perform extremely well. where possible, benchmark their performance in isolation."],[50595,1,""],[50595,0,"W"],[50610,0," we also"],[50646,0," gain"],[50665,0," Though this is not always possible"],[50692,8,""],[50692,0,"easy, and not all "],[50709,1,""],[50708,1,""],[50708,0,"ways indicitive of the "],[50718,1,""],[50718,0,"a"],[50731,0,"performance gain when multiple optimisations work in concert."],[50702,10,""],[50702,0,"it is not"],[50775,0,"are applied "],[50787,15,""],[50787,0,"together"],[51368,0,"// "],[51250,0,"// "],[51158,0,"// "],[51995,1,""],[51995,0,", but apo"],[52003,1,""],[52003,0,"pologise in advance for any omissions. Please get in touch "],[52003,1,""],[52061,0,"if you would like c"],[52040,40,""],[52171,52,""],[52171,0,"Each event needs a uni"],[52192,1,""],[52191,1,""],[52190,1,""],[52190,0,"globally unique ID. I"],[52210,1,""],[52209,1,""],[52182,0,"in the event graph "],[52182,0,"or CRDT message"],[52197,18,""],[52205,0," "],[52205,1,""],[52205,0,"n assigned"],[52235,0," This "],[52236,5,""],[52235,1,""],[52235,0," This "],[52240,1,""],[52239,1,""],[52238,1,""],[52237,1,""],[52236,1,""],[52236,0,"IDs must be comparable "],[52236,23,""],[52235,1,""],[52235,0," The standard way"],[52240,12,""],[52240,0,"most obvious wwa"],[52255,1,""],[52254,1,""],[52254,0,"ay to implement"],[52260,9,""],[52260,0,"give"],[52253,11,""],[52253,0,"aprpoa"],[52253,6,""],[52253,0,"approach to solving this problem is giving every asdf"],[52305,1,""],[52304,1,""],[52303,1,""],[52302,1,""],[52262,24,""],[52264,0," to assign"],[52274,7,""],[52281,0,"event a GUID"],[52289,4,""],[52289,0,"totally random "],[52289,15,""],[52289,0,"GUID using some GUID scenem"],[52315,1,""],[52315,0," "],[52315,1,""],[52314,1,""],[52313,1,""],[52312,1,""],[52312,0,"heme like "],[52305,17,""],[52305,0,"UUID scheme like RFC4122 [REFERENCE]."],[52317,4,""],[52316,1,""],[52316,0,", for example"],[52350,0,"\n\nUnfor"],[52356,1,""],[52355,1,""],[52354,1,""],[52353,1,""],[52352,1,""],[52351,1,""],[52350,1,""],[52351,0,"\n"],[52351,0,"\nUnfro"],[52356,1,""],[52355,1,""],[52355,0,"ortunately, this has a large"],[52350,0," "],[52350,1,""],[52383,0," "],[52352,32,""],[52352,0,"Unfortunately, this has a large"],[52350,0," "],[52171,180,""],[52171,0,"Each event or CRDT message needs an assigned globally unique ID. The most obvious approach is to assign every event a GUID using some UUID scheme, for example RFC4122 [REFERENCE]."],[52170,0,"\n"],[52170,0,"\nRather than using a UUID scene"],[52200,1,""],[52199,1,""],[52171,28,""],[52170,1,""],[52169,1,""],[52383,0," file size cost. "],[52399,1,""],[52372,4,""],[52372,0,"aprp"],[52375,1,""],[52374,1,""],[52374,0,"proa"],[52377,1,""],[52377,0,"o"],[52377,1,""],[52377,0,"ach incurs a "],[52389,1,""],[52388,1,""],[52318,11,""],[52318,0,";l"],[52319,1,""],[52318,1,""],[52318,0,"like"],[52374,30,""],[52374,0,"dramatically bloats file size. UUID"],[52405,4,""],[52405,0,"UUIDs (Li"],[52413,1,""],[52412,1,""],[52412,0,"like in "],[52345,75,""],[52345,0,"Unfortunately, this approach dramatically bloats file size. UUIDs (like in"],[52412,7,""],[52411,1,""],[52411,0,"are many bytes long to facilitate "],[52434,11,""],[52434,0,"guarantee uniqueness. If a UUID is assigned on every keystroke, "],[52455,0," T"],[52456,1,""],[52456,0,"RFC4122 ?U"],[52465,1,""],[52464,1,""],[52464,0,"UUIDs are 16 bytes long."],[52454,0,", and largely uncompressible"],[52481,1,""],[52480,1,""],[52479,1,""],[52478,1,""],[52478,0,"able"],[52475,2,""],[52475,0,"omi"],[52460,0,"by design "],[52478,15,""],[52478,0,"uncompressbal"],[52490,1,""],[52489,1,""],[52488,1,""],[52488,0,"able"],[52569,0,"they would easily domin"],[52569,23,""],[52569,0,"sil"],[52571,1,""],[52570,1,""],[52569,1,""],[52569,0,"filesize is"],[52579,1,""],[52578,1,""],[52578,0,"would be dominated by storing the UUIDs of each event.\n\nA better approach is to use (agent, seq) tuples."],[52658,4,""],[52658,0," as"],[52660,1,""],[52659,1,""],[52658,1,""],[52658,0,"assign "],[52685,0," "],[52685,1,""],[52684,1,""],[52684,0," to each event. The sequence numbers incre"],[52725,1,""],[52725,0,"ase "],[52728,1,""],[52727,1,""],[52726,1,""],[52725,1,""],[52725,0,"ease"],[52721,0,"store in"],[52728,1,""],[52727,1,""],[52734,1,""],[52734,0,"ing "],[52634,104,""],[52634,0,"A better approach is to assign (agent, seq) tuples to each event. The sequence numbers store increasing"],[52739,77,""],[52127,0,"=== Internal Run-length encoding\n\nAnd file RLE.\n\nAnd backspace optimisation\n\n"],[52127,0,"\n"],[52665,0,"quickly "],[52770,14,""],[52770,0," to events"],[52819,0," integers. These "],[52830,6,""],[52829,1,""],[52786,0,"agent ID is assigned once per editing session, and the "],[52807,0,"only "],[52836,0,". "],[52838,11,""],[52838,0,"S"],[52880,1,""],[52880,0," - which"],[52861,0,"in"],[52862,1,""],[52861,1,""],[52861,0,"auto"],[52865,10,""],[52865,0,"incremented"],[52875,1,""],[52874,1,""],[52874,0,"ing"],[52894,0," compress extremely well"],[52894,0,", due to the nature of how mu"],[52922,1,""],[52921,1,""],[52921,0,"humans edit documents"],[52886,10,""],[52886,0,". These compress extremely well "],[52964,24,""],[52964,0,".\n\n> STATS\n\nOne downside of this approach is that it makes system s"],[53030,1,""],[53029,1,""],[53029,0,"s vulnerable to BFT"],[53047,1,""],[53046,1,""],[53045,1,""],[53045,0,"Byzantine Fault"],[53054,6,""],[53045,1,""],[53045,0,"b"],[53054,0," actors on the network. [MAr"],[53081,1,""],[53080,1,""],[53080,0,"artin - BFT] paper discusses using Git-style hashes t"],[53132,1,""],[53131,1,""],[53131,0," instead, "],[52976,165,""],[52976,0,"One downside of this approach is that it makes systems vulnerable to byzantine actors on the network. [Martin - BFT] paper discusses using Git-style hashes instead, however the optimisation "],[53149,4,""],[53149,0,"doing this in a space-efficin"],[53177,1,""],[53177,0,"ent way is still "],[53194,13,""],[53149,0,"as far as we know, "],[53213,0,"an unsolved problem."],[52161,0,"\n\n"],[9073,0,"now "],[9896,0,"\n"],[9896,0,"\n"],[9896,1,""],[9895,1,""],[9896,0,"\n"],[11911,0,"Tgh"],[11913,1,""],[11912,1,""],[11912,0,"he set of "],[11922,1,""],[11922,0,"c"],[11911,11,""],[11911,0,"All of the "],[11940,0,"in a graph are "],[11955,4,""],[11968,9,""],[12066,17,""],[12066,0,"greatest lower bound (GLB)"],[12086,6,""],[12140,67,""],[12139,0,"\n\n#figure(\n  fletcher.diagram(\n    // cell-size: 1mm,\n    spacing: (8mm, 8mm),\n    // node-stroke: black + 0.5pt,\n    node-stroke: 0.5pt,\n    // node-shape: rectangular,\n    // debug: 1,\n    // node-fill: blue.lighten(90%),\n  {\n    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n    edge(a, b, bend: -10deg, \"->\")\n    edge(a, c, bend: 10deg, \"->\")\n    edge(b, d, bend: -10deg, \"->\")\n    edge(c, d, bend: 10deg, \"->\")\n  }),\n  caption: [Example event graph]\n) <eg-simple>\n"],[12170,23,""],[12195,35,""],[12219,86,""],[12531,9,""],[12531,0,"gcv"],[12497,0,"// "],[12497,3,""],[12507,19,""],[12507,0,"asdf"],[12519,0,"-example"],[12497,0,"// "],[12488,0,"\n    \n    "],[12489,4,""],[12494,0,"edge(-3, 0)"],[12499,0,"("],[12506,0,", (3, 0))\n"],[12489,1,""],[12514,0,"\n    edge(c, d, bend: 10deg, \"->\")"],[12455,34,""],[12480,0,"\n    edge(b, d, bend: -10deg, \"->\")"],[12420,35,""],[12445,0,"\n    edge(a, c, bend: 10deg, \"->\")"],[12386,34,""],[12411,0,"\n    edge(a, b, bend: -10deg, \"->\")"],[12351,35,""],[12376,0,"\n    node(d, $D$)"],[12334,17,""],[12359,0,"\n    node(c, $C$)"],[12317,17,""],[12342,0,"\n    node(b, $B$)"],[12300,17,""],[12325,0,"\n    node(a, $A$)"],[12283,17,""],[12308,17,""],[12283,0,"    node(a, $A$)\n"],[12325,17,""],[12300,0,"    node(b, $B$)\n"],[12342,17,""],[12317,0,"    node(c, $C$)\n"],[12359,17,""],[12334,0,"    node(d, $D$)\n"],[12376,35,""],[12351,0,"    edge(a, b, bend: -10deg, \"->\")\n"],[12411,34,""],[12386,0,"    edge(a, c, bend: 10deg, \"->\")\n"],[12445,35,""],[12420,0,"    edge(b, d, bend: -10deg, \"->\")\n"],[12480,34,""],[12455,0,"    edge(c, d, bend: 10deg, \"->\")\n"],[12514,1,""],[12489,0,"\n"],[12514,0,", crossing: false"],[12526,5,""],[12526,0,"true"],[12531,0,"\n"],[12489,1,""],[12530,0,"\n    edge(c, d, bend: 10deg, \"->\")"],[12455,34,""],[12496,0,"\n    edge(b, d, bend: -10deg, \"->\")"],[12420,35,""],[12461,0,"\n    edge(a, c, bend: 10deg, \"->\")"],[12386,34,""],[12427,0,"\n    edge(a, b, bend: -10deg, \"->\")"],[12351,35,""],[12392,0,"\n    node(d, $D$)"],[12334,17,""],[12375,0,"\n    node(c, $C$)"],[12317,17,""],[12358,0,"\n    node(b, $B$)"],[12300,17,""],[12341,0,"\n    node(a, $A$)"],[12283,17,""],[12324,17,""],[12283,0,"    node(a, $A$)\n"],[12341,17,""],[12300,0,"    node(b, $B$)\n"],[12358,17,""],[12317,0,"    node(c, $C$)\n"],[12375,17,""],[12334,0,"    node(d, $D$)\n"],[12392,35,""],[12351,0,"    edge(a, b, bend: -10deg, \"->\")\n"],[12427,34,""],[12386,0,"    edge(a, c, bend: 10deg, \"->\")\n"],[12461,35,""],[12420,0,"    edge(b, d, bend: -10deg, \"->\")\n"],[12496,34,""],[12455,0,"    edge(c, d, bend: 10deg, \"->\")\n"],[12530,1,""],[12489,0,"\n"],[12509,1,""],[12509,0,"1"],[12509,1,""],[12509,0,"-1"],[12510,1,""],[12510,0,"0.5"],[12517,16,""],[12517,0,", \"\""],[12520,0,"--"],[12490,0,"    edge((-3, 0), (-0.5, 0), \"--\")\n"],[12536,1,""],[12536,0,"0.5"],[12549,1,""],[12548,1,""],[12547,1,""],[12546,1,""],[12546,0,"3"],[12535,1,""],[12508,9,""],[12508,0,"a"],[12526,8,""],[12526,0,"a"],[12490,0,"    edge((-3, 0), a, \"--\")\n    edge(a, (3, 0), \"--\")\n"],[12542,0,"\n    "],[12543,4,""],[12580,1,""],[12580,0,"d"],[12562,1,""],[12562,0,"d"],[12558,1,""],[12558,0,"-2"],[12588,1,""],[12588,0,"-2"],[12597,0,", #"],[12599,1,""],[12599,0,"$asdf$"],[12600,5,""],[12599,1,""],[12599,0,"[]"],[12600,0,"asdf"],[12597,8,""],[12592,0," [asdf"],[12597,1,""],[12597,0,"f],"],[12593,8,""],[12565,0," [(critical)]"],[12576,1,""],[12567,1,""],[12576,0,","],[12575,0,")"],[12567,0,"("],[12576,1,""],[12567,1,""],[12575,0,")"],[12567,0,"("],[12566,14,""],[12607,3,""],[12617,4,""],[12617,0,"A simple event graph. A and D are critical versions. GCV(A, D) "],[12677,1,""],[12676,1,""],[12675,1,""],[12674,1,""],[12674,0,"B, D"],[11331,0,".double"],[11332,6,""],[11331,1,""],[11331,0,".big"],[11332,3,""],[11331,1,""],[11331,0,".d"],[11332,1,""],[11332,0,"double"],[12677,9,""],[12677,0,"V_1 sect.sq.double V_2$"],[12677,0,"$"],[12678,3,""],[12678,0,"B"],[12695,3,""],[12695,0,"D = A"],[12701,0,", because $VB"],[12713,1,""],[12712,1,""],[12712,0,"B$ is not a critical version"],[12701,39,""],[12676,26,""],[12694,0,"\n $B sect.sq.double D = A$"],[12695,0,"In @"],[12698,1,""],[12698,0,"#c"],[12699,1,""],[12698,1,""],[12698,0,"@cg"],[12700,1,""],[12699,1,""],[12699,0,"gc"],[12699,2,""],[12699,0,"gcv-example, the greatest common version "],[12712,28,""],[12711,1,""],[12711,0," the least upper bound of $B$ and $D$ is $B$. But the "],[12093,0," (GLB)_"],[12094,0,"_"],[12100,1,""],[12094,1,""],[12093,0,"_"],[12073,0,"_"],[12094,1,""],[12073,1,""],[11989,165,""],[11989,0,"\n"],[11989,0,"Note the greatest common version of versions $V_1$ and $V_2$ is not the same as the greatest lower bound (GLB) of the set of all versions in both $V_1$ and $V_2$.\n\n"],[11989,0,"// "],[12725,20,""],[12725,0,"greatest "],[12312,2,""],[12311,1,""],[12310,1,""],[12309,1,""],[12309,0,", $$"],[12312,1,""],[12311,1,""],[12311,0,"[]"],[12312,0,"_ "],[12313,1,""],[12312,1,""],[12312,0," "],[12312,2,""],[12311,1,""],[12311,0,"\" \""],[12313,0,"asdf "],[12317,1,""],[12316,1,""],[12315,1,""],[12314,1,""],[12313,1,""],[12312,1,""],[12312,0,"a"],[12312,1,""],[12312,0,"b"],[12312,1,""],[12312,0,"c"],[12313,1,""],[12312,1,""],[12311,1,""],[12311,0,"##"],[12312,1,""],[12311,1,""],[12311,0,"$$"],[12312,0,"A(x)"],[12312,4,""],[12311,2,""],[12311,0,"##"],[12311,2,""],[12311,0,"\"c\""],[12312,1,""],[12312,0,"b"],[12312,1,""],[12312,0,"a"],[12312,1,""],[12312,0," asdf "],[12317,1,""],[12313,4,""],[12312,2,""],[12311,1,""],[12311,0,"[]"],[12312,0," "],[12312,1,""],[12312,0,"_ "],[12313,1,""],[12312,1,""],[12311,2,""],[12311,0,"$$"],[12312,0,"A"],[12215,0,"// "],[12604,1,""],[12604,0,"2"],[12574,1,""],[12574,0,"2"],[12549,1,""],[12549,0,"2"],[12520,1,""],[12520,0,"2"],[12605,0,"."],[12575,0,"."],[12550,0,"."],[12521,0,"."],[12609,0,"5"],[12578,0,"5"],[12552,0,"5"],[12522,0,"5"],[12621,2,""],[12621,0,"."],[12592,2,""],[12592,0,"."],[12561,2,""],[12561,0,"."],[12533,2,""],[12533,0,"."],[12619,0,"."],[12591,0,"."],[12561,0,"."],[12534,0,"."],[12621,2,""],[12621,0,"|"],[12592,2,""],[12592,0,"|"],[12561,2,""],[12561,0,"|"],[12533,2,""],[12533,0,"|"],[12619,0,"."],[12591,0,"."],[12561,0,"."],[12534,0,"."],[12623,0,"."],[12594,0,"."],[12563,0,"."],[12535,0,"."],[12627,0,"|"],[12597,0,"|"],[12565,0,"|"],[12536,0,"|"],[12630,1,""],[12599,1,""],[12566,1,""],[12536,1,""],[12624,1,""],[12594,1,""],[12562,1,""],[12533,1,""],[12190,0,"// "],[12190,3,""],[12200,1,""],[12200,0,"5"],[12205,1,""],[12205,0,"5"],[12205,1,""],[12200,1,""],[12204,0,"6"],[12200,0,"6"],[12206,1,""],[12201,1,""],[12205,0,"7"],[12201,0,"7"],[12206,1,""],[12201,1,""],[12204,1,""],[12200,1,""],[12203,0,"7"],[12200,0,"7"],[12205,0,"m"],[12201,0,"m"],[12665,0," In this graph, "],[12680,1,""],[12683,4,""],[12682,1,""],[12682,0,", "],[12685,0," "],[12685,1,""],[12685,0,", and the root version $emp"],[12709,3,""],[12709,0,"emptyset$"],[12722,0," all"],[12508,0,"\n    edge*"],[12517,1,""],[12517,0,"(-0"],[12519,1,""],[12518,1,""],[12518,0,"(0"],[12519,1,""],[12519,0,"-9"],[12520,1,""],[12520,0,"2.5, 2.5)"],[12525,3,""],[12525,0,"-1"],[12528,0,", (2.5, -1))"],[12525,1,""],[12535,1,""],[12537,0,", \"..\""],[12156,643,""],[10513,0,"\n#figure(\n  fletcher.diagram(\n    spacing: (7mm, 7mm),\n    // node-stroke: 0.5pt,\n  {\n    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n    edge(a, b, bend: -10deg, \"->\")\n    edge(a, c, bend: 10deg, \"->\")\n    edge(b, d, bend: -10deg, \"->\")\n    edge(c, d, bend: 10deg, \"->\")\n\n    edge((-2.5, 1), (2.5, 1), \"..\")\n    edge((-2.5, 0), a, \"..\")\n    edge(a, (2.5, 0), \"..\")\n\n    edge((-2.5, -2), d, \"..\")\n    edge(d, (2.5, -2), \"..\")\n  }),\n  caption: [A simple event graph. In this graph, A, D, and the root version $emptyset$ are all critical versions.]\n) <gcv-example>\n"],[11157,41,""],[11156,1,""],[11057,1,""],[11057,0," with critical versions"],[11080,15,""],[11118,27,""],[10896,0,"[], "],[10897,1,""],[10896,1,""],[10896,0,"##"],[10897,1,""],[10896,1,""],[10896,0,"@@"],[10897,1,""],[10896,1,""],[10896,0,"$$"],[10897,0,"emp"],[10897,3,""],[10897,0,"emptyset)"],[10897,0,"("],[10896,14,""],[10608,0,"r, "],[10626,0,"(0, 1), "],[10669,0,"\n    node(r, $empty"],[10683,5,""],[10683,0,"emptyset$)"],[10901,0,"    edge((-2.5, 1), (2.5, 1), \"..\")\n"],[10972,0,"\n    "],[10973,4,""],[10921,8,""],[10921,0,"r"],[10939,9,""],[10939,0,"r"],[10682,10,""],[10682,0,"[]"],[10683,0,"root)"],[10683,0,"("],[10688,0," version"],[10886,13,""],[10851,14,""],[10817,13,""],[10782,14,""],[10845,0," bend: 10deg,"],[10824,0," bend: -10deg,"],[10803,0," bend: 10deg,"],[10782,0," bend: -10deg,"],[10886,13,""],[10851,14,""],[10817,13,""],[10782,14,""],[10674,0,"// "],[10674,3,""],[10674,0,"// "],[10674,3,""],[10674,0,"// "],[10674,3,""],[10674,0,"// "],[10674,3,""],[10683,15,""],[10682,1,""],[10682,0,"##"],[10683,1,""],[10682,1,""],[10682,0,"$$"],[10683,0,"emp"],[10683,3,""],[10683,0,"emptyset"],[10693,0,"\n    "],[10694,4,""],[10693,0,"\n    e"],[10698,1,""],[10696,2,""],[10694,3,""],[10762,0,"\n    \n    "],[10763,4,""],[10764,4,""],[10763,0,"\ne"],[10764,1,""],[10764,0,"  e"],[10766,1,""],[10766,0,"  edge(r, a, \"..\")"],[10782,0,">"],[10781,1,""],[10780,1,""],[10780,0,"--"],[10781,1,""],[10768,0,"// "],[10674,0,"// "],[10513,655,""],[10512,1,""],[11064,0,"\n#figure(\n  fletcher.diagram(\n    spacing: (7mm, 7mm),\n    // node-stroke: 0.5pt,\n  {\n    let (r, a, b, c, d) = ((0, 1), (0, 0), (-1, -1), (1, -1), (0, -2))\n    // node(r, $emptyset$)\n\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n\n    // edge(r, a, \"->\")\n\n    edge(a, b, \"->\")\n    edge(a, c, \"->\")\n    edge(b, d, \"->\")\n    edge(c, d, \"->\")\n\n    edge((-2.5, 1), r, \"..\")\n    edge(r, (2.5, 1), \"..\")\n\n    edge((-2.5, 0), a, \"..\")\n    edge(a, (2.5, 0), \"..\")\n\n    edge((-2.5, -2), d, \"..\")\n    edge(d, (2.5, -2), \"..\")\n  }),\n  caption: [A simple event graph with critical versions A, D, and the root version $emptyset$]\n) <gcv-example>\n"],[11707,3,""],[11707,0,"crit"],[12776,3,""],[12776,0,"crit"],[12803,0,"common version"],[12818,29,""],[12602,0,"?"],[12789,0," above"],[12771,1,""],[12605,3,""],[12638,50,""],[11735,0,"critical lower bound"],[11755,15,""],[11735,1,""],[11735,0,"C"],[11744,5,""],[11744,0,"Lower"],[11750,1,""],[11750,0,"B"],[44503,3,""],[44503,0,"g"],[11757,3,""],[11757,0,"g"],[44502,0,"c"],[11758,0,"c"],[44504,0,"l"],[11759,0,"l"],[44506,0,"b"],[11760,0,"b"],[44402,14,""],[44402,0,"c"],[11920,14,""],[11920,0,"c"],[44390,0,"r"],[11921,0,"r"],[44392,0,"i"],[11922,0,"i"],[44394,0,"t"],[11923,0,"t"],[44396,0,"i"],[11924,0,"i"],[44398,0,"c"],[11925,0,"c"],[44400,0,"a"],[11926,0,"a"],[44402,0,"l"],[11927,0,"l"],[44404,0," "],[11928,0," "],[44406,0,"l"],[11929,0,"l"],[44408,0,"o"],[11930,0,"o"],[44410,0,"w"],[11931,0,"w"],[44412,0,"e"],[11932,0,"e"],[44414,0,"r"],[11933,0,"r"],[44416,0," "],[11934,0," "],[44418,0,"b"],[11935,0,"b"],[44420,0,"o"],[11936,0,"o"],[44422,0,"u"],[11937,0,"u"],[44424,0,"n"],[11938,0,"n"],[44426,0,"d"],[11939,0,"d"],[88,0,"#import \"@preview/ctheorems:1.1.0\": *\n#show: thmrules\n"],[174,0,"\n"],[174,0,"\n#let theorum = thmb"],[190,4,""],[190,0,"thmbox(\n  \n  "],[198,2,""],[199,2,""],[199,0,")"],[198,0,"  \"theorum\"\n  "],[210,2,""],[206,1,""],[206,0,"e"],[210,0,"  \"Theorem\""],[209,0,","],[222,0,"\n  fill: rgb("],[185,1,""],[185,0,"e"],[214,7,""],[214,0,"d"],[201,7,""],[201,0,"d"],[180,7,""],[180,0,"d"],[203,0,"e"],[196,0,"e"],[181,0,"e"],[206,0,"f"],[198,0,"f"],[182,0,"f"],[209,0,"i"],[200,0,"i"],[183,0,"i"],[212,0,"n"],[202,0,"n"],[184,0,"n"],[215,0,"i"],[204,0,"i"],[185,0,"i"],[218,0,"t"],[206,0,"t"],[186,0,"t"],[221,0,"i"],[208,0,"i"],[187,0,"i"],[224,0,"o"],[210,0,"o"],[188,0,"o"],[227,0,"n"],[212,0,"n"],[189,0,"n"],[220,1,""],[220,0,"D"],[244,0,"#f8e8e8\""],[251,1,""],[251,0,")"],[231,0,","],[252,0,"\""],[245,0,"\""],[175,41,""],[175,0,"#let definition = thmbox( \"definition\","],[175,55,""],[175,0,"#let definition = thmbox( \"definition\", \"Definition\","],[175,76,""],[175,0,"#let definition = thmbox( \"definition\", \"Definition\", fill: rgb(\"#f8e8e8\")"],[200,1,""],[248,0,")"],[249,2,""],[10050,0,"\n#definition["],[10324,0,"\n]"],[10065,0," "],[248,0,", base"],[248,6,""],[227,1,""],[227,0,"\n  "],[250,0,"\n  "],[251,2,""],[227,0,"\n  base_level: 1,"],[242,1,""],[242,0,"0"],[8181,0,"\n#definition["],[8195,0,"  "],[8372,0,"\n  "],[8373,2,""],[8373,0,"]"],[10264,98,""],[10266,0,"\nWe can intuitively think of critical versions as moments at which all editing peers synchronised."],[10101,0,"  "],[10268,0,"\n"],[10099,0,"()"],[10100,0,"\"Critical Version\""],[10117,0,"s"],[10110,1,""],[10110,0,"v"],[8193,0,"(\"Version\")"],[8202,0,"s"],[8181,0,"\n"],[8181,0,"\nRather than define versions using "],[8182,34,""],[8181,1,""],[8180,1,""],[8181,0,"\n"],[8181,0,"\nRather than de"],[8182,14,""],[8182,0,"In thi"],[8182,6,""],[8182,0,"Graph theory provides "],[8182,22,""],[8182,0,"Rather than rely on an external definition of logical clocks, in this work"],[8182,63,""],[8182,0,"I"],[8183,1,""],[8183,0,"n"],[8194,0," we use graph theory to define"],[8198,3,""],[8198,0,"simply "],[8257,11,""],[8257,0,"T"],[8310,5,""],[8310,0,"is"],[8182,0,"// "],[10341,27,""],[10341,0,"Intuitively,"],[10371,3,""],[10371,0," are"],[10423,0," before making future edits"],[10371,0," represent"],[10381,4,""],[10444,0,"any "],[6586,0,"\n\n"],[6587,0,"$$"],[6588,0,"a < b"],[6590,1,""],[6590,0,"less"],[6593,1,""],[6592,1,""],[6591,1,""],[6590,1,""],[6590,0,"lt.not"],[6595,1,""],[6594,1,""],[6593,1,""],[6593,0,"approx"],[6593,6,""],[6592,1,""],[6592,0,".circle"],[6598,1,""],[6593,5,""],[6593,0,"napprox"],[6593,7,""],[6592,1,""],[6592,0,".triple"],[6593,6,""],[6593,0,"app"],[6593,3,""],[6593,0,"approx"],[6592,7,""],[6592,0,".approx"],[6593,6,""],[6592,1,""],[6592,0,".gt"],[6593,2,""],[6592,1,""],[6592,0,".nested"],[6593,6,""],[6592,1,""],[6592,0,".ntilde"],[6593,6,""],[6592,1,""],[6592,0,".tri"],[6593,3,""],[6592,1,""],[6592,0,".small"],[6592,6,""],[6592,0,".small"],[6593,5,""],[6592,1,""],[6592,0,".bi"],[6594,1,""],[6593,1,""],[6592,1,""],[6592,0,".lar"],[6595,1,""],[6594,1,""],[6593,1,""],[6592,1,""],[6592,0,".sm"],[6593,2,""],[6593,0,"small"],[6586,16,""],[7322,0,"_"],[7318,0,"_"],[11395,1,""],[11395,0,"5"],[11390,1,""],[11390,0,"5"],[11432,0,"    let (r, a, b, c, d) = ((0, 1), (0, 0), (-1, -1), (1, -1), (0, -2))\n"],[11512,13,""],[11512,0,"e,f,g"],[11514,0," "],[11517,0," "],[11528,1,""],[11528,0,"-3"],[11525,1,""],[11525,0,"-1"],[11535,1,""],[11535,0,"1"],[11538,1,""],[11538,0,"-3"],[11544,6,""],[11544,0,"0, -4"],[11550,18,""],[11631,0,"    node(d, $D$)\n    node(d, $D$)\n    node(d, $D$)\n"],[11661,1,""],[11661,0,"E"],[11678,1,""],[11678,0,"F"],[11695,1,""],[11695,0,"G"],[11657,1,""],[11657,0,"e"],[11674,1,""],[11674,0,"f"],[11674,1,""],[11674,0,"f"],[11691,1,""],[11691,0,"g"],[12004,0,"n"],[12005,7,""],[12047,0,"G, "],[11788,0,"    edge(c, d, \"->\")\n"],[11818,1,""],[11818,0,"d"],[11821,1,""],[11821,0,"e"],[11809,0,"    edge(d, e, \"->\")\n"],[11842,1,""],[11842,0,"f"],[11830,0,"    edge(d, f, \"->\")\n"],[11860,1,""],[11860,0,"e"],[11863,1,""],[11863,0,"g"],[11851,0,"    edge(e, g, \"->\")\n"],[11881,1,""],[11881,0,"f"],[12010,0,"    edge((-2.5, -2), d, \"..\")\n    edge(d, (2.5, -2), \"..\")\n"],[12068,0,"\n    "],[12069,4,""],[12091,1,""],[12091,0,"g"],[12109,1,""],[12109,0,"g"],[12027,1,""],[12027,0,"4"],[12059,1,""],[12059,0,"4"],[12059,1,""],[12059,0,"2"],[12027,1,""],[12027,0,"2"],[12087,1,""],[12087,0,"4"],[12119,1,""],[12119,0,"4"],[5352,17,""],[5352,0,"is"],[5355,6,""],[5330,40,""],[10180,0," cleanly"],[9188,0,"\n"],[9188,0,"\nThe version of the empty graph $$"],[9221,0,"emp"],[9221,3,""],[9221,0,"emptyset"],[9230,0," is the _root version_, also denoted $$"],[9268,0,"emp"],[9268,3,""],[9268,0,"emptyset"],[9277,0,"."],[9233,0," an empty set of versions"],[9292,10,""],[9259,0,"$emptyset$ "],[9269,1,""],[9269,0,". "],[9234,0,"also "],[9233,46,""],[9233,0," called the"],[9274,0,"as ##"],[9278,1,""],[9277,1,""],[9277,0,"$$"],[9278,0,"emp"],[9278,3,""],[9278,0,"emptyset"],[9221,0,"G = "],[9221,4,""],[9234,0,"sometimes "],[10812,0," Equivalently, a version is _cr"],[10842,1,""],[10841,1,""],[10840,1,""],[10840,0,"a _critical version_ if t"],[10864,1,""],[10861,0,"in graph G "],[10871,0,"$"],[10870,0,"$"],[10877,0,"there are no "],[10877,13,""],[10877,0,"$G$ does not contain any events concurrent with $G$. Ie, $$"],[10935,0,"exists.not i in G: i || V"],[10837,0,"$V$ "],[10965,0,"."],[11211,1,""],[11211,0,", as #"],[11216,1,""],[11216,0,"$i$ may be concurrent with $V$."],[10783,0,"_1"],[10798,1,""],[10798,0,"i_2"],[10809,0,"_1"],[10815,1,""],[10815,0,"i_2"],[12404,0," example"],[11916,1,""],[11916,0,"circle.small"],[11916,12,""],[11916,0,"E"],[13390,0,"// "],[12521,20,""],[12521,0,"Common Parent"],[45298,4,""],[45298,0,"g"],[12536,4,""],[12536,0,"g"],[45296,0,"c"],[12537,0,"c"],[45298,0,"p"],[12538,0,"p"],[45189,20,""],[45189,0,"c"],[12698,20,""],[12698,0,"c"],[45171,0,"o"],[12699,0,"o"],[45173,0,"m"],[12700,0,"m"],[45175,0,"m"],[12701,0,"m"],[45177,0,"o"],[12702,0,"o"],[45179,0,"n"],[12703,0,"n"],[45181,0," "],[12704,0," "],[45183,0,"p"],[12705,0,"p"],[45185,0,"a"],[12706,0,"a"],[45187,0,"r"],[12707,0,"r"],[45189,0,"e"],[12708,0,"e"],[45191,0,"n"],[12709,0,"n"],[45193,0,"t"],[12710,0,"t"],[12712,0," version"],[12528,6,""],[12528,0,"Version"],[12528,7,""],[12528,0,"Parent"],[12528,6,""],[12528,0,"Version"],[45294,1,""],[12539,1,""],[45293,0,"v"],[12539,0,"v"],[45198,6,""],[45198,0,"v"],[12706,6,""],[12706,0,"v"],[45194,0,"e"],[12707,0,"e"],[45196,0,"r"],[12708,0,"r"],[45198,0,"s"],[12709,0,"s"],[45200,0,"i"],[12710,0,"i"],[45202,0,"o"],[12711,0,"o"],[45204,0,"n"],[12712,0,"n"],[12715,8,""],[6526,0,"// "],[6525,0,"\n\n"],[6526,0,"The _happened-before_ relationship defines a partial order on events in the graph. In this paper we su"],[6627,1,""],[6626,1,""],[6626,0,"use the notation ##"],[6644,1,""],[6643,1,""],[6643,0,"$$"],[6644,0,"a < b"],[6650,0," to denote _a happened-before b_. Events $a$ and $b$ are _concurrent_ if neither event happened-before the other: $a parallel b := (a != b) and (a arrow.r.not b) and (b arrow.r.not a)$. The parents field stores this relationship: $a in P_b \"iff\" a -> b$. // where $P_b$ is the set of all parents of $b$."],[6797,11,""],[6797,0,"lt.not"],[6814,11,""],[6814,0,"lt.not"],[6816,1,""],[6815,1,""],[6814,1,""],[6814,0,"gt."],[6812,1,""],[6812,0,"a"],[6821,1,""],[6821,0,"b"],[6889,1,""],[6888,1,""],[6888,0,"<"],[6942,0,"\\\n\n"],[6944,1,""],[6943,1,""],[6942,1,""],[6942,0,"\n\n##"],[6945,1,""],[6944,1,""],[6944,0,"$$"],[6945,0," a.arro"],[6951,1,""],[6950,1,""],[6949,1,""],[6948,1,""],[6948,0,"righ"],[6951,1,""],[6950,1,""],[6949,1,""],[6948,1,""],[6947,1,""],[6947,0," rightarrow b "],[6960,1,""],[6948,10,""],[6948,0,"arr"],[6948,3,""],[6948,0,"arrow.right"],[6954,5,""],[6953,1,""],[6953,0,".b"],[6954,1,""],[6954,0,"bar"],[6954,3,""],[6954,0,"quad"],[6954,4,""],[6954,0,"zigzag"],[6954,6,""],[6954,0,"wave"],[6954,4,""],[6954,0,"twohead"],[6954,7,""],[6954,0,"half"],[6954,4,""],[6954,0,"ccw"],[6954,3,""],[6944,13,""],[6943,1,""],[6942,1,""],[7546,1,""],[7545,1,""],[7545,0,"<"],[7487,2,""],[7487,0,"<"],[7487,1,""],[7487,0,">"],[7487,1,""],[7487,0,"<="],[7488,1,""],[7360,0,"// "],[6608,0," Sometime"],[6609,8,""],[6609,0,"This is often denoted as $$"],[6635,0,"a -> b"],[6642,0,", but "],[6648,2,""],[6648,0," "],[6648,1,""],[6648,0,"i"],[6672,0," partial order"],[6703,32,""],[6703,0," to denote _a happened-before b_"],[6680,6,""],[6672,8,""],[6648,1,""],[6648,0," "],[6648,1,""],[6648,0," I"],[6647,1,""],[6643,4,""],[6642,1,""],[6639,2,""],[6636,3,""],[6635,1,""],[6633,3,""],[6630,3,""],[6622,8,""],[6616,6,""],[6613,3,""],[6609,4,""],[6609,0,"Sometime"],[6608,9,""],[9394,0,"\n$ floor(G) = {forall i in G | exists.not j in G: i -> j } $"],[9335,0,"// "],[9450,1,""],[9449,1,""],[9449,0,"<"],[9420,0,"_1"],[9441,1,""],[9441,0,"i_2"],[9451,1,""],[9451,0,"i_1"],[9456,2,""],[9456,0," i_2"],[9335,3,""],[9395,0,"// "],[9395,3,""],[9395,0,"// "],[6526,0,"// "],[6947,3,""],[7294,0,"$"],[7296,1,""],[7299,1,""],[7300,0,"$"],[7300,1,""],[7299,0,"\""],[7296,0,"\""],[7294,1,""],[7294,0,"$"],[7296,1,""],[7299,1,""],[7300,0,"$ "],[7301,0,"iff"],[7303,1,""],[7302,1,""],[7301,1,""],[7301,1,""],[8665,0,"V = "],[8723,0,"$"],[8720,0,"$"],[8721,3,""],[8721,0,"V"],[8723,0," is the"],[9691,0,"\n"],[9691,0,"\nThe empty version $rmp"],[9713,1,""],[9712,1,""],[9711,1,""],[9711,0,"emp"],[9711,3,""],[9711,0,"emptyset$ is the version of an empty g"],[9748,1,""],[9748,0,"event graph. This"],[9739,2,""],[9739,0,"the"],[9765,1,""],[9764,1,""],[9764,0,"e empty version is sometimes called the _root version_."],[9821,0,"// "],[7872,0,"each "],[7872,5,""],[7872,0,"each "],[7884,0," local"],[7988,12,""],[7987,1,""],[7986,1,""],[7986,0,"grows over time"],[7970,2,""],[7970,0,"known to"],[11591,1,""],[11591,0,"V"],[12075,18,""],[12075,0,"A"],[13809,28,""],[13809,0,"is always"],[13780,0,"\n\n"],[13781,0,"The greatest common version is well defined for "],[13781,48,""],[13781,0,"The greatest common version is well defined for"],[13828,56,""],[13862,9,""],[13862,0,"root version"],[14039,0,"is distinct from the"],[14042,17,""],[14042,0,"sometimes distinct from the"],[14096,52,""],[14096,0," of a pair of versions. For example,"],[14132,2,""],[14132,0," "],[14169,0," lowe bo"],[14176,1,""],[14175,1,""],[14174,1,""],[14174,0,"r bound of versions B and D is version B."],[14161,20,""],[14161,0,"GLB"],[14178,0,"$"],[14177,0,"$"],[14186,0,"$"],[14185,0,"$"],[14201,0,"$"],[14200,0,"$"],[14204,0," However, the greatest "],[14226,1,""],[15469,0," $T$"],[15472,1,""],[15471,1,""],[15471,0,"t$"],[15472,1,""],[15471,1,""],[15471,0,"R"],[15471,1,""],[15471,0,"r$"],[15472,0,": G => DD"],[15472,9,""],[15480,29,""],[15480,0," calculates the"],[15524,0," for"],[15527,1,""],[15526,1,""],[15525,1,""],[15525,0,"generated by replaying all events in an "],[15552,13,""],[15552,0,"the events in some event graph."],[15582,1,""],[15548,35,""],[15548,0,"a set of events."],[15550,4,""],[15550,0,"graph "],[15567,0,"\n"],[15567,0,"\n#definition(\"Document state\")[\n  \n  "],[15599,2,""],[15600,2,""],[15600,0,"]"],[15603,128,""],[15599,0," "],[15599,1,""],[15599,0,"  We define $DD$ as the set of all possible document states for our system. (For text documents, this is the set of all strings). "],[15728,1,""],[15658,0,"_"],[15643,0,"_"],[15661,14,""],[15661,0,"that can be generated"],[15672,10,""],[15672,0," produced by replaying "],[15661,34,""],[15661,0,"for some system"],[15678,1,""],[15677,0," This "],[15678,5,""],[15678,0,"The domain of document states "],[15677,31,""],[15728,1,""],[15731,0,"\n\n#definition(\"Replay function\")["],[15764,2,""],[15764,0,"\n  "],[16027,0,"\n  "],[16028,2,""],[16028,0,"]"],[15816,1,""],[15816,0,". The replay function"],[15837,7,""],[15837,0," "],[16681,5,""],[16681,0,"for"],[16694,0,"given "],[16713,7,""],[16713,0,"."],[16715,1,""],[16715,0,"D"],[17205,14,""],[17216,0," corresponding"],[17217,13,""],[17217,0,"corresponding"],[17216,14,""],[17205,0," corresponding"],[17206,14,""],[17216,0," implied by the event graph"],[17254,13,""],[17257,0," accesp"],[17263,1,""],[17262,1,""],[17262,0,"pts as "],[17269,8,""],[17269,0," "],[17269,1,""],[17268,0," input the"],[17493,27,""],[17494,1,""],[19039,11,""],[19021,1,""],[19021,0," and"],[19520,0,"\n\nWhen a replica recieves "],[19537,9,""],[19537,0,"recieves events"],[19540,1,""],[19541,0,"i"],[19552,0," from a rm"],[19561,1,""],[19561,0,"emote peer"],[19522,0,"Replicas typically store the local "],[19547,10,""],[19547,0,"a copy "],[19547,7,""],[19547,0,"the local "],[19547,10,""],[19547,0,"a copy of the local document state (visible to the user). "],[19582,1,""],[19581,1,""],[19581,0,", "],[19602,1,""],[19581,21,""],[19581,0," "],[19549,0,"locao "],[19554,1,""],[19553,1,""],[19553,0,"l "],[19566,6,""],[19566,0," current"],[19589,1,""],[19589,0,", "],[19590,1,""],[19589,1,""],[19596,1,""],[19596,0,"the replica "],[19608,9,""],[19629,2,""],[19640,0,"e"],[19640,1,""],[19640,0,"s, rather than recomputing the lo"],[19671,2,""],[19671,0,"new local document state and replacing the editor contents with this state, the "],[19643,108,""],[19643,0,"the replica "],[19646,9,""],[19646,0," lo"],[19648,1,""],[19647,1,""],[19646,1,""],[19617,0,"editing "],[19654,0," local replica wants to know how the l"],[19691,1,""],[19691,0,"current"],[19589,0,", often in an exocit "],[19603,7,""],[19603,0,"exotic "],[19600,10,""],[19600,0,"some exotic data structure to support "],[19627,11,""],[19627,0,"in order to support complex local editing"],[19655,13,""],[19655,0,"editing features"],[19780,0," document state c"],[19796,1,""],[19796,0,"should be modified to "],[19815,3,""],[19815,0,"in order to incorporate remote changes."],[19815,9,""],[19830,0,"the new "],[19838,7,""],[19848,20,""],[19848,0,"Thus"],[19957,0," ##"],[19959,1,""],[19958,1,""],[19958,0,"$$e_1, "],[19959,1,""],[19964,0,"e_2, ...$"],[20086,0,"floor("],[20105,0,")"],[20143,2,""],[20142,1,""],[20174,54,""],[20174,0,"."],[20208,6,""],[20208,0," reify"],[20209,5,""],[20209,0,"match"],[20086,5,""],[20086,0,"ceil"],[20519,0,"the replay function d"],[20539,1,""],[20539,0,"can be implemented in terms of partial transform"],[20587,15,""],[20570,17,""],[20570,0,"$$"],[20571,0,"T"],[20490,30,""],[20490,0,"T"],[20490,0,"Because $r(emptyset) = d_0$, t"],[20519,2,""],[20519,0,"t"],[20490,7,""],[20490,0,"Using"],[20490,5,""],[20490,0,"Sb"],[20491,1,""],[20491,0,"yub"],[20493,1,""],[20492,1,""],[20491,1,""],[20491,0,"ubstituting"],[21492,0," below"],[22929,0,"// "],[23515,17,""],[23515,0,"b"],[23515,1,""],[23463,0," we can define a replay function's behaviour by constructing it from"],[23531,53,""],[23531,0," the definition of an existing"],[23561,1,""],[23566,13,""],[24029,6,""],[24033,0," approach is"],[24045,46,""],[24060,1,""],[24059,1,""],[24059,7,""],[24059,0," for"],[25433,0," <eg-walker>"],[24340,0,"// "],[24339,0,"\n"],[24339,0,"\nThe eg-al"],[24348,1,""],[24347,1,""],[24347,0,"walker algorithm "],[24363,1,""],[24363,0,", defined in @eg-walker bl"],[24388,1,""],[24388,0,"elow, "],[24340,54,""],[24340,0,"The eg-walker algorithm, defined in @eg-walker below,"],[24028,0," while mathematically useful,"],[24014,16,""],[24014,0,"W"],[24059,0," unfro"],[24064,1,""],[24063,1,""],[24063,0,"oprtun"],[24068,1,""],[24067,1,""],[24066,1,""],[24065,1,""],[24064,1,""],[24064,0,"rtunately"],[24091,4,""],[24417,0," uses"],[24418,4,""],[24364,54,""],[24364,0,"The eg-walker algorithm, defined in @eg-walker below,"],[24271,14,""],[24299,0," can be derived"],[24418,0," exactly matches the semantic behaviour of FugueMax"],[24461,0,"the "],[24473,0," sequence CRDT, while being "],[24418,8,""],[24365,128,""],[24365,0,"The eg-walker algorithm, defined in @eg-walker below, matches the semantic behaviour of the FugueMax sequence CRDT, while being"],[24365,34,""],[24365,0,"I"],[24378,6,""],[24378,0,", we define the eg-walker algorithm. Eg-walker "],[24425,2,""],[24493,5,""],[24493,0,"being higher p"],[24493,14,""],[24493,0,"overcoming these shortcommin"],[24520,1,""],[24519,1,""],[24518,1,""],[24518,0,"ings."],[26095,18,""],[26095,0,"matches the resulting documen"],[26106,18,""],[26106,0," behaviour of "],[26120,4,""],[26146,13,""],[26338,1,""],[26338,0,"."],[26339,16,""],[26339,0," "],[26353,1,""],[26353,0," shows ben"],[26354,9,""],[26354,0,"exhaustively evalu"],[26354,18,""],[26354,0,"goes into s"],[26364,1,""],[26364,0,"a lot of detail about how this performance was achieve"],[26354,64,""],[26354,0,"measures the performance against mayn"],[26390,1,""],[26389,1,""],[26389,0,"ny other approaches."],[26378,0," of _"],[26382,1,""],[26382,0,"eg-walker"],[26354,68,""],[26354,0,"shows details "],[26367,1,""],[26366,1,""],[26366,0,"ed benchmarking results."],[26550,0," (for example a te"],[26563,0,","],[26569,0,"xt editing buffer)"],[26567,0,"l"],[26567,1,""],[26590,25,""],[26590,0,"I"],[26603,0," we constr"],[26607,6,""],[26607,0,"show "],[26611,1,""],[26607,4,""],[26607,0,"constr"],[26606,7,""],[26603,3,""],[26590,1,""],[26590,0,"Eg-walker, as presented i"],[26590,25,""],[26590,0,"I"],[26603,0," we constr"],[26607,6,""],[26607,0,"show how eg-walker"],[26607,5,""],[26607,0,"con"],[26609,1,""],[26608,1,""],[26607,1,""],[26607,0,"show a construction of "],[26630,4,""],[26639,1,""],[26646,1,""],[26645,1,""],[26645,0,"ing"],[26665,0," the"],[26678,0," sequence CRDT"],[26730,0," eas"],[26733,1,""],[26732,1,""],[26731,1,""],[26730,1,""],[26791,38,""],[26791,0,"with relative ease"],[26727,0," also"],[26845,10,""],[27049,67,""],[27049,0,"na"],[27050,1,""],[27049,1,""],[27049,0,"describes as s"],[27062,1,""],[27061,1,""],[27060,1,""],[27060,0," series of algorithmic optimisations applied t"],[27097,9,""],[27097,0,"which in aggregate dramatically improve the perfor,manc"],[27141,11,""],[27137,4,""],[27137,0,"eg-walker's performance"],[27211,0," "],[27211,1,""],[27211,0,", comparing eg-walker to other appo"],[27245,1,""],[27245,0,"roaches"],[27254,0,"\nWe have "],[27258,5,""],[27258,0,"provide sample code for 2 "],[27257,27,""],[27257,0," have written 2 "],[27262,0," implemented 2"],[27276,11,""],[27275,1,""],[27255,20,""],[27255,0,"Alongside this paper, we have 2 im"],[27288,1,""],[27287,1,""],[27287,0,"differe"],[27287,7,""],[27255,32,""],[27255,0,"As a campaignion to this paper"],[27255,30,""],[27254,1,""],[27292,0," our _reference-reg_ repository"],[27255,22,""],[27255,0,"A working typescript implementation of eg-walker"],[27441,13,""],[27441,0,"keep the code simple and easy to understand"],[27559,0," our _diamond types_ repository "],[27590,1,""],[27594,0,". This is the implmeme"],[27615,1,""],[27614,1,""],[27613,1,""],[27612,1,""],[27612,0,"ementation "],[27623,33,""],[27632,0,"ed"],[25599,5,""],[25599,0,"FugueMax"],[27775,0,"\n\n"],[27776,0,"\nEg-walker p"],[25681,0,"(_"],[25682,1,""],[25682,0,"_E_vent graph "],[25682,14,""],[25682,0,"_Event Graph Walker_) "],[25684,0,"_ _"],[25685,0,"vent"],[25685,6,""],[25684,1,""],[25684,0,"__"],[25685,0,"d"],[25686,1,""],[25685,1,""],[25684,1,""],[25695,1,""],[25695,0,"w"],[25695,1,""],[25695,0,"W"],[25682,1,""],[25700,1,""],[25711,1,""],[25711,0,". Eg-walker "],[25723,7,""],[25840,25,""],[25840,0,"a sequence CRDT. the FugueMax CRDT @fugue."],[25856,0," In this paper"],[25855,19,""],[25855,0,":"],[25865,5,""],[26702,4,""],[26710,14,""],[26913,10,""],[26913,0,"T"],[27793,1,""],[27793,0,"is an "],[27796,3,""],[27796,0,"an algorithm "],[27796,13,""],[27793,3,""],[27783,0,"At a high level, "],[27800,1,""],[27800,0,"e"],[27810,0,"is an algorithm for converting"],[27830,10,""],[27830,0,"using event "],[27830,12,""],[27830,0,"converting a "],[27842,1,""],[27842,0," graph of events into a"],[27841,2,""],[27846,0,"s"],[27851,0,"text editing "],[27876,1,""],[27876,0,"actual text documents. (Or, into a"],[27899,11,""],[27898,1,""],[27829,0," efficiently"],[27909,0,", according to the "],[27909,19,""],[27882,0," (inserts and deletes)"],[27934,8,""],[27934,0,"We define"],[27958,12,""],[28595,22,""],[28595,0,"E"],[28604,10,""],[28944,1,""],[28944,0,"\n\n"],[28917,0," all"],[28947,1,""],[28947,0,", "],[28948,1,""],[28947,1,""],[28947,0," in causal order_"],[28951,0,"_"],[28965,0,". That is, if the graph contains events $o_"],[29007,1,""],[29006,1,""],[29006,0,"i_"],[29007,1,""],[29007,0,"_1$ and $i_2$ suic"],[29024,1,""],[29023,1,""],[29023,0,"ch that $i_1 -> i_4"],[29041,1,""],[29041,0,"2$, the traversal must visit $i_1$ before $i-"],[29085,1,""],[29085,0,"_2$."],[28950,0," some"],[29104,5,""],[30486,0,"_"],[30472,0,"_"],[30488,1,""],[30488,0,". This allows implementations to"],[30520,44,""],[30520,0," "],[30520,1,""],[30520,0," to support instances where we only need to "],[30517,3,""],[30517,0," to"],[30520,44,""],[30520,0," sot"],[30523,1,""],[30522,1,""],[30521,1,""],[30527,12,""],[30567,5,""],[30567,0,"snapshot"],[30521,0,"efficiently "],[34179,357,""],[29818,0,"\nAs described in [time machines], the ability to generate transformed operations is not a unique property of eg-walker. FugueMax can be modified to support this capability directly.\n\nSome events may be elided entirely from the transformed output stream. This will happen when the event graph contains multiple events which concurrently delete the same item.\n"],[29818,1,""],[29817,1,""],[29817,0," "],[30069,0," (or replaced with no-ops)"],[30101,5,""],[30101,0," may"],[34632,19,""],[34632,0,"has an associated"],[34657,0,"_"],[34650,0,"_"],[35106,6,""],[35926,6,""],[36451,0,"the incorrect result "],[36480,8,""],[36480,0,"T"],[34616,0,"\n"],[34616,0,"\nFu"],[34618,1,""],[34617,1,""],[34617,0,"Eg-walker cannot simply use the"],[34617,31,""],[34616,1,""],[34615,1,""],[34575,7,""],[34608,0,"\n\n"],[68406,1,""],[68362,1,""],[49310,1,""],[49093,1,""],[44046,1,""],[43856,1,""],[43017,1,""],[42336,1,""],[38394,1,""],[30687,1,""],[30393,1,""],[68395,1,""],[68352,1,""],[49301,1,""],[49085,1,""],[44039,1,""],[43850,1,""],[43012,1,""],[42332,1,""],[38391,1,""],[30685,1,""],[30392,1,""],[68384,1,""],[68342,1,""],[49292,1,""],[49077,1,""],[44032,1,""],[43844,1,""],[43007,1,""],[42328,1,""],[38388,1,""],[30683,1,""],[30391,1,""],[68373,1,""],[68332,1,""],[49283,1,""],[49069,1,""],[44025,1,""],[43838,1,""],[43002,1,""],[42324,1,""],[38385,1,""],[30681,1,""],[30390,1,""],[68362,1,""],[68322,1,""],[49274,1,""],[49061,1,""],[44018,1,""],[43832,1,""],[42997,1,""],[42320,1,""],[38382,1,""],[30679,1,""],[30389,1,""],[68352,0,"P"],[68313,0,"P"],[49266,0,"P"],[49054,0,"P"],[44012,0,"P"],[43827,0,"P"],[42993,0,"P"],[42317,0,"P"],[38380,0,"P"],[30678,0,"P"],[30389,0,"P"],[68363,0,"r"],[68323,0,"r"],[49275,0,"r"],[49062,0,"r"],[44019,0,"r"],[43833,0,"r"],[42998,0,"r"],[42321,0,"r"],[38383,0,"r"],[30680,0,"r"],[30390,0,"r"],[68374,0,"e"],[68333,0,"e"],[49284,0,"e"],[49070,0,"e"],[44026,0,"e"],[43839,0,"e"],[43003,0,"e"],[42325,0,"e"],[38386,0,"e"],[30682,0,"e"],[30391,0,"e"],[68385,0,"p"],[68343,0,"p"],[49293,0,"p"],[49078,0,"p"],[44033,0,"p"],[43845,0,"p"],[43008,0,"p"],[42329,0,"p"],[38389,0,"p"],[30684,0,"p"],[30392,0,"p"],[68396,0,"a"],[68353,0,"a"],[49302,0,"a"],[49086,0,"a"],[44040,0,"a"],[43851,0,"a"],[43013,0,"a"],[42333,0,"a"],[38392,0,"a"],[30686,0,"a"],[30393,0,"a"],[68407,0,"r"],[68363,0,"r"],[49311,0,"r"],[49094,0,"r"],[44047,0,"r"],[43857,0,"r"],[43018,0,"r"],[42337,0,"r"],[38395,0,"r"],[30688,0,"r"],[30394,0,"r"],[68418,0,"e"],[68373,0,"e"],[49320,0,"e"],[49102,0,"e"],[44054,0,"e"],[43863,0,"e"],[43023,0,"e"],[42341,0,"e"],[38398,0,"e"],[30690,0,"e"],[30395,0,"e"],[34599,1,""],[30718,1,""],[34598,1,""],[30718,1,""],[34597,1,""],[30718,1,""],[34596,1,""],[30718,1,""],[34595,1,""],[30718,1,""],[34594,1,""],[30718,1,""],[34593,0,"p"],[30718,0,"p"],[34595,0,"r"],[30719,0,"r"],[34597,0,"e"],[30720,0,"e"],[34599,0,"p"],[30721,0,"p"],[34601,0,"a"],[30722,0,"a"],[34603,0,"r"],[30723,0,"r"],[34605,0,"e"],[30724,0,"e"],[34607,0,"v"],[30725,0,"v"],[34618,0,"The "],[34618,4,""],[34618,0,"Before running _prepare_, eg-walker makes some changes to its state to ensure that "],[34680,0,"internal "],[34710,0,"concurrently "],[34618,105,""],[34618,0,"Before running _prepare_, eg-walker makes some changes to its internal state to ensure that concurrently"],[34653,0," calls a special _setPrepareVersion_ method, which"],[34703,22,""],[34703,0," modifies its"],[34716,4,""],[34713,4,""],[34713,0,"the "],[34713,4,""],[34713,0,"its "],[34747,12,""],[34747,0,"_prepare_ prod"],[34760,1,""],[34759,1,""],[34758,1,""],[34757,1,""],[34747,0,"the result of running "],[34747,21,""],[34747,0,"the resulting CRDT message produced by"],[34796,0,"is independent of any concurrently run "],[34831,4,""],[34830,1,""],[34829,1,""],[34828,1,""],[34828,0," events which have already been visited."],[34696,1,""],[34696,0,". This method"],[34709,6,""],[34719,3,""],[34719,0,"eg-walker's"],[34831,0," other"],[34866,8,""],[34880,0,"\n\nLets un "],[34889,1,""],[34889,0,"pack that."],[34901,3,""],[34901,0,"First, note that any"],[34918,4,""],[34918,0,"every "],[34918,6,""],[34918,0,"every "],[34934,0," alwayds"],[34941,1,""],[34940,1,""],[34940,0,"s"],[34997,6,""],[34997,0,"CRDT messages"],[35045,12,""],[37676,0,"corresponding to "],[38091,0,"\n\nDuring traversal, eg-walker first mo"],[38093,36,""],[38093,0,"Before b"],[38100,1,""],[38100,0,"visiting each node"],[38093,25,""],[38093,0,"Immediately run"],[38107,1,""],[38106,1,""],[38105,1,""],[38105,0,"before running _rp"],[38122,1,""],[38121,1,""],[38121,0,"prepare_, eg-walker modifies #vp (by adjusting #sp on the nodes in the tree) to match the event's parent version. "],[38234,1,""],[38234,0," The _prepare_ function uses the version of each "],[38258,25,""],[38258,0,"generates a CRDT message b"],[38283,1,""],[38268,2,""],[38268,0,"its "],[38285,0,"by inspecting "],[38285,14,""],[38285,0,"as if the "],[38285,10,""],[38285,0,"based on the projection of the state de"],[38298,26,""],[38298,0,"state described by #sp."],[38285,5,""],[38285,0,"from"],[38289,3,""],[38294,0,"CRDT "],[38294,4,""],[38294,0,"FugueMax"],[38325,0," "],[38325,1,""],[39162,10,""],[39162,0,"will now more formally defione"],[39191,1,""],[39190,1,""],[39189,1,""],[39189,0,"ne"],[39409,0,"note's "],[39415,1,""],[39414,1,""],[39413,1,""],[39412,1,""],[39411,1,""],[39411,0,"de's "],[39441,0,". This state is"],[39487,0," to generate the corresponding o"],[39518,1,""],[39518,0,"CRDT message"],[39538,0," constantly"],[39550,8,""],[39550,0,"updated"],[39582,0," of the event graph"],[39601,47,""],[39601,0,"."],[39604,3,""],[39604,0,"eg-walker's"],[39604,1,""],[39604,0,"E"],[39622,8,""],[39622,0,"copm"],[39625,1,""],[39624,1,""],[39624,0,"nsists of"],[39898,0," (The ID of an item is the ID of the "],[39931,4,""],[39931,0,"its corresponding insert event)"],[39897,65,""],[39897,0," - whic his th"],[39904,7,""],[39904,0,"h is the ID of the "],[39897,26,""],[39897,0,"."],[40020,0," Thge f"],[40026,1,""],[40025,1,""],[40024,1,""],[40023,1,""],[40023,0,"e fields are:"],[40243,9,""],[40254,0," @fugue"],[40592,4,""],[40597,6,""],[40592,5,""],[40592,0,"FugueMax"],[40630,8,""],[40599,1,""],[40598,1,""],[40597,1,""],[40597,0,"Max"],[40904,0,"// "],[41780,1,""],[41780,0,":"],[41723,3,""],[41723,0,"match the"],[42423,0,"\nInstead of traversing the entire tree of nodes before each event is visited,"],[42500,73,""],[42424,0,"For efficient"],[42436,1,""],[42436,0,"cy, "],[42440,1,""],[42440,0,"i"],[42521,6,""],[42521,0,"is"],[42652,9,""],[42659,0," of the previous event"],[42675,0,"ly visited"],[42730,7,""],[42730,0,"current"],[42827,17,""],[42827,0,"is "],[42865,1,""],[42865,0,":\n\n- "],[42869,1,""],[42868,1,""],[42867,1,""],[42866,1,""],[42865,1,""],[42865,0," as follows:\n\n- If "],[42879,5,""],[42879,0,"- If"],[42745,1,""],[42745,0,"\n\n"],[42766,5,""],[42766,0,"returns"],[42783,7,""],[42788,0," events, "],[42796,1,""],[42795,1,""],[42799,0," a set of"],[42816,17,""],[42816,0," events"],[42885,0," a "],[42887,1,""],[42887,0,"n insert event is added, the item "],[42912,9,""],[42912,0,"#sp moves from `NotInsertedYet` to `Ins`\n- If an "],[42960,1,""],[42959,1,""],[42959,0," delete event is added "],[42981,1,""],[42981,0,", $"],[42983,1,""],[42983,0,"#sp moves from `Ins` to `Del(1)` or ~"],[43019,1,""],[43019,0,"`Del(n)` to `Del(n+1)`.\n- If an insert event is removed, #sp moves from `Ins` to `NotInsertedYet`\n- If a delete event is removed, #sp "],[43117,36,""],[43117,0,"- If a delete event is removed, #sp"],[42986,0," on the delete event's at"],[43010,1,""],[43009,1,""],[43009,0,"target"],[43181,0," on the delete event's target moves from "],[43146,76,""],[43146,0,"- If a delete event is removed, #sp on the delete event's target moves from `Ins` to `Del(1)` or `Del(n)` to `Del(n+1)`"],[43222,9,""],[43230,0," to `Ins`"],[43261,1,""],[43261,0,"-"],[43265,0,"."],[44020,2,""],[44020,0,"State"],[43980,2,""],[43980,0,"State"],[43267,0,"\n\n"],[43268,0,"\n#figure(\n  fletcher.diagram(\n    cell-size: 0mm,\n    spacing: (4mm, 4mm),\n  {\n    let (start, a, b, c, d) = ((0,0), (1,-1), (2, -2), (4, -2), (3, -3))\n    node(start, [_start_])\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n    edge(start, a, \"-\")\n    edge(a, b, \"-\")\n    edge(b, d, \"-\")\n    edge(a, c, \"-\")\n  }),\n  caption: [Left-origin FugueMax tree of this data set]\n) <fuguemax-simple>\n"],[43267,1,""],[43355,17,""],[43355,0,"nyi, ind, "],[43364,1,""],[43363,1,""],[43362,1,""],[43362,0,"s, del1, del2"],[43380,40,""],[43380,0,"()"],[43381,0,"0, 0"],[43386,0,", (1, 0), (2, 0), (3, 0)"],[43412,78,""],[43421,1,""],[43421,0,"nyi"],[43499,0,"// "],[43479,0,"// "],[43459,0,"// "],[43435,0,"// "],[43590,18,""],[43427,1,""],[43427,0,"NYI"],[43426,1,""],[43426,0,"\""],[43430,1,""],[43430,0,"\""],[43412,0,"    node(nyi, \"NYI\")\n"],[43442,3,""],[43442,0,"ins"],[43448,3,""],[43448,0,"Ins"],[43433,0,"    node(ins, \"Ins\")\n"],[43463,3,""],[43463,0,"del1"],[43470,3,""],[43470,0,"Del(1)"],[43454,0,"    node(del1, \"Del(1)\")\n"],[43491,1,""],[43491,0,"2"],[43499,1,""],[43499,0,"2"],[43375,0," "],[43375,1,""],[43375,0,", deln"],[43416,0," "],[43416,1,""],[43416,0,", (3, 0)"],[43419,1,""],[43419,0,"4"],[43493,0,"    node(del2, \"Del(2)\")\n"],[43530,1,""],[43530,0,"n"],[43534,7,""],[43533,1,""],[43533,0,"##"],[43534,1,""],[43533,1,""],[43533,0,"$$"],[43534,0,"dots.c"],[43542,0,"\n    \n    "],[43543,4,""],[43544,4,""],[43543,0,"\ne"],[43544,1,""],[43544,0,"    edge(nyi, ins)"],[43561,0,", \"->\""],[43562,0," bend: 180deg,"],[43570,1,""],[43569,1,""],[43569,0,"5"],[43544,0,"    edge(nyi, ins, bend: 50deg, \"->\")\n"],[43591,3,""],[43591,0,"ins"],[43596,3,""],[43596,0,"del1"],[43582,0,"    edge(ins, del1, bend: 50deg, \"->\")\n"],[43630,3,""],[43630,0,"del1"],[43636,4,""],[43636,0,"cel"],[43638,1,""],[43637,1,""],[43636,1,""],[43636,0,"del2"],[43621,0,"    edge(del1, del2, bend: 50deg, \"->\")\n"],[43673,1,""],[43673,0,"2"],[43676,4,""],[43676,0,"dots"],[43676,4,""],[43676,0,"deln"],[43697,0,"-"],[43544,0,"    edge(nyi, ins, bend: 50deg, \"->\")\n    edge(ins, del1, bend: 50deg, \"->\")\n    edge(del1, del2, bend: 50deg, \"->\")\n    edge(del2, deln, bend: 50deg, \"-->\")\n"],[43701,0,"\n    "],[43702,4,""],[43829,4,""],[43789,4,""],[43750,3,""],[43712,3,""],[43819,1,""],[43783,1,""],[43747,1,""],[43712,1,""],[43816,1,""],[43781,1,""],[43746,1,""],[43712,1,""],[43817,0,","],[43783,0,","],[43749,0,","],[43715,0,","],[43821,0," "],[43786,0," "],[43751,0," "],[43716,0," "],[43825,0,"del2"],[43789,0,"del1"],[43753,0,"ins"],[43717,0,"nyi"],[43575,0," \"asdf\" "],[43582,1,""],[43582,0,","],[43575,0," label:"],[43584,4,""],[43584,0,"Add events"],[43583,0,"italic("],[43602,0,")"],[43589,0,"s"],[43583,7,""],[43583,0,"ital"],[43586,1,""],[43585,1,""],[43584,1,""],[43583,1,""],[43583,2,""],[43594,1,""],[43593,1,""],[43593,0,"]"],[43583,0,"["],[43594,0,"_"],[43584,0,"_"],[43595,1,""],[43584,1,""],[43341,0,"\n    lab"],[43342,7,""],[43341,1,""],[43430,0,"// "],[43426,0,"    // node(nyi, \"NYI\")\n"],[43454,3,""],[43465,4,""],[43464,1,""],[43463,1,""],[43462,1,""],[43462,0,", \"\""],[43463,0," shape: circle,"],[43477,0,"\""],[43471,0,"\""],[43482,0,"xxxx"],[43341,0,"\n    stroke: 1px\""],[43354,0,"\""],[43359,0,","],[43346,0,"node-"],[43359,5,""],[43359,0,"1px"],[43359,3,""],[43359,0,"0.5pt"],[43506,4,""],[43506,0," "],[43346,0,"// "],[43477,35,""],[43476,1,""],[43457,3,""],[43781,0,", label: []"],[43791,0,"Remove events"],[43615,6,""],[43614,1,""],[43613,1,""],[43612,1,""],[43611,1,""],[43611,0,"+ Ins"],[43612,1,""],[43611,1,""],[43611,0,"Add "],[43659,0," labekl"],[43665,1,""],[43664,1,""],[43664,0,"l: []"],[43668,0,"Add del"],[43676,0,","],[43611,4,""],[43611,0,"\\+ "],[43667,3,""],[43667,0,"\\+"],[43670,1,""],[43670,0,"D"],[43804,13,""],[43804,0,"\\- Ins"],[43851,0," label: []"],[43860,0,"\\- Del"],[43867,0,","],[43716,0,"label: [\\+ Del], "],[43773,0,"label: [\\+ Del], "],[43941,0,", label: [\\- Del]"],[43998,0,", label: [\\- Del]"],[43993,1,""],[43993,0,"4"],[43936,1,""],[43936,0,"4"],[43879,1,""],[43879,0,"4"],[43823,1,""],[43823,0,"4"],[43766,1,""],[43766,0,"4"],[43709,1,""],[43709,0,"4"],[43652,1,""],[43652,0,"4"],[43596,1,""],[43596,0,"4"],[43993,1,""],[43993,0,"5"],[43936,1,""],[43936,0,"5"],[43879,1,""],[43879,0,"5"],[43823,1,""],[43823,0,"5"],[43766,1,""],[43766,0,"5"],[43709,1,""],[43709,0,"5"],[43652,1,""],[43652,0,"5"],[43596,1,""],[43596,0,"5"],[43993,1,""],[43993,0,"6"],[43936,1,""],[43936,0,"6"],[43879,1,""],[43879,0,"6"],[43823,1,""],[43823,0,"6"],[43766,1,""],[43766,0,"6"],[43709,1,""],[43709,0,"6"],[43652,1,""],[43652,0,"6"],[43596,1,""],[43596,0,"6"],[43993,2,""],[43993,0,"5"],[43936,2,""],[43936,0,"5"],[43879,2,""],[43879,0,"5"],[43823,2,""],[43823,0,"5"],[43766,2,""],[43766,0,"5"],[43709,2,""],[43709,0,"5"],[43652,2,""],[43652,0,"5"],[43596,2,""],[43596,0,"5"],[43987,0,"0"],[43931,0,"0"],[43875,0,"0"],[43820,0,"0"],[43764,0,"0"],[43708,0,"0"],[43652,0,"0"],[43597,0,"0"],[43346,3,""],[43365,0,"\n    node-"],[43370,5,""],[43370,0,"shape: \"circle\","],[43385,1,""],[43370,0,"node-"],[43390,0,","],[43370,0,"// "],[43498,0,", shape: \"circle\""],[43506,9,""],[43499,7,""],[43498,1,""],[43346,0,"// "],[43346,3,""],[43594,0,", shape: \"circle\""],[43604,6,""],[43604,0,"rectangle"],[43498,0,", shape: \"circle\""],[43498,17,""],[43498,0,", shape: \"circle\""],[43506,9,""],[43499,7,""],[43498,1,""],[43604,9,""],[43604,0,"circle"],[43602,9,""],[43595,7,""],[43594,1,""],[43594,0,", shape: \"circle\""],[43604,6,""],[43604,0,"rectangle"],[43612,1,""],[43611,1,""],[43610,1,""],[43609,1,""],[43608,1,""],[43498,0,", shape: \"circle\""],[43365,0,"\n    node-inset: 5mm,"],[43382,1,""],[43382,0,"0"],[43382,1,""],[43382,0,"2"],[43557,0,", shape: \"circle\""],[43599,0,", shape: \"circle\""],[43641,0,", shape: \"circle\""],[43683,15,""],[43683,0,", shape: \"circle\""],[43312,1,""],[43312,0,"5"],[43312,1,""],[43312,0,"10"],[43312,2,""],[43312,0,"5"],[43312,1,""],[43312,0,"0"],[43301,0,"// "],[43686,0,")"],[43644,0,")"],[43602,0,")"],[43560,0,")"],[43522,0,")"],[43691,0," "],[43648,0," "],[43605,0," "],[43562,0," "],[43523,0," "],[43696,0,"/"],[43652,0,"/"],[43608,0,"/"],[43564,0,"/"],[43524,0,"/"],[43701,0,"/"],[43656,0,"/"],[43611,0,"/"],[43566,0,"/"],[43525,0,"/"],[43702,0,", \""],[43704,1,""],[43704,0,"shape: \"rect\""],[43301,3,""],[43312,1,""],[43312,0,"3"],[43301,0,"// "],[43385,1,""],[43385,0,"5"],[43385,1,""],[43385,0,"4"],[43385,1,""],[43385,0,"5"],[44309,42,""],[44309,0,"State transition diagram for $$"],[44339,0,"sp"],[44341,1,""],[44340,1,""],[44339,1,""],[44338,1,""],[44338,0,"@"],[44338,1,""],[44338,0,"#sp"],[43564,0,", stroken"],[43572,1,""],[43571,1,""],[43571,0,"e: 1pt"],[43574,1,""],[43574,0,"2"],[43574,1,""],[43574,0,"1.5"],[43576,1,""],[43575,1,""],[43575,0,".1"],[44330,10,""],[44330,0,"machine"],[42547,31,""],[42713,1,""],[42713,0,", and "],[42713,6,""],[42713,0,". Each event added or removed from #vp modifies one node in the state tree."],[42765,0,"the state of a single "],[42761,4,""],[42775,7,""],[42774,0,"the corresponding "],[42792,2,""],[42714,0,"//"],[42714,0,"\n\n"],[42953,0,"\n"],[42820,1,""],[42952,0,"\n// Each event added or removed from #vp modifies the state of the corresponding node in the state tree."],[42716,104,""],[42848,0,"\n"],[42715,1,""],[42714,1,""],[42714,0," "],[42792,1,""],[42792,0,"\n\n"],[42953,0,"\n"],[42849,1,""],[42952,0,"\n#sp is updated on the set of changed items as follows:"],[42794,55,""],[42897,0,"\n"],[42793,4,""],[42792,1,""],[42792,0," "],[42950,1,""],[42949,1,""],[42917,31,""],[42917,0,"corresponding node as follows"],[45772,0,"// "],[45770,0,"// "],[45742,0,"// "],[45737,0,"// "],[45709,0,"// "],[45703,0,"// "],[45671,0,"// "],[45650,0,"// "],[45635,0,"// "],[45610,0,"// "],[45550,0,"// "],[45545,0,"// "],[45517,0,"// "],[45511,0,"// "],[45479,0,"// "],[45436,0,"// "],[45415,0,"// "],[45400,0,"// "],[45356,0,"// "],[45294,0,"// "],[45243,0,"// "],[45240,0,"// "],[45226,0,"// "],[45214,0,"// "],[45190,0,"// "],[45177,0,"// "],[45136,0,"// "],[45132,0,"// "],[45055,0,"// "],[44898,0,"Computing the set difference "],[44898,11,""],[44898,0,"T"],[44916,0," can usually be computed vers"],[44944,1,""],[44944,0,"y efficiently"],[44917,0,"between two version"],[44929,7,""],[44929,0,"nearby versions "],[44985,0,"."],[45038,104,""],[45038,0," for computing the set difference between versions. > TODO: ADD THE ALGORITHM AND REFERENCE IT DIRECTLY!"],[45038,51,""],[45038,0," to do "],[45042,3,""],[45042,0,"compute this "],[45039,16,""],[45038,1,""],[45029,0,"set difference "],[45053,0,", and other helpful graph"],[45029,3,""],[45029,0,"graph"],[45029,5,""],[45029,0,"set"],[45078,0," t"],[45079,1,""],[45078,1,""],[45078,0," related comp"],[45087,4,""],[45087,0,"tools."],[43786,0," st"],[43788,1,""],[43787,1,""],[43786,1,""],[43786,0," stroke: \"\","],[43796,0,"-"],[43796,1,""],[43796,0,".."],[43787,6,""],[43787,0,"marks"],[43787,5,""],[43787,0,"stroke"],[43787,14,""],[43795,4,""],[43795,0,"none"],[43795,4,""],[43795,0,"rect"],[43787,0,"stroken: "],[43795,1,""],[43794,1,""],[43793,1,""],[43793,0,": none, "],[43795,4,""],[43795,0,"0"],[43795,1,""],[43795,0,"none"],[43800,1,""],[43794,6,""],[43793,1,""],[43793,0,"n: "],[43795,1,""],[43787,8,""],[43786,0," \"Del(n)\","],[43777,10,""],[43777,0,"$dots.c$, "],[43786,10,""],[43787,0,"stroke: \"..\", "],[43787,14,""],[43785,0,"]"],[43777,0,"[Del("],[43790,0,")"],[43787,2,""],[43787,0,".c"],[43790,1,""],[43778,4,""],[43786,1,""],[43777,1,""],[46185,0," on the deleted node, if it wasn't already deleted."],[46022,32,""],[46025,0," and #sp"],[46030,4,""],[46022,0,"#sp and "],[46033,4,""],[46033,0," are also"],[46042,6,""],[46088,0,"sp = "],[46021,0," the event is added to #vp and "],[46051,1,""],[46047,0,", "],[46048,1,""],[46068,13,""],[46068,0," set"],[46242,0," #"],[46243,1,""],[46243,0,"$sp = $"],[46249,0,"Del(n)"],[46249,0,"mono(\""],[46261,0,"\")"],[46211,30,""],[46234,0," as per the "],[46235,11,""],[46235,0,"using the "],[46234,0," "],[46150,96,""],[46150,0,"- Delete messages set $se := mono(\"Del\")$ on the deleted node. $sp = mono(\"Del(n)\")$  using the"],[46047,1,""],[46047,0,"."],[46049,4,""],[46080,0," based on the event"],[46119,0," create a"],[46127,1,""],[46127,0,"new nod"],[46120,14,""],[46120,0,"result in new nodes "],[46120,20,""],[46120,0,"create and add a new node to the state tree. The node has"],[46177,4,""],[46202,16,""],[46202,0,"."],[46288,1,""],[46298,0," same logic as _setPrepareVersion_, describe "],[46342,1,""],[46342,0,"d above"],[44424,0," <_setPrepareVersion_"],[44426,19,""],[44426,0,"spv-state>"],[46346,15,""],[46345,1,""],[46344,1,""],[46344,0," uses for added events."],[46369,0,"// "],[46570,6,""],[46570,0,"Delete"],[46570,99,""],[46367,0," Delete messages also update the state's _delete map_ for use in later calls to _setPrepareVersion_."],[46344,22,""],[46398,46,""],[46997,5,""],[46997,0,"I"],[46768,5,""],[46768,0,"I"],[46994,0,"n"],[46769,0,"n"],[46996,0,"v"],[46770,0,"v"],[46998,0,"a"],[46771,0,"a"],[47000,0,"r"],[46772,0,"r"],[47002,0,"i"],[46773,0,"i"],[47004,0,"a"],[46774,0,"a"],[47006,0,"n"],[46775,0,"n"],[47008,0,"t"],[46776,0,"t"],[48115,5,""],[48115,0,"Om"],[48116,1,""],[48115,1,""],[48115,0,"Invariant"],[48115,9,""],[48115,0,"Om"],[48115,2,""],[48115,0,"Claim"],[47001,9,""],[47001,0,"Claim"],[46768,9,""],[46768,0,"Claim"],[46951,499,""],[45159,0,"\n\n"],[45160,0,"\n"],[45160,1,""],[45160,0,"#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim 2:*\n\n  The FugueMax tree at #vp can be calculated from eg-walker's state, by projecting all nodes in eg-walker in the following way:\n\n  - If $sp = mono(\"NotInsertedYet\")$, the item and its subtree is elided. (All children of such elements will also have $sp = mono(\"NotInsertedYet\")$).\n  - $sp = mono(\"Ins\")$ if the item should have its original value $x$\n  - $sp = mono(\"Del\")(d)$ if the item should have a tombstone value $perp$.\n\n  PROVE ME!\n]\n"],[45212,1,""],[45212,0,"X"],[45267,17,""],[45219,0,"eg-walker's state "],[45219,1,""],[45219,0,"E"],[45236,0,", "],[45237,1,""],[45236,1,""],[45236,0," represents"],[44910,0,"// "],[45250,4,""],[45250,0," the equivalent"],[45239,0," (as represented "],[45240,16,""],[45240,0,"("],[45240,1,""],[45239,1,""],[45239,0,", using @"],[45247,1,""],[45247,0,"#sp in each node,"],[45239,7,""],[45239,0," "],[45239,1,""],[45239,0,", described by"],[45272,10,""],[45272,0,"mirrors"],[45219,0,"\n  Th"],[45223,1,""],[45222,1,""],[45222,0,"T"],[45222,1,""],[45220,2,""],[45219,1,""],[45239,0," can be projected to "],[45260,44,""],[45259,1,""],[45258,1,""],[45257,1,""],[45257,0,"as follows to generate"],[45271,8,""],[45271,0,"calculate the"],[45284,11,""],[45305,24,""],[45240,6,""],[45239,1,""],[45239,0,", as described by @"],[45257,1,""],[45257,0,"#sp on each node, can be"],[45291,14,""],[45275,16,""],[45275,0,"describes"],[45275,9,""],[45275,0,"exactly mirrors"],[45283,7,""],[45283,0,"matches"],[45290,10,""],[45315,0,". Specifically, the fugu"],[45335,4,""],[45335,0,"FugueMax tree can be genea"],[45360,1,""],[45360,0,"rated "],[45366,2,""],[45601,0,"corresponds to a FugueMax item"],[45631,23,""],[45631,0," with "],[45636,1,""],[45686,0,"corresponds to a FugueMax item"],[45716,25,""],[45716,0," with a"],[45762,0,"\n\nThe _prepare_ method uses this pro"],[47754,654,""],[45763,36,""],[45763,0,"\n_prepare_ operates on the projection of the state tree described by #sp. Delete messages target the $i$-th item in the tree's traversal with $sp = mono(\"Ins\")$. Insert messages set the following properties, as defined in the Fugue paper (@fugue):\n\n/ originLeft: The ID of the $(i - 1)$-th node with $sp = mono(\"Ins\")$, or _start_ if $i = 0$\n/ originRight: The ID of the next node after _originLeft_ where $sp != mono(\"NotInsertedYet\")$, or _end_.\n\n#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim 3:*\n\n  The _prepare_ function defined above (called after setting #vp = $P_i$) produces identical CRDT messages as FugueMax in all cases.\n\n  PROVE ME!\n]\n"],[45764,0,"The "],[45778,8,""],[45778,0,"method"],[45791,0,"is"],[45822,17,""],[45788,5,""],[45788,0,"this"],[45821,1,""],[45821,0,":"],[45822,1,""],[45822,0,"\n\n- "],[45913,1,""],[45913,0,"\n- "],[46096,0,"  "],[46003,0,"  "],[46001,1,""],[45960,40,""],[46039,0,"("],[46045,0,")"],[46045,1,""],[46039,2,""],[46039,0,"S"],[46039,1,""],[46039,0,"s"],[46039,5,""],[46039,0,"START"],[46039,5,""],[46039,0,"start"],[46039,1,""],[46039,0,"S"],[46039,1,""],[46039,0,"s"],[46038,7,""],[46038,0,"`Start`"],[46158,5,""],[46158,0,"``"],[46159,0,"End"],[46163,0," if no such "],[46170,5,""],[46170,0,"subsequent node exists"],[45785,0,"runs "],[45826,0," to generate CRDT messages"],[45839,0,"the corresponding "],[46300,0,"\n"],[46300,0,"  \n  "],[46300,2,""],[46303,0,"Because the prepare method fun"],[46330,3,""],[46330,0,"runs on "],[46330,8,""],[46330,0,"takes as inpu"],[46301,42,""],[46300,1,""],[46299,1,""],[46326,15,""],[46325,1,""],[46325,0,", "],[46359,1,""],[46359,0,","],[47409,14,""],[47409,0,"insert"],[47426,0," into"],[47449,0,", positioned according to FugueMax"],[47422,0,"corre"],[47422,5,""],[47449,0," corresponding to the inserted content. The new node is"],[47504,1,""],[47516,0,"in the truee"],[47527,1,""],[47526,1,""],[47525,1,""],[47525,0,"ee "],[47632,20,""],[47632,0,"and"],[47657,0," on the deleted node. @"],[47679,1,""],[47679,0,"#sp is modified"],[47738,0,", described above"],[48015,117,""],[48014,1,""],[48013,1,""],[48012,1,""],[48065,1,""],[48065,0,"Z"],[48069,0,"\n"],[48069,1,""],[48069,0,"\n  After the _effect_ mess"],[48094,1,""],[48093,1,""],[48092,1,""],[48092,0,"ethod runs, the "],[48107,1,""],[48106,1,""],[48105,1,""],[48104,1,""],[48103,1,""],[48103,2,""],[48272,1,""],[48434,0,"\n\nBecause Fugue"],[48444,5,""],[48436,8,""],[48436,0,"BNec"],[48439,1,""],[48438,1,""],[48437,1,""],[48437,0,"ecause the messages"],[48448,0,"CRDT "],[48448,0,"m"],[48448,1,""],[48461,0," match FugueMax's messages"],[48461,0," and effect logic always"],[48503,8,""],[48502,1,""],[48501,1,""],[48500,1,""],[48500,0,", the resulting document order wila "],[48535,1,""],[48534,1,""],[48534,0,"l also wa"],[48542,1,""],[48541,1,""],[48541,0,"always match FugueMax."],[48554,0,"the order produced by "],[48794,18,""],[48811,0," - perhaps from another peer - into the local document state"],[48872,1,""],[48872,0,"\n\n"],[48886,11,""],[48886,0,"the algorithm"],[48886,13,""],[48886,0,"we need an algorithm which can calculate a"],[48917,11,""],[48917,0,"produce a"],[49063,0,"This computation "],[49063,17,""],[49341,0,"\n"],[49341,0,"\nBecause the resulting document state is independent of the traversal order"],[48586,0,"\n"],[48586,0,"\n#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim Z:*\n\n]"],[48639,1,""],[48639,0,"Q"],[48643,0,"\n  The resulting "],[48650,10,""],[48650,0,"algorithm is "],[48660,3,""],[48660,0,"functions "],[48650,20,""],[48650,0,"result of "],[48656,4,""],[48656,0,"ing document state is independent of "],[48646,47,""],[48646,0,"replay(g)"],[48654,1,""],[48653,1,""],[48653,0,"G)"],[48646,6,""],[48646,0,"r"],[48646,0,"#"],[48646,1,""],[48646,0,"$"],[48651,0,"$ produces an identical result regardless of the chosen trav"],[48653,58,""],[48652,1,""],[48646,0,"The document state produced by "],[48683,0," is independe nt"],[48698,1,""],[48697,1,""],[48696,1,""],[48696,0,"nt of the traversal order. This follows from the commun"],[48750,1,""],[48750,0,"tivity "],[48745,12,""],[48741,4,""],[48741,0,"FugueMax's commutivity property."],[48758,0,"at"],[49608,0,", "],[49609,1,""],[49472,0," new"],[49498,0," (computed from $$"],[49515,0,"ceil(V_0) - ceil(V_m)"],[49537,0,")"],[49498,40,""],[49613,0," this "],[49614,5,""],[49614,0,"and "],[49614,4,""],[49614,0,"the current document state"],[49614,0,"and "],[49644,0," #"],[49645,1,""],[49645,0,"$d = r(ceil(V_0))"],[49661,1,""],[49661,0,"$"],[49661,0,")_"],[49662,1,""],[49538,0,"// "],[49537,0,"\n"],[49537,0,"\nWhen this set of transformed operations is applied to ##"],[49593,1,""],[49592,1,""],[49592,0,"$$"],[49593,0,"d = r(ceil())"],[49604,0,"x"],[48933,0,"#"],[48933,1,""],[48933,0,"$d$ "],[48954,0," ("],[48955,1,""],[48954,1,""],[48954,0," "],[48954,1,""],[48953,0," "],[48953,1,""],[48953,0,", so $$"],[48959,0,"d = r(ceil(V_0))"],[48955,2,""],[48955,0,"such that"],[49098,0,"\n\nWe want:"],[49107,1,""],[49107,0," $$"],[49109,0,"e_1, e_2, .."],[49122,0," such that"],[49121,0,"]"],[49109,0,"["],[49134,0,":\n\n$ $"],[49138,0," "],[48935,0,"_0"],[48969,0,"_0"],[49143,0,"d_0 plus.ci"],[49152,2,""],[49152,0,"circle"],[49159,0,"[e_1, e_2, ..] = r(ceil(V_0 union V_m)) "],[49111,0," the list of transformed operations"],[49287,2,""],[49287,0," this"],[49237,0,"// "],[49237,3,""],[49324,0,"//"],[49323,0,"."],[49237,13,""],[49237,0,"W"],[49180,1,""],[48970,1,""],[48936,1,""],[49177,1,""],[48968,1,""],[48935,1,""],[49696,0,"\n\n\n"],[49697,0,"This algorithm works because "],[49697,29,""],[49697,0,"This algorithm works because"],[49595,0,"produced in this pass would create document $$"],[49640,0,"d"],[49642,0," from the empty document state $d_0$. "],[49679,0," "],[49680,15,""],[49680,0,"However, as wel "],[49695,1,""],[49694,1,""],[49694,0," already have #$"],[49709,1,""],[49708,1,""],[49517,191,""],[49517,0,"+ First generate the eg-walker state at version $V_0$. Transformed operations produced in this pass would create document $d$ from the empty document state $d_0$. However, as we already have"],[49617,90,""],[49617,0,"are discarded"],[49612,4,""],[49612,0,"phase"],[49747,0," thw two "],[49748,8,""],[49719,29,""],[49719,0,"The two phases essne"],[49738,1,""],[49737,1,""],[49737,0,"entuiall"],[49744,1,""],[49743,1,""],[49742,1,""],[49741,1,""],[49740,1,""],[49740,0,"ially emit a sequ"],[49746,11,""],[49746,0,"generate two sequences of transfromed "],[49772,12,""],[49772,0,"transforme d"],[49783,1,""],[49782,1,""],[49782,0,"d events: $$"],[49793,0,"[a_1, a_2, a_3"],[49804,3,""],[49804,0,"..]"],[49791,1,""],[49791,0,"\n\n- Phase 1 generates a sequence of operations "],[49854,0," such that $$"],[49866,0,"d_0 plus.cir"],[49875,3,""],[49875,0,"circle []"],[49839,0,"A = "],[49887,1,""],[49886,1,""],[49886,0,"A = r(ceil(V_0))"],[49903,0,"."],[49793,0,"- Phase 1 generates a sequence of operations $A = [a_1, a_2, ..]$ such that $d_0 plus.circle A = r(ceil(V_0))$.\n"],[49913,1,""],[49913,0,"3="],[49914,1,""],[49913,1,""],[49913,0,"2"],[49951,1,""],[49951,0,"B"],[49956,1,""],[49956,0,"b"],[49961,1,""],[49961,0,"b"],[49999,0," plus.circle B"],[50026,0," union V_m"],[50040,0,"\n\nB"],[50042,1,""],[50042,0,"However "],[50049,1,""],[50049,0,", "],[50042,9,""],[50042,0,"However,"],[49870,0,"d = "],[49871,3,""],[49870,1,""],[50042,8,""],[50042,0,"Substituting $$"],[50056,0,"d = r(ceil(V_0))"],[50073,0," i"],[50074,1,""],[50074,0,"yields "],[50042,39,""],[50042,0,"Substituting $d = r(ceil(V_0))$ yields"],[50039,1,""],[50039,0," ()"],[50041,1,""],[50040,1,""],[50039,1,""],[50039,0,"."],[50080,0," $d_0 plus.circle A plus.circle B = r(ceil(V_0 union V_m))$"],[50082,17,""],[50082,0,"d"],[50123,0,"."],[49524,9,""],[49524,0," traverse the events in "],[49548,32,""],[49549,0,"ceil("],[49557,0,")"],[49620,0,"."],[49559,0," "],[49559,1,""],[49481,33,""],[49481,0," in the algorithm presented above"],[49524,13,""],[49524,0," all"],[49550,0," are traversed, using the algorithm above"],[49656,0,"Using the sa"],[49656,12,""],[49656,0,"Using the same eg-walker state, the "],[49692,8,""],[49692,0,"traversal is continued"],[49702,12,""],[49702,0,"continues with"],[49753,0," ("],[49754,1,""],[49753,1,""],[49753,0," (ie"],[49756,1,""],[49755,1,""],[49754,1,""],[49753,1,""],[49753,1,""],[49753,0,"."],[49755,14,""],[49755,0,"T"],[49777,0," generated in this phase are emitted."],[49813,1,""],[50221,0," So the list of operations "],[50229,4,""],[50229,0,"vector"],[50250,0,"$V$"],[50252,1,""],[50251,1,""],[50251,0,"B#$"],[50253,1,""],[50252,1,""],[50252,0,"$ will transform $d$ to $r(ceil(V_0 union V_m))$ as desired."],[50314,73,""],[50463,0," algorithm"],[50478,9,""],[50478,0," run"],[50492,0,"ly"],[50506,4,""],[49656,33,""],[49656,0,"T"],[49721,0," ($$"],[49724,0,"ceil(V_0 union V_m) - ceil(VM"],[49752,1,""],[49752,0,"_m)"],[49756,0,")"],[49721,0,", namely"],[49729,2,""],[49729,0," "],[49763,1,""],[50310,0,","],[50972,27,""],[50972,0,"we can simplify the algorithm by only"],[51010,9,""],[51010,0,"computing "],[51019,1,""],[51019,0," the"],[51266,0,"Inuti"],[51270,1,""],[51269,1,""],[51268,1,""],[51268,0,"tuitively, "],[51279,18,""],[51296,0," works because"],[51311,8,""],[51358,0," for information leakage"],[51375,7,""],[51374,1,""],[51363,0,"ordering "],[51371,1,""],[51363,8,""],[51374,0," leakage"],[51374,8,""],[51362,12,""],[51358,4,""],[51311,0,"is that "],[51311,8,""],[51358,0," for int"],[51365,1,""],[51365,0,"formation"],[51363,0,"ordering "],[51735,0,".double"],[51766,0,"version "],[51780,0," version"],[51818,31,""],[51837,0," (or in)"],[51850,3,""],[51850,0,"can be"],[51865,1,""],[51865,0,"\n\n// "],[51990,7,""],[51990,0,"."],[51991,2,""],[51991,0," E"],[51897,0,"Initially, $vp = ve = C$. "],[51922,1,""],[51897,25,""],[51991,2,""],[51991,0," E"],[51749,0,"Initially, $vp = ve = C$."],[51773,1,""],[51773,0," "],[51773,1,""],[51773,0,", abnd"],[51778,1,""],[51777,1,""],[51776,1,""],[51776,0,"nd "],[51779,1,""],[51779,0,"o"],[52172,1,""],[52172,0,"\n\n"],[52267,0," - although unfortunately the number of items in the document at $C$ is usually difficult "],[52346,11,""],[52346,0," unknown "],[52354,1,""],[52354,0,". Bu"],[52357,1,""],[52356,1,""],[52355,1,""],[52354,1,""],[52267,0,"."],[52268,13,""],[52268,0," U"],[52345,0," But this can be worked aroudn b"],[52376,1,""],[52375,1,""],[52374,1,""],[52373,1,""],[52373,0,"nd by either adding dummy nodes lazily during _effect_"],[52419,0,"the "],[52431,0," function, or using"],[52450,4,""],[52450,0," internally"],[52462,1,""],[52462,0,"r"],[52466,1,""],[52466,0,"l"],[52440,1,""],[52440,0,"."],[52379,7,""],[52434,0," Alternately, if"],[52450,9,""],[52450,0," i"],[52451,1,""],[52451,0,"nodes are"],[52482,9,""],[52482,0," encoded, it is triviall"],[52505,1,""],[52505,0," to add a functionally infinite number of dummy nodes to the state tree with a single actual structure. This"],[52639,0," detail in"],[52650,113,""],[52650,0,"#o"],[52651,1,""],[52650,1,""],[52650,0,"@optim"],[52651,5,""],[52651,0,"optimisations."],[52145,0,", locally unique"],[52137,10,""],[54022,0,"\n\n"],[54023,0,"This optimisation has many consequences "],[54041,22,""],[54041,0,"relaxes many of the con"],[54061,3,""],[54061,0,"properties"],[54061,10,""],[54061,0,"correspondence claims made above:\n\n- CRDT messages "],[54096,16,""],[54096,0,"- CRDT messages"],[54095,0,"\n- The state tree no longer corresopnds"],[54123,11,""],[54123,0,"corresponds to FugueMax "],[54146,1,""],[54146,0," at $"],[54150,1,""],[54150,0,"#vp and #ve."],[54138,0,"the equvi"],[54146,1,""],[54145,1,""],[54145,0,"iuvalen"],[54142,10,""],[54142,0,"equivalent "],[54161,0," tree"],[54198,0," generated will not match their equivalents in FugueMax. In particular, the "],[54270,4,""],[54270,0,"_origin"],[54270,7,""],[54270,0,"_originLeft_ and _ori"],[54287,4,""],[54287,0,"_originRight_ will often name dummy"],[54317,0,"the ID of "],[54332,0," nodes instead of the \""],[54354,1,""],[54354,0,"c"],[54354,1,""],[54354,0,"real "],[54338,21,""],[54338,0,".\n"],[54340,1,""],[54341,0,"However, "],[54350,1,""],[54350,0,"r"],[54417,9,""],[54417,0,"function"],[54403,0,"resulting "],[54435,1,""],[54435,0,"!"],[54435,1,""],[54435,0,"."],[54464,1,""],[54464,0,"\n\n\n"],[54465,1,""],[54464,0," We describe"],[54468,8,""],[54468,0,"justify the reas"],[54480,4,""],[54480,0,"this "],[54476,9,""],[54476,0,"this optimisation below, and we have also run billions of fuzzer tests to verify this "],[54547,15,""],[54547,0,"wtuih"],[54551,1,""],[54550,1,""],[54549,1,""],[54548,1,""],[54547,1,""],[54547,0,"simulating multiple concurrent peers making random "],[54567,11,""],[54586,1,""],[54586,0,", concurrent changes in complex graphs"],[54499,1,""],[54499,0,". W"],[54502,6,""],[54529,0," iterations of quite complex"],[54570,78,""],[54563,1,""],[54562,1,""],[54561,1,""],[54561,0,"z"],[54568,0," to verify this claim."],[51010,31,""],[51010,0,"traversing the set of events"],[51260,0," for the purpose of computing the transof"],[51300,1,""],[51299,1,""],[51299,0,"formed operations"],[51293,0," list of"],[51808,1,""],[51808,0,", then traversing from C to $V-"],[51838,1,""],[51838,0,"_0$, and $V_0"],[51847,0,"then "],[51856,0,"$ to $V_m$ as described in @eg-par"],[51884,6,""],[51884,0,"eg-partial above."],[51901,1,""],[51901,0,"\n\n"],[52004,45,""],[51903,101,""],[51903,0,"Initially, $vp = ve = C$, and only events from version $C$ to version $V_0 union V_m$ are traversed."],[51901,0," All events before (or in) $C$ can be skipped."],[51949,24,""],[51949,0,"Initially, $vp = ve = C$"],[51949,0,"// "],[52163,0," a tree of"],[52345,0," Initially, $vp = ve = C$."],[52344,12,""],[52344,0," corresponding to"],[52398,0," to be init"],[52408,1,""],[52407,1,""],[52407,0,"itialised with"],[52490,0," version"],[52668,38,""],[52668,0,", or "],[52672,1,""],[52690,1,""],[52673,0,"if "],[52692,1,""],[52692,0,"ding"],[52676,0,"the  int"],[52683,1,""],[52682,1,""],[52681,1,""],[52680,1,""],[52679,1,""],[52678,1,""],[52677,1,""],[52676,1,""],[52676,0,"the internal "],[52700,9,""],[52700,0,"encoding optimisation is in use, a single node "],[52742,0,"RLE "],[52751,0,"can contain a "],[52765,25,""],[52787,6,""],[52787,0,"set"],[52787,3,""],[52787,0,"list"],[52806,49,""],[52813,12,""],[52812,1,""],[52811,1,""],[52810,1,""],[52810,0,"e internal run-length encoding optimisation is"],[60423,0," #"],[60424,1,""],[60424,0,"<opt-rle>"],[52881,13,""],[52880,1,""],[52880,0,"@p[t"],[52883,1,""],[52882,1,""],[52881,1,""],[52881,0,"opt-"],[52881,4,""],[52881,0,"opt-rle"],[52890,0,"\n"],[52890,0,"\n\n#figure(\n  fletcher.diagram(\n    cell-size: 0mm,\n    spacing: (4mm, 4mm),\n  {\n    let (start, a, b, c, d) = ((0,0), (1,-1), (2, -2), (4, -2), (3, -3))\n    node(start, [_start_])\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n    edge(start, a, \"-\")\n    edge(a, b, \"-\")\n    edge(b, d, \"-\")\n    edge(a, c, \"-\")\n  }),\n  caption: [Left-origin FugueMax tree of this data set]\n) <fuguemax-simple>"],[53285,18,""],[52889,1,""],[53193,1,""],[53192,1,""],[53191,1,""],[53190,1,""],[53190,0,"b, c"],[53213,1,""],[53212,1,""],[53211,1,""],[53210,1,""],[53210,0,"c, d"],[53205,0,"// "],[53124,0,"// "],[53025,1,""],[53025,0,"3"],[53029,1,""],[53029,0,"3"],[53033,2,""],[53033,0,")4"],[53034,1,""],[53033,1,""],[53033,0,"(4"],[53038,1,""],[53038,0,"4"],[53119,0,"\n    "],[53119,5,""],[53124,3,""],[53133,1,""],[53133,0,"dots.c"],[53138,1,""],[53138,0,"."],[53138,1,""],[53137,1,""],[53137,0,".h"],[53138,1,""],[53137,1,""],[53137,0,".v"],[53138,1,""],[53138,0,"down"],[53213,3,""],[53082,1,""],[53082,0,"x_1"],[53101,1,""],[53101,0,"x_1"],[53103,1,""],[53103,0,"2"],[53120,1,""],[53120,0,"x_1"],[53122,1,""],[53122,0,"3"],[52954,1,""],[52954,0,"2"],[52959,1,""],[52959,0,"2"],[52959,1,""],[52959,0,"1"],[52954,1,""],[52954,0,"1"],[53084,1,""],[53083,1,""],[53082,1,""],[53082,0,"X"],[53099,3,""],[53099,0,"Y"],[53116,3,""],[53116,0,"?Z"],[53117,1,""],[53116,1,""],[53116,0,"\n    Z"],[53116,6,""],[53116,0,"Z"],[52935,1,""],[52935,0,"1"],[52935,1,""],[52935,0,"3"],[52935,1,""],[52935,0,"10"],[52936,1,""],[52964,0,"\n    debug: 1,"],[52976,1,""],[52976,0,"2"],[53098,0,", shape: 'rect'"],[53108,5,""],[53107,1,""],[53107,0,"\"rect\""],[53107,6,""],[53107,0,"'rect'"],[53106,7,""],[53099,7,""],[53098,1,""],[52935,1,""],[52935,0,"0"],[52959,1,""],[52954,1,""],[52958,0,"2"],[52954,0,"2"],[52964,0,"\n    padd"],[52969,4,""],[52969,0,"in"],[52970,1,""],[52969,1,""],[52965,4,""],[52970,0,"// "],[52970,3,""],[53082,0,", shape: \"circle\""],[52970,0,"// "],[53151,1,""],[53134,1,""],[53117,1,""],[53149,0,"d"],[53133,0,"d"],[53117,0,"d"],[53152,0,"^"],[53135,0,"^"],[53118,0,"^"],[53155,0,"1"],[53137,0,"1"],[53119,0,"1"],[53138,1,""],[53138,0,"2"],[53157,1,""],[53157,0,"3"],[53314,16,""],[53314,0,"of dummy nodes $d^1$"],[53314,3,""],[53314,0,"with "],[53335,0,", d^1"],[53339,1,""],[53339,0,"2, d^1"],[53344,1,""],[53344,0,"3, ..."],[53349,1,""],[53348,1,""],[53347,1,""],[53347,0,"dots"],[52130,13,""],[52130,0,"state tree"],[52163,4,""],[52163,0,"set"],[52184,0," Logically,"],[52195,1,""],[52195,0," "],[52196,1,""],[52196,0," "],[52196,1,""],[52196,0,"e"],[52306,4,""],[52306,0,","],[52366,0,"inti"],[52369,1,""],[52368,1,""],[52368,0,"itial "],[53368,54,""],[54664,0,"\nC"],[54665,1,""],[54665,0,"Th"],[54666,1,""],[54665,1,""],[54665,0,"The fact that "],[54669,10,""],[54669,0,"claim that this optimisation will not "],[54665,42,""],[54665,0,"This optimisation"],[54665,17,""],[54664,1,""],[54703,0,"FugueMax "],[54744,1,""],[54744,0,", as:"],[54840,0,"Any "],[54840,4,""],[54863,0," by _prepare_"],[54923,14,""],[54923,0,"Insert events may naem"],[54944,1,""],[54943,1,""],[54942,1,""],[54941,1,""],[54941,0,"it"],[54942,1,""],[54942,0,"f"],[54942,1,""],[54942,0,"dentify dummy nodes"],[54941,20,""],[54940,1,""],[54940,0," name dummy nodes inte"],[54961,1,""],[54960,1,""],[54960,0,"setad o"],[54958,9,""],[54945,0," the ID of "],[54955,1,""],[54968,0,"wh"],[54969,1,""],[54968,1,""],[54967,1,""],[54967,0," fo"],[54969,1,""],[54968,1,""],[54968,0,"in their"],[55007,0," fields"],[55014,39,""],[55014,0,". And delete events may also target dummy nodes."],[55061,0,", when the item being deleted was in"],[55038,5,""],[55056,1,""],[55091,1,""],[55089,2,""],[55089,0,"inserted bef"],[55100,1,""],[55099,1,""],[55098,1,""],[55098,0,"e"],[55098,1,""],[55098,0,"before version #"],[55113,1,""],[55113,0,"$C$."],[55098,7,""],[55098,0,"by "],[55100,1,""],[55098,2,""],[55098,0,"before "],[55119,10,""],[55119,0,"R"],[55172,10,""],[55195,0," "],[55195,1,""],[55136,14,""],[55136,0,"optimisation"],[55256,1,""],[55256,0,", and"],[55261,2,""],[55261,0," w"],[55290,28,""],[55301,0," i"],[55302,1,""],[55301,1,""],[55300,1,""],[55300,0," iterations"],[55332,0," "],[55332,1,""],[55693,2,""],[55693,0,"needs to be"],[55715,8,""],[55715,0," "],[55728,0," "],[55728,9,""],[55743,1,""],[55743,0," of the visited event."],[56063,6,""],[56063,0,"output"],[56086,1,""],[56086,0,":"],[56223,0,". The same IDs are "],[56238,4,""],[56238,0,"identified in _prepare_ are immeduately"],[56266,11,""],[56266,0,"immediately used by _effect_, so it doesn't m"],[56299,12,""],[56299,0,"the actual contents "],[56310,9,""],[56310,0,"IDs don't matter"],[56294,5,""],[56294,0,". "],[56296,1,""],[56296,0,"T"],[56300,7,""],[56300,0,"bits representing the "],[56296,3,""],[56296,0,"Which"],[56318,1,""],[56317,1,""],[56316,1,""],[56317,3,""],[56317,0,"those"],[56327,3,""],[56327,0,"sdoesn"],[56327,6,""],[56327,0,"deo"],[56329,1,""],[56328,1,""],[56328,0,"oesn"],[56305,1,""],[56305,0," strings"],[56296,17,""],[56296,0,"The exact bit strings"],[56327,0,"iung"],[56330,1,""],[56329,1,""],[56328,1,""],[56328,0,"ng"],[57065,11,""],[57065,0,"events which were deleted at $C$"],[57099,5,""],[57099,0,"W"],[57165,17,""],[57094,0,"version "],[57106,0," Any iot"],[57113,1,""],[57112,1,""],[57112,0,"tem that "],[57107,14,""],[57107,0,"The dummy nodes are "],[57107,20,""],[57107,0,"Any item t"],[57116,1,""],[57116,0,"which was inserted"],[57126,8,""],[57116,10,""],[57116,0,"in the document which was deleted by version $C$ will not "],[57165,9,""],[57165,0,"has no corresponding node in the data set. A"],[57208,1,""],[57208,0,"As a result, "],[57221,2,""],[57221,0,"w"],[57221,1,""],[57221,0,"W"],[57107,114,""],[57230,40,""],[57230,0," to these items."],[57106,0," Dum"],[57109,1,""],[57108,1,""],[57107,1,""],[57106,1,""],[57248,0,"Note that "],[57258,1,""],[57258,0,"b"],[57376,0,", where"],[57383,3,""],[57248,11,""],[57248,0,"B"],[57402,0," $C$"],[57373,60,""],[57373,0," P$"],[57375,1,""],[57374,1,""],[57374,0,"$P$"],[57374,0,"$C$ did not ha"],[57387,1,""],[57386,1,""],[57386,0,"_happen-before_ "],[57302,0,". We "],[57306,1,""],[57305,1,""],[57304,1,""],[57303,1,""],[57303,0," The algorithm will mish"],[57326,1,""],[57326,0,"behave"],[57332,2,""],[57543,0,"\n- All traverse"],[57550,8,""],[57550,0,"visited events happ"],[57546,23,""],[57546,0,"The only visited events "],[57555,15,""],[57555,0,"events visited in the traversal happen after C$"],[57601,1,""],[57600,1,""],[57600,0,"$C$."],[57562,0,"which are "],[57571,1,""],[57567,4,""],[57562,5,""],[57550,0,"traversal "],[57564,0," visits"],[57578,32,""],[57578,0," which happened after"],[57599,6,""],[57524,0,"// "],[57615,1,""],[57614,1,""],[57613,1,""],[57612,1,""],[57612,0,"e"],[57664,0," by the "],[57664,8,""],[58021,0,"// "],[58005,0,"// "],[57899,0,"// "],[58026,0,"\n// For FugueMax's ordering rules to have any bearing on the resulting insertion order, $i_1$ and $i_2$ must:\n// - Be concurrent"],[58008,3,""],[58010,1,""],[58009,1,""],[58008,1,""],[58007,1,""],[58006,1,""],[58006,0," b"],[57899,3,""],[58017,0,"."],[57899,120,""],[58027,3,""],[58008,3,""],[57899,3,""],[58084,0,"\nFor the fugu"],[58093,4,""],[58093,0,"FugueMax ordering rules to order items correctly,"],[58142,7,""],[58126,16,""],[58126,0,"insert events"],[58155,17,""],[58155,0," "],[58165,0,","],[58167,3,""],[58177,0," need to be"],[58200,4,""],[58178,4,""],[58178,0,"must"],[58182,3,""],[58186,4,""],[58214,1,""],[58214,0,". This will result in"],[58235,3,""],[58273,6,""],[58273,0,"being"],[58298,0," (Althoguh "],[58300,9,""],[58299,1,""],[58298,1,""],[59544,8,""],[59544,0,"improve "],[59544,0,"dramatically "],[59565,0,"the performance of"],[59583,5,""],[59624,23,""],[59660,5,""],[59660,0,"the"],[59680,0," o"],[59681,1,""],[59681,0,"from these optimisations"],[59159,11,""],[59159,0,"written"],[59966,13,""],[60009,0," as a regualr CRDT"],[60021,0,"a"],[60015,8,""],[60015,0,"regular"],[60171,19,""],[62322,0,"\nIf versions"],[62323,11,""],[62323,0,"Versions can't "],[62323,15,""],[62323,0,"In "],[62323,3,""],[62323,0,"In our Dima"],[62333,1,""],[62332,1,""],[62332,0,"amond Types library, we split "],[62323,31,""],[62323,0,"W"],[62323,9,""],[62323,0,"Each replica "],[62323,13,""],[62323,0,"Each replica"],[62322,0,"\n"],[62322,0,"\nVes"],[62325,1,""],[62325,0,"rsions are quite large objects (containing a hashsa"],[62370,6,""],[62370,0,"hash"],[62370,4,""],[62369,1,""],[62369,0," unique ID string and "],[62356,1,""],[62355,1,""],[62355,0,", "],[62380,7,""],[62384,0,"a sequence number. And there's no bo"],[62419,1,""],[62418,1,""],[62418,0,"obvious"],[62407,18,""],[62407,0,"there's no obvious way versions "],[62407,32,""],[62407,0,"given two versions, "],[62426,1,""],[62426,0,"t"],[62426,1,""],[62426,0," there"],[62402,30,""],[62404,0,"In our implementation, "],[62427,1,""],[62427,0,"e"],[62323,0,"// "],[62442,0," as"],[62444,1,""],[62443,1,""],[62443,0,"associates each version (agent, seq)"],[62467,0,"(an "],[62483,0," tuple pair) with a _local version_, which is simply an integer. The scheme is simple:\n\n- E"],[62538,0," "],[62538,1,""],[62546,0," incremting"],[62547,10,""],[62547,0,"incrementing"],[62586,1,""],[62585,1,""],[62584,1,""],[62583,1,""],[62582,1,""],[62582,0," T"],[62583,1,""],[62583,0,"On the replica, the first observed event is numbered 0, then 1, and "],[62650,1,""],[62649,1,""],[62648,1,""],[62647,1,""],[62647,0,"then 2 and so on. "],[62609,9,""],[62614,0," added to the local event graph"],[62686,1,""],[62686,0," This has some useful properties:\n\n- Integers are much "],[62723,0,"Versions are yo"],[62737,1,""],[62736,1,""],[62736,0,"used everywhere throughotu"],[62761,1,""],[62760,1,""],[62759,1,""],[62759,0,"out the library. Using "],[62782,1,""],[62782,0,"i"],[62776,24,""],[62776,0,"Integers are muhc ligh"],[62789,9,""],[62789,0,"mi"],[62790,1,""],[62790,0,"uch ilgh"],[62794,4,""],[62794,0,"lighter weight then"],[62812,1,""],[62811,1,""],[62811,0,"an using an (agent, seq) p"],[62836,1,""],[62836,0,"tuple pair\n- Because events are added to the event graph in causal order, given two events with local versions $v_1$ and $v_2$ such that $v_a"],[62976,1,""],[62976,0,"1 < v_2$, it follows that t"],[63002,1,""],[63002,0,"either "],[62986,23,""],[62986,0,"either $v_1 -> v_2 "],[63004,1,""],[63004,0,"$ or $v_1 || v_2$. It is impossible for "],[63023,0,"If $v_1 < v_2$ "],[63038,1,""],[63038,0,"i"],[63059,0,"$v_2$ to have _happened-before_ $v_1$."],[63038,59,""],[62968,5,""],[62968,0,"where "],[62986,0,"it is impossible for $v_2$ to have _happened-before_ $v_1$."],[62986,0," "],[63047,6,""],[63047,0,"Thus either"],[63088,16,""],[63088,0,"\n\nThis in turn allows "],[63090,20,""],[63090,0,"This in turn allows for much more efficient e"],[63134,1,""],[63134,0,"queries on the event graph. Consider the "],[63162,13,""],[63162,0,"During eg-walker, we "],[63180,3,""],[63162,7,""],[63162,0,"The "],[63090,87,""],[63090,0,"This in turn allows for much more efficient queries on the event graph. The eg-walker,"],[63175,1,""],[63175,0," algorithm computes the"],[63162,3,""],[63162,0,"Before visiting each event in the graph,"],[63212,10,""],[63225,0," difference betweep "],[63244,1,""],[63244,0,"n"],[63244,1,""],[63243,1,""],[63243,0,"n $"],[63245,1,""],[63245,0,"#vp (the version of the previously visited event) and $"],[63299,1,""],[63299,0,"$V_"],[63301,1,""],[63300,1,""],[63300,0,"P-"],[63301,1,""],[63301,0,"_v"],[63302,1,""],[63302,0,"i$ (the "],[63090,220,""],[63090,0,"This in turn allows for much more efficient queries on the event graph. Before visiting each event in the graph, eg-walker computes the difference between #vp (the version of the previously visited event) and $P_i$ (the"],[63189,0,"$i$ "],[63313,0," parent version "],[63321,8,""],[63321,0,"version of $i$)."],[63229,0," set"],[63341,0," Using lo"],[63342,8,""],[63342,0,"The con"],[63342,7,""],[63342,0,"Using local versions"],[63341,0," Efficiently calculating the set difference based on two versions "],[63341,66,""],[63362,0,", this set difference"],[63364,5,""],[63364,0,"the "],[63382,0," can be calculated very i"],[63406,1,""],[63406,0,"efficiently:\n\n\n```\n\n\n```"],[63419,1,""],[63161,1,""],[63161,0,"\n\n\n"],[63094,3,""],[63094,0," constraint"],[63105,5,""],[63112,0," fo"],[63114,1,""],[63113,1,""],[63112,1,""],[63145,0,"to be"],[63145,5,""],[63145,0,"to be issued against "],[63166,3,""],[63182,0," "],[63182,1,""],[63182,0," "],[63182,1,""],[63182,0," Our eg-walker implement"],[63183,23,""],[63182,1,""],[63181,1,""],[63181,0,", because "],[63181,10,""],[63181,0,". Generally "],[63192,1,""],[63192,0,", most queries"],[63183,23,""],[63182,1,""],[63088,0,"\n\nDuring "],[63090,7,""],[63090,0,"When merging changes, there are many operations which are"],[63127,20,""],[63127,0,"queries which are issued against the event graph, including:\n\n- Diff(v1, v2)"],[63189,1,""],[63189,0,"\\"],[63203,0,": xxx"],[63189,1,""],[63189,0,"/"],[63196,2,""],[63196,0,"$V_1$"],[63204,1,""],[63203,1,""],[63203,0,"V"],[63203,1,""],[63203,0,"$V_2#"],[63207,1,""],[63207,0,"$"],[63211,3,""],[63211,0,"compute"],[63191,1,""],[63191,0,"d"],[63218,0," the difference between the event graphs"],[62430,12,""],[62430,0,"replicas"],[62448,1,""],[62449,4,""],[62449,0,"each"],[62454,0,"\"remote "],[62469,0,"\""],[62472,0,"either "],[62505,0,", or a set of (agent, seq) tuple pairs depending on context"],[62454,16,""],[62454,0,"ID"],[62457,8,""],[62457,0,"("],[62484,59,""],[62537,12,""],[62536,1,""],[62579,0," ID of the"],[62708,1,""],[62674,34,""],[62674,0,"This has some small"],[62674,19,""],[62673,1,""],[62674,8,""],[62674,0,"IDs"],[62792,0," in every instance.\n\nBut the larger benefit to this approach is that it allows u"],[62871,1,""],[62871,0,"a number of optimisations "],[62871,26,""],[62871,0,"se"],[62872,1,""],[62871,1,""],[62870,1,""],[62869,1,""],[62868,1,""],[62867,1,""],[62866,1,""],[62865,1,""],[62864,1,""],[62864,0,"dramat"],[62869,1,""],[62869,0,"tically improves the performance of a number of graph query functions.\n\nThe"],[62917,0,"event "],[62950,0," event graph is queried "],[62947,27,""],[62947,0,"The event graph is queried"],[62876,0," simplify and"],[62986,0," constantly "],[62997,1,""],[62997,0," by eg-walker:\n\n- When events are added to the graph, the local replica checks if the ID alread"],[63013,79,""],[63012,1,""],[63011,1,""],[63010,1,""],[63010,0,". For example:\n\n- B"],[63028,1,""],[63028,0,"Before visiting each event "],[63028,0,"During traversal, "],[63046,1,""],[63046,0,"b"],[63072,1,""],[63072,0,", "],[63026,48,""],[63026,0,"- During traversal, before visiting each event, eg-walker computes the set difference between #vp (the version of the previously visited event) and $P_i$ (the parent version of $i$). Using local versions, the set difference can be calculated very efficiently:\n\n"],[63209,76,""],[63208,1,""],[63208,0," The set difference function returns a list of added"],[63247,4,""],[63246,1,""],[63245,1,""],[63245,0,"lists"],[63245,0,"sro"],[63247,1,""],[63246,1,""],[63246,0,"orted "],[63266,0," and removed events.\n- Before "],[63289,7,""],[63289,0,"When merging "],[63289,13,""],[63289,0,"The partial transform function first\n- During traversal, before visiting each event, eg-walker computes the set difference between #vp (the version of the previously visited event) and $P_i$ (the parent version of $i$). The set difference function returns sorted lists of added and removed events."],[63026,261,""],[63064,0," computes the _greatest common version_ $C$"],[63028,3,""],[63028,0,"Before"],[63028,6,""],[63028,0,"When the"],[63063,0," is queried to merge changes $"],[63092,1,""],[63091,1,""],[63090,1,""],[63089,1,""],[63088,1,""],[63087,1,""],[63086,1,""],[63085,1,""],[63084,1,""],[63083,1,""],[63083,0," $V_m$ into $V_1"],[63098,1,""],[63098,0,"0$, it"],[63111,8,""],[63111,0,"needs to compute"],[63160,1,""],[63159,1,""],[63158,1,""],[63158,0,"$C = V_0 sect.sq.double V_m$."],[63157,0," of"],[63159,1,""],[63158,1,""],[63157,1,""],[63187,0," This is a"],[63196,1,""],[63195,1,""],[63194,1,""],[63193,1,""],[63192,1,""],[63191,1,""],[63190,1,""],[63189,1,""],[63188,1,""],[63187,1,""],[63448,0,"\n- When ad"],[63457,1,""],[63456,1,""],[63455,1,""],[63454,1,""],[63453,1,""],[63452,1,""],[63451,1,""],[63451,0,"During traversal, the algorithm maintains $"],[63483,11,""],[63483,0,"stores $V"],[63491,1,""],[63483,8,""],[63483,0,"adds and removes events from $"],[63512,1,""],[63512,0,"#vp. This "],[63517,5,""],[63517,0,"Even this function is non"],[63541,1,""],[63517,24,""],[63517,0,"This function requires lok"],[63542,1,""],[63542,0,"oking up and filtering "],[63517,48,""],[63517,0,"Because versions are "],[63517,21,""],[63517,0,"Because versions represent the frontier"],[63534,10,""],[63534,0,"are sets of IDs of "],[63565,0," "],[63565,1,""],[63553,4,""],[63553,0,"an event graph's "],[63578,0,", this "],[63449,0,"// "],[63588,0,"\n"],[63449,139,""],[63449,0,"// - During traversal, the algorithm adds and removes events from #vp. Because versions are sets of IDs of an event graph's frontier, this"],[63588,0,"\nAnd many more.\n\n"],[62720,1,""],[62720,0,", and using"],[62732,1,""],[62732,0,"i"],[62732,0,"simple "],[62747,81,""],[62747,0," yields a small but constant performance a"],[62788,1,""],[62788,0,"gain in these cases.\n\nHowever, "],[62810,9,""],[62810,0,"However,"],[62809,9,""],[62808,1,""],[62881,1,""],[62881,0,"es"],[62882,1,""],[62881,1,""],[62881,0,"ies"],[63604,5,""],[62313,8,""],[62313,0,"I"],[62293,8,""],[62293,0,"I"],[62307,0,"D"],[62294,0,"D"],[62309,0,"s"],[62295,0,"s"],[62490,7,""],[62490,0,"ID"],[62521,99,""],[62530,0," "],[62530,1,""],[62530,0," from"],[62537,0," f"],[62538,1,""],[62537,1,""],[62536,1,""],[62535,1,""],[62534,1,""],[62533,1,""],[62532,1,""],[62531,1,""],[62530,1,""],[62522,8,""],[62521,1,""],[62514,0,"autoincrementing "],[62538,0,". The first locally "],[62550,8,""],[62550,0,"event added to the local event graph is numbered 0"],[62674,1,""],[62674,0,"."],[62675,6,""],[62675,0," U"],[62627,1,""],[62627,0,"\n\n"],[62760,1,""],[62759,1,""],[62759,0," However, "],[62759,1,""],[62759,0,"\n\n"],[62770,4,""],[62761,30,""],[62761,0,"However, this approach also"],[62788,25,""],[62788,0," surprisingly"],[62801,13,""],[63621,8,""],[63621,0,"IDs"],[63626,1,""],[63626,0,"o"],[63626,1,""],[63626,0,"u"],[63626,1,""],[63626,0,"i"],[63636,1,""],[63636,0,"i"],[63645,6,""],[63645,0," that"],[63652,1,""],[63652,0,"i"],[63658,1,""],[63658,0,"i"],[63686,1,""],[63686,0,"i"],[63718,1,""],[63718,0,"i"],[63663,0," event $i_2 ="],[63675,1,""],[63674,1,""],[63674,0,"4"],[63674,1,""],[63674,0,"$ must have been added t "],[63698,1,""],[63698,0,"o the local event graph after $"],[63728,1,""],[63728,0,"even4 "],[63733,1,""],[63732,1,""],[63732,0,"t $i_1$. As such,"],[63810,6,""],[63810,0,"E"],[63846,0,"\n\n"],[63848,524,""],[63847,0,"\nT"],[63848,1,""],[63848,0,"Graph queries can take advantage of this fact. "],[63866,0,"be written to "],[63909,0,"Consider the _diff_ function, which computes the difference between"],[63958,0,"set "],[63980,0," two versions. A "],[63996,1,""],[63995,1,""],[63995,0,"A naive diff function operating on IDs m"],[64034,1,""],[64034,0,"would need to do a bredth "],[64059,1,""],[64053,6,""],[64034,19,""],[64034,0,"may need to do a breadth-first search from "],[64030,3,""],[64030,0,"IDs"],[64030,0,"two versions (represented by sets of "],[64070,0,")"],[64089,0,"parallel "],[64119,5,""],[64119,0,"to find the ways the versions differ. Using local IDs, the algorithm get "],[64191,1,""],[64191,0,"s much simpler:"],[62444,0,"\"remote "],[62454,0,"\""],[62457,2,""],[62457,0,"the"],[62484,0,"s mentioned above"],[63559,315,""],[62655,0,"\nBecause events are added to the event graph in causal order, given two events with local IDs $i_1$ and $i_2$ such that $i_1 < i_2$, event $i_2$ must have been added to the local event graph after event $i_1$. As such, it is impossible for $i_2$ to have _happened-before_ $i_1$. Either $v_1 -> v_2$ or $v_1 || v_2$.\n"],[62934,0,"Thus $i_1 < i_2 implies"],[62949,0,"$"],[62951,1,""],[62951,0,"i"],[62958,0," that "],[62964,1,""],[62964,0,"i"],[62964,1,""],[62964,0,"e"],[63002,0,"// "],[63137,27,""],[63137,0,"This simple propertiy"],[63137,23,""],[63137,0,"S"],[63149,0,", this simple properti"],[63170,1,""],[63170,0,"y "],[63171,1,""],[63216,0,"ll manner"],[63225,7,""],[63259,0,"And this matt"],[63259,13,""],[63259,0,"This matters because "],[63280,1,""],[63280,0,"t"],[63923,1,""],[63925,61,""],[64092,7,""],[64091,1,""],[64164,0," This is quite slow and it uses a lot of RAM."],[64259,0," Bo"],[64261,1,""],[64260,1,""],[64260,0,"All versions a"],[64273,1,""],[64264,9,""],[64264,0,"local IDs are added to a priority queue (max heap)"],[64304,10,""],[64303,1,""],[64209,1,""],[64209,0,"\n\n\n"],[64209,0," Even in the simple case where one "],[64240,4,""],[64240,0,"$$"],[64241,0,"V_1 -> V_2"],[64252,0," or $$"],[64257,0,"V_2 -> V_1"],[64268,0,", both versions will be expe"],[64295,1,""],[64295,0,"anded."],[64300,1,""],[64300,0," unnecessarily."],[64316,1,""],[64315,1,""],[64315,0,"\n"],[64371,6,""],[64371,0,"local "],[64410,0,", tagged with their state ("],[64380,0," in "],[64383,1,""],[64382,1,""],[64381,1,""],[64380,1,""],[64437,0,"Either"],[64437,6,""],[64436,1,""],[64436,0,"(either they're in the "],[64437,22,""],[64436,1,""],[64435,1,""],[64435,0,". (Either they're in the "],[64459,1,""],[64458,1,""],[64457,1,""],[64456,1,""],[64456,0,"$$"],[64457,0,"ceil(V_1)"],[64467,0,", in $ceil(V_1)$"],[64479,2,""],[64479,0,"_2"],[64483,0," or they're common to both event graphs). The algorithm re"],[64540,1,""],[64539,1,""],[64539,0,"iteratively pops IDs from the queue and re"],[64424,11,""],[64424,0,"a flag"],[64575,1,""],[64574,1,""],[64573,1,""],[64572,1,""],[64571,1,""],[64570,1,""],[64570,0,"until "],[64569,7,""],[64569,0," - from largest local ID to "],[64572,25,""],[64572,0,"always popping the largest item in the queue first - "],[64599,5,""],[64599,0,"local ID "],[64546,4,""],[64546,0,"visits"],[64631,0," "],[64631,1,""],[64631,0,"a"],[64631,1,""],[64630,1,""],[64629,1,""],[64628,1,""],[64628,0,". IF "],[64632,1,""],[64631,1,""],[64631,0," f"],[64632,1,""],[64631,1,""],[64631,0,"f "],[64367,266,""],[64366,1,""],[64365,1,""],[64365,0,", as a priority queue can be used sorted"],[64399,6,""],[64399,0,"which pops the "],[64405,0,"always "],[64404,17,""],[64404,0," visits"],[64370,41,""],[64370,0,"the graph can be traversed in order from the highst"],[64420,1,""],[64419,1,""],[64419,0,"est local ID in $V_1 an"],[64441,1,""],[64440,1,""],[64439,1,""],[64439,0,"$ and $V_2$ to the loest"],[64462,1,""],[64461,1,""],[64460,1,""],[64460,0,"west."],[64451,14,""],[64451,0,"until "],[64317,140,""],[64317,0,"Using local IDs, the algorithm gets much simpler, as the graph can be traversed in order from the highest local ID in $V_1$ and $V_2$ until"],[64462,0,"export const diff = (cg: CausalGraph, a: LV[], b: LV[]): DiffResult => {\n  const flags = new Map<number, DiffFlag>()\n\n  // Every order is in here at most once. Every entry in the queue is also in\n  // itemType.\n  const queue = new PriorityQueue<number>()\n\n  // Number of items in the queue in both transitive histories (state Shared).\n  let numShared = 0\n\n  const enq = (v: LV, flag: DiffFlag) => {\n    // console.log('enq', v, flag)\n    const currentType = flags.get(v)\n    if (currentType == null) {\n      queue.enq(v)\n      flags.set(v, flag)\n      // console.log('+++ ', order, type, getLocalVersion(db, order))\n      if (flag === DiffFlag.Shared) numShared++\n    } else if (flag !== currentType && currentType !== DiffFlag.Shared) {\n      // This is sneaky. If the two types are different they have to be {A,B},\n      // {A,Shared} or {B,Shared}. In any of those cases the final result is\n      // Shared. If the current type isn't shared, set it as such.\n      flags.set(v, DiffFlag.Shared)\n      numShared++\n    }\n  }\n\n  for (const v of a) enq(v, DiffFlag.A)\n  for (const v of b) enq(v, DiffFlag.B)\n\n  // console.log('QF', queue, flags)\n\n  const aOnly: LVRange[] = [], bOnly: LVRange[] = []\n\n  const markRun = (start: LV, endInclusive: LV, flag: DiffFlag) => {\n    if (endInclusive < start) throw Error('end < start')\n\n    // console.log('markrun', start, end, flag)\n    if (flag == DiffFlag.Shared) return\n    const target = flag === DiffFlag.A ? aOnly : bOnly\n    pushReversedRLE(target, start, endInclusive + 1)\n  }\n\n  // Loop until everything is shared.\n  while (queue.size() > numShared) {\n    let v = queue.deq()\n    let flag = flags.get(v)!\n    // It should be safe to remove the item from itemType here.\n\n    // console.log('--- ', v, 'flag', flag, 'shared', numShared, 'num', queue.size())\n    if (flag == null) throw Error('Invalid type')\n\n    if (flag === DiffFlag.Shared) numShared--\n\n    const e = rawFindEntryContaining(cg, v)\n    // console.log(v, e)\n\n    // We need to check if this entry contains the next item in the queue.\n    while (!queue.isEmpty() && queue.peek() >= e.version) {\n      const v2 = queue.deq()\n      const flag2 = flags.get(v2)!\n      // console.log('pop', v2, flag2)\n      if (flag2 === DiffFlag.Shared) numShared--;\n\n      if (flag2 !== flag) { // Mark from v2..=v and continue.\n        // v2 + 1 is correct here - but you'll probably need a whiteboard to\n        // understand why.\n        markRun(v2 + 1, v, flag)\n        v = v2\n        flag = DiffFlag.Shared\n      }\n    }\n\n    // console.log(e, v, flag)\n    markRun(e.version, v, flag)\n\n    for (const p of e.parents) enq(p, flag)\n  }\n\n  aOnly.reverse()\n  bOnly.reverse()\n  return {aOnly, bOnly}\n}"],[64462,12,""],[64462,0,"vunct"],[64462,5,""],[64462,0,"function"],[64475,3,""],[64505,2,""],[64505,0,"L"],[64496,2,""],[64496,0,"L"],[64505,0,"o"],[64497,0,"o"],[64507,0,"c"],[64498,0,"c"],[64509,0,"a"],[64499,0,"a"],[64511,0,"l"],[64500,0,"l"],[64513,0,"I"],[64501,0,"I"],[64515,0,"d"],[64502,0,"d"],[64493,1,""],[64493,0,"v0"],[64494,1,""],[64494,0,"1"],[64508,1,""],[64508,0,"v2"],[65511,1,""],[65511,0,"v1"],[65552,1,""],[65552,0,"v2"],[65506,1,""],[65506,0,"id"],[65548,1,""],[65548,0,"id"],[65520,1,""],[65520,0,"id"],[65563,1,""],[65563,0,"id"],[64461,0,"\nexport const enum DiffFlag { A=0, B=1, Shared=2 }\n"],[64462,13,""],[64572,3,""],[64461,0,"javascript"],[64461,10,""],[64461,0,"typescript"],[64585,138,""],[64625,0,")"],[64619,0,"("],[64626,0,", DiffFlag"],[64620,6,""],[64620,0,"LocalId"],[64508,0,"\ntype local"],[64514,5,""],[64514,0,"LocalId = number\nenum DiffFlag { A=0, B=1, Shared=2 }"],[64472,37,""],[65432,0,"// "],[65426,0,"// "],[65408,0,"// "],[65372,0,"// "],[65305,0,"// "],[65228,0,"// "],[65149,0,"// "],[65075,0,"// "],[65027,0,"// "],[64957,0,"// "],[64932,0,"// "],[64913,0,"// "],[64882,0,"// "],[64845,0,"// "],[64810,0,"// "],[64767,0,"// "],[65506,0,"queue."],[65512,3,""],[65512,0,"push"],[65531,0,")"],[65517,0,"("],[65558,0,"queue.push("],[65569,3,""],[65585,0,")"],[64606,0,"\n  // Max heap. Items are removed from his"],[64647,1,""],[64647,0,"ghest local ID to t"],[64665,1,""],[64665,0,"lowest."],[64662,10,""],[64661,1,""],[64622,22,""],[64622,0,"The"],[64642,0," is removed first."],[64819,718,""],[64924,38,""],[64926,0,"// "],[65306,0,"// "],[65253,0,"// "],[65198,0,"// "],[65158,0,"// "],[65110,0,"// "],[65052,0,"// "],[64983,0,"// "],[64926,3,""],[64923,0,"\n"],[64923,1,""],[64937,11,""],[64949,11,""],[65398,3,""],[65398,0,"pop"],[65388,0,"("],[65389,1,""],[65389,0,"v, flag)"],[65412,231,""],[65412,0,"\n"],[65471,0,"}"],[65470,0,"{parents, "],[65480,1,""],[65479,1,""],[65478,1,""],[65478,1,""],[65470,1,""],[65480,22,""],[65480,0,"getParents"],[65464,0,"// "],[65464,3,""],[65480,0,"cg."],[65493,1,""],[65494,1,""],[65493,1,""],[65493,2,""],[65493,0,"("],[65389,1,""],[65389,0,"id"],[65495,1,""],[65495,0,"id"],[65499,25,""],[65507,67,""],[65507,0,"If the next item in the queue"],[64955,349,""],[65231,0,".0"],[65234,1,""],[65234,0,"="],[65237,9,""],[65237,0,"id"],[65243,29,""],[65260,0,")"],[65255,0,"(_, "],[65268,14,""],[65268,0,"queue.pop() // Remove the item"],[65299,39,""],[65412,152,""],[65378,33,""],[65377,1,""],[65424,31,""],[65423,0,"\n    if (flag == DiffFlag.A) aOnly.push(id)"],[65424,0,"    if (flag == DiffFlag.A) aOnly.push(id)\n"],[65492,1,""],[65492,0,"B"],[65495,1,""],[65495,0,"b"],[65592,36,""],[65510,32,""],[65531,9,""],[65531,0,"cg.getParents(id)"],[65550,3,""],[65550,0,"queue.push("],[65562,1,""],[65562,0,"p"],[65570,0,")"],[64457,1150,""],[78000,0,"\n\n\n== OPtimi"],[78011,1,""],[78010,1,""],[78009,1,""],[78008,1,""],[78007,1,""],[78007,0,"ptimised Diff "],[78016,5,""],[78016,0,"diff function\n\n\n```typescript\ntype LocalId = number\nenum DiffFlag { A=0, B=1, Shared=2 }\n\nfunction diff(cg: CausalGraph, v1: LocalId[], v2: LocalId[]): DiffResult {\n  // Max heap. The highest local ID is removed first.\n  const queue = new PriorityQueue<(LocalId, DiffFlag)>()\n\n  // Number of items in the queue in both transitive histories (state Shared).\n  let numShared = 0\n\n  for (const id of v1) queue.push((id, DiffFlag.A))\n  for (const id of v2) queue.push((id, DiffFlag.B))\n\n  const aOnly = [], bOnly = []\n\n  // Loop until everything is shared.\n  while (queue.size() > numShared) {\n    let (id, flag) = queue.pop()\n\n    if (flag === DiffFlag.Shared) numShared--\n\n    const parents = cg.getParents(id)\n\n    // If the next item in the queue\n    while (!queue.isEmpty() && queue.peek().0 == id) {\n      const (_, flag2) = queue.pop() // Remove the item\n      if (flag2 === DiffFlag.Shared) numShared--;\n\n      if (flag2 !== flag) {\n        flag = DiffFlag.Shared\n      }\n    }\n\n    if (flag == DiffFlag.A) aOnly.push(id)\n    if (flag == DiffFlag.B) bOnly.push(id)\n\n    for (const p of cg.getParents(id)) queue.push((p, flag))\n  }\n\n  return {aOnly, bOnly}\n}\n\n```"],[78029,0," using"],[78030,5,""],[78030,0,"taking advantage of "],[78030,20,""],[78030,0,"using local IDs"],[78046,0,"\nThis is an optimised graph diff function which ciomp"],[78098,1,""],[78097,1,""],[78096,1,""],[78095,1,""],[78095,0,"omputes the difference between the transitive graphs d"],[78148,1,""],[78148,0,"named by "],[78093,0," takes ad"],[78094,8,""],[78093,1,""],[78087,0,". It"],[78091,6,""],[78155,0,"versions $V_1$ and $_"],[78175,1,""],[78175,0,"V_2$"],[78128,11,""],[78134,9,""],[78135,9,""],[78136,0,"ceil("],[78144,0,")"],[78152,0,"ceil("],[78160,0,")"],[78162,0,", and returns the set of I"],[78187,1,""],[78187,0,"event IDs that are only in $V_1$ and "],[78183,0,"s"],[78047,178,""],[78047,0,"This is an optimised graph diff function. It computes the difference between the graphs $ceil(V_1)$ and $ceil(V_2)$, and returns the sets of event IDs that are only in $V_1$ and"],[78360,12,""],[78224,0," only in $V_2$. This algiori"],[78245,7,""],[78245,0,"algoi"],[78249,1,""],[78249,0,"rithm "],[78239,1,""],[78239,0,"\n\n"],[78256,0,"takes advantage of local IDs."],[78284,1,""],[78284,0," to compute the set difference efficiently."],[78315,0,"much more "],[78336,1,""],[78336,0," than it could otherwise "],[78360,1,""],[78342,18,""],[78341,1,""],[78340,1,""],[78340,0,"n it could if the "],[78336,22,""],[78336,0,"."],[78315,0,"using "],[78315,6,""],[78315,0,"using "],[78321,22,""],[78321,0,"less CPU and "],[78315,19,""],[78315,0,"efficiently."],[79430,0,"\n    if (flag == DiffFlag.Shared) numShared += "],[79431,46,""],[79431,0,"    if (flag == DiffFlag.Shared) numShared += cg.getParents(id).length"],[79235,1,""],[79234,1,""],[79209,56,""],[79209,0,"      if (flag2 !== flag) flag = DiffFlag.Shared"],[79209,56,""],[79209,0,"      if (flag2 !== flag) flag = DiffFlag.Shared }"],[79257,2,""],[79207,1,""],[78922,1,""],[78922,0,"\n    "],[78923,4,""],[78971,37,""],[78970,1,""],[78969,1,""],[78922,1,""],[79320,5,""],[79320,0,"l"],[79068,5,""],[79068,0,"l"],[78785,5,""],[78785,0,"l"],[78737,5,""],[78737,0,"l"],[78685,5,""],[78685,0,"l"],[78522,5,""],[78522,0,"l"],[79301,0,"e"],[79053,0,"e"],[78774,0,"e"],[78730,0,"e"],[78682,0,"e"],[78523,0,"e"],[79307,0,"t"],[79058,0,"t"],[78778,0,"t"],[78733,0,"t"],[78684,0,"t"],[78524,0,"t"],[79319,2,""],[79319,0,"g"],[78417,2,""],[78417,0,"g"],[79319,0,"r"],[78418,0,"r"],[79321,0,"a"],[78419,0,"a"],[79323,0,"p"],[78420,0,"p"],[79325,0,"h"],[78421,0,"h"],[78424,11,""],[78424,0,"EventGraph"],[78381,1,""],[78381,0,"V1Only"],[78391,1,""],[78391,0,"V2Only"],[78401,6,""],[78401,0,"C"],[78401,1,""],[78401,0,"C"],[78401,1,""],[78401,0,"Shared"],[79411,6,""],[79411,0,"C"],[79400,6,""],[79400,0,"C"],[79212,6,""],[79212,0,"C"],[79160,6,""],[79160,0,"C"],[79149,6,""],[79149,0,"C"],[78964,6,""],[78964,0,"C"],[78953,6,""],[78953,0,"C"],[78884,6,""],[78884,0,"C"],[78676,6,""],[78676,0,"C"],[78658,6,""],[78658,0,"C"],[78401,6,""],[78401,0,"C"],[79362,0,"o"],[79356,0,"o"],[79173,0,"o"],[79126,0,"o"],[79120,0,"o"],[78940,0,"o"],[78934,0,"o"],[78870,0,"o"],[78667,0,"o"],[78654,0,"o"],[78402,0,"o"],[79373,0,"m"],[79366,0,"m"],[79182,0,"m"],[79134,0,"m"],[79127,0,"m"],[78946,0,"m"],[78939,0,"m"],[78874,0,"m"],[78670,0,"m"],[78656,0,"m"],[78403,0,"m"],[79384,0,"m"],[79376,0,"m"],[79191,0,"m"],[79142,0,"m"],[79134,0,"m"],[78952,0,"m"],[78944,0,"m"],[78878,0,"m"],[78673,0,"m"],[78658,0,"m"],[78404,0,"m"],[79395,0,"o"],[79386,0,"o"],[79200,0,"o"],[79150,0,"o"],[79141,0,"o"],[78958,0,"o"],[78949,0,"o"],[78882,0,"o"],[78676,0,"o"],[78660,0,"o"],[78405,0,"o"],[79406,0,"n"],[79396,0,"n"],[79209,0,"n"],[79158,0,"n"],[79148,0,"n"],[78964,0,"n"],[78954,0,"n"],[78886,0,"n"],[78679,0,"n"],[78662,0,"n"],[78406,0,"n"],[79411,6,""],[79411,0,"Shared"],[79400,6,""],[79400,0,"Shared"],[79212,6,""],[79212,0,"Shared"],[79160,6,""],[79160,0,"Shared"],[79149,6,""],[79149,0,"Shared"],[78964,6,""],[78964,0,"Shared"],[78953,6,""],[78953,0,"Shared"],[78884,6,""],[78884,0,"Shared"],[78676,6,""],[78676,0,"Shared"],[78658,6,""],[78658,0,"Shared"],[78401,6,""],[78401,0,"Shared"],[78734,1,""],[78734,0,"V1Only"],[78789,1,""],[78789,0,"V2Only"],[79261,1,""],[79261,0,"V1Only"],[79309,1,""],[79309,0,"V2Only"],[79481,5,""],[79481,0,"v"],[79269,5,""],[79269,0,"v"],[78805,5,""],[78805,0,"v"],[79474,0,"1"],[79266,0,"1"],[78806,0,"1"],[79477,0,"O"],[79268,0,"O"],[78807,0,"O"],[79480,0,"n"],[79270,0,"n"],[78808,0,"n"],[79483,0,"l"],[79272,0,"l"],[78809,0,"l"],[79486,0,"y"],[79274,0,"y"],[78810,0,"y"],[79491,5,""],[79491,0,"v"],[79319,5,""],[79319,0,"v"],[78818,5,""],[78818,0,"v"],[79484,0,"2"],[79316,0,"2"],[78819,0,"2"],[79487,0,"O"],[79318,0,"O"],[78820,0,"O"],[79490,0,"n"],[79320,0,"n"],[78821,0,"n"],[79493,0,"l"],[79322,0,"l"],[78822,0,"l"],[79496,0,"y"],[79324,0,"y"],[78823,0,"y"],[78364,0," // Local IDs are just bnu"],[78389,1,""],[78388,1,""],[78387,1,""],[78387,0,"integers.\n"],[78396,1,""],[78419,2,""],[78427,2,""],[78435,2,""],[79441,8,""],[79441,0,"F"],[79329,8,""],[79329,0,"F"],[79280,8,""],[79280,0,"F"],[79241,8,""],[79241,0,"F"],[79178,8,""],[79178,0,"F"],[78982,8,""],[78982,0,"F"],[78806,8,""],[78806,0,"F"],[78751,8,""],[78751,0,"F"],[78600,8,""],[78600,0,"F"],[78402,8,""],[78402,0,"F"],[79379,0,"l"],[79274,0,"l"],[79232,0,"l"],[79200,0,"l"],[79144,0,"l"],[78955,0,"l"],[78786,0,"l"],[78738,0,"l"],[78594,0,"l"],[78403,0,"l"],[79389,0,"a"],[79283,0,"a"],[79240,0,"a"],[79207,0,"a"],[79150,0,"a"],[78960,0,"a"],[78790,0,"a"],[78741,0,"a"],[78596,0,"a"],[78404,0,"a"],[79399,0,"g"],[79292,0,"g"],[79248,0,"g"],[79214,0,"g"],[79156,0,"g"],[78965,0,"g"],[78794,0,"g"],[78744,0,"g"],[78598,0,"g"],[78405,0,"g"],[78327,0,"\n\nThjio"],[78333,1,""],[78332,1,""],[78331,1,""],[78331,0,"is code does not take advantafg"],[78361,1,""],[78360,1,""],[78360,0,"ge of run-length encoding. In our implementation w"],[78409,1,""],[78408,1,""],[78408,0,", we also run-length encode all items in the gra"],[78455,1,""],[78454,1,""],[78453,1,""],[78453,0,"cs"],[78454,1,""],[78453,1,""],[78453,0,"event graph"],[78329,4,""],[78329,0,"For simplicity, the algorithm given here"],[78369,5,""],[78495,0,". This optimisation yields a "],[78523,1,""],[78522,1,""],[78522,0,"no"],[78523,1,""],[78522,1,""],[78522,0,"another large performance gain at the cost of some implementation complexity. See XXXXX"],[78608,1,""],[78608,0," github.j"],[78616,1,""],[78616,0,"com."],[78619,1,""],[78619,0,"/hjose"],[78624,1,""],[78623,1,""],[78622,1,""],[78621,1,""],[78620,1,""],[78620,0,"josephg/causa-"],[78633,1,""],[78633,0,"l-graphs for an implementation"],[78649,14,""],[78648,1,""],[78648,0," implementation"],[78649,14,""],[78648,1,""],[78647,1,""],[78646,1,""],[78645,1,""],[78644,1,""],[78643,1,""],[78642,1,""],[78642,0,". TODO"],[78045,0," <diff>"],[62765,9,""],[62765,0,"where"],[62784,0,"we know "],[62976,1,""],[62976,0,"i"],[62982,2,""],[62982,0," i"],[62992,1,""],[62992,0,"i"],[62999,1,""],[62999,0,"i"],[63216,16,""],[63216,0,"most"],[63220,12,""],[63220,0," event graph"],[63239,9,""],[63238,1,""],[63237,1,""],[63237,0,"ies"],[63242,1,""],[63241,1,""],[63241,0," And "],[63246,21,""],[64353,9,""],[64353,0,"expanded from "],[64366,1,""],[64366,0," "],[64353,0,"iterati"],[64359,1,""],[64359,0,"ively "],[64379,19,""],[64379,0,"the "],[64424,0," the difference is found. See @diff"],[64455,4,""],[64455,0,"diff for an exampl"],[64460,13,""],[64459,1,""],[64450,4,""],[64450,0,"The actual algorithm to do this is lists"],[64489,1,""],[64489,0,"ed in "],[64500,0," below."],[64500,6,""],[64461,0,"diffing "],[64478,12,""],[64478,0," "],[64450,10,""],[64450,0,"A"],[64469,0," which takes advnat"],[64487,1,""],[64486,1,""],[64486,0,"a"],[64486,1,""],[64486,0,"an"],[64487,1,""],[64486,1,""],[64485,1,""],[64485,0,"antage of this"],[64519,0,"\n\nMost "],[64521,5,""],[64521,0,"Most"],[64520,5,""],[64519,1,""],[64519,0,"\n\nWe have developed a quite "],[64541,6,""],[64541,0,"suite of utility tool"],[64558,4,""],[64558,0,"functions which tak"],[64574,3,""],[64574,0,"are optimised like this. SEE causal-graph LIBRARY TODO!"],[61164,0,"\n"],[61209,0,"Seque"],[61213,1,""],[61213,0,"ential s"],[61220,1,""],[61220,0,"user events "],[61209,23,""],[61209,0,"Sequential user events"],[65833,0,"// "],[65659,0,"// "],[65554,0,"// "],[65274,0,"// "],[65225,0,"// "],[65194,0,"// "],[65142,0,"// "],[64794,0,"// "],[64793,1293,""],[64794,33,""],[64829,0,"\n\nThe <op"],[64836,2,""],[64836,0,"opt-rle>"],[64843,1,""],[64835,1,""],[64835,0,"@"],[50923,0," <opt-traversal>"],[64856,3,""],[64856,0,"trav"],[64852,8,""],[64852,0,"opt-traversal"],[64851,0,"optimised partial graph"],[64873,1,""],[64872,1,""],[64871,1,""],[64870,1,""],[64869,1,""],[64869,0,"traversal algorithm given in "],[64851,1,""],[64851,0,"O"],[64861,1,""],[64861,0,"P"],[64869,1,""],[64869,0,"T"],[64912,0," still does not fully take advantage of "],[64913,0,"is a vast improvement over the naive traversal algorithm , "],[64971,1,""],[64970,1,""],[64969,1,""],[64969,0,", but it "],[65017,0,"all "],[64975,46,""],[64975,0,"there are many characteristics of the cas"],[65015,1,""],[65015,0,"usal graph that can be taken advantage of to improve perof"],[65072,1,""],[65071,1,""],[65071,0,"formance.\n\nFirst, "],[65082,7,""],[65082,0,"In the same way that some events can be "],[65082,40,""],[65082,0,"In the same way that some events can be"],[51387,1,""],[51387,0,"\n\n\n"],[51387,0," the state tr"],[51399,1,""],[51398,1,""],[51398,0,"tree only needs to store items"],[51387,0,", when processing event $i4"],[51413,1,""],[51413,0,"$,"],[51451,5,""],[51451,0,"other events which are"],[51445,6,""],[51445,0,"represent "],[51445,0,"accurately "],[51488,0," concurrent with $i$."],[51387,122,""],[51387,0," "],[51387,1,""],[51387,0,", during "],[51389,7,""],[51389,0,"while processing"],[51395,10,""],[51395,0,"tr"],[51389,8,""],[51388,1,""],[51388,0," when visiting each event, the state tree only needs to "],[51389,24,""],[51388,2,""],[51418,0,"represent "],[51418,0,"accurately "],[51418,11,""],[51428,0,"the set of items concurrent with "],[51418,0,"accurately "],[51472,0,"the "],[51472,4,""],[51439,11,""],[51444,0," which are"],[51471,0,"the item being visited."],[51343,14,""],[51343,0,"T"],[51374,1,""],[51342,0,"\n"],[51342,0,"\n"],[51343,2,""],[51342,0,"\n"],[51342,0,"\nWhen processing event"],[51348,16,""],[51348,0,"visiting event $i$ in the traversal, the state tree only needs to accurately represent "],[51414,21,""],[51414,0,"model events which are concurrent with $i$. This means:"],[51468,1,""],[51458,10,""],[51343,115,""],[51343,0,"When visiting event $i$ in the traversal, the state tree only needs to model events which are concurrent with $i$."],[51457,142,""],[51457,0,"C"],[51458,1,""],[51504,25,""],[51504,0,", wh"],[51507,1,""],[51506,1,""],[51505,1,""],[51505,0," where nothing before  "],[51527,1,""],[51527,0,"a critical version "],[51413,0," accurately"],[51414,11,""],[51457,0,"\n\n"],[51342,0,"\n"],[51342,0,"\nThis optimisation relies on this wild property "],[51376,14,""],[51376,0,"surprising proer"],[51391,1,""],[51390,1,""],[51390,0,"perty of eg-walker's correctness:\n\n#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim Q:*\n\n]"],[51477,1,""],[51476,1,""],[51597,1,""],[51483,0,"\n"],[51598,0,"\n"],[51483,1,""],[51597,0,"\n"],[51482,1,""],[51596,0,"\n]"],[51480,2,""],[51480,0,"  "],[51599,1,""],[51618,0,"are a cora"],[51627,1,""],[51626,1,""],[51626,0,"arse "],[51600,31,""],[51600,0,"Critical versions are a coarse way to take advantage of thise p"],[51662,1,""],[51661,1,""],[51660,1,""],[51660,0," property. They "],[51676,9,""],[51676,0,"form a"],[51744,0,"can impact the o"],[51748,12,""],[51748,0,"aff"],[51750,1,""],[51749,1,""],[51748,1,""],[51748,0,"change the "],[51744,15,""],[51744,0,"can impact anything after "],[51747,23,""],[51747,0," leak "],[51748,5,""],[51748,0,"pass information to "],[51710,7,""],[51710,0,"events"],[51743,24,""],[51743,0,"can't p"],[51749,1,""],[51749,0,"pass inf"],[51749,8,""],[51749,0,"pac"],[51751,1,""],[51750,1,""],[51749,1,""],[51749,0,"impact the oder of events "],[51761,0,"r"],[51769,0,"any "],[51780,0,"after a critical version"],[51704,100,""],[51703,1,""],[51702,1,""],[51702,0," for information"],[51707,0,"ordering "],[51928,0,"\n\n"],[51929,1,""],[51928,1,""],[52124,0,", discarding "],[52124,13,""],[52124,0," "],[52124,1,""],[52124,0," to popul"],[52125,8,""],[52124,1,""],[52124,0,", dos"],[52128,1,""],[52127,1,""],[52127,0,"iscarding transformed operations along the way"],[52183,0," traversing from"],[52280,6,""],[52280,0,"are"],[51671,0,"Intuitively, "],[51684,1,""],[51684,0,"t"],[51741,1,""],[51741,0,"\n\n\n"],[51742,0,"\nMore specifically, the al"],[51743,25,""],[51743,0,"The algorithm needs to "],[51757,9,""],[51757,0,"is adding "],[51757,10,""],[51757,0,"needs to transform events $ci"],[51785,1,""],[51785,0,"eil(V_m) - ceil(V_0)$"],[51783,0,"in th"],[51783,5,""],[51776,0,"the added "],[51816,0," by the "],[51817,7,""],[51766,10,""],[51766,0,"merge "],[51772,9,""],[51772,0,"the"],[51782,0," in the set"],[51818,0," "],[51818,1,""],[51817,1,""],[51817,0," into the document. None of these versions "],[51851,9,""],[51851,0,"events can "],[51858,4,""],[51858,0,"are c"],[51861,2,""],[51858,3,""],[51858,0,"can be "],[51858,7,""],[51837,21,""],[51837,0,"These events will all "],[51743,116,""],[51743,0,"The algorithm needs to merge the events in the set $ceil(V_m) - ceil(V_0)$ into the document. These events will all _h"],[51860,1,""],[51859,1,""],[51837,0,"The greatest common version of $V_0$ and $_"],[51879,1,""],[51879,0,"V_m$ is "],[51886,1,""],[51886,0,", by construction, "],[51888,3,""],[51884,4,""],[51883,1,""],[51883,0,", by "],[51900,0,", us"],[51903,1,""],[51902,1,""],[51902,0,"is guaranteed to have _happened-before_ all versios"],[51952,1,""],[51952,0,"ns in this set."],[51967,24,""],[51967,0," Ie, $C = V_0 sect.sq.double V_m$"],[51973,4,""],[51995,0," -> (ceil(V_m) - ceil(V_0))"],[52023,0,".\n\n> Example graph showing this"],[52028,13,""],[52028,0,"EXAMPLE GRAPH"],[52041,13,""],[52041,0," SHOWING THIS"],[51741,315,""],[51741,0," "],[50954,15,""],[50954,0,"the "],[50975,0," function cab "],[50988,1,""],[50987,1,""],[50987,0,"n be greatly o"],[50992,9,""],[50992,0,"massivae"],[50999,1,""],[50998,1,""],[50998,0,"ely optimised by taking advantage of a \n"],[50941,96,""],[50941,0,"Fortunately, the partial transform function can be massively optimised by taking advantage of a"],[51037,0,"\n\n"],[51036,0," surprising property of eg-walker:"],[51512,174,""],[51071,0,"#block(inset: 4mm, stroke: 0.3pt + black)[\n  *Claim:*\n\n  When visiting event $i$ in the traversal, the state tree only needs to model events which are concurrent with $i$.\n]\n"],[51071,0,"\n"],[51246,0,"\nThis claim will be "],[51258,8,""],[51258,0,"is justified below."],[51279,0,"The simplest way to take advantage of this property is that"],[51338,1,""],[51694,154,""],[51707,0,"critical versions "],[51725,5,""],[51692,0," in "],[51695,1,""],[51694,1,""],[51693,1,""],[51692,1,""],[51691,1,""],[51691,0," in they "],[51695,5,""],[51695,0,"$$"],[51696,0,"ceil(V_m) - ceil(V_0)"],[51718,0,"."],[51636,59,""],[51632,4,""],[51632,0,"transforming events "],[51675,0," onto $V_0$"],[51631,0," the task of"],[49097,1,""],[49097,0," in order to produce "],[48821,297,""],[48821,0,"We will now consider the problem of replaying part of an event log. Consider a peer with a local document state $d$ at version $V_0$, such that $d = r(ceil(V_0))$. The peer wishes to merge all events at version $V_m$ - perhaps from another peer - into the local document state in order to produce r(ceil(V_0 union V_m))$"],[49118,0,"$"],[49142,0,"."],[49098,0,"us"],[49099,1,""],[49098,1,""],[49098,0,"such that we can"],[49114,11,""],[49148,0," In other words, "],[49148,17,""],[49281,0,"// "],[51296,0," (SAY THIS IN"],[51308,1,""],[51307,1,""],[51307,0,"MORE FORMALLY)"],[13124,0," sgiwb"],[13129,1,""],[13128,1,""],[13127,1,""],[13126,1,""],[13125,1,""],[13125,0,"shown as dottel"],[13139,1,""],[13139,0,"d horizontal lines"],[51330,24,""],[51330,0,"\n  "],[51213,117,""],[51213,0,"  When visiting event $i$ in the traversal, the state tree only needs to model events which are concurrent with $i$."],[51330,2,""],[51329,1,""],[51328,1,""],[51328,0,":\n  \n  "],[51330,2,""],[51333,0,"- Concurrent inserts need"],[51346,12,""],[51345,1,""],[51345,0,"ly inserted nodes require (i"],[51372,1,""],[51371,1,""],[51371,0,"_id_, _be"],[51379,1,""],[51378,1,""],[51378,0,"ori"],[51377,4,""],[51377,0,"_originLeft_ and _ori"],[51394,4,""],[51394,0,"_originRight_ to be set correctly."],[51414,14,""],[51414,0,"accuralte "],[51423,1,""],[51422,1,""],[51421,1,""],[51420,1,""],[51420,0,"tely set\n  - Concurrently deleted"],[51446,7,""],[51445,1,""],[51444,1,""],[51443,1,""],[51345,2,""],[51353,1,""],[51352,1,""],[51352,0," events require the state tree to contain a "],[51395,1,""],[51400,1,""],[51334,0," The state rtee mu"],[51345,7,""],[51345,0,"tree must contain a node"],[51369,74,""],[51334,0," If $i$ is an insert event,"],[51361,2,""],[51361,0," t"],[51389,0," c"],[51390,1,""],[51390,0,"all other insert events"],[51400,0,"visited insert "],[51415,7,""],[51399,0," concurrently"],[51411,1,""],[51410,1,""],[51410,0,", "],[51411,1,""],[51411,0," already"],[51428,7,""],[51434,7,""],[51434,0,". They m"],[51441,1,""],[51440,1,""],[51439,1,""],[51438,1,""],[51437,1,""],[51436,1,""],[51435,1,""],[51428,0,"insert "],[51442,0," These "],[51389,0," a node for "],[51400,1,""],[51460,0,"insert events need"],[51522,14,""],[51522,0,"set correctly."],[51541,10,""],[51540,1,""],[51539,1,""],[51537,2,""],[51536,1,""],[51330,0,"\n  - If $i"],[51339,1,""],[51338,1,""],[51337,1,""],[51336,1,""],[51335,1,""],[51335,0,"To map p"],[51342,1,""],[51342,0,"the position of event $i$"],[51338,0,"correctly "],[51377,0,", the state tree must contain a node representing each other node that has been concurrently deleted. The"],[51481,1,""],[51480,1,""],[51479,1,""],[51478,1,""],[51292,0,"visited "],[51336,1,""],[51336,0,"."],[51306,0," $k"],[51308,1,""],[51308,0,"j_1, j_2, ..$"],[51402,99,""],[51402,0,"for every event"],[51412,0,"conr"],[51415,1,""],[51414,1,""],[51414,0,"ncurrent "],[51428,0," $i"],[51430,1,""],[51430,0,"j_x$ "],[51423,0,"delete "],[51441,1,""],[51441,0,", the state tree needs to represent"],[51467,9,""],[51466,1,""],[51465,1,""],[51464,1,""],[51464,0,"a node representing $K"],[51485,1,""],[51485,0,"j_x$'s target. This target node will have $$"],[51528,1,""],[51527,1,""],[51527,0,"$"],[51527,1,""],[51527,0,"$"],[51527,1,""],[51527,0,"#sp"],[51527,1,""],[51527,0,"#"],[51527,1,""],[51527,0,"$"],[51530,0," != $"],[51534,1,""],[51534,0,"e"],[51534,1,""],[51534,0,"se$."],[51517,4,""],[51517,0,"may"],[51358,45,""],[51358,0,"F"],[51498,0,"For every concure"],[51514,1,""],[51514,0,"rent insert event $j_x$, "],[51353,0,"\n\n"],[51354,0,"  This information is required for 2 purposes:\n  \n  "],[51401,2,""],[51404,0,"- Any con"],[51412,1,""],[51412,0,"ncurrentl"],[51420,1,""],[51420,0,", visited event $j_x$ may represent a node with "],[51467,1,""],[51466,1,""],[51465,1,""],[51464,1,""],[51463,1,""],[51463,0,"where $"],[51469,1,""],[51469,0,"$sp != se$. Thius "],[51486,1,""],[51485,1,""],[51484,1,""],[51484,0,"s will happen if "],[51481,20,""],[51480,1,""],[51480,0," In this case, the position of"],[51499,0,"transformed "],[51521,1,""],[51521,0,"d"],[51521,1,""],[51521,0,"f $i$ may change.\n  - To correctly pro"],[51480,0," For insert events, the node will have id"],[51520,1,""],[51519,1,""],[51519,0,"ID $j_x$. For delete events"],[51485,0,"concurrent "],[51557,0,", the node i"],[51568,1,""],[51568,0,"represents the item "],[51583,0,"deleted "],[51595,0,"."],[51596,1,""],[51596,0," "],[51596,1,""],[51596,0,"T"],[51596,1,""],[51596,0," These nodes need ot be "],[51619,1,""],[51618,1,""],[51617,1,""],[51616,1,""],[51615,1,""],[51614,1,""],[51614,0,"to be represented because they will"],[51649,18,""],[51649,0," modify the resulting"],[51698,12,""],[51698,0,"."],[51670,12,""],[51670,0," transformed"],[51717,3,""],[51717,0,"order in"],[51724,1,""],[51723,1,""],[51723,0,"concurrently inserted items at ath"],[51756,1,""],[51755,1,""],[51754,1,""],[51754,0,"the same location in the final document, any "],[51704,18,""],[51704,0,"Inserts must be correctly "],[51704,0,"Concurrent "],[51714,1,""],[51714,0,"ly "],[51717,1,""],[51717,0,"i"],[51723,1,""],[51723,0,"ed items"],[51749,0," ordered in the filan "],[51770,1,""],[51769,1,""],[51768,1,""],[51767,1,""],[51767,0,"nal document."],[51780,78,""],[51780,0," If #$"],[51785,1,""],[51784,1,""],[51784,0,"$i$ represents an insert event"],[51787,0," an"],[51789,1,""],[51788,1,""],[51787,1,""],[51784,0,"concurrent events "],[51805,0," and $j_x$ both"],[51830,4,""],[51830,0," concurrent"],[51854,0,"s, "],[51856,1,""],[51855,1,""],[51855,0," targetting the same final location in the document, $"],[51908,1,""],[51908,0,"the state tree needs a node reprens"],[51942,1,""],[51941,1,""],[51941,0,"senting $j_x$ with "],[51700,260,""],[51700,0,"  - Concurrently inserted items must be correctly ordered in the final document. If concurrent events $i$ and $j_x$ both represent concurrent insert events targetting the same final location in the document, the state tree needs a node representing $j_x$ with _id_, _originLeft_ and _originRight_ to "],[51999,1,""],[51998,1,""],[51997,1,""],[51996,1,""],[51959,0," correctly set"],[52010,0," fields. This node will be used during the _effect_ function"],[52049,3,""],[52049,0,"FugueMax's"],[51816,5,""],[51902,0," when processing $I"],[51920,1,""],[51920,0,"i$,"],[52093,0," to order $i$ and $j_x$."],[52118,387,""],[52117,1,""],[51332,0,"also "],[51332,5,""],[52120,0,"\nThis property is remarkable. "],[52121,29,""],[52121,0,"This property is remarkable."],[51256,0," in order to correctly transform events,"],[51257,39,""],[51256,1,""],[51215,0,"in order to correctly transform events, "],[51215,1,""],[51215,0,"I"],[51255,42,""],[51269,0," does not need to store the entire "],[51255,49,""],[51255,0,"only a small amount of information in the state tree is required."],[51255,38,""],[51269,0," only needs"],[51280,12,""],[51280,0," a small amount of information"],[51311,0," "],[51311,1,""],[51310,0," about historical"],[51317,10,""],[51317,0,"earli"],[51317,5,""],[51317,0,"other events"],[51331,0,"Specifically, while visiting event $i$, the tree "],[51399,0," concurrentl;y"],[51412,1,""],[51411,1,""],[51411,0,"y"],[51442,31,""],[51442,0,":"],[51442,1,""],[51442,0,"."],[51399,14,""],[51399,0," "],[51414,0," w"],[51415,1,""],[51414,1,""],[51429,0," which are concurrent with $i4"],[51458,1,""],[51458,0,"$"],[51554,9,""],[51554,0,"descroib"],[51561,1,""],[51560,1,""],[51559,1,""],[51559,0,"ibe"],[51587,1,""],[51587,0,"\n    - "],[51652,1,""],[51652,0,"\n    - "],[51702,8,""],[51706,0," which was deleted by the "],[51702,30,""],[51702,0,"target of the dee"],[51718,1,""],[51718,0,"lete event"],[51729,103,""],[51587,0,"  These nodes need to be represented because they will modify the resulting transformed position of $i$."],[51588,1,""],[51594,5,""],[51588,6,""],[51588,0,"Any node where $sp != se$"],[51597,6,""],[51597,0,"with "],[51617,0,"s"],[51636,0," in the state tree"],[51613,5,""],[51613,0,"must"],[51617,3,""],[51658,0," these nodes"],[51670,10,""],[51681,10,""],[51706,0,"event "],[51670,0," will"],[51721,0," The only nodes with #"],[51742,1,""],[51742,0,"$sp != #$"],[51750,1,""],[51749,1,""],[51749,0,"se$ are nodes where"],[51767,1,""],[51763,4,""],[51763,0,"representing:\n    - A concurrently inserted item $j_x$"],[51811,0,", with ID"],[51826,0,"\n    - The target of a concurrent delete event "],[51872,1,""],[51872,0," "],[51872,143,""],[51872,0,"\n    "],[51873,4,""],[51878,0,"The algorithm must order "],[51903,1,""],[51903,0,"c"],[51930,48,""],[51930,0," correctly according to the logic in G"],[51967,1,""],[51967,0,"FugueMax"],[51940,17,""],[51940,0," using"],[51953,2,""],[51953,0,"of"],[51980,0,"insert "],[52007,35,""],[52017,1,""],[52016,1,""],[52015,1,""],[52014,1,""],[52250,0,"decide on the resulting "],[52280,0,"of "],[51826,0,". In this case, $"],[51842,1,""],[51842,0,"#sp"],[51828,13,""],[51828,0,"In this case, when visiting $i$,"],[51861,0,"$"],[51862,1,""],[51864,0," = `asdf`$"],[51867,0,"mono"],[51867,4,""],[51867,0,"mono()"],[51872,0,"\"asdf"],[51878,6,""],[51877,1,""],[51877,0,"\")"],[51873,4,""],[51873,0,"NotInsertedYet"],[51890,0,"."],[51937,0,". In this case, "],[51892,61,""],[51892,0,"    - The target of a concurrent delete event. In this case, when visiting $i$, $sp = mono(\"NotInsertedYet\")$."],[51861,0,"$$"],[51862,0," "],[51862,2,""],[51861,1,""],[51890,0," and $se = mono(\"Ins\")$"],[52007,14,""],[52007,0,"Ins"],[51995,0,"it mak"],[52000,1,""],[52000,0,"y be the case that "],[52037,0," and $se = mono(\"Del(x)\")$ for some x."],[52074,1,""],[52058,1,""],[52058,0,"z"],[52073,1,""],[52073,0,"z$"],[52073,0,"$"],[52074,1,""],[52074,0,"n"],[52058,1,""],[52058,0,"n"],[51530,0,"already "],[51460,0," $$"],[51462,0,"forall j in G: j in ve and j || i"],[51496,0,"."],[51460,0," Formally, the state tree needs to contain all events $j4"],[51516,1,""],[51516,0,"$ where"],[51525,7,""],[51516,0," in G"],[51530,8,""],[51495,7,""],[51495,0,"m,odel"],[51500,1,""],[51499,1,""],[51498,1,""],[51497,1,""],[51496,1,""],[51496,0,"odel"],[51460,1,""],[51460,0,"\n  \n  "],[51461,2,""],[51495,8,""],[51495,0,"to represent"],[51473,0," when visiting event $i$,"],[51496,0," in G"],[51703,5,""],[51703,0,"wth"],[51705,1,""],[51704,1,""],[51704,0,"ith"],[51819,0,"resulting "],[52294,9,""],[52466,14,""],[52510,0," set correctly"],[52526,4,""],[52526,0,"th"],[52527,1,""],[52526,1,""],[52525,1,""],[52525,0," The "],[52529,1,""],[52534,0," representing $j_x$"],[52602,0," when processing event $i$"],[51274,0,")"],[51270,0,"("],[51271,4,""],[51271,0,"only"],[51275,1,""],[51270,1,""],[51274,0,"*"],[51270,0,"*"],[51283,48,""],[51283,0,"to represent information about concurrent events"],[51332,0,"\n  \n  "],[51333,2,""],[51336,1,""],[51286,9,""],[51286,0,"contain"],[51252,1,""],[51252,0," $i$"],[51252,4,""],[51252,0,"s"],[51334,0,"// "],[51524,0," only"],[51548,4,""],[51539,9,""],[51539,0,"stoire"],[51544,1,""],[51543,1,""],[51542,1,""],[51542,0,"re information about"],[51576,1,""],[51576,0,"V"],[51576,1,""],[51576,0,"ve"],[51587,13,""],[51587,0,"j in ve and j"],[51587,12,""],[52686,1,""],[52561,1,""],[52469,1,""],[52353,1,""],[51976,1,""],[51690,1,""],[52680,1,""],[52556,1,""],[52465,1,""],[52350,1,""],[51974,1,""],[51689,1,""],[51644,0,"\n"],[51644,0,"\n  T"],[51647,1,""],[51647,0,"- The transformed position of event $i$ will only be "],[51687,13,""],[51687,0,"only changes a "],[51701,1,""],[51701,0,"s a result of concurrent "],[51712,14,""],[51700,12,""],[51700,0,"due to nodes in the "],[51700,6,""],[51700,0,"r"],[51700,1,""],[51700,0,"w"],[51700,1,""],[51700,0,"as a result of"],[51728,0,"event g"],[51734,1,""],[51734,0,"tree"],[51734,4,""],[51733,1,""],[51728,5,""],[51728,0,"state tree containing "],[51739,11,""],[51739,0,"with "],[51645,99,""],[51645,0,"  - The transformed position of event $i$ only changes as a result of nodes in the state tree with"],[51739,4,""],[51739,0,"where $sp != se$."],[51739,6,""],[51739,0,"with "],[51247,0,"a visited "],[51262,1,""],[51295,7,""],[51295,0,"store"],[51319,0,"other "],[51324,1,""],[51324,0,", already proc"],[51334,4,""],[51334,0,"visited "],[51342,11,""],[51348,0," which are concurrent"],[51603,0,"other visited "],[51673,8,""],[51673,0,"needed"],[51699,1,""],[51699,0,"1."],[51792,5,""],[51792,0,"where "],[51809,0," Te"],[51811,1,""],[51811,0,"he only nodes with $sp != se$ were "],[51841,5,""],[51841,0,"are nodes which ahve"],[51860,1,""],[51859,1,""],[51858,1,""],[51857,1,""],[51856,1,""],[51856,0," have "],[51851,11,""],[51851,0,"representing:"],[51865,0,"    - A concurrently inserted item, with ID $j$. In this case, when visiting $i$, $sp = mono(\"NotInsertedYet\")$ and $se = mono(\"Ins\")$.\n    - The target of a concurrent delete event. In this case, when visiting $i$, it may be the case that $sp = mono(\"Ins\")$ and $se = mono(\"Del(n)\")$ for some $n$.\n"],[51863,0," either"],[51935,5,""],[52001,0," or $se = mono(\"Ins\")$"],[52017,3,""],[52017,0,"Del"],[51987,1,""],[51987,0,"in"],[51990,0,"{"],[52002,10,""],[52002,0,","],[52015,0,"}"],[52015,0," "],[51991,0," "],[52184,583,""],[52186,1,""],[52186,0,"2."],[51694,0,", representing 2 different kinds of information"],[51649,0," The stored information about ocncur"],[51679,6,""],[51679,0,"concurrent event $j$ will either"],[51650,61,""],[51649,1,""],[51649,0," The tree needs to "],[51653,0," state"],[51674,0,"store information about nodeas"],[51703,1,""],[51702,1,""],[51702,0,"s"],[51649,54,""],[51708,0," the"],[51745,0," stored by the state tree"],[51694,76,""],[51653,0,"There are 2 kinds of information stored about $j$ "],[51702,1,""],[51702,0,": the resulting $se$ o"],[51723,1,""],[51722,1,""],[51721,1,""],[51721,0,"$ o"],[51723,1,""],[51722,1,""],[51722,0," "],[51708,10,""],[51708,0,"state field "],[51708,0,"resulting "],[51723,6,""],[51728,0," of the node modified by $j4"],[51755,1,""],[51755,0,"$, and the "],[51765,1,""],[51764,1,""],[51763,1,""],[51762,1,""],[51761,1,""],[51761,1,""],[51761,0,"\n  \n  "],[51762,2,""],[51761,0," the "],[51651,115,""],[51651,0,"  There are 2 kinds of information stored about $j$: the resulting state $se$ of the node modified by $j$, and the"],[51764,1,""],[51763,1,""],[51762,1,""],[51762,0,"if $j$ represents a conc"],[51781,5,""],[51781,0,"n insert, _id_, _originLeft_ and _originRight_"],[51791,0,"the "],[51831,0," fields in node $j$."],[51686,0,"tg"],[51687,1,""],[51686,1,""],[51686,0,"the state tree "],[51706,1,""],[51705,1,""],[51705,0,"s"],[51705,1,""],[51705,0,"es"],[51714,0,"event "],[52437,13,""],[52608,1,""],[52608,0,"to visit the"],[52643,4,""],[52643,0,"to look at the"],[52702,3,""],[52701,1,""],[52701,0,", o"],[52703,1,""],[52703,0,"in order to decide how these itemes"],[52737,1,""],[52736,1,""],[52736,0,"s should be sorted"],[52754,10,""],[52587,215,""],[52615,0," will in"],[52616,7,""],[52616,0,"may inspect the state tree needs to visit the node representing $j$ to look at the _id_, _originLeft_ and _originRight_ fields, in order to decide how these items should be sorted. The node representing $j$ will be used during "],[52628,70,""],[52620,8,""],[52620,0,"uns"],[52622,1,""],[52621,1,""],[52621,0,"se iunfor"],[52629,1,""],[52628,1,""],[52627,1,""],[52626,1,""],[52625,1,""],[52625,0,"nformation in the"],[52620,22,""],[52620,0,"coimpar"],[52626,1,""],[52625,1,""],[52624,1,""],[52623,1,""],[52622,1,""],[52622,0,"mpr"],[52624,1,""],[52624,0,"are the"],[52675,0," in $j$"],[52679,0,"node "],[52687,10,""],[52702,11,""],[52701,1,""],[52700,1,""],[52699,1,""],[52698,1,""],[52698,0,"the relative order of $i$ and $j$"],[52731,17,""],[52720,0,"items "],[52738,122,""],[52770,0," And it allows a great deal of clever optimisations to "],[52785,0,"eg-walker "],[52795,15,""],[52795,0,"to make"],[52824,3,""],[52824,0,"inor "],[52828,1,""],[52827,1,""],[52826,1,""],[52826,0," por"],[52829,1,""],[52828,1,""],[52827,1,""],[52827,0,"order to "],[52803,0,"several "],[52832,12,""],[52832,0,"which in aggregate "],[52838,13,""],[52838,0,"make eg-wa"],[52838,10,""],[52838,0,"result in better avera"],[52855,5,""],[52855,0,"performanc ein mo"],[52865,1,""],[52866,0," "],[52872,0,"st cases compared to traditional CRDT style implementations.\n\nNote that in"],[52934,12,""],[52933,1,""],[52934,32,""],[14039,0,"// "],[14023,0,"// "],[13962,0,"// "],[13889,0,"// "],[13814,0,"// "],[13620,0,"// "],[13578,0,"// "],[13432,0,"// "],[13212,0,"// "],[13177,0,"// "],[12535,1,""],[12535,0,"circle.small"],[52975,0,"// "],[12563,1,""],[12563,0,"D"],[12563,1,""],[12563,0,"D"],[12580,1,""],[12580,0,"E"],[12597,1,""],[12597,0,"F"],[13094,0," $emptyset$,"],[13110,1,""],[13110,0,"{}"],[13110,0,"$"],[13113,0,"$"],[13112,0,"B, C"],[13119,1,""],[13118,1,""],[13118,0," and "],[13124,33,""],[13123,1,""],[13123,0,"F"],[13108,0,"$"],[13107,0,"$"],[13126,0,"$"],[13125,0,"$"],[13161,0,". $P_d = $"],[13170,1,""],[13170,0,"P_e = {}"],[13177,0,"B, C"],[13182,0,"$"],[13163,0,"In this gra"],[13173,1,""],[13172,1,""],[13171,1,""],[13171,0,"event graph, "],[13204,0,"."],[12526,0,"// "],[12566,1,""],[12566,0,"E"],[12583,1,""],[12583,0,"F"],[12600,1,""],[12600,0,"G"],[12739,0,"// "],[12718,0,"// "],[12697,0,"// "],[12676,0,"// "],[12696,0,"    // edge(c, d, \"->\")\n    // edge(d, e, \"->\")\n    // edge(d, f, \"->\")\n"],[12820,3,""],[12796,3,""],[12772,3,""],[12772,0,"// "],[12801,1,""],[12801,0,"a"],[12822,1,""],[12822,0,"a"],[12801,1,""],[12801,0,"b"],[12822,1,""],[12822,0,"b"],[12792,0,"\n"],[12835,0,"\n"],[12793,0,"    edge(b, e, \"->\")\n    edge(b, f, \"->\")\n"],[12844,1,""],[12844,0,"c"],[12865,1,""],[12865,0,"c"],[12442,0,"\n    let (e, f, g) = ((-1, -3), (1, -3), (0, -4))"],[12398,0,"// "],[12473,1,""],[12473,0,"2"],[12482,1,""],[12482,0,"2"],[12491,1,""],[12491,0,"3"],[12491,1,""],[12491,0,"4"],[12491,1,""],[12491,0,"3"],[12491,1,""],[12491,0,"4"],[12482,1,""],[12482,0,"3"],[12473,1,""],[12473,0,"3"],[12398,3,""],[12442,49,""],[13037,0,"    edge((-2.5, -2), d, \"..\")\n    edge(d, (2.5, -2), \"..\")\n"],[13130,0,"// "],[13100,0,"// "],[13058,1,""],[13058,0,"b"],[13037,0,"    edge((-2.5, -2), b, \"..\")\n"],[13076,12,""],[13077,0,", C"],[13079,1,""],[13079,0,"c"],[13097,1,""],[13097,0,"c"],[13050,1,""],[13049,1,""],[13048,1,""],[13048,0,"1"],[13048,1,""],[13048,0,"2.5"],[13054,1,""],[13054,0,"1"],[13107,1,""],[13107,0,"1"],[13338,1,""],[13337,1,""],[13337,0,"G$"],[13373,43,""],[53604,0,"\n"],[53604,0,"\nThe simplest way to take advantage of this op"],[53649,1,""],[53648,1,""],[53648,0,"property is to simply trav"],[53669,5,""],[53669,0," the traversal "],[53683,1,""],[53683,0,". I"],[53685,1,""],[53684,1,""],[53674,0,"set of events visited during the "],[53659,0," that we can"],[53660,11,""],[53659,1,""],[53622,0,"for the algorithm "],[53678,57,""],[53678,0,"by only traversing the set "],[53605,22,""],[53605,0,"T"],[53608,0," partial traversal "],[53626,1,""],[53636,0," can take advantage of this property in a number of ways"],[53673,0,"to improve performance "],[53715,0,". The simplest is that "],[53738,66,""],[53738,0,"we can start the"],[53716,1,""],[53716,0,"\n\n"],[53605,113,""],[53617,0," way to take advantage of tihs p"],[53643,6,""],[53643,0,"this property is to begin the traversal "],[53663,0,"change where we "],[53685,14,""],[53685,0,"our traversal. Instead of starting at the root version $emp"],[53741,3,""],[53741,0,"emptyset$, the algorithm can start at the latest vr"],[53791,1,""],[53790,1,""],[53790,0,"critical version_"],[53790,0,"_"],[10841,0," <cir"],[10845,1,""],[10844,1,""],[10844,0,"ritical-version>"],[53827,0," which is "],[53828,9,""],[53828,0,"earlier than both "],[53828,18,""],[53802,6,""],[53802,0,"last"],[53825,0," within the _greatest upper bound)_"],[53859,1,""],[53858,1,""],[53858,0,"_ of $V_0 "],[53867,1,""],[53867,0,"$ and V"],[53873,1,""],[53873,0,"$V_m$. That is, the "],[53826,93,""],[53826,0,"which is equal to - or before - both versions $V)_"],[53875,1,""],[53874,1,""],[53874,0,"_0$ and $V_m$."],[53858,5,""],[53883,0," #"],[53884,1,""],[53884,0,"@cri"],[53885,3,""],[53885,0,"critical-version"],[11033,0,"e"],[11033,1,""],[11033,0,"in or "],[11049,0,","],[11076,0," No "],[11079,1,""],[11078,1,""],[11077,1,""],[11076,1,""],[11076,0," "],[10896,181,""],[10896,0,"  A  _critical version_ is any version $V$ in event graph $G$ which cleanly partitions $G$ into 2 distinct subsets of events: the events in or before $V$, and the events after $V$."],[12844,0,"// "],[13087,1,""],[13087,0,"e"],[13105,1,""],[13105,0,"e"],[13108,1,""],[13108,0,"f"],[13126,1,""],[13126,0,"f"],[13083,1,""],[13083,0,"3"],[13136,1,""],[13136,0,"3"],[13354,4,""],[13354,0,"E, F"],[13402,0," Version {"],[13411,1,""],[13411,0,"##"],[13412,1,""],[13411,1,""],[13411,0,"$$"],[13412,0,"{B, C}"],[13419,0," is not a critical version as $$"],[13450,0,"{B, C} || F"],[13462,0,"."],[13317,0,"4 "],[13336,0,":"],[11076,0," I"],[11077,1,""],[11077,0,"Eqi"],[11079,1,""],[11079,0,"uivalently, "],[11077,14,""],[11076,1,""],[10862,34,""],[11043,2,""],[10862,2,""],[11163,0,"\n#definition(\"Critical versions\")[\n"],[11651,0,"\n"],[11651,0,"]"],[11199,0,"  "],[11197,1,""],[10862,0,"A  _critical version_ is any version $V$ in event graph $G$ which cleanly partitions $G$ into 2 distinct subsets of events: the events in or before $V$, and the events after $V$.\n// "],[10928,112,""],[10928,0,"do"],[10929,1,""],[10928,1,""],[10927,1,""],[10926,1,""],[10925,1,""],[10924,1,""],[10923,1,""],[10922,1,""],[10922,0,"which do"],[10928,2,""],[10928,0,"cleanly partitions $G$ into 2 distinct subsets of events: the events in or before $V$, and the events after $V$."],[11041,3,""],[10862,179,""],[11497,1,""],[11497,0,"\n  \n  "],[11498,2,""],[53935,0,"bo"],[53936,1,""],[53935,1,""],[53935,0,"both "],[53966,0,"See "],[53987,0," for a definition and discussion of critical versions."],[53922,1,""],[53921,1,""],[53878,0," _greatest common version_ of #"],[53908,1,""],[53908,0,"$V0"],[53910,1,""],[53910,0,"_0 an"],[53914,1,""],[53913,1,""],[53912,1,""],[53912,0,"$ and $V_m)"],[53922,1,""],[53922,0,"$. "],[53924,1,""],[53922,2,""],[53922,0,")"],[53917,6,""],[53913,4,""],[53912,1,""],[53912,0," an"],[53912,3,""],[53910,2,""],[53910,0,"0"],[53908,3,""],[53908,0,"#"],[53907,2,""],[53904,3,""],[53895,9,""],[53888,7,""],[53878,10,""],[53921,0,"- "],[54031,10,""],[54031,0," versions."],[53921,2,""],[53878,0," _greatest common version_ of #"],[53908,1,""],[53908,0,"$V0"],[53910,1,""],[53910,0,"_0 an"],[53912,3,""],[53912,0,"$ and $V_m)"],[53922,1,""],[53922,0,"$. "],[53924,1,""],[53923,1,""],[53923,0," - which is the"],[54023,1,""],[54023,0,"\n\n\n"],[54024,0,"\nMore formally:\n\n\n// Consider 2 versions $V_1$, $V_2$, and the event graph $G$ containing all events in either version: $G = ceil(V_1) union ceil(V_2)$. We define the _greatest common version_ $C = V_1 sect.sq.double V_2$ on $G$ such that:\n\n// - All events in $C$ are in both $V_1$ and $V_2$. Ie, $C subset.eq V_1 and C subset.eq V_2$. // $forall i in C: i in ceil(V_1) and i in ceil(V_2)$\n// - C is a critical version (defined above)\n// - C is the \"greatest\" version meeting the aforementioned criteria. (If versions $C_1$ and $C_2$ both meet the above criteria, and $C_1 -> C_2$, $C_2$ is chosen as the greatest common version).\n\n// The greatest common version is well defined for any two versions because:\n\n// - The root version $emptyset$ is a critical version in every event graph\n// - All of the critical versions in a graph are fully ordered"],[54040,0,"\n#definition(\"Critical versions\")["],[54054,17,""],[54054,0,"Greatest Common Version"],[54080,0,"\n  \n  "],[54081,2,""],[54082,2,""],[54082,0,"]"],[54081,0,"  The"],[54083,3,""],[54081,2,""],[54915,0,"\n"],[54084,1,""],[54914,0,"\n]"],[54082,2,""],[54912,0,"\n"],[54081,1,""],[54849,3,""],[54773,3,""],[54695,3,""],[54498,3,""],[54453,3,""],[54304,3,""],[54081,3,""],[54890,1,""],[54831,0,"  "],[54758,0,"  "],[54683,0,"  "],[54489,0,"  "],[54447,0,"  "],[54301,0,"  "],[54081,0,"  "],[54214,1,""],[54214,0,"\n  \n  "],[54215,2,""],[54310,14,""],[54313,0," contains a subset of the events in"],[54348,12,""],[54393,9,""],[54393,0,"-"],[54373,9,""],[54373,0,"-"],[54386,0,">"],[54374,0,">"],[54486,5,""],[54486,0,"in #"],[54489,1,""],[54489,0,"@cri"],[54490,3,""],[54490,0,"critical-version"],[54921,363,""],[54024,0,"\nIntuitively, critical versions form a sort of \"firebreak\" for ordering information. In FugueMax (and many other sequence CRDT algorithms), it is impossible for the order of items inserted _before_ any critical version to impact the order of items inserted _after_ a critical version.\n\n"],[54309,1,""],[54739,0,"$"],[54738,0,"$"],[54800,0,"$"],[54799,0,"$"],[54811,8,""],[54811,0,",mo"],[54813,1,""],[54812,1,""],[54811,1,""],[54811,0,"most recent"],[54868,126,""],[54867,1,""],[54867,0,"."],[55083,0,"."],[55154,14,""],[55154,0,"we can optimise the "],[55202,6,""],[55204,0,":\n\n1."],[55210,7,""],[55210,0,"C"],[55248,7,""],[55248,0,"\n2. "],[55252,1,""],[55252,0,"T"],[55327,12,""],[55327,0,"\n3. T"],[55396,43,""],[55396,0," All events before (or in) $C$ are skipped."],[55396,1,""],[55396,0,"\n\nThis approach skips "],[55418,1,""],[55418,0,"a"],[55447,13,""],[55447,0,". Usually "],[55449,8,""],[55449,0,"$C$ is often a recent version, so this usually skips "],[55448,54,""],[55447,1,""],[55447,0," - which is hopefully a very recent"],[55456,26,""],[55456,0,"hopefully "],[55456,10,""],[55456,0,"will often contain most of the events in the event graph."],[55514,135,""],[55514,0,"\n"],[55514,0,"\nWe can "],[55515,7,""],[55515,0,"The algorithm can no longer start with an empty state tree, because idems "],[55588,1,""],[55587,1,""],[55586,1,""],[55585,1,""],[55584,1,""],[55584,0,"tems present in the document at version $C$ still need to be marked as deleted "],[55662,1,""],[55662,0,"."],[55663,2,""],[55663,0," "],[55671,33,""],[55781,7,""],[55781,0,"was present"],[55808,6,""],[55732,12,""],[55732,0,"E"],[58008,0,"// "],[58201,0,"\n"],[58201,0,"\nThis optimisation pro"],[58220,3,""],[58219,1,""],[58207,12,""],[58207,0,"optimised algoriothm "],[58217,11,""],[58217,0,"algorithm produces the same transformed list of operations as "],[58278,1,""],[58277,1,""],[58276,1,""],[58275,1,""],[58275,0," as #"],[58279,1,""],[58279,0,"@nai"],[58280,3,""],[58279,1,""],[58279,0,"@"],[58279,1,""],[58278,1,""],[58278,0," the naive algorithm described above. However, "],[58316,9,""],[58316,0,"But it"],[58322,20,""],[58322,0," "],[58373,15,""],[58546,1,""],[58546,0,":"],[58546,1,""],[58546,0,", as"],[58550,2,""],[58550,0," i"],[58546,1,""],[58546,0,":\n  -"],[58551,5,""],[58551,0," I"],[58644,6,""],[58644,0,"\n  - D"],[58656,6,""],[58656,0,"messages"],[58649,0,"When a delete event targets a dummy node, the e"],[58695,1,""],[58695,0,"genera"],[58695,6,""],[58695,0,"corresponding "],[58709,1,""],[58709,0,"d"],[58723,1,""],[58722,1,""],[58677,12,""],[58677,0,"an item which was inserted before version $C$"],[58755,0,"e will specify the "],[58762,12,""],[58762,0,"specify the ID of "],[58780,84,""],[58780,0,"the corresopnding "],[58784,14,""],[58784,0,"corresponding dummy node."],[58811,0,"// "],[53082,0," <opt-"],[53084,4,""],[53084,0,"opt-traversal>-"],[53098,1,""],[53097,0,"-claim"],[59051,0,"\n"],[59051,0,"\n=== Justifying this "],[59056,16,""],[59056,0,"Why does this optimisation work?"],[59089,0,"\n"],[59089,0,"\n$"],[59090,1,""],[59090,0,"#opt"],[59093,1,""],[59092,1,""],[59091,1,""],[59090,1,""],[59090,0,"@opt"],[59091,3,""],[59091,0,"opt-traversal-claim is "],[59090,0,"// "],[59090,27,""],[59090,0,"// @opt-traversal-claim is"],[174,0,"\n#let definition = thmbox(\"definition\", \"Definition\",\n  base_level: 0,\n  fill: rgb(\"#f8e8e8\")\n)\n"],[297,10,""],[297,0,"c"],[276,10,""],[276,0,"c"],[289,0,"l"],[277,0,"l"],[291,0,"a"],[278,0,"a"],[293,0,"i"],[279,0,"i"],[295,0,"m"],[280,0,"m"],[301,10,""],[301,0,"Claim"],[340,6,""],[340,0,"e8e8f8"],[51582,5,""],[51582,0,"claim"],[51587,35,""],[51589,12,""],[49043,42,""],[48469,42,""],[46700,42,""],[45619,42,""],[33617,42,""],[48875,0,"#"],[48343,0,"#"],[46616,0,"#"],[45577,0,"#"],[33617,0,"#"],[48880,0,"c"],[48347,0,"c"],[46619,0,"c"],[45579,0,"c"],[33618,0,"c"],[48885,0,"l"],[48351,0,"l"],[46622,0,"l"],[45581,0,"l"],[33619,0,"l"],[48890,0,"a"],[48355,0,"a"],[46625,0,"a"],[45583,0,"a"],[33620,0,"a"],[48895,0,"i"],[48359,0,"i"],[46628,0,"i"],[45585,0,"i"],[33621,0,"i"],[48900,0,"m"],[48363,0,"m"],[46631,0,"m"],[45587,0,"m"],[33622,0,"m"],[48905,0,"["],[48367,0,"["],[46634,0,"["],[45589,0,"["],[33623,0,"["],[48372,14,""],[48897,14,""],[46638,14,""],[45592,14,""],[58873,12,""],[58873,0,"#"],[58873,1,""],[58873,0,"@opt"],[58874,3,""],[58874,0,"opt-traversal-claim"],[58874,19,""],[58874,0,"opt"],[58873,4,""],[58873,0,"#"],[58873,1,""],[58873,0,"optimisation"],[58863,27,""],[58863,0,"is this optimisation sound"],[58853,1,""],[58636,0,"\n"],[58854,36,""],[58637,0,"=== Why is this optimisation sound?\n"],[58890,0,"\n=== Why is this optimisation sound?"],[58637,36,""],[58854,0,"\n"],[58636,1,""],[59589,0,"reduced state tree (containing only information about concurrent events) "],[59653,0,", visited"],[59670,84,""],[59670,0," will produce an identical "],[59676,21,""],[59676,0,"have no effect on the result"],[59698,6,""],[59698,0,"result of the transformation function when visited"],[59747,1,""],[59746,1,""],[59746,0,"ing the "],[59584,0," when visiting node $i$,"],[59700,78,""],[59700,0,"still result in the same transformed output after processing event $i$."],[59667,0,"events concru"],[59679,1,""],[59678,1,""],[59678,0,"urrent with "],[59690,26,""],[59690,0,"$I$"],[59692,1,""],[59691,1,""],[59691,0,"i$"],[60680,0,"dummy "],[60690,0,";"],[60690,1,""],[60690,0,"'s"],[60891,0,"at all "],[60891,7,""],[60891,0,"present "],[53100,0,"\n\n\n\n\n\n"],[58860,3961,""],[53101,0,"\n=== Why is this optimisation sound?\n\n// @opt-traversal-claim is\n\nOn careful inspection of the algorithm, data in the tree is only relevant in 3 cases:\n\n+ CRDT messages use node IDs to pass position information from the _prepare_ to the _effect_ function. For example, a `Delete(pos: 12)` event becomes CRDT message `Delete(id: X)`.\n+ In order for _prepare_ to correctly interpret the position of an event, #sp in each node needs to be set to the state at the parent version of the visited event.\n+ Concurrent inserts at the same final location in the document must be ordered using FugueMax's ordering rules. FugueMax uses _id_, _originLeft_ and _originRight_ to decide on the resulting order of items.\n\nIn each of these 3 cases, when visiting node $i$, the reduced state tree (containing only information about events concurrent with $i$) will still result in the same transformed output after processing event $i$.\n\nIn *case 1*, passing position information from _prepare_ to _effect_ only requires that every node in the tree has a locally unique ID. The same IDs identified in _prepare_ are immediately used by _effect_. The exact bit strings representing those IDs doesn't matter. Our optimised state tree (containing a combination of \"dummy nodes\" and real nodes) still meets this criteria as dummy nodes are given locally unique IDs too.\n\nFor *case 2*, the algorithm needs to be able to set #sp to the parent version of each event we visit during the traversal. Due to the simplification, the algorithm would misbehave if it ever attempted to:\n// Any item inserted before $C$ will not have its correct ID, and any item deleted at $C$ will not be present in the state tree at all.\n\n- \"Un-insert\" any dummy items. Ie, we cannot set #sp to `NotInsertedYet` for any events inserted before $C$. This would fail because the dummy item's ID does not match the corresponding event ID.\n- \"Un-delete\" any events which were deleted at version $C$. We cannot set #sp to `Ins` for any items which were deleted at $C$ because there is no node present in the state tree corresponding to these items.\n\nBoth of these errors would occur in the same situation. The algorithm will misbehave if the traversal ever visits an event with parent version $P$, where $C$ did not _happen-before_ $P$. However, this will never occur by construction, because:\n- $C$ is a critical version and\n// - $C -> {V_0, V_m}$\n- The traversal only visits events which happened after $C$.\n\nNote, dummy nodes can still be deleted and \"un-deleted\". This functions correctly as expected.\n\nFor *case 3*, we consider cases where the final insertion order of two inserts $i_1$ and $i_2$ depends on FugueMax's ordering rules, using _id_, _originLeft_ and _originRight_ to break \"ties\".\n\nFor FugueMax's ordering rules to have any bearing on the resulting insertion order, $i_1$ and $i_2$ must:\n- Be concurrent\n- Insert their content into the same location in the document.\n\nFor the FugueMax ordering rules to order insert events $i_1$ and $i_2$ correctly, both nodes must be visited during the traversal. This will result in _id_, _originLeft_ and _originRight_ being populated normally.\n\nTraversing from version $C$ guarantees that this happens in all cases.\n\nBecause $C$ is a critical version and the events are concurrent ($i_1 || i_2$), it follows that either $C -> {i_1, i_2}$ or ${i_1, i_2} -> C$.\n\nIf $C -> {i_1, i_2}$, both nodes will be visited normally during the traversal of events. _id_, _originLeft_ and _originRight_ fields are populated and compared correctly using FugueMax's ordering rules. _originLeft_ and _originRight_ may point to dummy nodes, but that has no impact on FugueMax's ordering algorithm.\n\nOn the other hand, if ${i_1, i_2} -> C$, the relative ordering of $i_1$ and $i_2$ is irrelevant, as the inserted items are already present in both $V_0$ and $V_m$. (This follows from the definition of greatest common version - as $C = V_0 sect.sq V_m$ implies $C -> {V_0, V_m}$).\n"],[53106,31,""],[53106,0,"Justifying @opt"],[53118,3,""],[53118,0,"opt-traversal-claim"],[53100,1,""],[57063,428,""],[57062,0,"\n=== Optimising partial tracer"],[57091,1,""],[57090,1,""],[57089,1,""],[57089,0,"versal by starting at the common"],[57067,54,""],[57067,0,"Starting at the greatte"],[57089,1,""],[57088,1,""],[57088,0,"est common version"],[57431,284,""],[57430,1,""],[57430,0,"\n\nIntuitively, critical versions form a sort of \"firebreak\" for ordering information. In FugueMax (and many other sequence CRDT algorithms), it is impossible for the order of items inserted _before_ any critical version to impact the order of items inserted _after_ a critical version."],[57432,0,"// "],[62440,0,"\n=== Starting at the greatest common version\n"],[62445,39,""],[62445,0,"Fast forward and clearning "],[62458,14,""],[62457,1,""],[62445,0,"Clearing the state and "],[62468,1,""],[62468,0,"f"],[62468,12,""],[62467,1,""],[62466,1,""],[62465,1,""],[62464,1,""],[62463,1,""],[62445,0,"fast forward mode, and "],[62468,1,""],[62468,0,"c"],[62445,1,""],[62445,0,"F"],[62450,1,""],[62450,0,"F"],[62486,0,"\n\nWhenever the travere"],[62507,1,""],[62507,0,"sal "],[62488,23,""],[62488,0,"In the final stage of the traversal, if the algorithm ever visits "],[62523,0," (while processing events from $V_0$ to $V_m$)"],[62600,0,"a critical version, we can perform more optimisations.\n\nFirst, recall that "],[62656,19,""],[62656,0,"First, recall that"],[62635,0,"2 additional "],[62687,0," critical versions partition the event graph into 2 subset"],[62739,0,"dinstinct "],[62739,10,""],[62739,0,"distinct "],[62754,0,"s of events"],[62705,60,""],[62618,0," in $$"],[62623,0,"G = ceil(V_90"],[62635,1,""],[62634,1,""],[62634,0,"0 union V_m)"],[62677,5,""],[62729,0," "],[62711,19,""],[62711,0," all events "],[62716,0,"visited "],[62711,0," critical events cleanly partition the event graph into 2 groups of "],[62769,10,""],[62769,0,"groups of events: The "],[62790,1,""],[62789,1,""],[62788,1,""],[62787,1,""],[62787,0,"the events before (or equal_ "],[62815,1,""],[62814,1,""],[62814,0,") to the critical version, and "],[62844,1,""],[62849,8,""],[62856,0,"after the cr"],[62856,12,""],[62856,0,"causally after the critical version. "],[62892,1,""],[62892,0," Due to @opt"],[62901,3,""],[62901,0,"opt-traversal-claim, "],[62892,0," All events processed"],[62893,20,""],[62893,0,"Because the traversal is in causal order, we will have processed all events in "],[62693,309,""],[62693,0,"First, recall that critical events cleanly partition the event graph into 2 groups of events: the events before (or equal) to the critical version, and all events causally after the critical version. Because the traversal is in causal order, we will have processed all events in  Due to @opt-traversal-claim,"],[62601,0,"n event where the p"],[62619,1,""],[62619,0,"event's parents "],[62609,0,"$i$ "],[62639,0,"$P-"],[62641,1,""],[62641,0,"_i$ are a"],[62487,0,"\n"],[62487,0,"\nThere are two more optimisations we can perform using @opt"],[62543,3,""],[62543,0,"opt-traversal-claim."],[62536,0,"to "],[62538,1,""],[62537,1,""],[62536,1,""],[62488,0,"We know of "],[62499,10,""],[62564,0," "],[62564,1,""],[62563,1,""],[62563,0,", taking advantage of crti"],[62588,1,""],[62587,1,""],[62587,0,"itical versions."],[62815,42,""],[62605,210,""],[62605,0,"In the final stage of the traversal (while processing events from $V_0$ to $V_m$), if the algorithm ever visits an event $i$ where the event's parents $P_i$ are a critical version in $G = ceil(V_0 union V_m)$,"],[62605,0,"Consider "],[62614,3,""],[62692,1,""],[62692,0,"."],[62693,2,""],[62693,0," I"],[62605,89,""],[62607,0,", during the traversal, "],[62630,1,""],[62605,5,""],[62605,0,"D"],[62641,0,"may "],[62645,5,""],[62650,1,""],[62664,17,""],[62664,0,"with"],[62664,4,""],[62664,0,"where the"],[62739,1,""],[62739,0,". In this case, we can reset the "],[62761,11,""],[62761,0," do 2 things:\n\n1. Reset the state, discarding all stored information (and replacing the existing cot"],[62860,1,""],[62860,0,"ntent with dummy nodes).\n2. "],[62885,3,""],[62885,0,"2. "],[62885,3,""],[62885,0,"2."],[62644,0," sometimes "],[62654,1,""],[62660,3,""],[62681,0,"event's "],[62755,1,""],[62755,0,"\n\n"],[62903,0," If the event's "],[62904,15,""],[62901,3,""],[62901,0,"2."],[62757,34,""],[62757,0,"In this case, we are guarne"],[62783,1,""],[62782,1,""],[62782,0,"anteed that all subsequent events"],[62809,0,"visited "],[62823,0,"\n"],[62808,0,"ly"],[62825,0," will be causally after $O_"],[62851,1,""],[62850,1,""],[62850,0,"P_i$, and"],[62858,1,""],[62857,1,""],[62856,1,""],[62855,1,""],[62854,1,""],[62854,0,". As such, the existing eg-walker state is "],[62894,3,""],[62894,0,"wil lhave"],[62902,1,""],[62901,1,""],[62900,1,""],[62899,1,""],[62898,1,""],[62897,1,""],[62897,0,"l have no impact on "],[62899,18,""],[62899,0,"be irrelevant to "],[62899,17,""],[62899,0,"have no effect on the transformed operations (due to "],[62757,195,""],[62757,0,"In this case, we are guaranteed that all subsequently visited events will be causally after $P_i$. As such, the existing eg-walker state will have no effect on the transformed operations (due to @opt-traversal-claim)."],[62973,1,""],[62973,0," and it can be cleared"],[62988,7,""],[62988,0,"se"],[62989,1,""],[62988,1,""],[62988,0,"reset back to "],[62757,245,""],[62757,0,"In this case, we are guaranteed that all subsequently visited events will be causally after $P_i$. As such, the existing eg-walker state will have no effect on the transformed operations (due to @opt-traversal-claim) and it can be reset back to"],[63001,113,""],[63000,1,""],[62994,6,""],[62993,1,""],[62988,0,"cleared, "],[63002,0,"ting it back to a state with dummy nodes."],[63026,4,""],[63026,0,"only containing"],[63054,0,"\n\nThe "],[63059,1,""],[63058,1,""],[63057,1,""],[63056,1,""],[63055,1,""],[63054,1,""],[63054,0,"\n\nThis "],[63056,5,""],[63056,0,"When using the run-length encoding optimisation, this effectively reduces the size of the working set "],[63122,7,""],[63122,0,"clears"],[63128,12,""],[63145,0,"back t a "],[63153,1,""],[63152,1,""],[63151,1,""],[63151,0,"o a single node."],[63145,0,"size "],[63154,0," down"],[63103,0," (described @rl"],[63116,2,""],[63116,0,"opt-rle)"],[63115,0,"in "],[63201,0," Given "],[63202,6,""],[63201,1,""],[63200,1,""],[63200,0,", which improves performance.\n\nFurter"],[63236,1,""],[63235,1,""],[63235,0,"her, if #"],[63243,1,""],[63243,0,"$i$"],[63245,0,"}"],[63244,0,"{"],[63248,0," is also a critical version (due to "],[63277,7,""],[63276,1,""],[63275,1,""],[63275,0,", the state _after_ we p"],[63295,4,""],[63295,0,"the algorithm visits $i$ will also be irrelevant. "],[63344,1,""],[63275,0," (ie, if ##"],[63285,1,""],[63284,1,""],[63284,0,"$$"],[63285,0,"exists.not j in G "],[63302,1,""],[63302,0,": j || i"],[63311,0,")"],[63324,57,""],[63324,0,"does "],[63314,15,""],[63313,1,""],[63312,1,""],[63312,0,":\n\n- The state does not need to be updated by $i$, as "],[63365,1,""],[63364,1,""],[63363,1,""],[63362,1,""],[63361,1,""],[63355,3,""],[63355,0,"to include "],[63369,0,", as "],[63371,3,""],[63371,0,"for the same reason as above\n- The transformed "],[63400,18,""],[63399,1,""],[63315,1,""],[63314,1,""],[63313,1,""],[63312,1,""],[63312,0,", "],[63314,2,""],[63314,0,"t"],[63396,0,"."],[63054,0,"\n\nAn empty state will always"],[63071,11,""],[63071,0,"always has no effect on the "],[63056,43,""],[63055,1,""],[63054,1,""],[63248,0,", the version "],[63248,14,""],[63243,0,"the version after $I$"],[63263,1,""],[63262,1,""],[63262,0,"i4"],[63263,1,""],[63263,0,"$ has been visited "],[63243,39,""],[62773,0," can make 2 guarantees:\n\n-"],[62799,24,""],[62799,0," All"],[63060,0,"\n- The tran"],[63063,8,""],[63063,0,"Transforming "],[63063,13,""],[63063,0,"Transforming "],[63063,13,""],[63063,0,"The transformed"],[63063,15,""],[63063,0,"The event will be unaffected by he "],[63097,1,""],[63096,1,""],[63095,1,""],[63095,0,"the transform function. Generally, when $$"],[63136,0,"vp = ve"],[63144,0,", $T("],[63148,1,""],[63147,1,""],[63146,1,""],[63146,0,"the transformed operation $e'$"],[63175,0," = e"],[63160,1,""],[63159,1,""],[63159,0," function is computing"],[63169,12,""],[63169,0,"has no effect, and the transformed"],[63222,0,"."],[63136,2,""],[63136,0,"P_i"],[63143,1,""],[63142,1,""],[63141,1,""],[63140,1,""],[63139,1,""],[63136,0,"ve = "],[63169,0," is transforming an event \"onto it"],[63202,1,""],[63201,1,""],[63200,1,""],[63199,1,""],[63198,1,""],[63197,1,""],[63196,1,""],[63195,1,""],[63195,0,"ont o t"],[63201,1,""],[63200,1,""],[63199,1,""],[63198,1,""],[63198,0,"o th"],[63201,1,""],[63200,1,""],[63200,0,"its own parent version. This"],[63228,55,""],[63200,3,""],[63200,0,"the event's"],[63236,0," ha"],[63238,1,""],[63237,1,""],[63237,0,"deo"],[63239,1,""],[63238,1,""],[63238,0,"oes nothing."],[63237,13,""],[63237,0,"has no effect - and the tranform function "],[63265,0,"s"],[63280,0,"simply yields $"],[63294,1,""],[63294,0,"the event $d"],[63305,1,""],[63305,0,"e$."],[63298,0,"original "],[63312,0," data"],[63324,173,""],[63060,0," When using the run-length encoding optimisation (described in @opt-rle), this effectively clears the working set size back down to a single node, which improves performance."],[63497,1,""],[63496,1,""],[62445,24,""],[62445,0,"C"],[62463,0," and passing operations directly"],[62476,11,""],[62476,0,"events "],[62468,15,""],[62468,0,"null "],[62468,5,""],[62468,0,"nul"],[62470,1,""],[62469,1,""],[62468,1,""],[62468,0,"null transformation"],[62487,8,""],[63667,0,"// "],[63666,0,"\n"],[63666,0,"\nTo"],[63668,1,""],[63667,1,""],[63667,0,"\n```\nfunction transformPartial(graph, v0, vm) -> Iterator<TransformedOperation> {\n  state := new EgWalkerState()\n  state.addDummyNodes({\n    id in [\"dummy 0\", \"dummy 1\", \"dummy 2\", ..]\n    originLeft in [(start), \"dummy 0\", \"dummy 1\", ..]\n    originRight = (end) for all nodes\n  })\n\n  cv := graph.greatestCommonVersion(v0, vm)\n\n  for event (i, e, p) in graph.inOrderTraversalBetween(cv, v0) {\n    state.setPrepareVersion(p)\n    message := state.prepareUpdate(i, e)\n    state.effectUpdate(message) // Transformed event is discarded.\n  }\n\n  for event (i, e, p) in graph.inOrderTraversalBetween(v0, v0.union(vm)) {\n    state.setPrepareVersion(p)\n    message := state.prepareUpdate(i, e)\n    transformedOperation := state.effectUpdate(message)\n\n    yield(transformedOperation)\n  }\n}\n```"],[63666,0,"\nTogether, we can "],[63667,17,""],[63667,0,"As a result, we can update the code to look like this:"],[63726,0,"\n\n"],[63727,0,"function resetState(e"],[63747,1,""],[63747,0,"state: EgWalker"],[63754,8,""],[63754,0,"EgWalkerState) {\n  \n  "],[63771,2,""],[63772,2,""],[63772,0,"}"],[63771,0,"  state.clear()"],[63898,169,""],[63787,0,"  state.addDummyNodes({\n    id in [\"dummy 0\", \"dummy 1\", \"dummy 2\", ..]\n    originLeft in [(start), \"dummy 0\", \"dummy 1\", ..]\n    originRight = (end) for all nodes\n  })\n"],[64066,0,"\n  state.clear()"],[64128,0,"\n//"],[64130,1,""],[64129,1,""],[64129,0,"  // Unchanged from a"],[64129,21,""],[64128,1,""],[64128,0,"\n/"],[64129,1,""],[64129,0,"  // Un"],[64129,7,""],[64128,1,""],[64194,139,""],[64193,0,"\n    // ..."],[64203,1,""],[64202,1,""],[64201,1,""],[64200,1,""],[64199,1,""],[64198,1,""],[64198,0,"..."],[64129,72,""],[64129,0,"  for event (i, e, p) in graph.inOrderTraversalBetween(cv, v0) { ..."],[64129,72,""],[64129,0,"  for event (i, e, p) in graph.inOrderTraversalBetween(cv, v0) { ... }"],[64275,0,"\n    if p is "],[64287,1,""],[64286,1,""],[64285,1,""],[64284,1,""],[64284,0,".isCriticalVersion(graph, v0, vm) {\n      \n      "],[64320,6,""],[64321,6,""],[64321,0,"    }"],[64320,0,"      state.clear()\n      \n      "],[64340,6,""],[64347,0,"if i.isCritical"],[64352,10,""],[64352,0,"isCriticalVersion(graph, v0, vm)"],[64379,1,""],[64379,0,"."],[64379,1,""],[64379,0,"."],[64379,1,""],[64379,0,","],[64384,0," {\n        \n        "],[64387,8,""],[64388,8,""],[64388,0,"      }"],[64387,0,"        yield e // "],[64405,1,""],[64404,1,""],[64403,1,""],[64402,1,""],[64402,0," // "],[64405,1,""],[64404,1,""],[64403,1,""],[64402,1,""],[64402,0,"\n        continue"],[64433,0,"\n    "],[64434,4,""],[63770,0,"\n  if "],[63771,5,""],[63770,1,""],[63770,0,"\n  if state.isAlreadyCleared"],[63797,1,""],[63796,1,""],[63782,14,""],[63771,11,""],[63770,1,""],[63666,0,"\n\n"],[63666,0,"\nWhen the causla"],[63681,1,""],[63680,1,""],[63680,0,"al graph"],[63667,0,"It is extremely common for t"],[63695,6,""],[63667,0,"Completely linear event graphs are extremely common in practice, as many documents are only ever editi"],[63768,1,""],[63768,0,"ed by a single "],[63783,43,""],[63783,0,"user making sequential changes. Both"],[63815,4,""],[63815,0,"In a totally linear event graph, every change is "],[63854,10,""],[63854,0,"event is a "],[63864,1,""],[63863,1,""],[63863,0,"a critical "],[63873,1,""],[63860,13,""],[63860,0,"forms a critical version, so"],[63887,1,""],[63886,1,""],[63885,1,""],[63884,1,""],[63884,0,". So in this case, ev"],[63904,1,""],[63903,1,""],[63903,0,"the event graph can be passed di"],[63907,28,""],[63907,0,"transformPartial function simply returns the events in "],[63958,1,""],[63957,1,""],[63957,0," graph itself "],[63974,0,"causal order."],[63666,322,""],[63665,1,""],[64605,0,"\n\n\nCompletely linear event graphs are extremely common in practice, as many documents are only ever edited by a single user making sequential changes. In a totally linear event graph, every event forms a critical version. So in this case, the transformPartial function simply returns the event graph itself in causal order.\n"],[64606,1,""],[64605,1,""],[64605,0,"\n"],[64637,0,", or graphs with linear sections,"],[64637,33,""],[64754,1,""],[64754,0,"\n\n\n"],[64756,1,""],[64928,0,"\n\nWhen users are concurrently "],[64930,28,""],[64930,0,"When users are concurrently"],[64928,0," No data structure is built. N"],[64957,1,""],[64956,1,""],[64955,1,""],[64955,0,", and noi "],[64964,1,""],[64963,1,""],[64963,0," additional memory is consumed to build it."],[65019,4,""],[65019,0,"edit a document "],[65008,4,""],[65008,0,"Even when"],[65052,0,", the document is usually"],[63810,144,""],[63809,1,""],[63809,0,"..."],[63813,0," // as above"],[64069,0," // as above."],[64186,13,""],[64186,0,"v0.union(vm)"],[64252,13,""],[64252,0,"v0.union(vm)"],[64254,1,""],[64188,1,""],[64145,1,""],[61232,1,""],[64251,0," "],[64186,0," "],[64144,0," "],[61232,0," "],[64260,1,""],[64194,1,""],[64151,1,""],[61238,1,""],[64257,0," "],[64192,0," "],[64150,0," "],[61238,0," "],[64263,1,""],[64197,1,""],[64154,1,""],[61241,1,""],[64252,5,""],[64187,5,""],[64145,5,""],[61233,5,""],[64237,0,"+"],[64177,0,"+"],[64140,0,"+"],[61233,0,"+"],[64217,0,"["],[64219,0,"]"],[64239,7,""],[64176,7,""],[64603,2,""],[64603,0," "],[64649,5,""],[64649,0,"is"],[64672,4,""],[64672,0,"I"],[64716,7,""],[64716,0,"dir"],[64718,1,""],[64717,1,""],[64716,1,""],[64841,0," "],[64841,1,""],[64841,0," The system is fast "],[64841,20,""],[64902,10,""],[64902,0,"often has moments"],[64902,0,"still regualrly "],[64908,10,""],[64908,0,"regularly has "],[64922,17,""],[64922,0,"moments"],[64889,12,""],[64889,0,"documents "],[64898,1,""],[64905,9,""],[64905,0,"have frequent"],[64918,4,""],[64919,7,""],[64875,12,""],[64875,0,"together"],[64859,0,"work"],[64862,1,""],[64861,1,""],[64860,1,""],[64859,1,""],[64859,0,"work on a"],[64868,6,""],[64888,30,""],[64888,0,"critical versions are still common. "],[64843,0,"// "],[64843,3,""],[64923,1,""],[64923,0," Trimming "],[64924,0,"c"],[64924,1,""],[64924,0,"Constantly "],[64935,1,""],[64935,0,"t"],[64944,0,"the ver"],[64948,3,""],[64948,0,"working set size"],[64948,0,"size of the "],[64972,4,""],[64971,1,""],[64971,0," makes a large difference in pa"],[65001,1,""],[65001,0,"erformance."],[64985,0," practical"],[65022,0,"\n\n> BENCHMARK MEEE!\n\nA more fine"],[65043,11,""],[65043,0,"Its possible to make an even more fine-grained "],[65064,13,""],[65059,5,""],[65059,0,"do even more "],[65085,0,"menip"],[65085,5,""],[65085,0,"trm"],[65087,1,""],[65086,1,""],[65085,1,""],[65085,0,"r"],[65085,1,""],[65085,0,"trimming"],[65059,34,""],[65059,0,"trim the state in a "],[65078,1,""],[65078,0,"n even more fine-grained way by removing nodes as soon as the events the "],[65150,1,""],[65150,0,"y represent "],[65138,1,""],[65138,0,"eir corresponding"],[65135,0," the graph no long e"],[65154,1,""],[65153,1,""],[65153,0,"er contains any con"],[65171,1,""],[65170,1,""],[65169,1,""],[65169,0,"events "],[65169,7,""],[65169,0,"concurrent events."],[65187,43,""],[65187,0," However, we have not figured out how to implement this in an efficient manner."],[64251,0," // The event does not need bt"],[64280,1,""],[64279,1,""],[64279,0,"to be transformed, and th"],[64251,53,""],[64251,0," // Do nothing."],[64251,15,""],[64251,0,")"],[64250,0,"("],[64249,1,""],[64252,0," // the "],[64259,1,""],[64258,1,""],[64257,1,""],[64256,1,""],[64256,0,"Transformation"],[64252,18,""],[62533,5,""],[62533,0,"which take advantage of"],[62577,21,""],[62577,0,", using"],[62579,5,""],[62578,1,""],[62577,1,""],[62577,0," and"],[62484,10,""],[62484,0,"There are"],[62517,15,""],[62502,14,""],[62502,0," ways to improve"],[62511,7,""],[62511,0,"speed up the algorithm using"],[62539,24,""],[62523,10,""],[62523,0," system"],[62484,26,""],[62484,0,"There are more ways to"],[62634,0,"an "],[62776,0,"Because of the nature of critical events, "],[62818,1,""],[62818,0,"a"],[62902,0,"data"],[62905,1,""],[62904,1,""],[62903,1,""],[62902,1,""],[62902,0,"information stored in the "],[62944,0,"is unneeded. "],[62947,8,""],[62947,0,"l"],[62947,1,""],[62947,0,"no longer needed"],[62963,81,""],[62996,0," the state"],[63006,3,""],[62985,65,""],[62978,7,""],[62978,0,"reset"],[63131,27,""],[63130,1,""],[63129,1,""],[63129,0,"."],[63129,0," again"],[63130,0,"("],[63130,1,""],[63135,0,", containing dummy data"],[63171,0," itself"],[63279,38,""],[63278,1,""],[63277,1,""],[63276,1,""],[63276,0,"has no effect, as the event already describes its own behaviour"],[63326,4,""],[63335,0," at its"],[63362,27,""],[63362,0," T"],[63385,0," can"],[63402,1,""],[63599,0," "],[63599,1,""],[63599,0," So the "],[63433,174,""],[63433,0,"Further, if ${i}$ is also a critical version (ie, if $exists.not j in G: j || i$), the state does not need to be updated to include $i$, for the same reason as above. So the"],[64283,13,""],[64283,0,"p"],[61293,13,""],[61293,0,"p"],[61079,13,""],[61079,0,"p"],[64260,0,"r"],[61282,0,"r"],[61080,0,"r"],[64263,0,"e"],[61284,0,"e"],[61081,0,"e"],[64266,0,"p"],[61286,0,"p"],[61082,0,"p"],[64269,0,"a"],[61288,0,"a"],[61083,0,"a"],[64272,0,"r"],[61290,0,"r"],[61084,0,"r"],[64275,0,"e"],[61292,0,"e"],[61085,0,"e"],[64319,12,""],[64319,0,"e"],[61335,12,""],[61335,0,"e"],[61103,12,""],[61103,0,"e"],[64298,0,"f"],[61325,0,"f"],[61104,0,"f"],[64301,0,"f"],[61327,0,"f"],[61105,0,"f"],[64304,0,"e"],[61329,0,"e"],[61106,0,"e"],[64307,0,"c"],[61331,0,"c"],[61107,0,"c"],[64310,0,"t"],[61333,0,"t"],[61108,0,"t"],[63578,4,""],[63578,0," we do not need to run prepare or "],[63601,0,"the CRDT's "],[63619,0,"_"],[63612,0,"_"],[63625,0,"_effect_ functions at all."],[65564,0," Other"],[65687,0," based on the logic listed above and"],[65723,6,""],[65723,0," using"],[65995,11,""],[65995,0,"some other"],[65990,4,""],[65990,0,"breifl"],[65995,1,""],[65994,1,""],[65993,1,""],[65992,1,""],[65992,0,"iefly describe"],[66031,0," we have made"],[66133,0,"//"],[67592,87,""],[67634,0,"\n"],[67634,0,"\nOne of the bnig"],[67649,1,""],[67648,1,""],[67647,1,""],[67647,0,"iggest single optimisations is to internally run-length encode all data stored by the system.\n\n"],[67635,0,"\n"],[67634,0,"\nHumans typically"],[67642,9,""],[67642,0,"do not insert characters"],[67635,0,"It is a somewhat obvious point, but "],[67671,1,""],[67671,0,"h"],[67702,0," "],[67685,0,"typs"],[67688,1,""],[67688,0,"e "],[67685,0,"typically "],[67695,5,""],[67702,0,"and delete "],[67724,0,"at \"random\""],[67727,8,""],[67727,0,"random"],[67727,0,"seemingly-"],[67743,0," location "],[67752,1,""],[67752,0,"s in a document. Almost all typed characters in an event "],[67769,40,""],[67769,0,"Wh"],[67769,2,""],[67769,0,"Almost all typed characters in an event "],[67780,29,""],[67780,0,"events in an event graph:\n\n- Immediately "],[67809,12,""],[67809,0,"Come im"],[67815,1,""],[67814,1,""],[67807,7,""],[67807,0,"- Come"],[67780,0,"t"],[67780,1,""],[67780,0,"editing "],[67821,0," immediately after the preceeding event. An insert at position 10"],[67885,1,""],[67884,1,""],[67884,0,"50 is usually followed by an insert at  posi"],[67927,1,""],[67926,1,""],[67925,1,""],[67924,1,""],[67923,1,""],[67923,0,"position 51, then 52, and so on. A delete at position 50 is usually followed by a delete at position 59"],[68025,1,""],[68024,1,""],[68024,0,"49 (indicating a backspace "],[68041,10,""],[68041,0,"run of backspaced characters) "],[68004,0,"nother"],[68029,0," 50 ("],[68033,1,""],[68032,1,""],[68003,29,""],[68003,0,"deletes at positions"],[68026,0," or 50"],[68045,30,""],[68045,0,"the use of the backspace or delete keys, respectively"],[68099,1,""],[68099,0,"."],[67861,1,""],[67860,1,""],[67860,0,":\n  - "],[67959,1,""],[67959,0,"\n  - "],[68108,0,"\n  "],[68109,2,""],[68109,0,"- "],[68109,2,""],[68109,0,"-"],[67769,44,""],[67769,0,"Almost all editing events in an event graph:"],[67817,4,""],[67817,0,"Are located"],[67829,11,""],[67829,0,"nex tto"],[67835,1,""],[67834,1,""],[67833,1,""],[67832,1,""],[67832,0,"t to"],[67836,6,""],[68107,0," Happen immediately after the previous event in the graph. Ie, if the graph contains events $i, j$"],[68204,0,"}"],[68200,0,"{"],[68207,0,", $P_j$"],[68209,0,"the parents of event $j$ are "],[68209,29,""],[68209,0,"its usually the case that "],[68239,0," = {i}"],[68246,0,".\n\nRather than storing each event separately"],[68274,5,""],[68274,0,"keystroke"],[68294,0,", our optimised systems store "],[68318,6,""],[68318,0,"use a lossless"],[68322,2,""],[68330,0," internal run-length ecn"],[68353,1,""],[68352,1,""],[68352,0,"ncoding sto"],[68362,1,""],[68361,1,""],[68360,1,""],[68360,0,"to store all "],[68369,4,""],[68369,0,"all data"],[67694,32,""],[67694,0," make"],[67709,1,""],[67709,0," "],[67716,24,""],[67716,0," edits in a document"],[68216,0,"\n- Have an ID "],[68224,6,""],[68224,0,"the next ID in sequence. If the previous event had ID ("],[68278,1,""],[68277,1,""],[68276,1,""],[68275,1,""],[68275,0,"a user "],[68277,5,""],[68276,1,""],[68249,27,""],[68249,0,"When using a user"],[68262,0,"("],[68267,0," agent, seq)"],[68278,0,"uence number"],[68291,0," ID system, "],[68253,0," IDs are sequential (eg, when"],[68302,0,"_"],[68292,0,"_"],[68321,0,"_"],[68306,0,"_"],[68324,0," based"],[68341,1,""],[68340,1,""],[68340,0,"), ID (A"],[68346,0,"$"],[68349,0,", 50$"],[68353,1,""],[68353,0,")$"],[68343,0,"if the previous "],[68361,0," is"],[68374,0,", the next ID will p"],[68393,1,""],[68393,0,"almost always be $$"],[68411,0,"(A, 51)"],[68419,0," then $(A, 51)$"],[68431,1,""],[68431,0,"2"],[68434,0," and so on."],[68366,0,"_"],[68365,0,"_"],[68367,1,""],[68365,2,""],[68365,0,"_"],[68373,1,""],[68373,0,")"],[68373,1,""],[68373,0,"_"],[68425,1,""],[68410,1,""],[68424,0,"_"],[68410,0,"_"],[68433,1,""],[68418,1,""],[68432,0,")"],[68418,0,")"],[68434,0,"_"],[68419,0,"_"],[68435,1,""],[68419,1,""],[68433,1,""],[68418,1,""],[68432,0,"_"],[68418,0,"_"],[68472,9,""],[68472,0,"edit"],[68487,0," as ()"],[68491,0,"_"],[68494,0,"_"],[68493,0,"id, position, content?"],[68472,4,""],[68472,0,"event"],[68497,0," parents,"],[68517,0,"insert_"],[68539,10,""],[68536,11,""],[68536,0,"we store each field using"],[68561,4,""],[68570,9,""],[68590,18,""],[68590,0,"."],[68445,0,"\n\nThese patterns persist in the run"],[68479,1,""],[68478,1,""],[68477,1,""],[68470,7,""],[68470,0,"into the state tree."],[68479,0,"generated "],[68500,0," Item"],[68501,4,""],[68500,1,""],[68452,1,""],[68451,1,""],[68450,1,""],[68449,1,""],[68449,0,"is "],[68459,1,""],[68467,0,"s"],[68499,0," If a node looks like this:\n\n```\n\n```"],[68532,0,"()"],[68533,0,"id: X, "],[68537,1,""],[68537,0,"()"],[68538,0,"A, 50"],[68546,0,"origin"],[68546,6,""],[68546,0,"origin_left: (A, 10), origin"],[68568,6,""],[68568,0,"origin_right: ("],[68559,7,""],[68559,0,"X"],[68576,1,""],[68576,0,"Y"],[68582,0,"\n\nthe "],[68584,4,""],[68584,0,"The following node almost always looks like this:"],[68634,0,"\n```\n(id: (A, 50), origin_left: X, origin_right: Y)\n```\n"],[68649,1,""],[68649,0,"1"],[68666,1,""],[68666,0,"(A, 50)"],[68696,0,"\n\n"],[68697,0,"\n"],[68697,1,""],[68697,0,"Throughout our system "],[68718,1,""],[68718,0,", we store"],[68723,5,""],[68723,0,"store "],[68720,0,"h"],[68720,1,""],[68720,0,"whenever possion"],[68735,1,""],[68734,1,""],[68734,0,"ble "],[68747,0,"data in an internally run-length encoded form."],[68755,3,""],[68789,0,"s"],[68791,0," For example, rather than storing an array of structs"],[68805,0,"wheen "],[68810,1,""],[68809,1,""],[68808,1,""],[68807,1,""],[68807,0,"n"],[68807,1,""],[68807,0,"en storing the event graph, "],[68874,46,""],[68866,0," event"],[68945,35,""],[68945,0,"in a "],[68697,253,""],[68697,0,"Throughout our system, whenever possible we store data in internally run-length encoded forms. For example, when storing the event graph, rather than storing an array of event structs _(id, parents, position, insert_content?)_, we store each field in a"],[69405,89,""],[69436,0," and largely uncompressioble"],[69463,1,""],[69462,1,""],[69461,1,""],[69460,1,""],[69460,0,"ble"],[69462,1,""],[69461,1,""],[69460,1,""],[69459,1,""],[69459,0,"able"],[69456,2,""],[69456,0,"omi"],[69456,3,""],[69456,0,"es"],[69470,0,"new "],[69568,2,""],[69568,0,"for"],[69128,971,""],[67591,0,"== Agent & Sequence number for event IDs\n\nEach event or CRDT message needs an assigned globally unique ID. The most obvious approach is to assign every event a GUID using some UUID scheme, like RFC4122 [REFERENCE].\n\nUnfortunately, this approach dramatically bloats file size. RFC4122 UUIDs are 16 bytes long and largely uncompressable. If a new UUID is assigned on every keystroke, filesize would be quickly dominated by storing the UUIDs for each event.\n\nA better approach is to assign (agent, seq) tuples to events. The agent ID is assigned only once per editing session. Sequence numbers store autoincrementing integers. These compress extremely well due to the nature of how humans edit documents.\n\n> STATS\n\nOne downside of this approach is that it makes systems vulnerable to byzantine actors on the network. [Martin - BFT] paper discusses using Git-style hashes instead, however as far as we know, doing this in a space-efficient way is still an unsolved problem.\n"],[67589,0,"\n"],[68562,0,"\n"],[70101,1,""],[68562,0,"\n"],[68562,0,"\nThis optimisation s"],[68581,1,""],[68581,0,"is present in both Automerge and Yjs. We do not know when it was first discovered. (MARTIA"],[68670,1,""],[68669,1,""],[68669,0,"AIN -"],[68665,9,""],[68665,0,"MAR"],[68667,1,""],[68666,1,""],[68665,1,""],[68664,1,""],[68663,1,""],[68663,0," (TODO: MARTAIN"],[68671,7,""],[68671,0,"Martan "],[68677,1,""],[68676,1,""],[68676,0,"in "],[68678,1,""],[68677,1,""],[68676,1,""],[68675,1,""],[68671,4,""],[68671,0,"???)"],[68674,0," Can we find this reference?"],[70242,2347,""],[68705,0,"\n== Local IDs and Remote IDs\n\n// Versions are quite large objects, containing a unique ID and a sequence number.\n\nIn our implementation, replicas associate each \"remote ID\" (the (agent, seq) tuple pairs mentioned above) with a _local ID_, which is simply an autoincrementing integer. The first event added to the local event graph is numbered 0, then 1, then 2 and so on.\n\nBecause events are added to the event graph in causal order, given two events with local IDs $i_1$ and $i_2$ where $i_1 < i_2$, we know event $i_2$ must have been added to the local event graph after event $i_1$. As such, it is impossible for $i_2$ to have _happened-before_ $i_1$. Thus $i_1 < i_2$ implies that either $i_1 -> i_2$ or $i_1 || i_2$.\n\n// IDs are used everywhere throughout the library. Using simple integers yields a small but constant performance gain in these cases.\n\nSurprisingly, this simple property simplifies and improves the performance most event graph queries. And the event graph is queried constantly by eg-walker. For example:\n\n- When the partial transform function is queried to merge $V_m$ into $V_0$, it first needs to compute the _greatest common version_ $C = V_0 sect.sq.double V_m$.\n- During traversal, before visiting each event, eg-walker computes the set difference between #vp (the version of the previously visited event) and $P_i$ (the parent version of $i$). The set difference function returns sorted lists of added and removed events.\n// - During traversal, the algorithm adds and removes events from #vp. Because versions are sets of IDs of an event graph's frontier, this\n\nAnd many more.\n\nConsider the _diff_ function, which computes the set difference between two versions. A naive diff function operating on two versions (represented by sets of IDs) may do a parallel breadth-first search to find the ways the versions differ. This is quite slow and it uses a lot of RAM. Even in the simple case where $V_1 -> V_2$ or $V_2 -> V_1$, both versions will be expanded unnecessarily.\n\nUsing local IDs, the algorithm gets much simpler, as the graph can be iteratively expanded from the highest local ID in $V_1$ and $V_2$ until the difference is found. A diffing algorithm which takes advantage of this is listed in @diff.\n\nWe have developed a suite of utility functions which are optimised like this. SEE causal-graph LIBRARY TODO!\n\n"],[68719,4,""],[68718,1,""],[68718,0,", "],[68719,1,""],[68718,1,""],[68718,0," and "],[70942,0,"\n"],[70942,0,"\nThe local IDs"],[70943,3,""],[70943,0,"As the name suggests,"],[70974,0," are never transmitted over the network."],[71013,1,""],[71013,0," as the exact number "],[71027,7,""],[71027,0,"association between "],[70943,104,""],[70943,0,"As the name suggests, local IDs are never transmitted over the network as the exact association between"],[69664,5,""],[69664,0,"T"],[71042,0," IDs"],[71043,3,""],[71043,0,"local IDs and any "],[71057,4,""],[71057,0,"the "],[71057,4,""],[71057,0,"their _(agent, seq)_ tuple pairs "],[71013,0,"different replicas may choose "],[71036,7,""],[71036,0,"have "],[71031,10,""],[71031,0," will have different "],[71052,49,""],[71037,15,""],[71037,0,"associate local IDs with"],[71088,1,""],[71088,0,"."],[71037,0,"each have their own "],[71065,1,""],[71065,0,"tion"],[71068,1,""],[71067,1,""],[71066,1,""],[71065,1,""],[71065,0,"ion"],[71037,31,""],[71037,0,"not share their mapping between"],[71078,5,""],[71078,0," and"],[71053,16,""],[71062,4,""],[71062,0," to"],[71092,1,""],[71091,1,""],[71091,0," mapping."],[70938,162,""],[70937,1,""],[71048,0,"\nAs the name suggests, local IDs are never transmitted over the network as different replicas will not share their local IDs to _(agent, seq)_ tuple pair mapping.\n"],[72224,0,"s "],[72225,1,""],[72224,1,""],[72223,1,""],[72223,0,"s "],[72261,0,"(id: (A, 51), origin_left: (A, 50), origin_right: Y)\n(id: (A, 51), origin_left: (A, 50), origin_right: Y)\n"],[72324,1,""],[72324,0,"2"],[72377,1,""],[72377,0,"3"],[72346,1,""],[72346,0,"1"],[72399,1,""],[72399,0,"2"],[72483,0,"an "],[71211,0,"\n\n"],[71212,0,"Local IDs also allow a s"],[71235,1,""],[71234,1,""],[71233,1,""],[71233,0,"our local data structure "],[71237,21,""],[71237,0,"event graph to be stored in a "],[71227,0,"make it easier for"],[71245,5,""],[71280,0,"struct-of-arrays form rather than an array-fo"],[71324,1,""],[71323,1,""],[71323,0,"of-structs form. Ie, instead of storing "],[71212,151,""],[71212,0,"Local IDs also make it easier for our event graph to be stored in a struct-of-arrays form rather than an array-of-structs form. Ie, instead of storing an array of _(id, parents, position, insert_content?)_ objects"],[71362,0," the graph as"],[71438,0,", we store it as a set of arays"],[71468,1,""],[71467,1,""],[71466,1,""],[71466,0,"rays"],[71452,0,"in "],[71455,3,""],[71470,0,", "],[71471,1,""],[71470,1,""],[71470,0,", eith eac"],[71472,8,""],[71472,0,"eith"],[71475,1,""],[71474,1,""],[71473,1,""],[71472,1,""],[71472,0,"with each array holding part of the inform"],[71508,6,""],[71508,0,"data for each event. The arrays we "],[71529,14,""],[71529,0,"In our rust code, we use the following arrays:\n\n- Parents"],[71577,1,""],[71577,0,"\\"],[71586,0,": asdf"],[71577,1,""],[71577,0,"/"],[71579,7,""],[71579,0,"Graph"],[71586,4,""],[71586,0,"sto"],[71588,1,""],[71587,1,""],[71586,1,""],[71586,0,"Stores the parents field for each event"],[71576,0,"\n/ Agent assignment: Stores the b"],[71608,1,""],[71608,0,"association between local ID and remote ID for every event"],[71715,0,", allowing "],[71715,11,""],[71715,0,"\n/ InsC"],[71721,1,""],[71720,1,""],[71719,1,""],[71719,0,"nserted content: A big string storing all inserted items."],[71775,1,""],[71757,4,""],[71757,0,"the "],[71775,0," for every evernt"],[71791,1,""],[71790,1,""],[71789,1,""],[71789,0,"nt"],[71715,0,"\n/ Operations"],[71718,10,""],[71718,0,"Events: Stores the insert position"],[71737,0,"type and "],[71761,0," o"],[71762,1,""],[71761,1,""],[71742,4,""],[71741,1,""],[71741,0," and "],[71761,0," of ev"],[71766,1,""],[71766,0,"ach event"],[71821,30,""],[71821,0,"inserted content"],[71650,16,""],[71619,0,"s"],[71685,15,""],[71685,0,"s for each event. This can be qeu"],[71717,1,""],[71716,1,""],[71716,0,"ueries"],[71721,1,""],[71721,0,"d."],[71702,21,""],[71713,0,"For each"],[71713,8,""],[71748,14,""],[71719,0," each events' "],[71732,5,""],[71742,7,""],[71738,0,"(Insert or Delete) "],[71745,0,"`"],[71739,0,"`"],[71757,0,"`"],[71751,0,"`"],[71836,0,"\nThe index into each of these arrays i"],[71873,1,""],[71872,1,""],[71840,0," local ID is used as an "],[71863,1,""],[71895,0,". "],[71896,1,""],[71896,0," "],[71896,1,""],[71896,0,"\n"],[71896,0," "],[71837,60,""],[71837,0,"The local ID is used as an index into each of these arrays."],[71837,0,"// "],[71774,0,"// "],[71703,0,"// "],[71652,0,"// "],[71577,0,"// "],[71212,0,"// "],[73363,21,""],[73362,1,""],[73361,1,""],[73360,1,""],[73360,0,"we can comp"],[73363,8,""],[73363,0,"compact adjacent items"],[73357,28,""],[73357,0,"e"],[73357,1,""],[73357,0,"_, we compact adjacent items"],[73360,25,""],[73360,0,"each item store"],[73370,5,""],[73370,0,"greedily stores a list of events"],[73226,1,""],[73226,0,"\n\n\n"],[73226,0," For example, instead of an item"],[73251,7,""],[73251,0,"an item in the node"],[73266,4,""],[73266,0,"state tree storing "],[73129,156,""],[73129,0,"Throughout our system, whenever possible we store data in an internally run-length encoded forms. For example, instead of an item in the state tree storing"],[72862,7,""],[72862,0,"50"],[73067,0,"l"],[73014,0,"l"],[72961,0,"l"],[72858,0,"l"],[73071,0,"o"],[73017,0,"o"],[72963,0,"o"],[72859,0,"o"],[73075,0,"c"],[73020,0,"c"],[72965,0,"c"],[72860,0,"c"],[73079,0,"a"],[73023,0,"a"],[72967,0,"a"],[72861,0,"a"],[73083,0,"l"],[73026,0,"l"],[72969,0,"l"],[72862,0,"l"],[73087,0,"_"],[73029,0,"_"],[72971,0,"_"],[72863,0,"_"],[72885,1,""],[72885,0,"X"],[73117,1,""],[73095,1,""],[73058,1,""],[73036,1,""],[72999,1,""],[72977,1,""],[73112,1,""],[73091,1,""],[73055,1,""],[73034,1,""],[72998,1,""],[72977,1,""],[73107,1,""],[73087,1,""],[73052,1,""],[73032,1,""],[72997,1,""],[72977,1,""],[73102,1,""],[73083,1,""],[73049,1,""],[73030,1,""],[72996,1,""],[72977,1,""],[73099,1,""],[73081,1,""],[73048,1,""],[73030,1,""],[72997,1,""],[72979,1,""],[73273,0," (local_id: 50, origin_left: X, origin_right: Y)\n"],[73229,92,""],[73229,0,"the state tree items listed above are instead stored like this:\n\n```\n\n\n```"],[73298,0,"(local_id: 50-54"],[73311,1,""],[73311,0,".."],[73315,0,", origin_left: X, origin"],[73333,6,""],[73333,0,"origin_right: Y)"],[73349,1,""],[73282,0,"in a single node "],[73371,0,"\nImplicitl"],[73372,9,""],[73372,0,"This impli"],[73372,10,""],[73372,0,"This implies"],[73377,0,"node "],[73382,7,""],[73372,10,""],[73372,0,"The code emb"],[73381,3,""],[73381,0,"understands that "],[73372,26,""],[73372,0,"t"],[73372,1,""],[73372,0,"The specified origin_left_"],[73386,0,"_"],[73394,1,""],[73393,1,""],[73393,0,"L"],[73398,0," is only the originLeft of the first item (with ID 50). The originLeft of ID "],[73474,1,""],[73473,1,""],[73472,1,""],[73472,0,"item 51 will be ID 50. "],[73494,1,""],[73375,10,""],[73375,0," explicitly named"],[73487,14,""],[73487,0,"is i"],[73490,1,""],[73490,0,"item 50.\n\n"],[72914,9,""],[72914,0,"subsequent"],[73501,0,"Items are joined greedily"],[73518,8,""],[73511,7,""],[73511,0,"merged opportunistically. They can be split again without losing information.\n\nThis approach allows a dummy"],[73611,7,""],[73611,0,"the state tree to be populated"],[73590,51,""],[73590,0,"The event graph itself"],[71211,705,""],[71211,0,"\n"],[72886,23,""],[72886,0,"\n// Local IDs also make it easier for our event graph to be stored in a struct-of-arrays form rather than an array-of-structs form. Ie, instead of storing the graph as an array of _(id, parents, position, insert_content?)_ objects, we store it in a set of arrays, with each array holding part of the data for each event. In our rust code, we use the following arrays:\n\n// / Agent assignment: Stores the associations between local ID and remote ID\n// / Graph: Stores the parents fields for each event.\n// / Events: Stores each events' type (`Insert` or `Delete`) and position\n// / Inserted content: A big string storing the inserted content\n\n// The local ID is used as an index into each of these arrays.\n\n"],[73527,3,""],[73461,3,""],[73387,3,""],[73333,3,""],[73255,3,""],[72887,3,""],[72885,1,""],[72886,0,"The event graph itself is stored"],[72918,62,""],[73173,19,""],[73173,0,"W"],[73462,0,"\n"],[73462,0,"\nEach array is locally "],[73477,8,""],[73477,0,"itself run-length encoded. "],[73463,41,""],[73463,0,"Each array is itself run-length encoded."],[72667,0,"\n\n"],[72668,1,""],[72667,1,""],[73503,0," "],[73503,1,""],[73484,0,"opport"],[73484,6,""],[73502,1,""],[73502,0,", with adjacent items merged oppo"],[73534,1,""],[73533,1,""],[73532,1,""],[73531,1,""],[73531,0,"whenever possionb"],[73547,1,""],[73546,1,""],[73545,1,""],[73545,0,"ble."],[73463,87,""],[73463,0,"Each array is itself run-length encoded, with adjacent items merged whenever possible."],[73463,146,""],[73463,0,"Each array is itself run-length encoded, with adjacent items merged whenever possible. The local ID is used as an index into each of these arrays."],[73549,0," "],[73549,11,""],[73549,0,"L"],[73549,1,""],[73549,0," Local"],[73558,0,"s are usuall"],[73564,6,""],[73563,1,""],[73562,1,""],[73561,1,""],[73560,1,""],[73559,1,""],[73559,3,""],[73559,0," are"],[73572,2,""],[73571,1,""],[73569,8,""],[73569,0,"to index into these"],[73588,19,""],[73595,1,""],[73595,0,", usually"],[73597,7,""],[73597,0,"but due to run-eln"],[73614,1,""],[73613,1,""],[73612,1,""],[73612,0,"length encoding, the system uses"],[73640,4,""],[73640,0,"makes ens"],[73648,1,""],[73647,1,""],[73647,0,"ste"],[73649,1,""],[73648,1,""],[73647,1,""],[73647,0,"xtensive use of binary search."],[73679,354,""],[73678,1,""],[73679,0,"> IMPACT"],[73681,0,"STATS ON "],[71698,6,""],[71698,0,"Events almost always happen"],[71725,12,""],[71725,0," causally right"],[71823,26,""],[71822,0," the parent version of $"],[71845,1,""],[71845,0,"$j$ is usually ${i}$."],[71866,13,""],[71869,16,""],[71869,0,"IDs are almost always"],[71904,95,""],[71904,0,"I"],[72824,0," When the "],[72830,4,""],[72830,0,"iterating through events, the algorihtm "],[72860,10,""],[72860,0,"algorithm almost "],[72870,7,""],[72870,0,"always works \"chunks at a time\"."],[72877,5,""],[72877,0,"processes run-length encoded"],[72906,1,""],[72923,1,""],[72922,1,""],[72922,0,"."],[72913,0,"of events "],[73553,44,""],[73552,1,""],[73551,1,""],[73552,0," This allows "],[73523,0,"("],[73523,1,""],[73522,1,""],[73522,0,", except for the inserted content itself, "],[73566,7,""],[73512,54,""],[73512,0,"The agent assignment, graph and events arrays are all"],[73586,13,""],[73565,0," individually"],[73597,0," ("],[73598,1,""],[73597,1,""],[73597,0,"- "],[73598,1,""],[73597,1,""],[73597,0," - as the p"],[73607,1,""],[73607,0,"split points for each "],[73598,31,""],[73598,0,"to improve "],[73601,8,""],[73601,0,"reduce storage size"],[73673,27,""],[73673,0,"unfortunately"],[73686,34,""],[73686,0," items "],[73687,6,""],[73687,0,"finding i"],[73687,9,""],[73669,18,""],[73669,0,"usually via a"],[72603,0,"\n// I"],[72607,1,""],[72607,0,"implies "],[72604,11,""],[72604,0,"// implies "],[72607,0,"$--"],[72609,1,""],[72608,1,""],[72607,1,""],[72607,0,"%"],[72607,1,""],[72606,1,""],[72604,10,""],[72603,1,""],[72608,0,"\n"],[72608,0,"\nThe "],[72609,4,""],[72609,0,"The"],[72608,4,""],[72607,1,""],[72613,16,""],[72613,0,"specified"],[72609,119,""],[72609,0,"The above item implies the originle"],[72643,1,""],[72642,1,""],[72642,0,"Left of rht e"],[72654,1,""],[72653,1,""],[72652,1,""],[72651,1,""],[72650,1,""],[72650,0,"the run is _[X, 51, 52, 53]_, and originRight is _[Y, Y, Y, Y]_"],[72635,0," IDs are _[50, 51, 52, 52"],[72659,1,""],[72659,0,"3]_,"],[72674,0," for each"],[72678,5,""],[72678,0," the run of items"],[72695,11,""],[72751,0,"."],[72705,1,""],[72705,0,"0"],[72709,1,""],[72709,0,"1"],[72713,1,""],[72713,0,"2"],[72752,0," ("],[72753,1,""],[72752,1,""],[72752,0," L"],[72753,1,""],[72753,0,"(Logic is per-field based on "],[72773,9,""],[72772,1,""],[72763,0,"chosen "],[72763,6,""],[72763,0,"hardcoded"],[72754,8,""],[72754,0,"The logic for encoding each field"],[72767,20,""],[72767,0," how each field is compressed is"],[72799,10,""],[72799,0," hardcoded"],[72819,0," based on common usage patterns)."],[72753,1,""],[72850,1,""],[72849,1,""],[72849,0,"."],[73626,0,"\n"],[73626,1,""],[73736,0," And "],[73737,4,""],[73737,0,"Separating the "],[73751,1,""],[73751,0,"se fields allows the \"split points\" for each array to "],[73787,18,""],[73787,0,"to be different in each r"],[73811,1,""],[73811,0,"array."],[73845,18,""],[73845,0," everything"],[73886,0,"\n\n"],[73887,1,""],[73886,1,""],[72850,0,"\n\n"],[72851,1,""],[72850,1,""],[72939,1,""],[72939,0,"\n\n\n"],[72940,0,"\nT"],[72941,1,""],[72941,0,"Dummy nodes"],[72941,11,""],[72940,1,""],[72939,1,""],[72938,1,""],[72938,0,"."],[72939,2,""],[72939,0," "],[72939,1,""],[72939,0,"\n\n"],[72886,1,""],[72886,0,", and"],[72891,2,""],[72891,0," t"],[73944,0,"\n\n"],[73913,1,""],[73945,0,"Rather than storign th"],[73966,1,""],[73965,1,""],[73964,1,""],[73963,1,""],[73962,1,""],[73962,0,"ng "],[73945,20,""],[73945,0,"Fugue is defined in terms of a tree of items"],[73950,0,"Max"],[73992,0,", with left and right parents"],[73994,27,""],[73993,1,""],[73992,1,""],[73992,0,". This tree"],[73994,9,""],[73994,0,"We instad "],[73997,7,""],[73997,0,"have "],[73997,5,""],[73997,0,"instead have an adapted variant of this algorithm"],[74037,0,"CRDT "],[74005,5,""],[74005,0,"use "],[74050,0," which places all items in a list"],[73943,0," <fugue-list>"],[74069,0," instead"],[74100,4,""],[74100,0,"flat list. The list"],[74111,8,""],[74111,0,"The list"],[74111,8,""],[74111,0,"When items are inserted, the system "],[74022,10,""],[74022,0,"a"],[74138,0,"does a linear scan - skin to "],[74159,8,""],[74159,0,"akin to an insertion sort - "],[74156,0," across the range of possible insertion positions to figure out where the new item should be placed. This scan is"],[74269,2,""],[74297,1,""],[74296,1,""],[74295,1,""],[74295,0,".\n\nThe"],[74300,1,""],[74299,1,""],[74298,1,""],[74007,4,""],[74007,0,"I"],[74014,0,", we"],[74210,10,""],[74210,0,"decide"],[74295,0,"Thius"],[74299,1,""],[74298,1,""],[74297,1,""],[74297,0,"is algorithm "],[74295,15,""],[74295,0,"As far as we know"],[74308,4,""],[74307,1,""],[74307,0," are aware, this approach was first pin"],[74345,1,""],[74345,0,"oneered in Yjs [REFERENCE]"],[74356,0,"the "],[74363,0," CRDT library"],[74388,0,". It was adapted "],[74295,110,""],[74295,0,"As far as we are aware, this approach was first pioneered in the Yjs CRDT library [REFERENCE]. It was adapted"],[74377,0,"by Kevin Jahns "],[73891,0,"\n\nThis approach is based on "],[73893,0,"R"],[73893,1,""],[73919,0,"Martin Kleppman's work "],[73934,0,"n"],[73943,0,"on optimising file"],[73957,0,"C"],[73957,1,""],[73961,0,"s"],[73961,1,""],[73957,0,"stored operations "],[73957,18,""],[73961,0," sizes for "],[73971,1,""],[73971,0," CRDTs."],[73943,3,""],[73975,0," But the gener"],[73976,13,""],[73975,1,""],[73975,0," Instead of only using run-length encoding in the s"],[74025,1,""],[74024,1,""],[74023,1,""],[74022,1,""],[74021,1,""],[74020,1,""],[74019,1,""],[74018,1,""],[74018,0,"when data is stored on disk or sent over the wire, we "],[73976,96,""],[73975,1,""],[73975,0," [REFERENCE??]"],[74056,0,"IO"],[74057,1,""],[74057,0,"n its paper, "],[74126,0," of storing the items in a tree"],[74179,20,""],[74179,0,"of FugueMax "],[74243,0,"new "],[74277,5,""],[74277,0," performs"],[74340,10,""],[74340,0,"locations "],[74373,0,"ly iserted"],[74377,0,"n"],[74447,0,"\n\n"],[74448,1,""],[74447,1,""],[74573,0," by Joseph Gentle in [RE"],[74596,1,""],[74595,1,""],[74595,0,"REFERENCE-CRDTs] for use in Autto"],[74627,1,""],[74626,1,""],[74626,0,"omerge, Sync9"],[74623,0,"the "],[74643,0,", and \""],[74649,1,""],[74648,1,""],[74647,1,""],[74646,1,""],[74645,1,""],[74644,1,""],[74643,1,""],[74643,0," and \"YjsMod\""],[74648,0,"novel "],[74662,0," C"],[74612,14,""],[74612,0,"to match the behaviour of"],[74647,1,""],[74647,0," and"],[74657,0,", as well as"],[74669,10,""],[74669,0," the"],[74684,0,"RDT. The "],[74689,4,""],[74689,0,"An early "],[74689,9,""],[74689,0,"The preprint of the Fugue paper show"],[74689,4,""],[74689,0,"An earlier "],[74732,0,"s that "],[74687,0,", "],[74688,1,""],[74687,1,""],[74687,0,". It has "],[74689,7,""],[74689,0,"Fuzzing results suggest "],[74559,2,""],[74559,0,"The list based insertion approach"],[74597,7,""],[74597,0,"modified"],[74647,22,""],[74647,0,"reimplement"],[74659,0,"the "],[74663,9,""],[74659,4,""],[74659,0,"RGA [REFERENCE]"],[74684,0," [REFERENCE] CRDTs"],[74659,0,"the "],[74706,1,""],[74706,0,". And"],[74711,15,""],[74711,0," we created the novel"],[74746,0," in the process"],[74787,0,"Sync9 is equivalent to Fugue and YjsMod is equivalent to FugueMax"],[74893,11,""],[74893,0,"proves that the list and tree forms of fugu"],[74932,4,""],[74932,0,"Fugue rae "],[74941,1,""],[74940,1,""],[74939,1,""],[74938,1,""],[74938,0,"are equivalent."],[74762,25,""],[74762,0," We believe "],[74839,0,", but neitehr c"],[74853,1,""],[74852,1,""],[74851,1,""],[74850,1,""],[74850,0,"r "],[74845,7,""],[74841,4,""],[74840,1,""],[74839,1,""],[74839,0," "],[74839,1,""],[74839,0,", and fu"],[74846,1,""],[74845,1,""],[74845,0,"fuzzing results back this up. However, this has not been proven"],[74909,1,""],[74909,0,"\n\n"],[74889,0,"claim "],[74917,99,""],[74447,0,"\n\nUsing a flat list is better for performance because of"],[74502,1,""],[74501,1,""],[74501,0,"modern CRD"],[74510,1,""],[74509,1,""],[74508,1,""],[74500,8,""],[74500,0,":\n\n- The generated F"],[74519,1,""],[74519,0,"Fugue tree is \""],[74533,1,""],[74533,0,"extremely unbalanced. Finding any item usually involves scanningthe"],[74599,1,""],[74598,1,""],[74597,1,""],[74597,0," the tree"],[74563,3,""],[74563,0,"an"],[74571,0,"at position "],[74563,3,""],[74563,0,"the "],[74583,0," $N$"],[74622,0," to position $N$."],[74622,0,", desc"],[74627,1,""],[74626,1,""],[74625,1,""],[74624,1,""],[74624,0,"and descending"],[74553,102,""],[74503,1,""],[74502,1,""],[74501,1,""],[74500,1,""],[74500,2,""],[74500,0," t"],[74549,0,". Scanning to find items in the tree is akin to scanning a linked list - which has terrible performance in modern computers due to cachin"],[74680,6,""],[74619,12,""],[74619,0,". It has"],[74676,0,"its bh"],[74681,1,""],[74680,1,""],[74679,1,""],[74678,1,""],[74677,1,""],[74676,1,""],[74676,0,"thrashing the cache."],[74676,20,""],[74676,0,"cache thrashing."],[74597,0,"linear "],[74580,0," fugue"],[74595,14,""],[74595,0,"clos"],[74598,1,""],[74597,1,""],[74596,1,""],[74595,1,""],[74595,0,"closest to"],[74813,3,""],[74813,0,"This"],[74852,9,""],[74852,0,"adapted "],[74901,11,""],[74901,0,"work wtih"],[74909,1,""],[74908,1,""],[74907,1,""],[74907,0,"ith"],[74910,4,""],[74911,0,"the "],[74960,3,""],[74960,0,"And Joseph "],[74970,4,""],[74964,6,""],[74964,0,"Gentle"],[74964,0,"Joseph "],[75024,0,", based on Yjs"],[75035,0,"some changes made to "],[75060,1,""],[75060,0,"\n\n"],[75061,0,"\n"],[75061,0,"\nA preprint of "],[75062,14,""],[75062,0,"A preprint of"],[75229,0,"\n"],[75076,1,""],[75228,0,"\nA preprint of"],[75062,14,""],[75214,0,"\n"],[75229,0," the Fugue papre"],[75244,1,""],[75243,1,""],[75243,0,"er included a proof of equivalence between the tree and list formua"],[75309,1,""],[75309,0,"lations of Fugue. However, this proof has been removed from the published version due to"],[75393,4,""],[75393,0,"to"],[75391,4,""],[75391,0,"to make the paper"],[75394,14,""],[75394,0,"shorten the paper."],[75414,1,""],[75413,1,""],[74701,0,"\n\nLinear "],[74709,1,""],[74709,0,"ly scanning the list to "],[74703,30,""],[74703,0,"There is a "],[74703,11,""],[74703,0,"The "],[74703,4,""],[74703,0,"Linear scannign ho"],[74710,11,""],[74710,0,"scanning on "],[74721,1,""],[74721,0,"ly happens when concurrently inserted "],[74737,0,"items are "],[74769,0,"at the same location in the li"],[74798,1,""],[74797,1,""],[74797,0,"final document. This is very rare in practice."],[74719,0,"is unfortunate, but it "],[74719,14,""],[74719,0,"has unfortunate performance in"],[74748,1,""],[74748,0,"mpliciations"],[74747,13,""],[74747,0,"implications"],[74867,3,""],[74867,0,"happens "],[74884,0,"ly"],[89917,0,"\n\n"],[89918,0,"\n"],[89918,0,"== FugueMax "],[89921,0,"The List formulation of "],[89953,1,""],[89953,0,"\n\nfunction integrate(ctx: EditContext, cg: causalGraph.CausalGraph, newItem: Item, cursor: DocCursor) {\n  // If there's no concurrency, we don't need to scan.\n  if (cursor.idx >= ctx.items.length || ctx.items[cursor.idx].curState !== ItemState.NotYetInserted) return\n\n  // Sometimes we need to scan ahead and maybe insert there, or maybe insert here.\n  let scanning = false\n  let scanIdx = cursor.idx\n  let scanEndPos = cursor.endPos\n\n  const leftIdx = cursor.idx - 1\n  const rightIdx = newItem.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, newItem.rightParent)\n\n  while (scanIdx < ctx.items.length) {\n    let other = ctx.items[scanIdx]\n\n    // When concurrent inserts happen, the newly inserted item goes somewhere between the\n    // insert position itself (passed in through cursor) to the next item that existed\n    // when which the insert occurred. We can use the item's state to bound the search.\n    if (other.curState !== ItemState.NotYetInserted) break\n\n    if (other.opId === newItem.rightParent) throw Error('invalid state')\n\n    // The index of the origin left / right for the other item.\n    let oleftIdx = other.originLeft === -1 ? -1 : findItemIdx(ctx, other.originLeft)\n    if (oleftIdx < leftIdx) break\n    else if (oleftIdx === leftIdx) {\n      let orightIdx = other.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, other.rightParent)\n\n      if (orightIdx === rightIdx && causalGraph.lvCmp(cg, newItem.opId, other.opId) < 0) break\n      else scanning = orightIdx < rightIdx\n    }\n\n    scanEndPos += itemWidth(other.endState)\n    scanIdx++\n\n    if (!scanning) {\n      cursor.idx = scanIdx\n      cursor.endPos = scanEndPos\n    }\n  }\n\n  // We've found the position. Insert where the cursor points.\n}"],[89954,0,"\n```tryp"],[89961,1,""],[89960,1,""],[89959,1,""],[89959,0,"ypescript"],[91701,0,"```"],[91698,0,"\n  ctx.insert(newItem, cursor)"],[90071,55,""],[90180,83,""],[90299,5,""],[90299,0,"l"],[90266,5,""],[90266,0,"l"],[90296,0,"e"],[90267,0,"e"],[90298,0,"t"],[90268,0,"t"],[89954,0,"\n"],[89954,0,"\nThis integrate "],[89960,10,""],[89960,0,"function below "],[89955,5,""],[89955,0,"The "],[89974,0,"is a reimplica"],[89987,1,""],[89986,1,""],[89985,1,""],[89985,0,"ele"],[89987,1,""],[89986,1,""],[89986,0,"mentation of FugueMax, exprese"],[90015,1,""],[90015,0,"sed using "],[90019,6,""],[90019,0,"as a list insertion "],[90038,1,""],[90038,0,"."],[90024,14,""],[90023,1,""],[90022,1,""],[90021,1,""],[90020,1,""],[90019,1,""],[90019,0,"as a list insertion "],[90038,1,""],[90039,0," See @fug"],[90045,3,""],[90045,0,"fugue-list for commentary."],[90056,0,"above "],[89999,0,"the logic of "],[90090,0,"\n\nnotab"],[90092,5,""],[90092,0,"Notably,"],[90092,8,""],[90091,1,""],[90090,1,""],[74899,0,"\n\nThe \""],[74905,1,""],[74905,0,"_Si"],[74907,1,""],[74906,1,""],[74906,0,"side_ field ($in {\"L\", \"R\"}$)"],[74919,0,"side "],[74919,5,""],[74935,0," in the fugue paper"],[74943,1,""],[74943,0,"F"],[74954,0," is "],[74901,0,"Strangely, t"],[74913,1,""],[74901,12,""],[74901,0,"T"],[74936,0,"specified "],[74968,0,"not needed in "],[74968,14,""],[74968,0,"redundant"],[74968,9,""],[74968,0,"not needed in this fom"],[74989,1,""],[74989,0,"rmulation of the algorithm."],[74968,0,"also "],[74719,40,""],[74719,0,"sounds like it would be slow"],[74756,12,""],[74756,0,"is only needed in practice"],[74756,17,""],[74756,0,"only happensi"],[74768,1,""],[74768,0," in"],[74786,10,""],[74797,1,""],[74796,1,""],[74796,0," iotem"],[74801,1,""],[74800,1,""],[74799,1,""],[74798,1,""],[74798,0,"tems are"],[74885,12,""],[74884,1,""],[74884,0," in "],[74887,1,""],[74886,1,""],[74885,1,""],[74884,1,""],[74884,0,". Bu"],[74887,1,""],[74886,1,""],[74885,1,""],[74703,0,"// "],[74703,3,""],[74701,0,"\n\nThe fom"],[74709,1,""],[74708,1,""],[74707,1,""],[74707,0,"flat"],[74707,4,""],[74707,0,"insertion srot "],[74721,1,""],[74720,1,""],[74719,1,""],[74718,1,""],[74718,0,"ort fomr"],[74725,1,""],[74724,1,""],[74724,0,"rmulation is also re"],[74743,1,""],[74742,1,""],[74742,0,"dramatically simpler than FugueMax."],[74734,43,""],[74734,0,"also requires many "],[74748,5,""],[74748,0,"much less code. FugueMax"],[74764,0,"The tree version of "],[74792,0," "],[74768,0,"\"s"],[74769,1,""],[74768,1,""],[74767,1,""],[74766,1,""],[74765,1,""],[74764,1,""],[74764,0,"Weidner's \"simple\" implementation of "],[74801,16,""],[74810,0,"in Typescript is 594 lines of code. "],[74824,3,""],[74824,0,"reqir"],[74828,1,""],[74827,1,""],[74827,0,"uires "],[74852,0,"The list forml"],[74865,1,""],[74865,0,"ulation is less than 100 lines, w"],[74897,1,""],[74896,1,""],[74895,1,""],[74895,0,". The core insertion function is listed "],[74703,232,""],[74703,0,"The insertion sort formulation also requires much less code. Weidner's \"simple\" implementation of FugueMax in Typescript requires 594 lines of code. The list formulation is less than 100 lines. The core insertion function is listed"],[90294,0," <list-fuguemax-code>"],[74934,0," in #"],[74938,1,""],[74938,0,"@list"],[74939,4,""],[74939,0,"list-fuguemax-code."],[74928,0,"only 40 lines long, and is "],[74955,7,""],[74955,0,"included below "],[91032,325,""],[91031,1,""],[91103,1,""],[91030,0,"\n    "],[91031,4,""],[91104,0,"\n    "],[91105,4,""],[74928,4,""],[74928,0,"about"],[74813,10,""],[74764,0,"In Typescript, "],[74824,4,""],[74851,0," [REFERENCE"],[74853,9,""],[74853,0,"LINK TO fugue-simple]"],[74876,0,"In comparison, "],[74891,1,""],[74891,0,"t"],[74911,0," of the same algorithm re"],[74935,1,""],[74934,1,""],[74934,0,"needs"],[74939,3,""],[75082,17,""],[75093,0,"in practice "],[75120,12,""],[75205,20,""],[75205,0,"is var"],[75210,1,""],[75209,1,""],[75209,0,"ery rare."],[75060,0,"// "],[76124,0,"\n"],[76124,0,"\nThe "],[76125,4,""],[76125,0,"The"],[76056,2,""],[76056,0,"\n"],[76127,0," most common"],[75703,0,"\n"],[75703,0,"\n"],[75703,1,""],[75702,1,""],[75858,0,"This approach is also described in [CRDTS GO BRRR] "],[75908,1,""],[75908,0,". "],[75874,5,""],[75888,0,"the "],[75907,0," blob"],[75911,1,""],[75911,0,"g post"],[75918,0," And"],[75921,1,""],[75920,1,""],[75919,1,""],[75918,1,""],[75918,0," And "],[75923,2,""],[75923,0,"a"],[75858,61,""],[75702,0," This approach is described in the [CRDTS GO BRRR] blog post. "],[75763,1,""],[75919,5,""],[75919,0,"A"],[75948,0," also"],[75949,4,""],[75948,1,""],[76189,11,""],[76189,0,"operations performend "],[76210,1,""],[76209,1,""],[76208,1,""],[76207,1,""],[76207,0,"ed on the state \"tree\" (actually a "],[76217,25,""],[76217,0,"liste i"],[76223,1,""],[76222,1,""],[76221,1,""],[76221,0," of items are:"],[76188,0," common"],[76242,0,"\n\n- Insert"],[76076,10,""],[76076,0,"final "],[76110,0," before publication"],[76261,6,""],[76259,2,""],[76259,0,"-"],[76200,60,""],[76200,0,"The list of items "],[76204,5,""],[76204,0,"state "],[76204,0,"internal "],[76218,0," ("],[76219,1,""],[76218,1,""],[76218,10,""],[76218,0," needs to efficiently supprot f"],[76248,1,""],[76247,1,""],[76246,1,""],[76245,1,""],[76244,1,""],[76244,0,"ort the following operations:\n\n- _prepare_: The prepare function maps from insert o"],[76319,8,""],[76319,0,"raw e"],[76323,1,""],[76323,0,"position (eg position 50)"],[76319,0,"a "],[76333,0," in the document"],[76366,0," to the "],[76370,4,""],[76370,0,"a \"C"],[76373,1,""],[76372,1,""],[76371,1,""],[76309,0,"needs to fin"],[76309,12,""],[76312,1,""],[76309,0,"neesd to "],[76309,8,""],[76308,1,""],[76312,0,"s positions"],[76314,0,"from raw "],[76332,21,""],[76332,0," "],[76369,1,""],[76309,0,"new"],[76311,1,""],[76311,0,"eds to find the items "],[76333,60,""],[76332,1,""],[76331,1,""],[76331,0,"s at some numberic"],[76326,0," ID of the "],[76336,1,""],[76351,8,""],[76351,0,"numeric position in the document. For inserts,"],[76385,12,""],[76385,0,"Delete events "],[76385,0,"For "],[76288,0,"In order to generate the "],[76300,13,""],[76300,0,"translate a raw message"],[76316,7,""],[76316,0,"event into a CRDT message, "],[76343,1,""],[76343,0,"t"],[76373,19,""],[76373,0,"lookup"],[76378,1,""],[76377,1,""],[76377,0," up the position"],[76385,8,""],[76385,0,"event's position in the tree "],[76413,1,""],[76413,0,". "],[76415,66,""],[76415,0,"For de"],[76415,6,""],[76415,0,"D"],[76415,1,""],[76415,0,"Delete events simply look up the "],[76393,0,"numeric "],[76456,0,"position to find the ID of the corresponding item. Insert events look up the IDs of the items immediately before and immediately after the specified position, skipping any items in "],[76636,1,""],[76635,1,""],[76634,1,""],[76634,0,"where #"],[76640,1,""],[76640,0,"$sp = mon("],[76649,1,""],[76649,0,"o(\"NotInsertedYet\")$. The position"],[76671,12,""],[76671,0,"For eg-walker, the position is specified in terms of its position in $"],[76740,1,""],[76740,0,"#vp."],[76740,0,"the documenta"],[76752,1,""],[76752,0," at "],[76759,0,", using "],[76759,8,""],[76760,0,"\n- _effect_: The effector function takes conve"],[76795,11,""],[76795,0,"c"],[76795,1,""],[76795,0,"takes the ID of the "],[76795,20,""],[76795,0,"converts the other way - looking up the ID"],[76820,17,""],[76820,0,"finding the item i"],[76837,1,""],[76837,0,"with the specified"],[76837,18,""],[76837,0,"an "],[76839,1,""],[76838,1,""],[76837,1,""],[76837,0,"an ID as specified in a CRDT mess"],[76819,51,""],[76819,0," converting from CRDT "],[76836,5,""],[76836,0,"item ID (a de"],[76848,1,""],[76847,1,""],[76846,1,""],[76845,1,""],[76845,0,"either a delete message's target or a"],[76227,0," be able to "],[76228,11,""],[76227,1,""],[76273,0,"\n\n- Lookup a position in $vp$"],[76301,1,""],[76300,1,""],[76299,1,""],[76298,1,""],[76298,0,"#vp "],[76301,1,""],[76277,7,""],[76277,0,"Convert "],[76287,0,"numeric document "],[76319,0,")"],[76313,0,"("],[76321,0," into "],[76322,5,""],[76322,0,"into the corresponding CRDT"],[76277,7,""],[76277,0,"Look up"],[76322,27,""],[76322,0,"to find the CRDT"],[76334,0,"ID of the "],[76348,0," items at that location. THis is "],[76373,8,""],[76373,0,"This is used by _prepare_.\n- Modify"],[76399,0,"\n- Look up an ID"],[76410,3,""],[76410,0,"the "],[76416,0," of a CRDT item and either:\n  - "],[76446,2,""],[76444,2,""],[76443,1,""],[76442,1,""],[76436,6,""],[76436,0,"modify the tree at that location:\n  - _"],[76474,1,""],[76474,0,"The _effect_ function inserts new items between "],[76514,8,""],[76514,0,"at this location"],[76474,0,"When processing e"],[76490,1,""],[76490,0,"an insert event, "],[76507,1,""],[76507,0,"t"],[76563,0,"\n  - "],[76564,4,""],[76564,0,"  - Both the _effect_ and _set"],[76590,4,""],[76590,0,"_setPrepareVersion_ functions modify the state of "],[76620,0,"needs to "],[76624,1,""],[76648,0,"an item based on its ID."],[76672,9,""],[76673,609,""],[76673,0,"\nTo "],[76674,3,""],[76674,0,"Both of these lookups can "],[76674,26,""],[76674,0,"Both of these lookups can"],[76563,0,". "],[76564,1,""],[76563,1,""],[76563,0,", and needs to return the location in the document at veri"],[76620,1,""],[76620,0,"sion $"],[76625,1,""],[76625,0,"#ve, based on the "],[76642,1,""],[76641,1,""],[76640,1,""],[76639,1,""],[76639,0,"the current state #se of all items in the list."],[76588,0," transformed position"],[76609,25,""],[76601,0,"document "],[76827,0," be performen"],[76839,1,""],[76838,1,""],[76838,0,"ed efficiently by "],[76802,0,"// "],[76802,57,""],[76802,0,"// Both of these lookups can be performed efficiently by"],[76801,0,"\n"],[76801,0,"\nWe have made a "],[76816,1,""],[76816,0,"n efficient, somewhat exotic data structure for"],[76862,1,""],[76861,1,""],[76860,1,""],[76860,0,"which can perform all fo these"],[76882,8,""],[76882,0,"of tehs"],[76888,1,""],[76887,1,""],[76886,1,""],[76886,0,"hse"],[76888,1,""],[76887,1,""],[76887,0,"ese events in *"],[76901,1,""],[76901,0,"$O_"],[76903,1,""],[76903,0,"(log n) "],[76910,1,""],[76910,0,"$ time."],[76909,0,")"],[76908,0,"("],[76907,1,""],[76907,0," "],[76910,1,""],[76908,1,""],[76917,0,"\n\nThe data structure works like this:"],[76938,16,""],[76938,0,"contains 2 elements: A custom B-tree and a "],[76937,44,""],[76937,0," works using 2 custom B-trees."],[76952,7,""],[76952,0,"modified "],[76961,1,""],[76961,0,"b"],[76968,1,""],[76968,0,":\n\n1. The core b-tree stores all i"],[77001,1,""],[77001,0,"items in "],[77009,1,""],[77009,0," document order."],[77001,0,"run0-"],[77005,1,""],[77004,1,""],[77004,0,"-lle"],[77007,1,""],[77006,1,""],[77006,0,"ength encoded "],[77044,0," Each item "],[77045,10,""],[77045,0,"The internal nodes"],[77045,18,""],[77045,0,"All internal nodes store the number fo"],[77082,1,""],[77081,1,""],[77081,0,"of"],[77045,5,""],[77045,0,"I"],[77066,13,""],[77066,0,"2 lengths"],[77045,0,"Fo"],[77046,1,""],[77045,1,""],[77045,0,"For eg-walker, "],[77060,1,""],[77060,0,"i"],[77045,16,""],[77045,0,"I"],[77059,0," each"],[77070,0," the length"],[76878,12,""],[76878,0,"any of these"],[76916,0,", where n is the number of items currently in the tree"],[76925,0,"$"],[76924,0,"$"],[76968,4,""],[76968,0,"data structure"],[77110,0," Leaf nodes store a list of items, "],[77144,1,""],[77143,1,""],[77143,0,", each with two state variables $$"],[77176,1,""],[77175,1,""],[77175,0,"#sp and #se."],[77202,0," in the tree"],[77214,32,""],[77214,0," store the length"],[77129,5,""],[77129,0," fix"],[77129,4,""],[77129,0," list"],[77145,9,""],[77145,0,"alongside "],[77154,5,""],[77145,9,""],[77145,0,"each with"],[77227,0," of "],[77221,0,"aggregate "],[77241,0,"all paren"],[77245,5,""],[77245,0,"children at v"],[77257,1,""],[77254,3,""],[77254,0,"based"],[77254,5,""],[77254,0,"at "],[77254,3,""],[77143,1,""],[77143,0,". Each item has"],[77158,10,""],[77158,0," two"],[77159,0,"our "],[77194,0,", representing the state at $"],[77222,1,""],[77222,0,"#vp and #ver"],[77233,1,""],[77233,0," respectively"],[77309,0,"of their "],[77285,10,""],[77317,0,"at versions #vp and #ve. The length is the "],[77356,4,""],[77356,0,"simply the sum of the length of all children with state #"],[77412,1,""],[77412,0,"`Ins`"],[77281,0,"two length variables: "],[77303,1,""],[77303,0,"T"],[77303,1,""],[77302,1,""],[77302,0,"\n-"],[77303,1,""],[77303,0,"  - T"],[77353,1,""],[77357,0,", based on #se"],[77371,5,""],[77369,2,""],[77369,0,"se\n  - The length of all children "],[77325,9,""],[77393,0," at version"],[77408,0,", based on S"],[77419,1,""],[77419,0,"#se"],[77361,1,""],[77361,0,"p"],[77037,325,""],[77037,0,"1. The core b-tree stores all run-length encoded items in document order. Leaf nodes store a list of items. Each item has our two state variables #sp and #se, representing the state at #vp and #ve respectively. Internal nodes in the tree store two length variables: - The length of all children at version #vp, based on #sp"],[77302,2,""],[77301,1,""],[77301,0,":"],[77302,2,""],[77302,0," t"],[77344,56,""],[77344,0," and"],[77362,0," the child state at"],[77384,1,""],[77384,0,"p and $s"],[77391,1,""],[77390,1,""],[77390,0,"#se respectively"],[77408,3,""],[77408,0,"In each case, the"],[77433,0,"of a node "],[77443,2,""],[77443,0,"is"],[77495,6,""],[77495,0," where the associated state variable is set to"],[77547,0,".\n2. "],[77549,3,""],[77549,0,"2."],[77055,0,"*"],[77044,0,"*"],[77553,0," A *M"],[77557,1,""],[77557,0,"market tr"],[77565,1,""],[77564,1,""],[77563,1,""],[77562,1,""],[77562,0,"r tree* is used"],[77037,3,""],[77547,0,"\n\n"],[77109,1,""],[77109,0,"\n\n- "],[77249,1,""],[77249,0,"\n0 "],[77251,1,""],[77250,1,""],[77250,0,"- "],[77305,1,""],[77305,0," - "],[77307,1,""],[77306,1,""],[77305,1,""],[77305,0,", representing"],[77425,15,""],[77425,0,"T"],[77435,10,""],[77438,7,""],[77442,0," recursive"],[77486,5,""],[77526,7,""],[77532,0,"\n\nThe core b-tree is used fo"],[77550,10,""],[77550,0,"can efficiently lookup u"],[77573,1,""],[77573,0,"items at positions"],[77582,0,"either "],[77582,7,""],[77573,0,"any "],[77581,1,""],[77585,9,""],[77585,0,"gi"],[77586,1,""],[77585,1,""],[77584,1,""],[77583,1,""],[77582,1,""],[77582,0,"given a position at $"],[77602,1,""],[77602,0,"#p"],[77603,1,""],[77603,0,"vp by traversing down the tree. Any posi"],[77635,8,""],[77635,0,"Any posi"],[77635,8,""],[77635,0,"And traversing back up the rtee"],[77662,4,""],[77662,0,"tree will reveal the "],[77667,4,""],[77667,0,"can"],[77670,12,""],[77670,0," be used to calculate "],[77581,0," it"],[77583,1,""],[77583,0,"n #$"],[77586,1,""],[77585,1,""],[77585,0,"$log n$ time"],[77708,0,"the item"],[77708,8,""],[77708,0,"any item's position at version $v"],[77740,1,""],[77739,1,""],[77739,0,"#ve."],[77682,0," and aggregating pre"],[77701,1,""],[77700,1,""],[77699,1,""],[77699,0,"the size of previous items"],[77654,96,""],[77689,1,""],[77689,0," can be calculated by traversing back up the tree and aggregating the size of previous items."],[77767,15,""],[77767,0,"all previous items."],[77694,0,"also "],[77712,0," in $log n$ time"],[77808,1,""],[77809,3,""],[77035,0," a _core b-tree_ and _mark"],[77044,2,""],[77059,0,"er tree_."],[77067,1,""],[77067,0,":"],[77067,1,""],[77067,0,"."],[77865,0," "],[77842,24,""],[77842,0,"A *marker tree* is used"],[77683,0," Once found, items can be "],[77684,25,""],[77684,0,"The ID of any item"],[77698,4,""],[77698,0,"visited i"],[77688,19,""],[77687,1,""],[77686,1,""],[77685,1,""],[77684,1,""],[77683,1,""],[77865,0," to map from "],[77858,20,""],[77858,0,"stores a map from a node"],[77876,6,""],[77876,0,"each node's "],[77880,8,""],[77880,0," ID in the tree to that item's "],[77898,13,""],[77898,0," a pointer to the leaf node in the core b-rtee"],[77943,1,""],[77942,1,""],[77941,1,""],[77940,1,""],[77940,0,"tree storing "],[77945,8,""],[77945,0,"which stores that specific node."],[77972,4,""],[77972,0,"item"],[77972,4,""],[77972,0,"ID"],[77975,0," "],[77876,5,""],[77878,0,"s"],[77842,130,""],[77842,0,"A *marker tree* stores a map from IDs in the tree to a pointer to the leaf node in the core b-tree which stores that specific ID."],[77841,0,"\nFor each ID in the tree, the"],[77870,3,""],[77870,0," "],[77898,4,""],[77898,0,"its"],[77904,1,""],[77904,0," "],[77905,17,""],[77905,0,"to a"],[77894,90,""],[77894,0,"pointer for that "],[77901,10,""],[77901,0," to thje "],[77909,1,""],[77908,1,""],[77907,1,""],[77907,0,"e leaf node in the core b-tree. Care is taken to update this data structure whenever b"],[77992,1,""],[77992,0,"core b-tree nodes are split or joined."],[77939,0,"A lot of "],[77948,1,""],[77948,0,"c"],[78039,0,"\n\nFor _fugue_"],[78051,1,""],[78051,0,"-crdt_"],[78044,0," our pure CRDT based implementation,"],[78093,0," "],[78093,1,""],[78093,0,", "],[78041,54,""],[78041,0,"For our pure CRDT based implementation, _fugue-crdt_,"],[78040,0,"\n"],[78040,0,"\nThe "],[78044,1,""],[78043,1,""],[78042,1,""],[78041,1,""],[78041,0,"Both b-trees store all items "],[78054,0,"internally run-length co"],[78077,1,""],[78076,1,""],[78076,0,"encode"],[78082,5,""],[78092,1,""],[78092,0,"."],[78087,0,"stored "],[78100,0," This dramatically"],[78106,12,""],[78106,0,"contributes a great deal to the complexity of the coce"],[78159,1,""],[78158,1,""],[78158,0,"de."],[77566,0,"\n"],[77566,0,"\nThis data structure "],[77567,20,""],[77566,1,""],[77565,1,""],[77840,0,"\n\nThis data structure is described in more detail"],[77865,0,"based on Pea"],[77876,1,""],[77875,1,""],[77875,0,"eice Trees "],[77874,5,""],[77874,0,"Piece"],[77885,0," @vsc"],[77887,3,""],[77887,0,"vscode-buffer"],[77886,0,"(described"],[77887,9,""],[77886,1,""],[77885,1,""],[77885,0,", described by "],[77887,13,""],[77887,0,"de"],[77888,1,""],[77887,1,""],[77887,0,"d"],[77887,1,""],[77887,0,"described in "],[77914,0,". "],[77915,1,""],[77915,0," They are also"],[77954,0," in [CRDTS GO BRRR]."],[78043,0,"corresponding "],[78139,0," correctly"],[78197,0,"\n\nThe marker tree allows lookups by ID, which is needed when "],[78253,5,""],[78253,0,"for "],[78253,4,""],[78253,0,"by both "],[78230,0,"into the marker tr"],[78239,9,""],[78239,0,"tree "],[78275,0,"_effect_ and _pre"],[78288,4,""],[78288,0,"_setPrepareVersion_."],[78260,0,"used"],[78264,6,""],[78353,7,""],[78365,0,", unfortunately,"],[78381,56,""],[78381,0," makes the code very complex."],[78412,5,""],[78412,0,"O"],[78460,1,""],[78460,0," "],[78446,1,""],[78460,0,"uses the same data structure implementation, but it "],[78509,3,""],[78509,0,"each node only has a single state variable #se and l"],[78560,1,""],[78560,0,"associated length."],[78410,0," Tje"],[78413,1,""],[78412,1,""],[78412,0,"he b-tree implementation is nearly 3000 lines of code."],[78411,0,"Including tests, our "],[78432,4,""],[78198,0,"\n"],[78198,0,"\n> DIAGRAM HERE"],[78726,350,""],[78727,1,""],[78727,0,"\n"],[78773,0,"\n"],[78773,0,"\nThe tra"],[78774,7,""],[78774,0,"Performance"],[78774,0,"We have afou"],[78785,1,""],[78784,1,""],[78783,1,""],[78782,1,""],[78782,0,"found that the "],[78797,1,""],[78797,0,"p"],[78808,0," of eg-walker often depends on tje "],[78842,1,""],[78841,1,""],[78840,1,""],[78840,0,"he traver"],[78774,20,""],[78774,0,"T"],[78803,27,""],[78803,0,"greatly d"],[78810,2,""],[78803,7,""],[78803,0,"often depends on the traver"],[78774,0,"In col"],[78779,1,""],[78779,0,"mplex casu"],[78788,1,""],[78787,1,""],[78786,1,""],[78785,1,""],[78785,0,"causal graphs, "],[78774,2,""],[78774,0,"When traversing "],[78789,1,""],[78813,1,""],[78813,0,"t"],[78841,6,""],[78850,13,""],[78850,0,"a great deal on the traversal order. Often "],[78887,6,""],[78887,0,"Performance often fa"],[78906,1,""],[78905,1,""],[78905,0,"varies by as much as "],[78885,41,""],[78885,0,"."],[78866,0,"chosen "],[78873,4,""],[78889,0," TODO: DATA!\n\n"],[78902,1,""],[78901,1,""],[78901,0," "],[78890,11,""],[78889,1,""],[78889,0,"\n> TODO: DATA!"],[78890,14,""],[78890,0,"> TODO: DATA!"],[78889,0,"\n"],[78889,0," Our current implementation"],[78889,0," After much experimentation. "],[78917,1,""],[78916,1,""],[78916,0,", "],[78918,2,""],[78918,0,"o"],[78944,0," chooses "],[78889,0," The traversal order has no affect "],[78917,7,""],[78917,0,"effect on the transform"],[78889,51,""],[78953,0,"a "],[78945,10,""],[78945,0,"traversese "],[78955,1,""],[78954,1,""],[78954,0," the graph "],[78959,0,"event "],[78971,0,"as follows:\n\n1. Each node in the "],[78992,12,""],[78992,0,"event in the graph is assigned a "],[79024,1,""],[79024,0,"n estimated cost, "],[79041,1,""],[79040,1,""],[79040,0," based on the distance from that event to the "],[79053,0," total"],[79068,0," (measure i"],[79078,1,""],[79077,1,""],[79077,0,"d in the numbner "],[79093,1,""],[79092,1,""],[79091,1,""],[79090,1,""],[79090,0,"er of events)"],[79127,0,"final merged version."],[79040,0,". The cost is"],[79053,9,""],[79108,5,""],[79108,0,"bewe"],[79111,1,""],[79110,1,""],[79110,0,"tween "],[79126,0," and"],[79159,0," IO"],[79161,1,""],[79161,0,"e, the cost of event $i$ is "],[79188,1,""],[79187,1,""],[79186,1,""],[79186,0,"when merging $V_0$ and $V_m$ is $||$"],[79220,0,"ceil(V_0 union V_m) - ceil(i)"],[79248,0,"}"],[79247,0,"{"],[79253,0,"."],[79219,1,""],[79219,0,"sigma "],[79219,5,""],[79219,0,"sum"],[79219,3,""],[79219,0,"sig"],[79219,3,""],[79219,0,"Sigma"],[79256,1,""],[79256,0,")"],[79225,0,"("],[79260,0,"\n"],[78984,2,""],[78984,0,"First, "],[78991,2,""],[78991,0,"e"],[79265,0,"\nThe event graph is then traversed in a "],[79300,5,""],[79300,0,"from the first version "],[79300,23,""],[79300,0,"in a depth-first search from "],[79324,5,""],[79324,0,"travelling from the first f"],[79350,1,""],[79350,0,"version"],[79324,11,""],[79333,13,""],[79333,0,"initial version $C$. The node"],[79358,4,""],[79357,1,""],[79356,1,""],[79355,1,""],[79355,0,"he node"],[79358,4,""],[79358,0,"child node with the lower cost is always expanded first."],[79429,0," "],[79429,1,""],[79428,1,""],[79428,0," HS"],[79430,1,""],[79429,1,""],[79429,0,"SHOWING WHY THIS HELPS"],[78889,1,""],[78889,0,"\n\n"],[78889,0," The reason is that the _setPrepare"],[78913,11,""],[78913,0,"__"],[78914,0,"prep"],[78913,6,""],[78913,0,"_setPrepareVersion_fun"],[78934,1,""],[78933,1,""],[78933,0," "],[78933,1,""],[78932,1,""],[78932,0," function "],[78908,0," a great deal of run"],[78927,1,""],[78926,1,""],[78925,1,""],[78925,0,"time is spent in"],[78974,1,""],[78974,0,". I"],[78976,1,""],[78976,0,"An idea "],[78983,1,""],[78983,0,"l traversal order will visit events in an order that minimises the total distance"],[79056,8,""],[79056,0,"number of nodes which "],[79050,6,""],[79072,0,"need their state $"],[79089,1,""],[79089,0,"#sp "],[79092,1,""],[79092,0," mo"],[79094,1,""],[79093,1,""],[79092,1,""],[79092,0," modified by #"],[79105,1,""],[79105,0,"@"],[79105,1,""],[79105,0,"$set"],[79108,1,""],[79107,1,""],[79106,1,""],[79105,1,""],[79102,3,""],[79102,0,"in"],[79103,1,""],[79102,1,""],[79101,1,""],[79101,0,"."],[79077,0,"to have "],[79109,0," by _sep"],[79116,1,""],[79113,3,""],[79113,0,"_setPrepareVersion_"],[78889,1,""],[78889,0,"\n\n"],[78975,0,", toggling the "],[78977,13,""],[78977,0,"l"],[78977,1,""],[78977,0,"g"],[78977,1,""],[78977,0,"modifying the state of events before "],[79007,7,""],[79006,1,""],[79000,0,"previously visited "],[79051,5,""],[79051,0," "],[79051,1,""],[79057,0,"s"],[79077,5,""],[79077,0," which"],[79181,0," We "],[79184,1,""],[79183,1,""],[79182,1,""],[79182,0,"This problem appears "],[79195,8,""],[79195,0,"seems to be a variant of the travelling salesman problem.\n\nM"],[79254,1,""],[79253,1,""],[79252,1,""],[79194,6,""],[79194,0," appears"],[79187,7,""],[79182,5,""],[79182,0,"Optimising r"],[79193,1,""],[79193,0,"traversal order"],[79276,4,""],[79276,0,"a lot of"],[79768,0,"to"],[79769,1,""],[79768,1,""],[79768,0,"estimated "],[79738,0,"Whene"],[79742,1,""],[79742,0," the algorithm chooses which node"],[79765,10,""],[79756,9,""],[79756,0," has a "],[79757,6,""],[79737,0," N"],[79738,1,""],[79738,0,"Events with multiple parents are only visited when all of their "],[79784,18,""],[79784,0,"after the last of their parents is visited."],[79771,5,""],[79784,4,""],[79784,0," their"],[79795,9,""],[79802,1,""],[79814,0," Events wtih "],[79826,1,""],[79825,1,""],[79824,1,""],[79823,1,""],[79823,0,"ith multiple choi"],[79839,1,""],[79838,1,""],[79815,23,""],[79815,0,"When an event has multiple children, the children are visited "],[79877,43,""],[79877,0,"in order"],[79877,8,""],[79877,0,"from the"],[79884,1,""],[79883,1,""],[79882,1,""],[79881,1,""],[79881,0," lowest cost to highstest"],[79897,9,""],[79897,0,"high"],[79882,0,"the child with "],[79903,0," estimated"],[79921,11,""],[79921,0," highest"],[79944,26,""],[79944,0,"."],[79946,0,"\n"],[79946,0,"\nThis cal"],[79947,8,""],[79947,0,"Calculating an ideal"],[79959,8,""],[79959,0,"the traversal order takes "],[79959,0,"this "],[79964,4,""],[79986,0,"a significant amount of time - "],[80016,1,""],[80015,1,""],[80015,0," "],[80015,1,""],[80015,0,"for very complex c"],[80032,1,""],[80032,0,"event graphs."],[81286,14,""],[81272,14,""],[81272,0,"== Benchmarks"],[81272,13,""],[81272,0,"== Benchmarks <benchmarking>"],[80097,0," <benchmarking>"],[81284,34,""],[81284,0,"\n"],[81304,0,"As mentioned in @opt"],[81321,3,""],[81321,0,"opt-rle, "],[81330,1,""],[81330,0,"r"],[81330,5,""],[81330,0,"real "],[81396,21,""],[81396,0,"we"],[81307,9,""],[81307,0,"discussed"],[81635,0,"Rather than benchmark our systems using artificial data sets, "],[81697,25,""],[81705,4,""],[81705,0,"slowly"],[81721,1,""],[81720,1,""],[81719,1,""],[81719,0,"ed"],[81719,2,""],[81719,0,"ing"],[81705,6,""],[81705,0,"been slowly"],[81729,0," standardised"],[81729,13,""],[81717,10,""],[81717,0,"building"],[81734,13,""],[81749,0," in a standard format"],[81735,0,"real "],[81986,10,""],[95480,0,"\"Rerfere"],[95487,1,""],[95486,1,""],[95485,1,""],[95484,1,""],[95483,1,""],[95482,1,""],[95481,1,""],[95480,1,""],[95492,0," "],[95492,1,""],[95492,0," title: \"References\","],[95492,1,""],[95492,0,"\n  "],[95515,1,""],[95515,0,"\n  "],[95531,0,"\n  "],[95532,2,""],[82753,17,""],[82746,0,"// "],[82734,0,"// "],[82721,0,"// "],[82709,0,"// "],[82688,0,"// "],[82685,0,"// "],[82601,0,"// "],[82531,0,"// "],[82443,0,"// "],[82398,0,"// "],[82375,0,"// "],[82776,3,""],[82761,3,""],[82745,3,""],[82730,3,""],[82706,3,""],[82700,3,""],[82613,3,""],[82540,3,""],[82449,3,""],[82401,3,""],[82375,3,""],[82373,0," Unfortunately, the only traces"],[82389,15,""],[82389,0,"we don't have any recordings of e"],[82420,2,""],[82420,0," character by"],[82432,1,""],[82431,1,""],[82430,1,""],[82430,0,"-by-character edits made this way "],[82463,1,""],[82406,14,""],[82407,0,"recordings of "],[82463,0," because we don't know any tools"],[82464,31,""],[82464,0,"yet. So we've written a script to extract editing traces back out of git."],[82302,0,"_"],[82288,0,"_"],[82408,14,""],[82436,1,""],[82436,0,"ing traces"],[82460,4,""],[82460,0,"y"],[82460,1,""],[82460,0," yet,"],[82465,3,""],[82465,0," s"],[82517,0," in this style"],[82495,36,""],[82859,0,"\n- generic CRDT replay #"],[82882,1,""],[82882,0,"@gene"],[82883,4,""],[82883,0,"generic-crdt-replay"],[625,0,"// "],[621,0,"// "],[580,0,"// "],[555,0,"// "],[538,0,"// "],[532,0,"// "],[497,0,"// "],[477,0,"// "],[460,0,"// "],[437,0,"// "],[430,0,"// "],[655,3,""],[648,3,""],[604,3,""],[576,3,""],[556,3,""],[547,3,""],[509,3,""],[486,3,""],[466,3,""],[440,3,""],[430,3,""],[94117,0,"// "],[94114,0,"// "],[94088,0,"// "],[94083,0,"// "],[94016,0,"// "],[93954,0,"// "],[93908,0,"// "],[93863,0,"// "],[93856,0,"// "],[93811,0,"// "],[93765,0,"// "],[93711,0,"// "],[93656,0,"// "],[93619,0,"// "],[93576,0,"// "],[93543,0,"// "],[93506,0,"// "],[93468,0,"// "],[93436,0,"// "],[93384,0,"// "],[93333,0,"// "],[93312,0,"// "],[93233,0,"// "],[93181,0,"// "],[93127,0,"// "],[93062,0,"// "],[93024,0,"// "],[92970,0,"// "],[92956,0,"// "],[92955,0,"\n"],[92955,0,"\n```typescript"],[92959,10,""],[92959,0,"ts\n"],[92961,1,""],[92959,2,""],[92959,0,"typescript\n\n\n```"],[92970,0,"export const versionContainsLV = (cg: CausalGraph, frontier: LV[], target: LV): boolean => {\n  if (frontier.includes(target)) return true\n\n  const queue = new PriorityQueue<number>()\n  for (const v of frontier) if (v > target) queue.enq(v)\n\n  while (queue.size() > 0) {\n    const v = queue.deq()\n    // console.log('deq v')\n\n    // TODO: Will this ever hit?\n    if (v === target) return true\n\n    const e = rawFindEntryContaining(cg, v)\n    if (e.version <= target) return true\n\n    // Clear any queue items pointing to this entry.\n    while (!queue.isEmpty() && queue.peek() >= e.version) {\n      queue.deq()\n    }\n\n    for (const p of e.parents) {\n      if (p === target) return true\n      else if (p > target) queue.enq(p)\n    }\n  }\n\n  return false\n}\n"],[93724,1,""],[93723,1,""],[93723,0,"\n\n"],[92970,754,""],[92971,4,""],[92970,1,""],[92969,1,""],[92955,15,""],[94201,3,""],[94195,3,""],[94166,3,""],[94158,3,""],[94088,3,""],[94023,3,""],[93974,3,""],[93926,3,""],[93916,3,""],[93868,3,""],[93819,3,""],[93762,3,""],[93704,3,""],[93664,3,""],[93618,3,""],[93582,3,""],[93542,3,""],[93501,3,""],[93466,3,""],[93411,3,""],[93357,3,""],[93333,3,""],[93251,3,""],[93196,3,""],[93139,3,""],[93071,3,""],[93030,3,""],[92973,3,""],[92956,3,""],[94121,0,"\n"],[94121,0,"\n*/"],[92301,0,"*"],[92301,1,""],[92301,0,"/*"],[92300,0,"\n"],[92300,0,"\n\n== Optimised graph traversal functions using local IDs <diff>\n\nThis "],[92365,5,""],[92365,0,"This"],[92313,1,""],[92312,1,""],[92311,1,""],[92305,6,""],[92305,0,"An "],[92307,1,""],[92306,1,""],[92305,1,""],[92305,0,"Optimi"],[92305,48,""],[92305,0,"Optimised versions"],[92322,1,""],[92322,0,"-contains-ID function"],[92305,0,"Example "],[92313,1,""],[92313,0,"o"],[92330,1,""],[92330,0,"_"],[92339,1,""],[92339,0,"_"],[92359,0,"\n"],[92359,0,"\n> Blah that section titel"],[92384,1,""],[92383,1,""],[92383,0,"le."],[92388,4,""],[92388,0,"```typescript`"],[92401,1,""],[92401,0,"\n\n```"],[92402,0,"export const versionContainsLV = (cg: CausalGraph, frontier: LV[], target: LV): boolean => {\n  if (frontier.includes(target)) return true\n\n  const queue = new PriorityQueue<number>()\n  for (const v of frontier) if (v > target) queue.enq(v)\n\n  while (queue.size() > 0) {\n    const v = queue.deq()\n    // console.log('deq v')\n\n    // TODO: Will this ever hit?\n    if (v === target) return true\n\n    const e = rawFindEntryContaining(cg, v)\n    if (e.version <= target) return true\n\n    // Clear any queue items pointing to this entry.\n    while (!queue.isEmpty() && queue.peek() >= e.version) {\n      queue.deq()\n    }\n\n    for (const p of e.parents) {\n      if (p === target) return true\n      else if (p > target) queue.enq(p)\n    }\n  }\n\n  return false\n}\n"],[92402,12,""],[92402,0,"function"],[92428,3,""],[92825,2,""],[92825,0,"g"],[92429,2,""],[92429,0,"g"],[92825,0,"r"],[92430,0,"r"],[92827,0,"a"],[92431,0,"a"],[92829,0,"p"],[92432,0,"p"],[92831,0,"h"],[92433,0,"h"],[92436,11,""],[92436,0,"Eventg"],[92441,1,""],[92441,0,"Graph"],[92598,8,""],[92598,0,"v"],[92496,8,""],[92496,0,"v"],[92448,8,""],[92448,0,"v"],[92585,0,"e"],[92490,0,"e"],[92449,0,"e"],[92588,0,"r"],[92492,0,"r"],[92450,0,"r"],[92591,0,"s"],[92494,0,"s"],[92451,0,"s"],[92594,0,"i"],[92496,0,"i"],[92452,0,"i"],[92597,0,"o"],[92498,0,"o"],[92453,0,"o"],[92600,0,"n"],[92500,0,"n"],[92454,0,"n"],[92457,2,""],[92457,0,"ID"],[92458,1,""],[92457,1,""],[92457,0,"LocalID"],[92476,2,""],[92476,0,"l"],[92476,1,""],[92476,0,"LocalId"],[93033,5,""],[93033,0,"l"],[92801,5,""],[92801,0,"l"],[92678,5,""],[92678,0,"l"],[92595,5,""],[92595,0,"l"],[92546,5,""],[92546,0,"l"],[93018,0,"e"],[92790,0,"e"],[92671,0,"e"],[92592,0,"e"],[92547,0,"e"],[93023,0,"t"],[92794,0,"t"],[92674,0,"t"],[92594,0,"t"],[92548,0,"t"],[92833,1,""],[92833,0,"i"],[92764,1,""],[92764,0,"i"],[92718,1,""],[92718,0,"i"],[92678,1,""],[92678,0,"i"],[92637,1,""],[92637,0,"i"],[92615,1,""],[92615,0,"i"],[92597,1,""],[92597,0,"i"],[92834,0,"d"],[92765,0,"d"],[92719,0,"d"],[92679,0,"d"],[92638,0,"d"],[92616,0,"d"],[92598,0,"d"],[92585,0,"\n  // Only items "],[92586,16,""],[92585,1,""],[92499,45,""],[92575,0,"="],[92540,0,"\n  // Any ID smaller"],[92553,7,""],[92552,1,""],[92552,0," < target is by definition not "],[92565,18,""],[92565,0,"not relevant due to the ordering constriant"],[92598,10,""],[92598,0,"constraint."],[92723,63,""],[92636,0,"{\n    "],[92650,1,""],[92672,0,"\n    "],[92673,4,""],[92673,0,"  }"],[92637,0,"\n    if (id == target) return true;"],[92671,1,""],[92676,0,"else "],[92732,6,""],[92732,0,"length"],[92540,0,"\n  "],[92541,2,""],[92531,6,""],[92531,0,"LocalID"],[92498,0,"\n    // Max heap. The highest local ID is removed first.\n"],[92554,1,""],[92499,4,""],[92499,0,"  "],[92913,0,"// "],[92867,0,"// "],[93092,0,"// "],[93074,0,"// "],[93014,0,"// "],[93098,3,""],[93077,3,""],[93014,3,""],[93021,20,""],[93034,1,""],[93034,0,"="],[93037,9,""],[93037,0,"id"],[93041,1,""],[93040,1,""],[93010,48,""],[93010,0,"    while (queue.peek() == id) queue.deq()"],[93010,48,""],[93010,0,"    while (queue.peek() == id) queue.deq() }"],[93052,2,""],[93047,5,""],[93047,0,"p"],[92821,5,""],[92821,0,"p"],[93044,0,"o"],[92822,0,"o"],[93046,0,"p"],[92823,0,"p"],[93048,0,"("],[92824,0,"("],[93050,0,")"],[92825,0,")"],[92974,0,"other "],[92862,94,""],[92984,1,""],[92984,0,"graph.getParents(id)"],[93004,8,""],[93077,3,""],[93077,0,"p"],[92760,3,""],[92760,0,"p"],[93076,0,"u"],[92761,0,"u"],[93078,0,"s"],[92762,0,"s"],[93080,0,"h"],[92763,0,"h"],[93078,4,""],[93078,0,"enq"],[92760,4,""],[92760,0,"enq"],[92959,3,""],[92959,0,"d"],[92821,3,""],[92821,0,"d"],[92958,0,"e"],[92822,0,"e"],[92960,0,"q"],[92823,0,"q"],[92387,0,"\n"],[92387,0,"\nThis is an optimised function for checking if a version con"],[92488,1,""],[92487,1,""],[92487,0,"LocalId"],[92447,0,"tains some local ID, IE"],[92469,1,""],[92468,1,""],[92468,0,"ie i"],[92471,1,""],[92470,1,""],[92469,1,""],[92468,1,""],[92467,1,""],[92466,1,""],[92466,0,". Ie, this function checks if some version #"],[92509,1,""],[92509,0,"$V$"],[92501,8,""],[92496,5,""],[92497,1,""],[92497,0,"ceil(V)"],[92497,0,"i in "],[92510,0," for some ver"],[92520,3,""],[92520,0,"local "],[92520,6,""],[92520,0,"ID"],[92521,1,""],[92520,1,""],[92520,0,"event I"],[92526,1,""],[92526,0,"#i"],[92527,1,""],[92526,1,""],[92526,0,"$i$ and some version $v"],[92548,1,""],[92548,0,"V4."],[92550,1,""],[92549,1,""],[92549,0,"$. "],[92551,1,""],[92551,0,"\n\nThis"],[92556,1,""],[92555,1,""],[92555,0,"e algorithm does a brea"],[92577,1,""],[92577,0,"dth fir"],[92574,10,""],[92574,0,"breadth first search between "],[92595,8,""],[92595,0,"of the subset of the e"],[92616,1,""],[92616,0,"graph"],[92616,5,""],[92616,0,"even"],[92616,4,""],[92616,0,"graph"],[92595,0,"within "],[92602,3,""],[92620,5,""],[92620,0,"event graph suic"],[92635,1,""],[92634,1,""],[92634,0,"ch that "],[92637,5,""],[92636,1,""],[92635,1,""],[92634,1,""],[92633,1,""],[92632,1,""],[92631,1,""],[92602,4,""],[92602,0,"a bounded "],[92637,0," such that:\n\n- Th"],[92653,1,""],[92652,1,""],[92652,0,"All visited items are "],[92650,24,""],[92650,0,"- All visited items are"],[92638,10,""],[92638,0,"where:"],[92669,0," within $V$"],[92679,0,")"],[92678,0,"("],[92678,0,"ceil"],[92686,0,"\n- Visit"],[92689,5,""],[92689,0,"All visited items "],[92687,20,""],[92687,0,"- All visited items"],[92643,1,""],[92638,5,""],[92637,1,""],[92637,0,", checking events such that:"],[92655,10,""],[92655,0,"where:"],[92655,6,""],[92655,0,"which are:"],[92669,23,""],[92669,0,"W"],[92688,17,""],[92688,0,"H"],[92688,1,""],[92686,2,""],[92686,0,"-"],[92655,10,""],[92655,0,"where:"],[92664,0," The event is "],[92678,2,""],[92678,0,"w"],[92696,0," The local ID of the event is >= "],[92728,1,""],[92728,0,"$"],[92726,0,"$"],[92730,0," the local ID of the search target.\n\nThi"],[92769,1,""],[92768,1,""],[92767,1,""],[92573,0," bounded"],[92609,20,""],[92755,0,"For simplicity, the algorithm given here does not take advantage of run-length encoding. In our implementation, we also run-length encode all items in the event graph. This optimisation yields another large performance gain at the cost of some implementation complexity. See XXXX github.com/josephg/causal-graphs . TODO\n"],[93074,1,""],[92791,4,""],[92791,0,"below"],[93026,0,"\n\nWe haev "],[93035,1,""],[93034,1,""],[93033,1,""],[93033,0,"ve many "],[93036,5,""],[93036,0,"implemented many such "],[93048,10,""],[93048,0,"a whol elib"],[93058,1,""],[93057,1,""],[93056,1,""],[93055,1,""],[93054,1,""],[93054,0,"e library of graph sear"],[93067,10,""],[93067,0,"f"],[93067,1,""],[93067,0,"similar functions for querying the event graph, including functions to find the dife"],[93150,1,""],[93150,0,"ference between versions, and "],[93176,4,""],[93175,1,""],[93174,1,""],[93174,0,", find the intersection and union"],[93185,22,""],[93185,0,"union of inter"],[93191,8,""],[93191,0,"and intersection between versions, and many others."],[93230,12,""],[93230,0,"other "],[93235,1,""],[93050,5,""],[93049,1,""],[93048,12,""],[93048,0,"several"],[93113,0," tool"],[93117,1,""],[93116,1,""],[93115,1,""],[93114,1,""],[93113,1,""],[93064,9,""],[93064,0,"algorithms"],[93048,15,""],[93048,0,"a familiy of "],[93050,11,""],[93050,0,"familiy of "],[93055,1,""],[93060,0,"similar"],[93152,26,""],[93151,1,""],[93151,0,","],[93203,0," similar "],[93192,20,""],[93192,0,"."],[93235,0," / diamond types"],[93245,1,""],[93245,0,"-"],[93251,0,"/src/grpa"],[93256,4,""],[93255,1,""],[93255,0,"/cg/graph/tools.rs"],[93140,0," set"],[93157,0,"set "],[93170,0," set"],[92353,4,""],[92353,0,"example-localid-algorithm"],[70932,4,""],[70932,0,"example-localid"],[70932,15,""],[70932,0,"loca"],[70935,1,""],[70934,1,""],[70933,1,""],[70932,1,""],[70931,1,""],[70931,0,"#"],[70931,1,""],[70931,0,"$e"],[70932,1,""],[70931,1,""],[70931,0,"@exampl"],[70932,6,""],[70932,0,"example-localid-algorithm"],[70701,0,"// "],[70309,0,"// "],[70308,0,"\n"],[70308,0,"\nConsider the "],[70309,13,""],[70309,0,"Consider the"],[70309,12,""],[70309,0,"Consider the "],[70309,13,""],[70309,0,"Consider the"],[70309,12,""],[70309,0,"Consider the "],[70321,1,""],[70321,0," versionContainsLocalId"],[70322,0,"`"],[70345,0,"` function, which computes whether a gi"],[70383,1,""],[70382,1,""],[70382,0,"given version con"],[70398,1,""],[70397,1,""],[70396,1,""],[70396,0,"$V$ "],[70380,20,""],[70380,0,"$$"],[70381,0,"ceil(V)"],[70381,0,"i in "],[70394,0," for some event (specified by local ID) and version. A naive implementation of this function may need to search all "],[70506,4,""],[70506,0,"en"],[70507,1,""],[70506,1,""],[70506,0,"the entire cau"],[70519,1,""],[70518,1,""],[70517,1,""],[70517,0,"event graph i"],[70529,1,""],[70528,1,""],[70446,0," If the "],[70453,1,""],[70452,1,""],[70451,1,""],[70450,1,""],[70450,0,"$i$ is not in $cil"],[70467,1,""],[70466,1,""],[70466,0,"eil(V)$,"],[70475,1,""],[70475,0,"a"],[70544,12,""],[70544,0," gra"],[70527,21,""],[70527,0,"epa"],[70529,1,""],[70528,1,""],[70528,0,"xpand and search the ent"],[70545,7,""],[70545,0,"all of $"],[70552,1,""],[70551,1,""],[70550,1,""],[70549,1,""],[70548,1,""],[70547,1,""],[70546,1,""],[70545,1,""],[70545,0,"the entire "],[70545,11,""],[70545,0,"all of $ceil(V)$. Using "],[70563,6,""],[70563,0,"However, taking advantage of this "],[70592,5,""],[70592,0,"the order lo"],[70603,1,""],[70602,1,""],[70602,0,"of local IDs allows our ou"],[70627,1,""],[70626,1,""],[70571,1,""],[70570,1,""],[70570,0," we"],[70572,1,""],[70571,1,""],[70570,1,""],[70570,0,", we can "],[70579,6,""],[70579,0,"take"],[70620,11,""],[70620,0,"in order to limit the search to only visit events $j$ where $j >= i$."],[70571,0," because any event $j in ceil(V)$ where $j < i$"],[70572,0,"the local ID ordering property tells us that "],[70617,8,""],[70655,0," "],[70655,1,""],[70655,0," cannot "],[70617,0,"for "],[70659,0,", it is impossible for $i -> j$. Therefore,"],[70702,69,""],[70702,0," we can bound"],[70715,5,""],[70767,0," This algorithm is given @example-localid-algorithm."],[70791,0," in"],[70822,0,"\n\n"],[70562,1,""],[70562,0,"\n\n// "],[70562,0," However, the local ID ordering pero"],[70597,1,""],[70596,1,""],[70595,1,""],[70595,0,"roperty allows us to bound the search "],[70309,324,""],[70309,0,"Consider the `versionContainsLocalId` function, which computes whether $i in ceil(V)$ for some event (specified by local ID) and version. If $i$ is not in $ceil(V)$, a naive implementation of this function may need to expand and search all of $ceil(V)$. However, the local ID ordering property allows us to bound the search only visit events $j$ where $j >= i$"],[70633,0,"to "],[70656,0," in ceil(V)"],[70683,0,". This algorithm is given in @example-localid-algorithm.\n\nMany other graph tra"],[70760,1,""],[70759,1,""],[70758,1,""],[70758,0,"qe"],[70759,1,""],[70759,0,"uery functions can be sped up this way, including "],[70808,1,""],[70808,0,"`text`"],[70809,4,""],[70809,0,"text"],[70808,6,""],[70808,0," "],[70808,1,""],[70808,0,"\n\n- Gra"],[70814,1,""],[70813,1,""],[70812,1,""],[70812,0,"Di"],[70813,1,""],[70812,1,""],[70812,0,"Set d"],[70816,1,""],[70815,1,""],[70814,1,""],[70813,1,""],[70812,1,""],[70811,1,""],[70810,1,""],[70809,1,""],[70808,1,""],[70808,0," set difference, set union"],[70809,3,""],[70809,0,"version"],[70809,7,""],[70809,0,"set"],[70834,0," and set intersection functions all implemented on versions"],[70882,0,"purel"],[70882,5,""],[70893,0,"."],[70865,0,", and c"],[70871,1,""],[70870,1,""],[70869,1,""],[70868,1,""],[70867,1,""],[70866,1,""],[70895,0," TODO SEE CAUSALGRAPH LIBARRY"],[70923,1,""],[70922,1,""],[70922,0,"Y "],[70917,7,""],[70917,0,"LIBRARY FOR MORE"],[70752,0,"event "],[70752,12,""],[70752,0,"event graph "],[70769,10,""],[70768,1,""],[70768,0,"ies"],[70863,29,""],[70863,0," for versions"],[71840,0,"// "],[72067,0,"mapping between "],[72092,3,""],[72092,0," and"],[72122,9,""],[72122,0,"s."],[72007,16,""],[72007,0,"between peers,"],[72015,5,""],[72015,0,"rel;"],[72018,1,""],[72017,1,""],[72017,0,"plicas"],[51437,8,""],[51437,0,"to represent"],[51473,0," concurrent events which a"],[51498,1,""],[51498,0,"have"],[51502,1,""],[51510,0," been"],[51523,29,""],[51523,0," d"],[51524,1,""],[51523,1,""],[51523,0,"."],[52917,0,"\n"],[52917,0,"\nThis property makes intuiv"],[52943,1,""],[52943,0,"tive sense - as each opera"],[52964,5,""],[52964,0,"event already"],[52959,0,"the position"],[52959,12,""],[52959,0,"the position of "],[52993,0," a"],[52994,1,""],[52994,0,"takes in to"],[53004,1,""],[53003,1,""],[53002,1,""],[53001,1,""],[53000,1,""],[53000,0,"into account all earlier versions"],[53017,0,"causally-"],[53025,1,""],[53025,0," "],[53042,0," in the event graph."],[52953,2,""],[52953,0,","],[52958,15,""],[52957,1,""],[52957,0," the position of"],[53061,0," The job of the event grpa"],[53086,1,""],[53085,1,""],[53085,0,"aph is to trans"],[53062,38,""],[53061,1,""],[53061,0," However, i"],[53071,1,""],[53071,0,"it is remarkable that this property translates "],[53107,11,""],[53107,0,"is evident in the algorithm"],[53136,35,""],[53136,0,"We can use this pop"],[53154,1,""],[53153,1,""],[53153,0,"eop"],[53155,1,""],[53154,1,""],[53153,1,""],[53153,0,"roperty to"],[53169,1,""],[53255,0,"many cases. Tradi"],[53267,29,""],[53267,0,"T"],[53267,12,""],[53293,1,""],[53293,0," cannot"],[53267,0,"These optimisations are not available to "],[53312,6,""],[53312,0,"s"],[53313,23,""],[53313,0," because a CRDT does not know "],[53329,14,""],[53329,0,"data structure does not have"],[53349,8,""],[53349,0,"kno"],[53351,1,""],[53350,1,""],[53349,1,""],[53349,0,"not know "],[53344,14,""],[53344,0,"may need to merge an"],[53363,1,""],[53362,1,""],[53362,0,"events "],[53329,40,""],[53329,0,"based collaborative editing system does not "],[53322,2,""],[53361,10,""],[53361,0,"s typically do not know the "],[53380,9,""],[53380,0,"track the versino fo"],[53399,1,""],[53398,1,""],[53397,1,""],[53396,1,""],[53395,1,""],[53395,0,"on of remote peers. And "],[53418,1,""],[53417,1,""],[53416,1,""],[53415,1,""],[53414,1,""],[53266,1,""],[53266,0,"\n\n"],[53415,0," T"],[53416,1,""],[53416,0,"As such, they do know"],[53436,1,""],[53435,1,""],[53434,1,""],[53433,1,""],[53433,0,"not know what versions they will need to replicate."],[53447,9,""],[53447,0,"events "],[53472,10,""],[53472,0,"merge."],[53442,0,"ahead of time "],[53472,0," may receieve "],[53461,45,""],[53461,0,"data the event gra"],[53470,9,""],[53470,0,"state tree does and does not need to stre"],[53510,1,""],[53509,1,""],[53509,0,"ore."],[53481,17,""],[53481,0,"m"],[53481,1,""],[53481,0,"needs to represent"],[53499,15,""],[53499,0,"."],[53232,0," mut"],[53235,1,""],[53235,0,"ch"],[62202,0,"exactly "],[63279,3,""],[63279,0,"all"],[63333,40,""],[63333,0," can be discarded, resetting the state"],[63350,21,""],[63341,0,"immediately "],[63362,0,", resetting the state back to a set of "],[63362,39,""],[63362,0," and the state "],[63362,15,""],[63279,0,"when this happens, "],[63301,9,""],[63373,0," "],[63373,1,""],[63374,0,"//"],[63373,0," The state is reset to a list of dim"],[63408,1,""],[63407,1,""],[63407,0,"ummy nodes."],[68267,0,"\ncompressible\ncomppre"],[68287,1,""],[68286,1,""],[68285,1,""],[68285,0,"ressable\n"],[68281,13,""],[68268,13,""],[68267,1,""],[68382,1,""],[68382,0,"i"],[68372,2,""],[68372,0,"un"],[65463,0,"\n"],[65463,0,"\n"],[29,0,": canvas, plot, "],[0,45,""],[0,0,"#import \"@preview/cetz:0.1.2\": canvas, plot,"],[65479,0,"\n"],[65479,0,"\n#canvas(length: 1cm, {\n  plot.plot(size: (8, 6),\n    x-tick-step: none,\n    x-ticks: ((-calc.pi, $-pi$), (0, $0$), (calc.pi, $pi$)),\n    y-tick-step: 1,\n    {\n      plot.add(\n        style: plot.palette.blue,\n        domain: (-calc.pi, calc.pi), x => calc.sin(x * 1rad))\n      plot.add(\n        hypograph: true,\n        style: plot.palette.blue,\n        domain: (-calc.pi, calc.pi), x => calc.cos(x * 1rad))\n      plot.add(\n        hypograph: true,\n        style: plot.palette.blue,\n        domain: (-calc.pi, calc.pi), x => calc.cos((x + calc.pi) * 1rad))\n    })\n})"],[65479,0,"$"],[65479,1,""],[65479,0,"#figure("],[66054,0,"\n)"],[65488,1,""],[66051,0,"  "],[66044,4,""],[66044,0,"      "],[65970,8,""],[65970,0,"          "],[65936,8,""],[65936,0,"          "],[65911,8,""],[65911,0,"          "],[65895,6,""],[65895,0,"        "],[65833,8,""],[65833,0,"          "],[65799,8,""],[65799,0,"          "],[65774,8,""],[65774,0,"          "],[65758,6,""],[65758,0,"        "],[65696,8,""],[65696,0,"          "],[65662,8,""],[65662,0,"          "],[65646,6,""],[65646,0,"        "],[65640,4,""],[65640,0,"      "],[65620,4,""],[65620,0,"      "],[65559,4,""],[65559,0,"      "],[65536,4,""],[65536,0,"      "],[65510,2,""],[65510,0,"    "],[65488,0,"  "],[66091,0,", []"],[66094,0,"asdf"],[66094,4,""],[66092,3,""],[66091,1,""],[66091,0,",\n  cap"],[66095,3,""],[66095,0,"caption: {]"],[66105,1,""],[66104,1,""],[66104,0,"[]"],[66105,0,"blah blah"],[65546,0,"// "],[65546,3,""],[65571,0,"// "],[65546,0,"// "],[65640,0,"// "],[65874,0,"// "],[65838,0,"// "],[65811,0,"// "],[65793,0,"// "],[65729,0,"// "],[65693,0,"// "],[65675,0,"// "],[66040,0,"// "],[66004,0,"// "],[65977,0,"// "],[65959,0,"// "],[65892,0,"// "],[65853,0,"// "],[65823,0,"// "],[65802,0,"// "],[65735,0,"// "],[65696,0,"// "],[65675,0,"// "],[66070,3,""],[66031,3,""],[66001,3,""],[65980,3,""],[65910,3,""],[65868,3,""],[65835,3,""],[65811,3,""],[65741,3,""],[65699,3,""],[65675,3,""],[65892,3,""],[65853,3,""],[65823,3,""],[65802,3,""],[65735,3,""],[65696,3,""],[65675,3,""],[66019,0,"// "],[65983,0,"// "],[65956,0,"// "],[65938,0,"// "],[65874,0,"// "],[65838,0,"// "],[65811,0,"// "],[65793,0,"// "],[65729,0,"// "],[65693,0,"// "],[65675,0,"// "],[65666,0,"\n        "],[65667,8,""],[65666,0,"\n        plot.add()"],[65684,0,"\n          \n        "],[65685,10,""],[65694,0,"// "],[65675,0,"// "],[65478,0,"\n"],[65478,0,"\n#json(\"data//home/seph/src/blog/paper2023/data/xf-node_nodecc-ff.json"],[65491,57,""],[65490,1,""],[65489,1,""],[65488,1,""],[65487,1,""],[65486,1,""],[65486,0,"paper2023/data/xf-node_nodecc-ff.json\")"],[65486,10,""],[65515,0,"[0]"],[65517,1,""],[65516,1,""],[65515,1,""],[65515,0,".0"],[65516,1,""],[65515,1,""],[65515,0,"[0]"],[65517,1,""],[65516,1,""],[65515,1,""],[65515,0,".0"],[65516,1,""],[65515,1,""],[65515,0,")"],[65480,0,"("],[65516,0,"[0]"],[65516,1,""],[65516,0,".at("],[65521,1,""],[65521,0,")"],[65743,3,""],[65721,3,""],[65517,5,""],[65517,0,"len()"],[65731,0,"          domain: "],[65731,18,""],[65731,0,"          domain:"],[65480,1,""],[65480,0,"let "],[65484,4,""],[65484,0,"ff1 = json"],[65525,7,""],[65479,0,"#let ff1 = json(\"data/xf-node_nodecc-ff.json\")\n"],[65532,1,""],[65531,1,""],[65531,0,"no"],[65532,1,""],[65531,1,""],[65484,3,""],[65484,0,"p1_ff"],[65533,1,""],[65533,0,"p1_noff"],[65569,0,"no"],[65805,0," p1_ff.len())"],[65806,0,"(0, "],[65822,0,", x => p1_ff.at(x)"],[65838,0,"int("],[65843,0,")"],[65821,0," - 1"],[65770,0,"        plot.add(\n          domain: (0, p1_ff.len() - 1), x => p1_ff.at(int(x))\n        )\n"],[65926,0,"no"],[65479,0,"#let p1_ff = json(\"data/xf-node_nodecc-ff.json\")\n#let p1_noff = json(\"data/xf-node_nodecc-noff.json\")\n#let p1_ff = json(\"data/xf-node_nodecc-ff.json\")\n#let p1_noff = json(\"data/xf-node_nodecc-noff.json\")\n"],[65587,1,""],[65587,0,"2"],[65636,1,""],[65636,0,"2"],[65689,1,""],[65689,0,"3"],[65738,1,""],[65738,0,"3"],[65659,11,""],[65659,0,"c"],[65608,11,""],[65608,0,"c"],[65650,0,"l"],[65609,0,"l"],[65652,0,"o"],[65610,0,"o"],[65654,0,"w"],[65611,0,"w"],[65656,0,"n"],[65612,0,"n"],[65658,0,"s"],[65613,0,"s"],[65660,0,"c"],[65614,0,"c"],[65662,0,"h"],[65615,0,"h"],[65664,0,"o"],[65616,0,"o"],[65666,0,"o"],[65617,0,"o"],[65668,0,"l"],[65618,0,"l"],[65761,11,""],[65761,0,"f"],[65710,11,""],[65710,0,"f"],[65752,0,"r"],[65711,0,"r"],[65754,0,"i"],[65712,0,"i"],[65756,0,"e"],[65713,0,"e"],[65758,0,"n"],[65714,0,"n"],[65760,0,"d"],[65715,0,"d"],[65762,0,"s"],[65716,0,"s"],[65764,0,"f"],[65717,0,"f"],[65766,0,"o"],[65718,0,"o"],[65768,0,"r"],[65719,0,"r"],[65770,0,"e"],[65720,0,"e"],[65772,0,"v"],[65721,0,"v"],[65774,0,"e"],[65722,0,"e"],[65776,0,"r"],[65723,0,"r"],[65980,0,"        plot.add(\n          domain: (0, p1_ff.len() - 1), x => p1_ff.at(int(x))\n        )\n        plot.add(\n          domain: (0, p1_ff.len() - 1), x => p1_noff.at(int(x))\n        )\n"],[65980,182,""],[66021,1,""],[66021,0,"2"],[66111,1,""],[66111,0,"2"],[66021,1,""],[66021,0,"3"],[66111,1,""],[66111,0,"3"],[66021,1,""],[66021,0,"2"],[66111,1,""],[66111,0,"2"],[66021,1,""],[66021,0,"1"],[66111,1,""],[66111,0,"1"],[66111,1,""],[66111,0,"2"],[66021,1,""],[66021,0,"2"],[66021,1,""],[66021,0,"3"],[66111,1,""],[66111,0,"3"],[66111,1,""],[66111,0,"2"],[66021,1,""],[66021,0,"2"],[66021,1,""],[66021,0,"3"],[66111,1,""],[66111,0,"3"],[66655,0,"\n#figure(\n  canvas(length: 1cm, {\n    plot.plot(size: (8, 6),\n      // x-tick-step: none,\n      // x-ticks: ((-calc.pi, $-pi$), (0, $0$), (calc.pi, $pi$)),\n      // y-tick-step: 1,\n      {\n        plot.add(\n          domain: (0, p3_ff.len() - 1), x => p1_ff.at(int(x))\n        )\n        plot.add(\n          domain: (0, p3_ff.len() - 1), x => p1_noff.at(int(x))\n        )\n\n        // plot.add(\n        //   style: plot.palette.blue,\n        //   domain: (-calc.pi, calc.pi), x => calc.sin(x * 1rad))\n        // plot.add(\n        //   hypograph: true,\n        //   style: plot.palette.blue,\n        //   domain: (-calc.pi, calc.pi), x => calc.cos(x * 1rad))\n        // plot.add(\n        //   hypograph: true,\n        //   style: plot.palette.blue,\n        //   domain: (-calc.pi, calc.pi), x => calc.cos((x + calc.pi) * 1rad))\n      })\n  }),\n  caption: [blah blah]\n)"],[66163,453,""],[66162,1,""],[66021,1,""],[66021,0,"2"],[66111,1,""],[66111,0,"2"],[65682,0,"\n\n"],[65581,0,"\n"],[65683,1,""],[65999,0,"\n          style: plot.palette.blue,"],[66010,25,""],[65999,11,""],[65999,0,"style: plot.palette.blue,"],[65999,25,""],[65683,0,"\n"],[65581,1,""],[65581,0,"\n"],[65683,1,""],[65999,0,"style: plot.palette.blue,"],[65999,0,"\n          "],[66125,0,"\n          style: plot.palette.blue,"],[66136,0,"// "],[66010,0,"// "],[65999,0,"\n          hypograph: true,"],[66194,0,"\n          hypograph: true,"],[66166,3,""],[66166,0,"// "],[66037,3,""],[66163,3,""],[66199,0,"// "],[66037,0,"// "],[66010,0,"// "],[66169,0,"// "],[66711,454,""],[66594,1,""],[66594,0,"3"],[66684,1,""],[66684,0,"3"],[66115,1,""],[66115,0,"2"],[66274,1,""],[66274,0,"2"],[66114,1,""],[66091,1,""],[65587,1,""],[66112,1,""],[66090,1,""],[65587,1,""],[66110,0,"c"],[66089,0,"c"],[65587,0,"c"],[66113,0,"l"],[66091,0,"l"],[65588,0,"l"],[66116,0,"o"],[66093,0,"o"],[65589,0,"o"],[66119,0,"w"],[66095,0,"w"],[65590,0,"w"],[66122,0,"n"],[66097,0,"n"],[65591,0,"n"],[66120,0,"x"],[66094,0,"x"],[65587,0,"x"],[66123,0,"f"],[66096,0,"f"],[65588,0,"f"],[66126,0,"_"],[66098,0,"_"],[65589,0,"_"],[66268,5,""],[66268,0,"p2_noff"],[65987,0,"\n        plot.add(p1_ff)"],[66181,0,"// "],[66107,0,"// "],[66068,0,"// "],[66038,0,"// "],[66020,0,"// "],[66005,5,""],[66005,0,"p1_ff"],[66193,3,""],[66116,3,""],[66074,3,""],[66041,3,""],[66020,3,""],[65987,24,""],[66268,7,""],[66268,0,"p2_ff"],[66268,5,""],[66268,0,"p2_noff"],[66293,7,""],[66293,0,"x"],[66268,7,""],[66268,0,"x"],[65642,7,""],[65642,0,"x"],[66282,0,"f"],[66263,0,"f"],[65643,0,"f"],[66285,0,"_"],[66265,0,"_"],[65644,0,"_"],[66288,0,"c"],[66267,0,"c"],[65645,0,"c"],[66291,0,"l"],[66269,0,"l"],[65646,0,"l"],[66294,0,"o"],[66271,0,"o"],[65647,0,"o"],[66297,0,"w"],[66273,0,"w"],[65648,0,"w"],[66300,0,"n"],[66275,0,"n"],[65649,0,"n"],[66303,0,"_"],[66277,0,"_"],[65650,0,"_"],[66306,0,"n"],[66279,0,"n"],[65651,0,"n"],[66309,0,"o"],[66281,0,"o"],[65652,0,"o"],[66312,0,"f"],[66283,0,"f"],[65653,0,"f"],[66315,0,"f"],[66285,0,"f"],[65654,0,"f"],[66305,13,""],[66305,0,"xf_clown_noff"],[66274,13,""],[66274,0,"xf_clown_noff"],[65642,13,""],[65642,0,"xf_clown_noff"],[65993,0,"\n        plot("],[66006,1,""],[66006,0,".add(data: p1_ff)"],[66011,6,""],[66362,0,"// "],[66284,0,"// "],[66254,0,"// "],[66215,0,"// "],[66197,0,"// "],[66187,0,"// "],[66113,0,"// "],[66074,0,"// "],[66044,0,"// "],[66026,0,"// "],[65805,0,"\n"],[65805,0,"\n$"],[65806,1,""],[65806,0,"#let json_as_data(filename) = {\n  \n  "],[65838,2,""],[65839,2,""],[65839,0,"}"],[65838,0,"  let da"],[65845,1,""],[65844,1,""],[65844,0,"raw = json(filename)\n  \n  "],[65865,2,""],[65868,0,"raw.map((x, y) => (x, y))"],[65895,0,"\n\nj"],[65897,1,""],[65897,0,"$"],[65897,1,""],[65897,0,"#(1,2,3).map((x, y) => (x, y))"],[66125,0,"// "],[65910,1,""],[65911,4,""],[65920,1,""],[65919,1,""],[65918,1,""],[65917,1,""],[65916,1,""],[65915,1,""],[65915,0,"(x, 2)"],[65906,16,""],[65906,0,"emu"],[65908,1,""],[65907,1,""],[65906,1,""],[65906,0,"enumerate()"],[65897,20,""],[65896,1,""],[65895,1,""],[65868,0,"return "],[65879,21,""],[65879,0,"enumerate()"],[65864,1,""],[66089,3,""],[66098,0,"enumerate("],[66113,0,")"],[66113,1,""],[66098,10,""],[66103,0,".enum"],[66104,4,""],[66104,0,"enumerate()"],[66081,0,"        plot.add(p1_ff.enumerate())\n"],[66135,1,""],[66135,0,"2"],[66135,1,""],[66135,0,"1"],[66137,0,"no"],[66098,0,"json_as_data"],[66110,17,""],[66110,0,"()"],[66111,0,"\"data/xf-node_nodecc-ff.json\""],[66081,0,"        plot.add(json_as_data(\"data/xf-node_nodecc-ff.json\"))\n"],[66213,0,"// "],[66194,0,"no"],[66207,40,""],[66206,1,""],[66151,0,"// "],[66089,0,"// "],[66213,376,""],[66253,410,""],[66252,1,""],[66219,0,"// "],[66152,0,"// "],[66087,0,"// "],[66225,3,""],[66155,3,""],[66087,3,""],[66089,3,""],[66151,3,""],[66213,0,"// "],[66149,0,"// "],[66087,0,"// "],[66219,3,""],[66152,3,""],[66087,3,""],[66151,0,"// "],[66089,0,"// "],[66081,0,"        // plot.add(json_as_data(\"data/xf-node_nodecc-ff.json\"))\n        // plot.add(json_as_data(\"data/xf-node_nodecc-noff.json\"))\n"],[66286,3,""],[66221,3,""],[66314,11,""],[66314,0,"c"],[66252,11,""],[66252,0,"c"],[66305,0,"l"],[66253,0,"l"],[66307,0,"o"],[66254,0,"o"],[66309,0,"w"],[66255,0,"w"],[66311,0,"n"],[66256,0,"n"],[66313,0,"s"],[66257,0,"s"],[66315,0,"c"],[66258,0,"c"],[66317,0,"h"],[66259,0,"h"],[66319,0,"o"],[66260,0,"o"],[66321,0,"o"],[66261,0,"o"],[66323,0,"l"],[66262,0,"l"],[66314,11,""],[66314,0,"f"],[66252,11,""],[66252,0,"f"],[66305,0,"r"],[66253,0,"r"],[66307,0,"i"],[66254,0,"i"],[66309,0,"e"],[66255,0,"e"],[66311,0,"n"],[66256,0,"n"],[66308,5,""],[66308,0,"friendsforever"],[66252,5,""],[66252,0,"friendsforever"],[66317,14,""],[66317,0,"frien"],[66252,14,""],[66252,0,"frien"],[66308,5,""],[66308,0,"clownschool"],[66252,5,""],[66252,0,"clownschool"],[66283,0,"// "],[66283,3,""],[66273,0,".slice()"],[66280,0,"0, 50"],[66350,0,".slice(0, 50),\n        mark: \"triangle\""],[66380,8,""],[66380,0,"-"],[66373,9,""],[66373,0,"fill: true"],[66378,5,""],[66373,5,""],[66373,0,"mark: \"-\""],[66380,1,""],[66380,0,"triangle"],[66378,11,""],[66364,14,""],[66363,1,""],[66350,13,""],[66273,13,""],[66213,0,"        plot.add(json_as_data(\"data/xf-clownschool-ff.json\"))\n        plot.add(json_as_data(\"data/xf-clownschool-noff.json\"))\n"],[66440,11,""],[66440,0,"f"],[66378,11,""],[66378,0,"f"],[66431,0,"r"],[66379,0,"r"],[66433,0,"i"],[66380,0,"i"],[66435,0,"e"],[66381,0,"e"],[66437,0,"n"],[66382,0,"n"],[66439,0,"d"],[66383,0,"d"],[66441,0,"s"],[66384,0,"s"],[66436,7,""],[66436,0,"friendsforever"],[66378,7,""],[66378,0,"friendsforever"],[66283,0,"// "],[66221,0,"// "],[66286,3,""],[66221,3,""],[66412,0,"// "],[66347,0,"// "],[66283,0,"// "],[66221,0,"// "],[66154,3,""],[66089,3,""],[66151,0,"// "],[66089,0,"// "],[66154,3,""],[66089,3,""],[66151,0,"// "],[66089,0,"// "],[66286,3,""],[66221,3,""],[66273,0,".spli"],[66277,1,""],[66276,1,""],[66275,1,""],[66275,0,"lice(("],[66280,1,""],[66280,0,"0, 50)"],[66350,0,".slice(0, 50)"],[66296,0,"// "],[66221,0,"// "],[66447,3,""],[66379,3,""],[66539,0," (smaller is better)"],[66541,1,""],[66541,0,"S"],[65902,0,"  canvas(length: 1cm, {\n    plot.plot(size: (8, 6),\n      // x-tick-step: none,\n      // x-ticks: ((-calc.pi, $-pi$), (0, $0$), (calc.pi, $pi$)),\n      // y-tick-step: 1,\n      {\n        // plot.add(json_as_data(\"data/xf-node_nodecc-ff.json\"))\n        // plot.add(json_as_data(\"data/xf-node_nodecc-noff.json\"))\n        // plot.add(json_as_data(\"data/xf-clownschool-ff.json\").slice(0, 50))\n        // plot.add(json_as_data(\"data/xf-clownschool-noff.json\").slice(0, 50))\n        plot.add(json_as_data(\"data/xf-friendsforever-ff.json\"))\n        plot.add(json_as_data(\"data/xf-friendsforever-noff.json\"))\n      })\n  }),\n"],[65902,616,""],[65901,0,"\n  ["],[65904,1,""],[65904,0,"["],[66520,0,"]"],[65908,0,"#"],[65908,0,"  "],[66519,2,""],[66519,0,"    "],[66510,6,""],[66510,0,"        "],[66443,8,""],[66443,0,"          "],[66378,8,""],[66378,0,"          "],[66298,8,""],[66298,0,"          "],[66220,8,""],[66220,0,"          "],[66153,8,""],[66153,0,"          "],[66088,8,""],[66088,0,"          "],[66080,6,""],[66080,0,"        "],[66055,6,""],[66055,0,"        "],[65989,6,""],[65989,0,"        "],[65961,6,""],[65961,0,"        "],[65933,4,""],[65933,0,"      "],[66549,0,"\n    "],[66550,4,""],[66550,0,"  "],[65906,0,"    #canvas(length: 1cm, {\n      plot.plot(size: (8, 6),\n        // x-tick-step: none,\n        // x-ticks: ((-calc.pi, $-pi$), (0, $0$), (calc.pi, $pi$)),\n        // y-tick-step: 1,\n        {\n          // plot.add(json_as_data(\"data/xf-node_nodecc-ff.json\"))\n          // plot.add(json_as_data(\"data/xf-node_nodecc-noff.json\"))\n          // plot.add(json_as_data(\"data/xf-clownschool-ff.json\").slice(0, 50))\n          // plot.add(json_as_data(\"data/xf-clownschool-noff.json\").slice(0, 50))\n          plot.add(json_as_data(\"data/xf-friendsforever-ff.json\"))\n          plot.add(json_as_data(\"data/xf-friendsforever-noff.json\"))\n        })\n    })\n"],[65956,1,""],[65956,0,"5"],[66600,1,""],[66600,0,"5"],[66600,1,""],[66600,0,"4"],[65956,1,""],[65956,0,"4"],[65959,1,""],[65959,0,"3"],[66603,1,""],[66603,0,"3"],[65956,1,""],[65956,0,"2"],[66600,1,""],[66600,0,"2"],[65893,0,"// "],[67245,0,"// "],[67202,0,"// "],[67248,3,""],[67202,3,""],[65893,3,""],[66554,0,"// "],[66547,0,"// "],[66543,40,""],[66541,0,"\n        "],[66542,8,""],[66542,0,"      "],[65926,1,""],[65926,0,"2"],[65956,1,""],[65956,0,"5"],[65926,1,""],[65926,0,"1"],[65930,0," back"],[65934,1,""],[65933,1,""],[65932,1,""],[65931,1,""],[65930,1,""],[65930,0," "],[65930,1,""],[65891,0,"\n\n$f"],[65894,1,""],[65893,1,""],[65893,0,"#figure "],[65900,1,""],[65900,0,"(\n  [\n    \n    "],[65906,4,""],[65907,4,""],[65907,0,"  ])"],[65910,0,"\n  "],[65911,2,""],[65906,0,"    asdf"],[65910,4,""],[65910,0,"canvas"],[65910,0,"#"],[65917,0,"({})"],[65918,0,"background: grey, "],[65934,0,"\""],[65930,0,"\""],[65933,1,""],[65933,0,"a"],[65931,4,""],[65931,0,"black"],[65938,0," length "],[65945,1,""],[65945,0,": 1cm, debug: true,"],[65966,0,"\n      \n    "],[65973,0,"circle((0,0), name\""],[65991,1,""],[65991,0,": \"circle\")"],[65973,0,"cetx."],[65977,1,""],[65976,1,""],[65976,0,"z.draw"],[65973,9,""],[65966,0,"\n      import cetz.draw: *"],[44,0," draw"],[65985,5,""],[66028,0,"\n      hello"],[66035,5,""],[66035,0,"hello"],[66035,5,""],[66033,2,""],[66031,2,""],[66029,2,""],[66028,1,""],[65910,0,"\n    hello"],[66045,0,"\n    bye"],[65933,21,""],[65921,0,"    #canvas(length: 1cm, debug: true, {\n      import draw: *\n      circle((0,0), name: \"circle\")\n    })\n"],[65920,0,"\n    #"],[65925,1,""],[65925,0,"#block(\n      \n      "],[65933,6,""],[65934,6,""],[65934,0,"    )"],[65933,0,"      align(center, [\n        \n        "],[65955,8,""],[65956,8,""],[65956,0,"      ]"],[65955,0,"        x b"],[65974,0,")"],[66085,0,"\n    #canvas(length: 1cm, debug: true, {\n      import draw: *\n      circle((0,0), name: \"circle\")\n    })"],[66085,104,""],[66085,0,"\n    )"],[65976,6,""],[66079,0,"\n      ])"],[65967,9,""],[66070,0,"\n        x b"],[65955,12,""],[66052,4,""],[66052,0,"      "],[66016,6,""],[66016,0,"        "],[65995,6,""],[65995,0,"        "],[65955,4,""],[65955,0,"      "],[65961,1,""],[65926,5,""],[65926,0,"table"],[65932,0,"\n      columns: (auto, auto),\n      "],[65962,6,""],[65969,147,""],[65967,2,""],[65965,2,""],[65963,2,""],[65962,1,""],[65961,1,""],[65961,0,"\n      stroke: none,\n      "],[65982,6,""],[65994,98,""],[65993,1,""],[65991,2,""],[65989,2,""],[65988,1,""],[65982,0,"\ncanvas(length: 1cm, debug: true, {\n      import draw: *\n      circle((0,0), name: \"circle\")\n    })"],[65983,0,"  "],[65983,2,""],[65983,0,"    "],[66079,4,""],[66079,0,"      "],[66043,6,""],[66043,0,"        "],[66022,6,""],[66022,0,"        "],[65983,4,""],[65983,0,"      "],[66093,0,"\n      canvas(length: 1cm, debug: true, {\n      import draw: *\n      circle((0,0), name: \"circle\")\n    })"],[66192,4,""],[66192,0,"      "],[66156,6,""],[66156,0,"        "],[66135,6,""],[66135,0,"        "],[66093,0,","],[65982,223,""],[65989,8,""],[65911,10,""],[65972,0,"      [x] [x"],[65983,1,""],[65983,0,"y]"],[65982,1,""],[65981,1,""],[65980,1,""],[65980,0," "],[65983,0,",\n      [x y]"],[65906,10,""],[65992,4,""],[65906,0,"\n  "],[65990,4,""],[65990,0,"  "],[65990,20,""],[65990,0,"  )\n)\n\n#figure(\n  [\n"],[65990,20,""],[65965,25,""],[65945,6,""],[65945,0,"    "],[65916,6,""],[65916,0,"    "],[65965,1,""],[66603,0,"\n      "],[66604,6,""],[66604,0,"    }),\n    canvas(length:L "],[66631,1,""],[66630,1,""],[66630,0," 1cm, {"],[67257,1,""],[67255,2,""],[67255,0,"  )"],[65895,0,"// "],[65870,0,"// "],[65843,0,"// "],[65811,0,"// "],[67199,12,""],[67199,0,"j"],[67132,12,""],[67132,0,"j"],[67053,12,""],[67053,0,"j"],[66973,12,""],[66973,0,"j"],[66904,12,""],[66904,0,"j"],[66837,12,""],[66837,0,"j"],[66548,12,""],[66548,0,"j"],[66481,12,""],[66481,0,"j"],[66402,12,""],[66402,0,"j"],[66322,12,""],[66322,0,"j"],[66253,12,""],[66253,0,"j"],[66186,12,""],[66186,0,"j"],[67079,0,"s"],[67023,0,"s"],[66955,0,"s"],[66886,0,"s"],[66828,0,"s"],[66772,0,"s"],[66494,0,"s"],[66438,0,"s"],[66370,0,"s"],[66301,0,"s"],[66243,0,"s"],[66187,0,"s"],[67091,0,"o"],[67034,0,"o"],[66965,0,"o"],[66895,0,"o"],[66836,0,"o"],[66779,0,"o"],[66500,0,"o"],[66443,0,"o"],[66374,0,"o"],[66304,0,"o"],[66245,0,"o"],[66188,0,"o"],[67103,0,"n"],[67045,0,"n"],[66975,0,"n"],[66904,0,"n"],[66844,0,"n"],[66786,0,"n"],[66506,0,"n"],[66448,0,"n"],[66378,0,"n"],[66307,0,"n"],[66247,0,"n"],[66189,0,"n"],[67117,4,""],[67117,0,"r"],[67058,4,""],[67058,0,"r"],[66987,4,""],[66987,0,"r"],[66915,4,""],[66915,0,"r"],[66854,4,""],[66854,0,"r"],[66795,4,""],[66795,0,"r"],[66514,4,""],[66514,0,"r"],[66455,4,""],[66455,0,"r"],[66384,4,""],[66384,0,"r"],[66312,4,""],[66312,0,"r"],[66251,4,""],[66251,0,"r"],[66192,4,""],[66192,0,"r"],[67085,0,"e"],[67029,0,"e"],[66961,0,"e"],[66892,0,"e"],[66834,0,"e"],[66778,0,"e"],[66500,0,"e"],[66444,0,"e"],[66376,0,"e"],[66307,0,"e"],[66249,0,"e"],[66193,0,"e"],[67097,0,"s"],[67040,0,"s"],[66971,0,"s"],[66901,0,"s"],[66842,0,"s"],[66785,0,"s"],[66506,0,"s"],[66449,0,"s"],[66380,0,"s"],[66310,0,"s"],[66251,0,"s"],[66194,0,"s"],[67109,0,"u"],[67051,0,"u"],[66981,0,"u"],[66910,0,"u"],[66850,0,"u"],[66792,0,"u"],[66512,0,"u"],[66454,0,"u"],[66384,0,"u"],[66313,0,"u"],[66253,0,"u"],[66195,0,"u"],[67121,0,"l"],[67062,0,"l"],[66991,0,"l"],[66919,0,"l"],[66858,0,"l"],[66799,0,"l"],[66518,0,"l"],[66459,0,"l"],[66388,0,"l"],[66316,0,"l"],[66255,0,"l"],[66196,0,"l"],[67133,0,"t"],[67073,0,"t"],[67001,0,"t"],[66928,0,"t"],[66866,0,"t"],[66806,0,"t"],[66524,0,"t"],[66464,0,"t"],[66392,0,"t"],[66319,0,"t"],[66257,0,"t"],[66197,0,"t"],[67145,0,"s"],[67084,0,"s"],[67011,0,"s"],[66937,0,"s"],[66874,0,"s"],[66813,0,"s"],[66530,0,"s"],[66469,0,"s"],[66396,0,"s"],[66322,0,"s"],[66259,0,"s"],[66198,0,"s"],[65775,4,""],[65775,0,"r"],[65721,4,""],[65721,0,"r"],[65669,4,""],[65669,0,"r"],[65612,4,""],[65612,0,"r"],[65554,4,""],[65554,0,"r"],[65503,4,""],[65503,0,"r"],[65761,0,"e"],[65710,0,"e"],[65661,0,"e"],[65607,0,"e"],[65552,0,"e"],[65504,0,"e"],[65767,0,"s"],[65715,0,"s"],[65665,0,"s"],[65610,0,"s"],[65554,0,"s"],[65505,0,"s"],[65773,0,"u"],[65720,0,"u"],[65669,0,"u"],[65613,0,"u"],[65556,0,"u"],[65506,0,"u"],[65779,0,"l"],[65725,0,"l"],[65673,0,"l"],[65616,0,"l"],[65558,0,"l"],[65507,0,"l"],[65785,0,"t"],[65730,0,"t"],[65677,0,"t"],[65619,0,"t"],[65560,0,"t"],[65508,0,"t"],[65791,0,"s"],[65735,0,"s"],[65681,0,"s"],[65622,0,"s"],[65562,0,"s"],[65509,0,"s"],[66076,0,"\n        x-ticks-"],[66092,1,""],[66092,0,": (),"],[66095,0,"1, 5, 10"],[66561,0,"// "],[66499,0,"// "],[66564,3,""],[66499,3,""],[66085,0,"// "],[66055,3,""],[66068,4,""],[66068,0,"1000"],[66071,1,""],[66070,1,""],[66069,1,""],[66069,0,"0000"],[66068,2,""],[66068,0,"2"],[66068,1,""],[66068,0,"10"],[66069,1,""],[66068,1,""],[66068,0,"5"],[65927,0,"\n"],[65927,0,"\n#let json_as_data"],[65933,12,""],[65933,0,"scale_data(filename "],[65952,1,""],[65952,0,") {"],[65954,1,""],[65954,0,"= {\n  \n  "],[65958,2,""],[65959,2,""],[65959,0,"}"],[65958,0,"  "],[65958,2,""],[65958,0,"let raw = json(filename)"],[65958,10,""],[65958,0,"  "],[65952,0,", sf"],[65978,0,".map((x, "],[65962,25,""],[65962,0,"  json(filename).map((x,y) "],[65962,27,""],[65962,0,"  json(filename).map((x,y)=> "],[65962,29,""],[65962,0,"  json(filename).map((x,y)=>"],[65988,0," "],[65991,0," "],[65962,30,""],[65962,0,"  json(filename).map((x,y) => "],[65962,30,""],[65962,0,"  json(filename).map((x,y) => "],[65962,30,""],[65962,0,"  json(filename).map((x,y) => "],[65962,30,""],[65962,0,"  json(filename).map((x,y) => "],[65962,30,""],[65962,0,"  json(filename).map((x,y) =>(float(x) "],[65962,39,""],[65962,0,"  json(filename).map((x,y) =>(float(x)* "],[65962,40,""],[65962,0,"  json(filename).map((x,y) =>(float(x)*sf, "],[65962,43,""],[65962,0,"  json(filename).map((x,y) =>(float(x)*sf,y))"],[66004,0," "],[65991,0," "],[66593,4,""],[66593,0,"scale_data"],[66640,0,", 0.001"],[66639,1,""],[66647,0,")"],[65983,5,""],[65983,0,"val"],[65997,1,""],[65997,0,"val.at(0)"],[66012,1,""],[66012,0,"val.at(1)"],[66658,1,""],[66657,1,""],[66680,4,""],[66680,0,"scale_data"],[66728,0,", 0.1"],[66154,0,"// "],[65961,0,"\n  let raw = "],[65962,12,""],[65962,0,"  let raw = json(filename)"],[65962,26,""],[65961,1,""],[66660,0,"0"],[66736,0,"0"],[66154,3,""],[66167,4,""],[66167,0,"100"],[66167,3,""],[66167,0,"50"],[66656,0,"0"],[66732,0,"0"],[66168,1,""],[66169,0,"\n        x-lab"],[66180,3,""],[66180,0,"label: \"\""],[66188,0,"asdf"],[66193,0,","],[66188,4,""],[66188,0,"Thoun"],[66192,1,""],[66192,0,"sand"],[66188,8,""],[66188,0,"Operations processed (thousands)"],[66208,12,""],[66188,11,""],[66188,0,"Events "],[66204,0," (k)"],[66205,1,""],[66205,0,")"],[66205,1,""],[66205,0,"("],[66206,1,""],[66206,0,"K"],[66206,1,""],[66206,0,"in thousands"],[66221,0,"\n        y-label;"],[66237,1,""],[66237,0,": \"\","],[66240,0,"Items in "],[66240,9,""],[66240,0,"Size of state tree"],[66253,5,""],[66248,0,"eg-walker "],[66240,9,""],[66240,0,"E"],[66255,0," size"],[66882,30,""],[66882,0,"      plot.plot(size: (5, 3),\n"],[66905,1,""],[66905,0,"4"],[66139,1,""],[66139,0,"4"],[66912,125,""],[66912,0,"        x-tick-step: 5,\n        x-label: \"Events processed (in thousands)\",\n        y-label: \"Eg-walker state size\",\n"],[66263,127,""],[66273,278,""],[66634,278,""],[66670,14,""],[66670,0,"node_nodecc"],[66729,14,""],[66729,0,"node_nodecc"],[66653,5,""],[66653,0,"scale_data("],[66696,0,", 0.001"],[66764,0,", 0.001"],[66725,5,""],[66725,0,"scale_data("],[66515,0,"// "],[66704,1,""],[66776,1,""],[66704,0,"0"],[66777,0,"0"],[66515,3,""],[66528,1,""],[66528,0,"10"],[66528,1,""],[66528,0,"5"],[66528,1,""],[66528,0,"4"],[66528,1,""],[66528,0,"100"],[66530,1,""],[66528,1,""],[66528,0,"5"],[66528,1,""],[66528,0,"4"],[66528,1,""],[66528,0,"3"],[66528,1,""],[66528,0,"2"],[66035,0,"["],[66039,0,"$"],[66039,1,""],[66039,0,"#"],[66805,0,"]"],[66805,0," asdf"],[66805,6,""],[66039,1,""],[66039,0,"#"],[66036,0,"\n  asdf"],[66812,0,"]"],[66812,1,""],[66036,7,""],[66039,1,""],[66039,0,"$"],[66039,1,""],[66035,1,""],[66035,0,"kind: \"figure\","],[66035,15,""],[66804,0,"\n  kind: \"figure\","],[66814,6,""],[66814,0,"raw"],[66807,0,"// "],[66807,3,""],[66814,3,""],[66814,0,"image"],[66814,5,""],[66814,0,"atom"],[66814,4,""],[66814,0,"tavbke"],[66819,1,""],[66818,1,""],[66817,1,""],[66816,1,""],[66816,0,"ble"],[66814,5,""],[66814,0,"auto"],[66863,0,"\n  caption: [blah blah (Smaller is better)]"],[66863,43,""],[66863,0,"\n  kind: \"auto\","],[66805,16,""],[66847,0,","],[66864,0,"\n  supp"],[66867,4,""],[66867,0,"supplement: \"XXX\":"],[66884,1,""],[66862,1,""],[66857,1,""],[66865,0,"// "],[66857,4,""],[66857,0,"image"],[66864,22,""],[66863,1,""],[66636,0,"          plot.add(scale_data(\"results/xf-node_nodecc-ff.json\", 0.001))\n          plot.add(scale_data(\"results/xf-node_nodecc-noff.json\", 0.001))\n"],[66864,0,"// "],[66792,0,"// "],[66750,11,""],[66750,0,"g"],[66678,11,""],[66678,0,"g"],[66741,0,"i"],[66679,0,"i"],[66743,0,"t"],[66680,0,"t"],[66745,0,"-"],[66681,0,"-"],[66747,0,"m"],[66682,0,"m"],[66749,0,"a"],[66683,0,"a"],[66751,0,"k"],[66684,0,"k"],[66753,0,"e"],[66685,0,"e"],[66755,0,"f"],[66686,0,"f"],[66757,0,"i"],[66687,0,"i"],[66759,0,"l"],[66688,0,"l"],[66761,0,"e"],[66689,0,"e"],[66646,0,"// "],[66646,3,""],[66646,0,"// "],[66646,3,""],[66751,12,""],[66751,0,"node_nodecc"],[66678,12,""],[66678,0,"node_nodecc"],[66074,0,"// "],[66047,0,"// "],[66038,0,"// "],[66141,0,"\n        "],[66511,0,"\n        "],[66976,0,"// "],[66965,0,"// "],[66888,0,"// "],[66813,0,"// "],[66739,0,"// "],[66667,0,"// "],[66657,0,"// "],[66616,0,"// "],[66564,0,"// "],[66538,0,"// "],[66516,0,"// "],[66499,0,"// "],[66473,0,"// "],[66157,1,""],[66157,0,"6"],[66160,1,""],[66160,0,"4"],[66467,1,""],[66467,0,","],[66098,0,"\n#figure("],[66027,9,""],[66469,549,""],[66090,0,"\n"],[66470,2,""],[66462,4,""],[66462,0,"  "],[66454,6,""],[66454,0,"    "],[66444,8,""],[66444,0,"      "],[66367,10,""],[66367,0,"        "],[66292,10,""],[66292,0,"        "],[66282,8,""],[66282,0,"      "],[66241,8,""],[66241,0,"      "],[66189,8,""],[66189,0,"      "],[66165,8,""],[66165,0,"      "],[66143,8,""],[66143,0,"      "],[66126,6,""],[66126,0,"    "],[66100,4,""],[66100,0,"  "],[66446,3,""],[66458,9,""],[66458,0,"Comparison of "],[66512,18,""],[66511,1,""],[66515,1,""],[66515,0," is"],[66579,2,""],[66578,1,""],[66578,0,","],[66578,1,""],[66578,0," -"],[66515,0," may be"],[66522,3,""],[66582,79,""],[66624,14,""],[66624,0,"do so"],[66472,0,"eg-walker state size with and without this optimisation. The red line shows "],[66529,19,""],[66529,0,"When the optimisation is not present (red line), the tst"],[66584,1,""],[66583,1,""],[66582,1,""],[66582,0,"state s"],[66588,1,""],[66588,0,"size grps"],[66596,1,""],[66595,1,""],[66595,0,"ows"],[66527,0,", on the \"friendsforever\""],[66536,0,"_"],[66553,0,"_ data set"],[66634,0," linearly. "],[66138,0,"\n      title: \"asdf\","],[66138,0,"\n      "],[66139,6,""],[66146,5,""],[66146,0,"name"],[66139,20,""],[66138,1,""],[66099,0,"\n  [asdf],"],[66102,7,""],[66100,2,""],[66099,1,""],[66458,15,""],[66458,0,"The e"],[66482,43,""],[66482,0," while processing the"],[66652,0,"\n\n> BENCHMARKS!"],[66531,0,", with and without"],[66549,39,""],[66549,0," clear commands. "],[66566,43,""],[66556,8,""],[66550,6,""],[66550,0,"stat "],[66554,1,""],[66554,0,"e clearing. The red line "],[66566,13,""],[66566,0,"When the "],[66566,9,""],[66566,0,"When the event "],[66575,6,""],[66575,0,"state is never cleared (red line), it grows "],[66267,0," asdf asd fasd fas dfas df"],[66246,1,""],[66246,0,"["],[66293,1,""],[66293,0,"]"],[66267,1,""],[66267,0,"\n      \n      "],[66268,6,""],[66275,0,"asd"],[66269,9,""],[66268,1,""],[66267,1,""],[66267,0,"\n      asdf "],[66274,0,"\n      "],[66268,6,""],[66268,0,"      "],[66274,7,""],[66278,1,""],[66267,36,""],[66267,0,", with RLE"],[66267,10,""],[66458,0," A"],[66459,1,""],[66458,1,""],[66458,0,"A copmp"],[66464,1,""],[66463,1,""],[66462,1,""],[66461,1,""],[66461,0,"ompair"],[66466,1,""],[66465,1,""],[66465,0,"rison of the "],[66478,4,""],[66566,0,"the "],[66584,0," optimisation"],[66566,4,""],[66580,13,""],[66635,0,"l"],[66635,1,""],[66635,0,"linearly"],[66645,20,""],[66645,0,"When the state is cleared, "],[66152,1,""],[66152,0,"5"],[66155,1,""],[66155,0,"3"],[66155,1,""],[66155,0,"2"],[66155,1,""],[66155,0,"4"],[66155,1,""],[66155,0,"3"],[66155,1,""],[66155,0,"4"],[66155,1,""],[66155,0,"3"],[66180,0,"\n      y-tick-step: 300,"],[66200,1,""],[66200,0,"5"],[66200,3,""],[66200,0,"1000"],[66200,4,""],[66200,0,"500"],[66187,0,"// "],[66187,3,""],[66695,1,""],[66694,1,""],[66694,0," at critical versions, it stays very small throughout this test."],[66726,5,""],[66753,0," Smaller is beter"],[66769,1,""],[66768,1,""],[66768,0,"ter)"],[66754,0,"("],[66715,0," (blue l;"],[66723,1,""],[66723,0,"ine)"],[66765,1,""],[66765,0,"\n  \n  "],[66766,2,""],[66766,0,"  "],[66768,3,""],[66765,22,""],[66765,0,"\n  "],[66482,0,"\n    "],[66672,0," throughout the "],[66655,2,""],[66655,0,"the state"],[66695,0,"test"],[66700,1,""],[66700,0,"\n    \n    "],[66701,4,""],[66610,1,""],[66610,0,"\n    \n    "],[66611,4,""],[66616,0,"- "],[66707,1,""],[66712,0,"- "],[66610,8,""],[66610,0," "],[66700,6,""],[66770,0,"very "],[66825,0,"\n"],[66825,0,"\n$"],[66826,1,""],[66826,0,"#figure(\n  \n  "],[66835,2,""],[66836,2,""],[66836,0,")"],[66835,0,"  caption: [\n    \n    "],[66848,4,""],[66849,4,""],[66849,0,"  ]"],[66848,0,"    asdf"],[66834,0,"\n  canvas(length: 1cm, {\n    \n    "],[66859,4,""],[66860,4,""],[66860,0,"  }),"],[66883,4,""],[66883,0,"Normalized performance comparisoin "],[66917,1,""],[66916,1,""],[66915,1,""],[66914,1,""],[66914,0,"on of "],[66879,41,""],[66879,0,"    Normalized performance comparison of"],[66862,0,"// "],[66837,0,"// "],[66834,0,"\n  table(\n    \n    "],[66844,4,""],[66845,4,""],[66845,0,"  ),"],[66844,0,"    columns: (1fr, auto, auto, auto),\n    al;"],[66888,1,""],[66887,1,""],[66887,0,"lign: "],[66886,7,""],[66886,0,"[Algorithm"],[66887,9,""],[66887,0,"Dataset], [No optimization] "],[66914,1,""],[66914,0,", [With clear & FF optimization], [Speedup],\n    [automerge-perf], "],[66959,22,""],[66959,0,"    [automerge-perf],"],[66913,0," (ms)"],[66950,0," (ms)"],[66990,0," [3.94], [0.26], [15x]"],[67011,0,"*"],[67008,0,"*"],[67014,0,","],[66969,0,"    [automerge-perf], [3.94], [0.26], [*15x*],\n"],[67021,14,""],[67021,0,"seph-blog1"],[67035,4,""],[67035,0,"7.16"],[67038,1,""],[67038,0,"7"],[67043,4,""],[67043,0,"413"],[67043,0,"0."],[67054,1,""],[67054,0,"67"],[67055,1,""],[67055,0,".6"],[66898,2,""],[66898,0,"Without"],[66932,11,""],[66932,0,"clear & FF "],[67066,0,"\n    [ETCETERA]"],[67072,8,""],[67072,0,"ETC FILL EM OUT!"],[67081,3,""],[67081,0,"ME "],[67192,15,""],[67192,0,"\n"],[67192,0,"\n"],[67192,1,""],[67191,1,""],[67191,0,"\n\n"],[67192,1,""],[66825,0,"\n// TODO: Would b"],[66841,1,""],[66841,0,"it be worth making a line graph out of this:"],[66884,1,""],[66884,0,"?"],[66954,0,"*"],[66947,0,"*"],[66985,0,"*"],[66960,0,"*"],[67024,0,"*"],[66991,0,"*"],[67037,0,"*"],[67030,0,"*"],[67038,1,""],[67030,1,""],[67037,0,"*"],[67030,0,"*"],[67038,1,""],[67030,1,""],[66997,11,""],[66961,20,""],[66961,0,"Before"],[66978,17,""],[66978,0,"After"],[66918,3,""],[66918,0,"auto"],[66942,0,"\n    stroke: none,"],[66954,6,""],[66942,12,""],[67001,0,"*"],[66994,0,"*"],[67181,36,""],[67181,0,"Performance comparison of `transformPartial"],[67207,1,""],[67207,0,"_"],[67224,0,"_ with and without clearning "],[67243,10,""],[67243,0,"clearingn"],[67251,1,""],[67250,1,""],[67249,1,""],[67248,1,""],[67248,0,"ing "],[67243,0,"both "],[67248,1,""],[67248,0,"c"],[67247,1,""],[67243,4,""],[67252,0," "],[67252,1,""],[67252,0,"and FF based op"],[67256,11,""],[67256,0,"fast forward optimizat"],[67277,1,""],[67276,1,""],[67275,1,""],[67275,0,"sations."],[67098,0,"\n    [friendsforever], [3.49], "],[67125,1,""],[67124,1,""],[67124,0,"50"],[67129,0,"[2.82], [XXX]"],[67141,0,"*"],[67138,0,"*"],[67144,0,","],[67330,0," The largest gains are in the purely linear tests (_automerge-perf_ and "],[67381,1,""],[67381,0,"`"],[67396,1,""],[67396,0,"`"],[67396,1,""],[67381,1,""],[67400,0,"se-"],[67402,1,""],[67402,0,"ph-blog1) as in each of these cases, "],[67330,0," All other optimisations are enabled."],[67355,0,"listed in thei"],[67368,1,""],[67367,1,""],[67367,0,"is paper "],[67497,0,"all events are "],[67497,15,""],[67497,0,"the event graph "],[67472,41,""],[67472,0,", for a purely linear event graph, no state is constructed at all."],[67515,0," needs to be"],[67527,3,""],[902,34,""],[86267,0,"= Ackbno"],[86274,1,""],[86273,1,""],[86272,1,""],[86272,0,"nowledgements```lang\ncode\n```"],[86288,4,""],[86288,0,"\n"],[86288,1,""],[86288,0,"lang"],[86285,16,""],[86285,0,"\n\nThis work was made possible by the generous support of Michael Toomim and the Braid community."],[86315,6,""],[86315,0,"thanks to"],[86321,3,""],[86315,6,""],[86315,0,"by the"],[49,0,"\n#import \"@preview/cetz:0.1.2\": canvas, plot, draw"],[0,0,"// "],[63,7,""],[63,0,"local"],[76,1,""],[76,0,"2"],[78,1,""],[78,0,"0"],[213,0,"\n"],[213,1,""],[66390,0,", label: $$"],[66400,0,"asdf"],[66400,5,""],[66399,1,""],[66399,0,"[]"],[66400,0,"With trimming"],[66489,0,", label: [With trimming]"],[66499,4,""],[66499,0,"Without"],[66517,0,"\n        plot.add(scale_data(\"results/xf-friendsforever-ff.json\", 0.001), label: [With trimming])"],[66319,97,""],[66507,8,""],[66507,0,"c"],[66410,8,""],[66410,0,"c"],[66501,0,"l"],[66411,0,"l"],[66503,0,"e"],[66412,0,"e"],[66505,0,"a"],[66413,0,"a"],[66507,0,"r"],[66414,0,"r"],[66509,0,"i"],[66415,0,"i"],[66511,0,"n"],[66416,0,"n"],[66513,0,"g"],[66417,0,"g"],[66402,0,"Size "],[66407,1,""],[66407,0,"w"],[66507,0,"Size "],[66512,1,""],[66512,0,"\\w"],[66513,1,""],[66512,1,""],[66512,0,"w"],[66116,0,"\n  asdf]"],[66119,0,"["],[66125,0,","],[66117,9,""],[66116,1,""],[66116,0,"["],[66120,0,"$"],[66120,1,""],[66120,0,"#"],[66548,0,"]"],[66548,0,"\n  "],[66117,0,"\n  asdf"],[66120,4,""],[66120,0,"Events"],[66120,6,""],[66120,0,"Events"],[66120,6,""],[66120,0,"asdf"],[66117,7,""],[66548,4,""],[66120,1,""],[66120,0,"$"],[66120,1,""],[66116,1,""],[66720,11,""],[66814,12,""],[66857,0,"\n    \n    "],[66858,4,""],[66863,0,"Smaller is better."],[66863,0,"// "],[1284,49,""],[1310,0," solves this problem"],[1340,0," to our knowkedgem bi"],[1348,13,""],[1348,0,"knowledge, no pure operation-based RDT has "],[1284,0,"\n  "],[820,464,""],[820,0,"  Conflict-Free Replicated Data Types (CRDTs) are useful for multi-master collaborative text editing, but they have several downsides: They require the entire CRDT state to be loaded in memory during editing sessions. Transmitted and stored data is CRDT type specific - so innovations in CRDT algorithms usually require entire collaborative editing systems to be rewritten from scratch. And pruning is difficult - documents grow without bounds as they are edited."],[1286,0,"\n  "],[1284,2,""],[1285,2,""],[1284,1,""],[1283,1,""],[1282,1,""],[1282,0,". "],[1321,1,""],[1320,1,""],[1320,0,"ese"],[1331,0,"s - as "],[1332,6,""],[1343,120,""],[1343,0,"achieving perofrma"],[1353,8,""],[1353,0,"ad"],[1354,1,""],[1353,1,""],[1353,0,"acceptable performance with a pure operation based RDT is very difficult and to our knowledge, no "],[1343,40,""],[1367,0,"s aer ver"],[1375,1,""],[1374,1,""],[1373,1,""],[1372,1,""],[1371,1,""],[1370,1,""],[1370,0,"re very slow in practice and "],[1317,0,"="],[1317,1,""],[1316,1,""],[1207,0,"/ "],[1208,1,""],[1208,0,"* "],[1287,0,"*/ "],[1337,0,", sllo"],[1342,1,""],[1341,1,""],[1340,1,""],[1339,1,""],[1339,0,"allowing RDTs whi"],[1355,1,""],[1354,1,""],[1353,1,""],[1207,6,""],[1207,0,"CRDTs also make"],[1230,3,""],[1285,1,""],[1285,0,"e"],[1292,3,""],[1241,1,""],[1240,1,""],[1240,0,": t"],[1242,1,""],[1241,1,""],[1240,1,""],[1240,0,", as the CRDT state"],[1259,10,""],[1264,0,"s"],[1280,19,""],[1280,0," during editing"],[1207,0,"*"],[1207,1,""],[1207,0,"/* "],[1299,0,"*/"],[1329,35,""],[1329,0,"can solve these problems - pro"],[1358,1,""],[1358,0,"esenting a common API for "],[1356,28,""],[1356,0,"allowing text eiditn"],[1375,1,""],[1374,1,""],[1373,1,""],[1372,1,""],[1371,1,""],[1371,0,"diting i"],[1378,1,""],[1365,13,""],[1365,0,"collaborative text editing to use a common format regardless of the internal CRDT algorithm chosen"],[1463,1,""],[1473,0," to our knowledd"],[1488,1,""],[1488,0,"ge, no"],[1519,1,""],[1519,0," has been proposed for text"],[1473,21,""],[1498,0,"s are slow in practice and no pure op"],[1532,3,""],[1527,5,""],[1524,3,""],[1520,4,""],[1511,9,""],[1508,3,""],[1503,5,""],[1499,4,""],[1498,1,""],[1473,0," to our knowledge, no"],[1546,0," editing"],[1554,76,""],[1554,0,"."],[955,16,""],[955,0,"The"],[976,0," must"],[981,3,""],[970,0,"'s"],[936,8,""],[936,0,"several "],[1196,0," to incorporate n"],[1212,1,""],[1212,0,"new innofa"],[1221,1,""],[1220,1,""],[1220,0,"vations"],[1229,2,""],[1319,2,""],[1229,1,""],[1027,0,", and the state grows without bounds as it is edited"],[1281,90,""],[1308,4,""],[1328,0,", as local edits do not need any context "],[1328,5,""],[1328,0,". "],[1330,1,""],[1330,0,"L"],[1329,1,""],[1328,1,""],[1328,0," - as "],[1334,1,""],[1334,0,"l"],[1346,24,""],[1334,12,""],[1334,0,"op"],[1335,1,""],[1334,1,""],[1334,0,"e"],[1334,1,""],[1334,0,"editing events can be sent to remote peers "],[1331,46,""],[1330,1,""],[1329,1,""],[1328,1,""],[1328,110,""],[1420,0,"\n  \n  "],[1421,2,""],[1424,0,"In this paper we present a new formalism for pure operation based "],[1469,21,""],[1469,0,"operations"],[1469,10,""],[1469,0,"pure operation logs"],[1422,66,""],[1421,1,""],[1421,0,"\n  In this paper we present a new formalism for pure operation logs"],[1424,0,"// "],[1738,42,""],[1724,0," memory, less"],[1663,0," "],[1663,1,""],[1653,10,""],[1653,0,"usually better than"],[1672,3,""],[1638,34,""],[1638,0,"our algorithm is usually faster than"],[1759,0," and a "],[1765,1,""],[1765,0,"n intercompatible "],[1767,16,""],[1766,1,""],[1765,1,""],[1765,0," generic "],[1766,8,""],[1766,0,"network format "],[1766,15,""],[1766,0,"generic network format"],[1789,163,""],[1789,0," "],[1789,1,""],[1789,0," "],[1789,1,""],[1789,0," We build our "],[1790,13,""],[1790,0,"Our "],[1790,4,""],[1523,2,""],[1523,0,"eg"],[1533,0," (Event Graph Walker)"],[1523,1,""],[1523,0,"E"],[1811,0,"Our eg_walke"],[1822,1,""],[1821,1,""],[1820,1,""],[1819,1,""],[1818,1,""],[1817,1,""],[1817,0,"-walker algorithm is built on top of some "],[1854,5,""],[1854,0,"a different formalism for event graphs"],[1854,38,""],[1854,0,"our own formalism for eve"],[1878,1,""],[1877,1,""],[1876,1,""],[1876,0,"operation"],[1857,28,""],[1857,0," "],[1854,4,""],[1854,0,"a new formalism for op"],[1875,1,""],[1874,1,""],[1810,64,""],[1810,0,"\n  \n  "],[1811,2,""],[1812,2,""],[1811,1,""],[1810,1,""],[1810,0,"\n  \n  "],[1811,2,""],[1814,0,"Eg-walker is built on top of a "],[1843,2,""],[1843,0,"our own"],[1843,7,""],[1843,0,"a new formal model for op"],[1866,2,""],[1866,0,"\"pure operations\" called )"],[1891,1,""],[1891,0,"_event graphs_."],[1884,6,""],[1884,0,"which we call"],[1913,0," Event "],[1914,6,""],[1914,0,"Using this formalism we also show that "],[1938,15,""],[1938,0,"sgh"],[1940,1,""],[1939,1,""],[1939,0,"how how any CRDT can be turned into a "],[1866,1,""],[1862,21,""],[1941,14,""],[1941,0,"used in this way. Eg-walker is an optimization of this genera"],[2001,1,""],[2001,0,"ic algorithm."],[2013,0," "],[2013,1,""],[2013,0," for sequence editing"],[1388,0," yet"],[1746,6,""],[1746,0," consuming"],[1762,6,""],[1762,0,"RAM "],[1765,1,""],[1772,13,""],[1772,0,"disk space"],[1786,0," using"],[1802,0,", extensible"],[1804,10,""],[1804,0,"adaptable"],[1959,5,""],[1959,0," apd"],[1962,1,""],[1961,1,""],[1961,0,"dapted to "],[1970,1,""],[1969,1,""],[1968,1,""],[1967,1,""],[1967,12,""],[1967,0," to create "],[1971,7,""],[1971,0,"the pure operation model"],[1994,1,""],[1994,0,"l;"],[1995,1,""],[1989,0,"\""],[1975,0,"\""],[2012,3,""],[2012,0,"an "],[2026,1,""],[2025,1,""],[2024,1,""],[2023,1,""],[2022,1,""],[2022,0,"ed"],[2024,16,""],[2429,0,", or _locai"],[2439,1,""],[2438,1,""],[2437,1,""],[2437,0,"gical timestamp_"],[2376,0,"//"],[2588,12,""],[4167,17,""],[4175,0,"[time machines], "],[4368,0,"\n"],[4368,0,"\n> DFi"],[4373,1,""],[4372,1,""],[4372,0,"iagram"],[4379,0,"\n"],[4379,0,"\nIn order to correctly "],[4380,0,"As noted by ["],[4392,1,""],[4392,0,"@polog, "],[4400,1,""],[4400,0,"i"],[4409,13,""],[4409,0,"for original events to be correctly it"],[4446,1,""],[4445,1,""],[4400,45,""],[4400,0,"original e"],[4400,10,""],[4380,20,""],[4380,0,"As noted by @polog,"],[4379,0,"\n"],[4379,0,"\nU"],[4380,1,""],[4379,1,""],[4378,1,""],[4379,0,"\n"],[4379,0,"\nThe original events musi "],[4404,1,""],[4403,1,""],[4403,0,"t also "],[4380,30,""],[4379,1,""],[4378,1,""],[4399,0," the original events mus "],[4423,1,""],[4423,0,"t also be annotated with their "],[4443,11,""],[4443,0,"some"],[4443,4,""],[4443,0,"with some sort of timestamp describing _then"],[4486,1,""],[4485,1,""],[4484,1,""],[4483,1,""],[4483,0,"when_ the event happened relative to other events."],[4526,0,"stored "],[4448,12,""],[4448,0,"a logical tim"],[4460,1,""],[4459,1,""],[4458,1,""],[4457,1,""],[4468,0,"of some sort "],[4491,59,""],[4491,0," the state of the document immediately prior to the event "],[4548,1,""],[4548,0,"."],[4496,13,""],[4504,0," state"],[4403,9,""],[4400,4,""],[4411,5,""],[4414,0," ass"],[4417,1,""],[4416,1,""],[4415,1,""],[4415,0,"stored alongside a version"],[4432,26,""],[4432,0,"a"],[4452,13,""],[4379,0,"\n"],[4379,0,"\nText events are not"],[4398,1,""],[4397,1,""],[4396,1,""],[4380,5,""],[4380,0,"Sq"],[4381,1,""],[4381,0,"equence editing "],[4408,0,"non-commutative. "],[4408,4,""],[4408,0,"not "],[4425,0,"Ie, if "],[4425,7,""],[4425,0,"In order to correctly interpret events, we must "],[4403,0," (inserts and deletes)"],[4447,48,""],[4447,0,"As u"],[4450,1,""],[4450,0,"such, "],[4447,9,""],[4447,0,"Ino"],[4449,1,""],[4449,0," ord"],[4447,8,""],[4447,0,"As a result ("],[4460,1,""],[4460,0,"a"],[4478,0,")"],[4543,51,""],[4543,0," when each event happened relea"],[4573,1,""],[4572,1,""],[4572,0,"ative to every other event in the system. "],[4613,1,""],[4548,0,"_"],[4544,0,"_"],[4570,0,","],[4570,46,""],[4570,0,". More specifically, the system stores the _version_ of the document state immediately prior to the event's "],[4571,0,"//"],[4380,300,""],[4380,0,"Sequence editing events (inserts and deletes) are not commutative. As a result (as noted by @polog), events must be stored alongside a logical timestamp describing _when_ each event happened.// More specifically, the system stores the _version_ of the document state immediately prior to the event's"],[4681,0,"With "],[4681,5,""],[4570,1,""],[4570,0," relat "],[4576,1,""],[4576,0,"ive to toher "],[4583,6,""],[4583,0,"other events stored in the system. "],[4617,0," Events may be"],[4624,7,""],[4623,1,""],[4622,1,""],[4621,1,""],[4620,1,""],[4619,1,""],[4618,1,""],[4617,1,""],[4728,0,"With this information, "],[2375,0," Each event happens"],[2387,0,"also "],[2399,0," at some "],[2376,32,""],[2376,0,"The document being "],[2376,19,""],[2376,0,"The event happens at some "],[2376,25,""],[2376,0,"Each event happened at some _logical version_"],[2376,45,""],[2376,0,"The document immediately before the event ha"],[2389,31,""],[2389,0,"immediately before the event happened was at some _version_, and the"],[2450,7,""],[2449,1,""],[2448,1,""],[2380,8,""],[2380,0,"ver"],[2376,71,""],[2386,5,""],[2391,0," needs to"],[2457,0,")"],[2435,0,"("],[2482,42,""],[2482,0,"."],[2376,37,""],[2376,0,"Each event happens to a "],[2409,1,""],[2408,1,""],[2408,0," at some"],[2452,24,""],[2452,0,"."],[2393,1,""],[2393,0,"ed"],[2223,17,""],[2223,0,"eduit"],[2227,1,""],[2226,1,""],[2225,1,""],[2225,0,"its"],[2211,0,"Every edit made to a "],[2222,10,""],[2222,0,"a user makes to a document is captured by its c"],[2268,1,""],[2268,0,"correpso"],[2275,1,""],[2274,1,""],[2273,1,""],[2273,0,"sponding "],[2282,34,""],[2282,0,"_"],[2288,0,"_."],[2264,3,""],[2264,0,"a"],[2264,1,""],[2264,0,"as"],[2264,2,""],[2264,0,"describing the"],[2278,14,""],[2261,17,""],[2261,0,"as an"],[2274,0," (or _pure operation_)"],[2298,0,"This event is "],[2312,3,""],[2359,0,", both in space and in time"],[2375,0,"(where the event happened) "],[2413,0," (_when_ the event happened relative to other events)"],[2381,0,"_"],[2376,0,"_"],[2402,0," in th edocum"],[2414,1,""],[2413,1,""],[2412,1,""],[2411,1,""],[2410,1,""],[2409,1,""],[2408,1,""],[2408,0,"e document"],[2359,0," /("],[2361,1,""],[2360,1,""],[2360,0," "],[2360,1,""],[2360,0,"/*"],[2487,0,"*/"],[2359,0,"."],[2490,1,""],[2630,0," Versions are p"],[2631,14,""],[2630,1,""],[2641,6,""],[2641,0,"Mesasa"],[2646,1,""],[2645,1,""],[2644,1,""],[2644,0,"sages"],[2780,0," (@fugue)"],[2898,0,"(eg [RGA]) "],[2906,0,", YATA"],[2918,2,""],[2929,0,"message "],[2944,32,""],[2980,9,""],[2980,0,"a CRDT message"],[3006,0," from a remote peer"],[3050,27,""],[3050,0,"the lo"],[3048,8,""],[3048,0,"a"],[3048,1,""],[3048,0,"the local state"],[3058,5,""],[3058,0,"CRDT state via an "],[3075,1,""],[3119,55,""],[3119,0,"When the CRDT state is modified, the system emits "],[3199,4,""],[3199,0," a"],[3352,0," [REFERENCE ME]"],[3368,10,""],[3729,0,"\n> Diagram\n"],[3786,0," for collaborative text editing"],[3859,54,""],[3859,0,". Pruning i"],[3861,9,""],[3860,1,""],[3880,17,""],[3880,0,"is queried"],[3882,8,""],[3880,2,""],[3880,0,"is needed both to"],[3880,17,""],[3880,0,"needs to be qu"],[3892,2,""],[3892,0,"ma"],[3892,2,""],[3892,0,"avialabl"],[3892,8,""],[3892,0,"available both when"],[3919,1,""],[3919,0,"ing"],[3926,6,""],[3926,0," local"],[3912,14,""],[3912,0,"emitting "],[3920,7,""],[3920,0," new, local"],[3943,0," when"],[3953,1,""],[3953,0,"ing"],[3972,0,"Generally, "],[3983,1,""],[3983,0,"t"],[3987,11,""],[4523,0,"// "],[4874,23,""],[4897,1,""],[4902,0,"the "],[4936,4,""],[4936,0," a"],[4897,0,"s"],[4970,0," and deterministically generate the resulting document state @al"],[5032,2,""],[5032,0,"example-localid-algorithm"],[5032,25,""],[5032,0,"gener"],[5032,5,""],[5032,0,"generic-crdt-replay"],[5030,0," (as shown in"],[5064,0,")"],[5155,1,""],[5155,0,". It also"],[5164,10,""],[5157,46,""],[5157,0,"A generic algorithm also does not allow the system to prune any events."],[5157,2,""],[5157,0,"The "],[5178,0,"ic approach"],[5240,0," from the event graph"],[5560,0," "],[5560,0,"@eg"],[5561,2,""],[5561,0,"eg-walker, "],[5572,12,""],[5574,5,""],[5585,19,""],[5596,13,""],[5596,0,", "],[5597,1,""],[5596,1,""],[5596,0," (_Event Graph Walker)"],[5617,1,""],[5617,0,"_). Eg-walker is a te"],[5636,2,""],[5636,0,"sequence "],[5631,15,""],[5635,0,"efficiently "],[5769,0," @ben"],[5771,3,""],[5771,0,"benchmarking"],[5770,0,"in "],[5735,38,""],[5735,0,"In "],[5752,0," we "],[5753,3,""],[5752,1,""],[5752,0," we show"],[5753,7,""],[5753,0,"we benchmark eg-walker "],[5753,23,""],[5735,2,""],[5735,0,"As we show in"],[5764,1,""],[5763,0," despite doing more wo"],[5772,13,""],[5772,0,"the "],[52061,1,""],[52061,0,"="],[49893,0,"\n= Partial Traversal"],[49912,1,""],[49912,0,"<name>"],[49912,6,""],[49912,0,"l\n\n"],[49914,0,"\nThe algoruith"],[49927,1,""],[49926,1,""],[49925,1,""],[49924,1,""],[49924,0,"ithm given above can accurately replay"],[49941,3,""],[49941,0,"will"],[49963,0," any event graph of se"],[49980,5,""],[49979,1,""],[49979,0," of sequence events to generate the coresp"],[50020,1,""],[50019,1,""],[50018,1,""],[50018,0,"responding d"],[50029,1,""],[50029,0,"figu"],[50032,1,""],[50031,1,""],[50030,1,""],[50030,0,"ugue CRDT - and resulting document state. However, this algort"],[50091,1,""],[50091,0,"ithm h"],[50096,1,""],[50096,0,"still has a big drawback: It only"],[50125,4,""],[50125,0,"requires scanning "],[50125,18,""],[50125,0,"scans the en"],[50124,13,""],[50124,0," requires a"],[50125,10,""],[50125,0,"must ev"],[50131,1,""],[50130,1,""],[50125,5,""],[50125,0,"visits every event e"],[50144,1,""],[50144,0,"in the event graph in th ep"],[50170,1,""],[50169,1,""],[50168,1,""],[50168,0,"e process. This is both slow"],[50187,5,""],[50191,0," for loar"],[50199,1,""],[50198,1,""],[50197,1,""],[50197,0,"argum"],[50201,1,""],[50200,1,""],[50200,0,"e documents, memory inefficient and it requires the ent "],[50255,1,""],[50255,0,"ire event graph be made available to all col"],[50296,3,""],[50296,0,"processes "],[50305,1,""],[50305,0,"."],[50296,10,""],[50296,0,"re"],[50289,9,""],[50289,0,"at all time "],[50300,1,""],[50300,0,"s to all replicas. (Ie, we can't prune the e"],[50343,1,""],[50343,0,"graph).\n\nIn this section we present a "],[50380,1,""],[50380,0,"n optimisation to eg-walker which allows "],[50380,1,""],[50380,0," some"],[50398,0,"s"],[50413,13,""],[50413,0,"to allow for partial trav"],[50434,4,""],[50434,0,"t"],[50434,1,""],[50434,0,"updates - "],[50443,1,""],[50442,1,""],[50441,1,""],[50426,15,""],[50426,0,"a document state to be "],[50426,23,""],[50426,0,"partial traversal. I"],[50445,1,""],[50444,1,""],[50444,0," Partial traversal allows only a re"],[50478,1,""],[50477,1,""],[50476,1,""],[50475,1,""],[50475,0,"part of the"],[50470,16,""],[50470,0,"document sta"],[50481,1,""],[50480,1,""],[50480,0,"napshots"],[50470,0,"a "],[50489,1,""],[50489,0," at some version #"],[50506,1,""],[50506,0,"$$"],[50507,0,"V_0"],[50511,0," to be updated to incorporate all the changes in "],[50549,11,""],[50549,0,"events in version $$"],[50568,0,"V_m"],[50572,0," (the emrge"],[50582,1,""],[50581,1,""],[50580,1,""],[50579,1,""],[50578,1,""],[50578,0,"merged version) without visiting the entire "],[50593,0," eve"],[50596,1,""],[50595,1,""],[50595,0,"fficiently."],[50606,29,""],[50593,13,""],[50593,0,", without visiting the entire event graph."],[50603,9,""],[50603,0,"traversing "],[50636,0," in th "],[50642,1,""],[50642,0,"e process"],[50695,68,""],[50694,0,"\n"],[50694,0,"\n> TODO: Consider deleting this / "],[50727,1,""],[50726,1,""],[50725,1,""],[50725,0,"!"],[5734,0," Natively, eg-walker i"],[5755,1,""],[5755,0,"only "],[5755,5,""],[5755,0,"must visit every event in the event graph to generate the"],[5755,5,""],[5760,0,"s"],[5755,0,"traversess"],[5764,1,""],[5764,0," "],[5765,31,""],[5765,0,"the entire event"],[5803,0," corresponding CRDT state (using Fugue-"],[5841,1,""],[5841,0,"Max @fu"],[5846,2,""],[5846,0,"fugue). During this traversal, events are transformed and applied. However, this is "],[5930,1,""],[5930,0,"\n"],[5557,373,""],[5557,0,"In @eg-walker, we introduce _eg-walker_ (_Event Graph Walker_). Eg-walker can efficiently replay any event graph of sequence edits and generate the corresponding document state. Natively, eg-walker traverses the entire event graph to generate the corresponding CRDT state (using FugueMax @fugue). During this traversal, events are transformed and applied. However, this is"],[5930,0,"\n"],[5927,2,""],[5927,0,"still does not solve "],[5913,35,""],[5913,0,"However, this still does not solve the problem of pruning: how "],[5972,4,""],[5971,1,""],[5970,1,""],[5970,0,". When recei"],[5981,1,""],[5980,1,""],[5980,0,"ieving a "],[5977,12,""],[5972,5,""],[5922,50,""],[5922,0,"generating the corre"],[5937,5,""],[5937,0,"CRDT "],[5937,5,""],[5922,15,""],[5922,0,"regenerating the CRDT state on every"],[5922,0,"traverseing "],[5933,1,""],[5932,1,""],[5931,1,""],[5930,1,""],[5929,1,""],[5929,0,"ing the entire event graph to "],[5970,1,""],[5969,1,""],[5968,1,""],[5968,0,"e"],[5993,0," peer is inefficient, "],[6014,1,""],[6013,1,""],[6013,0," and slow, and precludes pee"],[6038,3,""],[6038,0,"replicas from pruning any events in the event graph.\n\nIn @pr"],[6097,1,""],[6096,1,""],[6096,0,"parti"],[6096,5,""],[6096,0,"eg-partial"],[51053,13,""],[50286,0," <eg-partial>"],[6106,0," "],[6092,15,""],[6092,0,"In @eg-partial we show how the algorithm "],[6092,41,""],[6092,0,"In @eg-partial we show how the algorithm"],[6022,1,""],[6022,0,". It"],[6026,4,""],[6024,2,""],[6024,0,"And it"],[6135,0," can be adapted to implement ("],[6164,1,""],[6164,0,"_partial transformation_ "],[6188,1,""],[6188,0,", "],[6189,1,""],[6188,1,""],[6188,0,". "],[6189,1,""],[6188,1,""],[6143,45,""],[6143,0,"optimised to visit only the events w"],[6178,1,""],[6167,11,""],[6167,0,"a small subset of events "],[6191,1,""],[6191,0,"."],[6191,1,""],[6191,0," when integrating incoming "],[6209,9,""],[6209,0,"events from other peers."],[6197,36,""],[6197,0,"merging events from other peers. This optimisation also drma"],[6256,1,""],[6255,1,""],[6255,0,"amatically"],[6229,0," The "],[6233,1,""],[6232,1,""],[6231,1,""],[6230,1,""],[6229,1,""],[6248,5,""],[6248,0,"not only "],[6248,9,""],[6247,0," also"],[6265,0," improves performance for linear editing traces - by about 15x in our"],[6217,5,""],[6217,0,"remote"],[6192,0,"in the graph "],[6218,6,""],[6218,0,"changes"],[6280,0," reduces memory usage and"],[6268,37,""],[6268,0,"dramatically"],[6349,0," testing."],[6360,13,""],[6360,0,"Section"],[6360,8,""],[6373,0," shows a series of eral "],[6392,5,""],[6392,0,"per"],[6380,15,""],[6380,0,"comprehensive performance evalusation"],[6416,1,""],[6415,1,""],[6414,1,""],[6413,1,""],[6412,1,""],[6411,1,""],[6411,0,"ation, "],[6417,1,""],[6416,1,""],[6374,42,""],[6374,0,"evaluates the performance of eg-walker comp"],[6416,1,""],[6415,1,""],[6414,1,""],[6413,1,""],[6412,1,""],[6412,0,", comparing it to contemporary "],[6430,0,"equivalent CRDT based approaches "],[6463,13,""],[6463,0,"on file size, CPU performance"],[6481,11,""],[6481,0,"time and memory usage when "],[6507,1,""],[6506,1,""],[6505,1,""],[6504,1,""],[6503,1,""],[6503,0,"in real world editing situations"],[6525,10,""],[6525,0,"environments. "],[6538,1,""],[6538,0,"\n\n"],[6538,0," E"],[6539,1,""],[6539,0,"Eg-walker is faster and smaller that"],[6574,1,""],[6574,0,"n e"],[6576,1,""],[6576,0,"equivalent CRDT based approaches in our data sets, but it scales worse"],[6641,5,""],[6641,0,"poorly when the event graph contains "],[6641,7,""],[6641,0,"worse than "],[6625,1,""],[6625,0,". However,"],[6635,4,""],[6639,48,""],[6638,1,""],[6637,1,""],[6637,0,"t scales worse than when the event graph contains "],[6656,0," CRDTs"],[6693,0,"large amounts of concurrent"],[6692,0," a lot of"],[6701,17,""],[6712,0," edits."],[6693,26,""],[6693,0,"an extrem"],[6684,18,""],[6684,0,"is highly concurrent. H"],[6706,1,""],[6705,1,""],[6704,1,""],[6704,0,"."],[6705,221,""],[6663,23,""],[6663,0,"in extremeely"],[6675,1,""],[6674,1,""],[6673,1,""],[6673,0,"ly"],[6675,7,""],[6686,0," data"],[6687,4,""],[6687,0,"environments"],[6616,0,"real world "],[6710,0," (eg very complex git editing histories)"],[7123,7,""],[7156,0," "],[6996,1,""],[6996,0,"\n\n"],[7158,0,"This approach is "],[7172,3,""],[7055,0,"in "],[7064,1,""],[7064,0,". "],[7066,2,""],[7066,0,"W"],[7066,1,""],[7066,0,"H"],[7073,0,","],[7074,3,""],[7075,0,"we "],[7075,0,"in this formalism "],[7194,0,"allows for "],[7180,25,""],[7179,1,""],[7179,0," Th"],[7181,1,""],[7180,1,""],[7180,0,"Graph theory is used when "],[7201,5,""],[7201,0,"to construct eg-walker"],[7214,0,"our "],[7227,0," algorithm for t"],[7242,1,""],[7241,1,""],[7240,1,""],[7239,1,""],[7238,1,""],[7237,1,""],[7237,0,"."],[7237,1,""],[7237,0," in @eg"],[7242,2,""],[7242,0,"eg-walker."],[7180,6,""],[7180,0,"This "],[7200,2,""],[7200,0,"in our"],[7215,1,""],[7215,0,"tion"],[7219,4,""],[7219,0," of"],[7202,4,""],[7202,0," the"],[7223,0,"our "],[7263,0,"The event graph is a set f"],[7288,1,""],[7288,0,"of original editing evn"],[7310,1,""],[7310,0,"ents produces by "],[7326,1,""],[7325,1,""],[7324,1,""],[7323,1,""],[7322,1,""],[7322,0,"d by replicas whi"],[7338,1,""],[7337,1,""],[7336,1,""],[7336,0,"while editing a document. "],[7373,19,""],[7420,0,")"],[7399,0,"("],[7421,1,""],[7399,1,""],[7399,0,"event "],[7414,0," data"],[7407,0,"_"],[7405,0,"_"],[7421,0,"_"],[7417,0,"_"],[7435,0,"_"],[7428,0,"_"],[7428,0,"casu"],[7431,1,""],[7430,1,""],[7430,0,"usal "],[7416,7,""],[7411,0,"the "],[7420,0," itself"],[7431,0," its"],[7405,1,""],[7399,0,"_"],[7399,1,""],[7407,1,""],[7399,6,""],[7399,0,"an "],[7403,1,""],[7402,1,""],[7402,0,"id"],[7403,1,""],[7402,1,""],[7402,0,"ID"],[7361,1,""],[7361,0,"\n\n"],[7361,0," Each event has an ID (#"],[7384,1,""],[7384,0,"$i$), "],[7387,1,""],[7383,1,""],[7388,0,"and associated event data (eg `"],[7418,1,""],[7388,4,""],[7411,3,""],[7410,1,""],[7410,0,"and a set of causal _parents_ descibi"],[7446,1,""],[7445,1,""],[7444,1,""],[7444,0,"ribing when the event happened relative to other events in the graph."],[7515,87,""],[7387,0," and"],[7413,0," #"],[7414,1,""],[7414,0,"$e_i$"],[7450,0,"$$ "],[7451,0,"P_i"],[7620,22,""],[7620,0,"."],[7361,1,""],[7360,1,""],[7360,0,".\n\n// "],[7535,0,"// "],[7326,0," a"],[7327,1,""],[7326,1,""],[7315,11,""],[7314,1,""],[7314,0,". "],[7315,1,""],[7291,0,"all of the "],[7325,1,""],[7325,0," produced by"],[7335,37,""],[7335,0,"by ser"],[7340,1,""],[7339,1,""],[7338,1,""],[7338,0,"u"],[7338,1,""],[7338,0,"users while editing a document. Each event"],[7380,1,""],[7370,14,""],[7390,4,""],[7392,4,""],[7413,6,""],[7444,6,""],[7517,5,""],[7517,0,"\n\n"],[7418,25,""],[7418,0,"a "],[7419,1,""],[7418,1,""],[7418,0,"a _parent version_"],[7601,1,""],[7601,0," with "],[7606,1,""],[7605,1,""],[7604,1,""],[7603,1,""],[7603,0,"here"],[7602,5,""],[7601,1,""],[7601,0,". "],[7512,91,""],[7512,0,"Formally, the event graph $G$ is a set of globally unique event IDs ${i_1, i_2, i_3, ..}$."],[7390,1,""],[7390,0," and"],[7390,4,""],[7390,0,","],[7601,1,""],[7601,0," as well as s"],[7613,1,""],[7613,0,"associated event data and parent information for each event:"],[7672,1,""],[7672,0," "],[7672,1,""],[7672,0,", where:"],[7634,0," #"],[7635,1,""],[7635,0,"$e_i$"],[7652,12,""],[7651,1,""],[7651,0,"s $"],[7653,1,""],[7652,1,""],[7651,1,""],[7651,0," version $P_i$ "],[7680,8,""],[7680,0," in the graph."],[7693,1,""],[7693,0,", whjere"],[7700,1,""],[7699,1,""],[7698,1,""],[7697,1,""],[7697,0,"ere:"],[8001,25,""],[8001,0," have an associated"],[7263,0,"// "],[6996,0," Each event has an ID, associated event data and a _parent version_ describing when the event happened relative to other events in the graph."],[8491,18,""],[8491,0,"The events"],[8501,6,""],[8501,0," form"],[8537,1,""],[8537,0," where"],[8538,5,""],[8537,1,""],[8537,0,"."],[8681,0,"_"],[8664,0,"_"],[9576,0,"\n"],[9576,0,"\n"],[9576,1,""],[9575,1,""],[10063,0," "],[10063,1,""],[10275,1,""],[10276,31,""],[9880,0,"\n"],[9880,0,"\n\n> *DIAGRAMS OF EXAMPLE GRAPHS*"],[9880,1,""],[10830,0,"\n"],[10830,0,"\nRather than using vector clocks [REF] or some other logical "],[10868,23,""],[10868,0,", we define versions "],[10870,0,"in this work "],[10902,0,"based on the graph itself."],[10910,0," t"],[10911,1,""],[10910,1,""],[10831,0,"// "],[10830,0,"\n"],[10830,0,"\nIn this paper, we use an a"],[10856,1,""],[10855,1,""],[10854,1,""],[10854,0," simplified "],[10831,0,"// "],[10831,38,""],[10830,1,""],[10829,1,""],[10932,0,"\n"],[10932,0,"\n"],[10932,1,""],[10931,1,""],[10494,0,"\n\n"],[10495,0,"> TODO: Introduce this section?"],[10525,1,""],[10525,0," somehow."],[12005,0,"The version - "],[12018,1,""],[12017,1,""],[12005,12,""],[12005,0,"A graph and its corresopnding "],[12021,14,""],[12021,0,"corresponding version form a pair, "],[12005,51,""],[12005,0,"A graph and its corresponding version form a pair, "],[12005,80,""],[12005,0,"The "],[12005,4,""],[12005,0,"An event graph and its corresponding version form a bijection "],[12066,1,""],[12066,0,". "],[12067,1,""],[12005,62,""],[12005,0,"There is a one-to-one correspondence between versions and the equivalent"],[12067,10,""],[12067,0,"exapc"],[12071,1,""],[12070,1,""],[12069,1,""],[12069,0,"pane"],[12072,1,""],[12072,0,"ded event graph."],[12067,0,"corresponding "],[12104,0,"// "],[12005,97,""],[11855,0,"There is a one-to-one correspondence between versions and the corresponding expanded event graph. "],[12103,1,""],[12102,1,""],[17088,0,"\n\n> TOOD: "],[17097,1,""],[17096,1,""],[17095,1,""],[17094,1,""],[17094,0,"DO: Consider removing this e"],[17121,1,""],[17121,0,"section?"],[17107,8,""],[17107,0,"eliding"],[17107,7,""],[17107,0,"removing"],[17128,1,""],[6754,1,""],[10480,1,""],[13248,1,""],[17071,1,""],[17069,0,"\n/*"],[18232,0,"\n"],[18232,0,"&"],[18232,1,""],[18232,0,"*/"],[18255,0,"\n"],[18255,0,"\nEvery event graph can be replatye"],[18288,1,""],[18287,1,""],[18286,1,""],[18286,0,"yed_"],[18281,0,"_"],[18291,0," to generate the corresponding document state "],[18336,1,""],[18304,0,"its "],[18308,4,""],[18304,4,""],[18304,0,"the "],[18336,0," generated by "],[18347,3,""],[18347,0,"after"],[18304,3,""],[18304,0,"a"],[18335,15,""],[18334,1,""],[18334,0,". T"],[18336,1,""],[18335,1,""],[18334,1,""],[18334,0," - which i"],[18335,9,""],[18335,0,"- which happen"],[18304,1,""],[18304,0,"the"],[18337,14,""],[18337,0,"after all events have been applied."],[18374,0,"// "],[18336,0,"_"],[18322,0,"_"],[18337,1,""],[18322,1,""],[18304,3,""],[18304,0,"a"],[18362,8,""],[18362,0,"merged."],[18695,0,"// "],[18564,0,"// "],[18533,0,"// "],[18883,1,""],[18883,0,"."],[18884,1,""],[18884,0,"\n  \n  "],[18885,2,""],[18883,1,""],[18883,0,", where $DD$ is the set of all possible document states for e"],[18943,1,""],[18943,0,"some "],[18890,0,":\n  \n  "],[18892,2,""],[18895,0,"\\"],[18901,0,":"],[18901,1,""],[18896,1,""],[18895,1,""],[18895,0,"- "],[18945,9,""],[18945,0,"in our system. For e"],[18964,1,""],[18964,0,"te"],[18965,1,""],[18965,0,"ext documents, this is et"],[18989,1,""],[18988,1,""],[18988,0,"the set of all strings of unicu"],[19018,1,""],[19018,0,"ode codepoints."],[18895,2,""],[18893,2,""],[18892,1,""],[18891,1,""],[18890,1,""],[18890,0," "],[18883,7,""],[18883,0,"."],[18884,1,""],[18884,0,"\n  \n  "],[18885,2,""],[18954,0," example, "],[18964,25,""],[18950,59,""],[18950,0," (For example, for text editing this is a "],[18991,1,""],[18990,1,""],[18990,0,"the set of all strings)"],[19012,0,"."],[19012,0," of text"],[19016,4,""],[19015,1,""],[19014,1,""],[19013,1,""],[19012,1,""],[19005,0,"text "],[19119,8,""],[19119,0,"occurred"],[19129,4,""],[19633,1,""],[19633,0,"\n"],[19551,0,"// "],[19742,5,""],[19761,10,""],[19682,0," (wh"],[19685,1,""],[19684,1,""],[19683,1,""],[19682,1,""],[19789,6,""],[19804,0," For example, "],[19804,14,""],[19863,55,""],[19863,0,"use different algorithmic approaches to doing so."],[19867,45,""],[19866,1,""],[19859,7,""],[19835,0,"generate "],[19835,9,""],[19859,0,"via different algorithms."],[19831,4,""],[19831,0,"will "],[19831,4,""],[19831,0,"may"],[19858,0,", but they do so"],[19869,5,""],[19869,0,"will do so"],[19904,1,""],[19904,0," with different performance characteristics."],[20017,31,""],[20017,0,"In this paper we only"],[20038,8,""],[20065,13,""],[20065,0,"semantically "],[20086,5,""],[20086,0,"based on an"],[20111,1,""],[20112,0," O"],[20113,1,""],[20113,0,"Correnc"],[20119,1,""],[20118,1,""],[20113,5,""],[20113,0,"This property is defined by"],[20139,1,""],[20138,1,""],[20138,0,"more rig"],[20138,8,""],[20138,0,"more re"],[20144,1,""],[20144,0,"igorously in"],[20156,31,""],[20118,0,"correctness constraint"],[20140,8,""],[20151,16,""],[20175,9,""],[20172,0,"\n"],[20172,0,"\nAn event graph describes a set of replicating peers "],[20207,12,""],[20207,0,"replicating "],[20207,12,""],[20213,0,"collaboratively editing some document. "],[20251,1,""],[20206,22,""],[20206,0," "],[20206,9,""],[20206,0," edits made by a set of replicas to"],[20241,5,""],[20241,0," a"],[20253,0," This "],[20258,1,""],[20257,1,""],[20256,1,""],[20256,0,"e set of edits can be "],[20218,21,""],[20237,20,""],[20237,0,"edits can "],[20173,0,"// "],[20173,77,""],[20173,0,"// An event graph describes a set of edits made to a document. The edits can"],[20250,0,"\n"],[20250,0,"\nWe can consider a "],[20268,1,""],[20268,0,"n event graph"],[20251,30,""],[20250,1,""],[20249,1,""],[20250,0,"\n"],[20250,0,"\nThe replay function essentially captures "],[20283,9,""],[20283,0,"combines 2 parts of a "],[20292,13,""],[20292,0,"the prepare and "],[20303,0,"_"],[20296,0,"_"],[20291,19,""],[20291,0," all of the work of a "],[20283,30,""],[20283,0,"combines all of the work of a "],[20251,62,""],[20251,0,"In a traditional CRDT"],[20251,4,""],[20251,0,"A"],[20253,12,""],[20253,0,"traditional "],[20269,0," is impleme"],[20273,7,""],[20273,0,"essentially implementa"],[20294,1,""],[20294,0,"ed in 2 parts:\n\n1. The set of events in the event graph is c "],[20354,1,""],[20316,14,""],[20316,0," event graph"],[20328,24,""],[20328,0," is converted into "],[20313,34,""],[20313,0,"Editing events on a"],[20331,1,""],[20330,1,""],[20329,1,""],[20328,1,""],[20327,1,""],[20327,0," across all peers are combined into a CRDT state"],[20349,0,"converted into CRDT messages (via the _prepare_ function) then "],[20438,0," (via _effect_)"],[20383,4,""],[20393,8,""],[20392,1,""],[20440,0,". "],[20441,1,""],[20251,57,""],[20251,0,"An event graph and corresponding replay function loosely core"],[20300,12,""],[20300,0,"loosely core"],[20300,12,""],[20300,0,"corresponds to a "],[20316,1,""],[20315,1,""],[20315,0,"a CRDTs"],[20321,1,""],[20321,0,"'s state and its query function."],[20299,0," loosely"],[20318,1,""],[20360,0," We can think of a "],[20377,2,""],[20377,0,"a CRDT as doing 2"],[18304,1,""],[18304,0,"the"],[18256,7,""],[18256,0,"E"],[18267,0,"s"],[18255,0,"\n"],[18255,0,"\nEvent graphs themselves aren't "],[18256,31,""],[18256,0,"Users don't want the event graph. They want to see the document th"],[18321,1,""],[18320,1,""],[18320,0,"itself."],[18311,0,"resulting "],[18337,0," Tog "],[18341,1,""],[18340,1,""],[18340,0," generate the document state, "],[18370,3,""],[18370,0,"e"],[18400,0," (via a _replay function)"],[18424,1,""],[18424,0,"_)"],[18488,0," in the graph"],[18471,0,", made from me"],[18471,14,""],[18471,0,", made from somh"],[18486,1,""],[18486,0,"ehow merging all the events in the graph"],[18526,48,""],[18526,0,"."],[18526,1,""],[18526,0," after all events in the graph have been merged."],[18520,6,""],[18516,4,""],[18513,3,""],[18506,7,""],[18502,4,""],[18498,4,""],[18490,8,""],[18486,4,""],[18486,0,"h"],[18482,5,""],[18477,5,""],[18472,5,""],[19300,0,"\n  \n  "],[19301,2,""],[19304,0,"For text editing, $DD$ is "],[19302,28,""],[19302,0,"  For text editing, $DD$ is"],[19137,33,""],[19101,36,""],[19260,0," the set of all text eod"],[19283,1,""],[19282,1,""],[19281,1,""],[19281,0,"documents (o"],[19292,1,""],[19292,0,"all lists of ch"],[19296,11,""],[19296,0,"strings). $d_0$ is the empty string \"\""],[19332,0,"`"],[19335,0,"`."],[19290,14,""],[20239,13,""],[20256,3,""],[20269,0,"s"],[20276,12,""],[20272,29,""],[20272,0,"We go into more detail on this is"],[20304,1,""],[20304,0,"n"],[20314,7,""],[20191,0,"Though there may be other ways to construct a re"],[20225,14,""],[20225,0,"define a replay function, "],[20251,1,""],[20251,0,"i"],[20307,5,""],[20307,0,"by"],[20372,0," Eg-walker "],[20372,11,""],[20191,0,"// "],[20473,0," the"],[20474,3,""],[20474,0,"its"],[20515,11,""],[20515,0," correlate"],[20568,0,"More specitifca"],[20582,1,""],[20581,1,""],[20580,1,""],[20579,1,""],[20578,1,""],[20577,1,""],[20577,0,"ifically, "],[20587,1,""],[20587,0,"w"],[20620,0," separate tasks:"],[20769,0,"\n2. The CRDT state is converted into a resulting document state via the CRDT's _query_ function.\n\nThe querty"],[20876,1,""],[20875,1,""],[20875,0,"y function essentially encp"],[20901,1,""],[20901,0,"apsulates both of these sts"],[20927,1,""],[20927,0,"eps. It must "],[20886,12,""],[20899,29,""],[20899,0,"all of this work. It mu"],[20921,1,""],[20920,1,""],[20919,1,""],[20918,1,""],[20917,1,""],[20917,0,"It "],[20917,3,""],[20916,1,""],[20916,0," We can implmeent "],[20924,10,""],[20924,0,"implement replay "],[20940,0,"_"],[20934,0,"_"],[20943,0,"based on a CRDT "],[20943,0,"dr"],[20944,1,""],[20943,1,""],[20959,0,"directly, by "],[20967,1,""],[20971,0,"simulating the corresponding "],[20982,18,""],[20982,0,"a network co"],[20993,1,""],[20992,1,""],[20992,0,"of collaborating peers"],[20959,9,""],[21005,0," ed"],[21007,1,""],[21006,1,""],[21005,1,""],[21005,0," by "],[21006,3,""],[21005,1,""],[21005,0," directly. Seet "],[21020,1,""],[21019,1,""],[21019,0," #"],[21020,1,""],[21020,0,"@al"],[21022,1,""],[21021,1,""],[21021,0,"nai"],[21023,1,""],[21022,1,""],[21021,1,""],[21021,0,"cd"],[21022,1,""],[21022,0,"rd"],[21021,3,""],[21021,0,"generic-crdt-replay. However, "],[20867,184,""],[20867,0,"The query function encapsulates all of this work. We can implement _replay_ based on a CRDT by simulating a network of collaborating peers directly. See @generic-crdt-replay. However,"],[18933,1,""],[18933,0,"V"],[18986,0," $G = ceil(V)$"],[18987,14,""],[19035,0," The event graph is specified via its version - ie, $G = ceil(V)$ "],[19100,1,""],[19100,0,"."],[20937,5,""],[20937,0,"replay"],[20933,0,"Because event graphs store "],[20954,6,""],[20954,0,"do not store the CRDT state, "],[20983,1,""],[20983,0,"t"],[20933,51,""],[20933,0,"T"],[20982,0," for the entire graph of events"],[21014,1,""],[21014,0,"\n\n"],[21014,0," However, "],[21014,10,""],[21149,0," because the co"],[21163,1,""],[21162,1,""],[21162,0,"CRDT state is not visible outside the replay function, it does not e"],[21229,1,""],[21229,0,"actually need to be generated."],[21161,0," corresopnding"],[21162,13,""],[21162,0,"corresponding"],[21193,0," actually"],[20257,3,""],[20394,1,""],[20394,0,"\n\n// "],[20396,3,""],[20396,0,"// "],[20394,0," When de"],[20395,7,""],[20394,1,""],[20256,0,"\n"],[20256,0,"\nWe can define a replay function v"],[20289,1,""],[20289,0,"from a CRDT."],[20257,0,"// "],[20306,0,"// "],[20985,0,"\n"],[20985,0,"\nI"],[20986,1,""],[20643,1,""],[20642,1,""],[20641,1,""],[20640,1,""],[20640,0,"sopi"],[20643,1,""],[20642,1,""],[20641,1,""],[20641,0,"pond"],[20596,14,""],[20653,4,""],[20574,96,""],[20873,0,"An event graph and its replay function loosely correspond to a CRDT's state and query function. "],[20873,0,"// "],[20873,99,""],[20873,0,"// An event graph and its replay function loosely correspond to a CRDT's state and query function."],[20257,47,""],[20526,0,"\nWe can define a replay function from a CRDT."],[20571,69,""],[20540,2,""],[20556,0,"s"],[20557,13,""],[20557,0," from CRDT definitions. Loosel;y, "],[20590,1,""],[20589,1,""],[20588,1,""],[20587,1,""],[20587,0,"y, "],[20581,9,""],[20580,1,""],[20579,1,""],[20579,0,":\n\n- The event graph "],[20584,0,"Using a CRDT defint"],[20602,1,""],[20602,0,"itionm, "],[20609,1,""],[20608,1,""],[20607,1,""],[20607,0,", "],[20609,1,""],[20609,0,"t"],[20625,0,"can be com"],[20634,1,""],[20634,0,"nverted ion"],[20644,1,""],[20643,1,""],[20643,0,"t"],[20643,1,""],[20643,0,"nto a co"],[20647,4,""],[20647,0,"its corresponding CRDT"],[20647,3,""],[20647,0,"a"],[20648,1,""],[20648,0," "],[20667,0," C"],[20668,1,""],[20668,0,"state"],[20596,0,"'s"],[20610,4,""],[20610,0," an"],[20674,0," by simulationg "],[20689,1,""],[20688,1,""],[20687,1,""],[20686,1,""],[20686,0,"ng the equivalent netw"],[20693,15,""],[20689,4,""],[20689,0,"a network of "],[20582,120,""],[20582,0,"- Using a CRDT's definition, an event graph can be converted into a corresponding CRDT state by simulating a network of"],[20540,0," a"],[20558,6,""],[20558,0," based on a"],[20585,1,""],[20574,11,""],[27715,0,"\n/*"],[28841,0,"\n"],[28841,0,"\n*//"],[28844,1,""],[20258,0,"\nAs shown in [Time machines paper], we can define a replay function's behaviour by constructing it from the definition of an existing CRDT.\n\nConsider a network of collaborating replicas using a CRDT to create and replicate the events described by the event graph $G$. Once this network of peers has reaches quiescence, all peers will have converged on some document state. $r(G)$ must produce the same document state as the CRDT.\n\n"],[20257,1,""],[20256,1,""],[20686,1,""],[20687,268,""],[20687,0,"Using this definition, "],[20693,17,""],[20687,54,""],[20687,0,"Based on this definition, "],[20687,26,""],[20687,0,"Based on this definition,"],[20395,0," In this paper, this is th eonly "],[20422,6,""],[20421,1,""],[20421,0,"e only way we will define replay functions."],[20395,69,""],[20395,0," In this paper, this is the only way we will define replay functions."],[20395,69,""],[20396,0,"\n"],[20396,1,""],[20685,0," I"],[20686,1,""],[20685,1,""],[20685,0," ##"],[20687,1,""],[20686,1,""],[20686,0,"$$"],[20687,0,"r(G) = q(s)"],[20699,0," "],[20699,1,""],[20684,0," does"],[20704,0," where $Q"],[20712,1,""],[20712,0,"q$ is the CRDT's queryi"],[20713,0,"(s)"],[20732,6,""],[20732,0,"state passed to the CRDT's query function."],[20775,0,"\n\n"],[20776,0,"The repl"],[20776,8,""],[20776,0,"Implem"],[20781,1,""],[20781,0,"nte"],[20776,8,""],[20776,0,"Implemented this way, the queryion f"],[20802,10,""],[20802,0,"replay function must do both"],[20823,7,""],[20822,1,""],[20822,0,":"],[20822,1,""],[20822,0," do the equivalent work "],[20830,16,""],[20830,0,"same work \""],[20840,1,""],[20839,1,""],[20839,0,"\""],[20835,0,"\""],[20841,0," as the CRDT"],[20840,1,""],[20835,1,""],[20851,0," "],[20851,1,""],[20851,0,", by:"],[20856,27,""],[20858,121,""],[20857,0,"\n"],[20857,0,"\n- Replaying "],[20860,10,""],[20860,0,"Si"],[20860,2,""],[20860,0,"Replaying all events "],[20860,0,"S"],[20860,1,""],[20881,0,"to generate the corespon"],[20904,1,""],[20903,1,""],[20902,1,""],[20901,1,""],[20900,1,""],[20900,0,"responding CRDT state\n- Running"],[20858,1,""],[20858,0,"1."],[20923,0,"2"],[20924,1,""],[20924,0,"."],[20933,0," th "],[20936,1,""],[20936,0,"e CRDT state "],[20938,0,"generated "],[20959,0,"through the CRDT's queryion f"],[20987,1,""],[20986,1,""],[20985,1,""],[20984,1,""],[20983,1,""],[20983,0,"y "],[20984,1,""],[20983,1,""],[20983,0," function\n\n"],[20994,330,""],[20993,0,"\nA naive a"],[21002,1,""],[21002,0,"alogir"],[21007,1,""],[21006,1,""],[21005,1,""],[21004,1,""],[21004,0,"gorithm"],[21001,0,", but generic"],[21024,0," for doing this procesin"],[21047,1,""],[21046,1,""],[21045,1,""],[21045,0,"sing is provided in @gene"],[21066,4,""],[21066,0,"generic-crdt-replay"],[21046,0,"s"],[21086,0,"."],[21040,10,""],[21040,0,"work, for any CRDT"],[21029,24,""],[21029,0,"converting any "],[21040,4,""],[21029,11,""],[21029,0,"doing this "],[21039,6,""],[21039,0," in Haskell"],[20995,11,""],[21076,0,"\n\n"],[21078,85,""],[21078,0,"// "],[21205,1,""],[21205,0,"\n\n"],[21076,0," Unfortunately, this algorth"],[21103,1,""],[21102,1,""],[21102,0,"ithm is slow and memory inefficient in practice. [REF: benchmarking!]"],[21150,21,""],[21150,0,"\n\n> BENCM"],[21158,1,""],[21157,1,""],[21157,0,"CHMARK"],[21294,0,"// "],[21440,0,"// "],[20394,1,""],[20394,0,":\n\n#defn"],[20398,4,""],[20398,0,"definition(\"CRDT based replay function\")[\n  \n  "],[20440,2,""],[20441,2,""],[20441,0,"]"],[20821,0,"\n"],[20443,1,""],[20820,0,"\n]"],[20441,2,""],[20818,0,"\n"],[20440,1,""],[20440,0,"  "],[20819,1,""],[20439,0,"\n  "],[20440,2,""],[18889,0,"\n  "],[18889,3,""],[20440,0,"  A replay function based on a "],[20442,29,""],[20440,2,""],[20439,1,""],[20673,1,""],[20673,0,"\n  \n  "],[20674,2,""],[20439,0,"\n  \n  "],[20440,2,""],[20441,2,""],[20440,0,"A"],[20440,1,""],[20440,0,"  A replay function can be defined baed "],[20479,1,""],[20478,1,""],[20477,1,""],[20477,0,"sed on some CRDT $"],[20494,1,""],[20494,0,"$$"],[20495,0,"()"],[20496,0,"S, S^0, q, t, u, P"],[20516,0,", from @sh"],[20524,2,""],[20524,0,"shapiro. $T$"],[20535,1,""],[20534,1,""],[20534,0,"t4"],[20535,1,""],[20535,0,"$ is the _pe"],[20546,1,""],[20546,0,"repare_ function and "],[20533,0,"$q$, "],[20541,0," and $u$ are"],[20553,31,""],[20553,0," the _querty_"],[20565,1,""],[20564,1,""],[20563,1,""],[20563,0,"y_ function, _parep"],[20581,1,""],[20580,1,""],[20579,1,""],[20578,1,""],[20578,0,"repare_ function and _effe"],[20599,5,""],[20599,0,"_effect_ functions respev"],[20623,1,""],[20623,0,"ctiuve"],[20628,1,""],[20627,1,""],[20626,1,""],[20626,0,"vely./"],[20631,1,""],[3083,1,""],[3083,0,"-"],[20499,1,""],[20499,0,"s"],[20442,41,""],[20442,0,"Given"],[20457,0," defined as"],[20491,6,""],[20491,0," via"],[20504,1,""],[20504,0,", where"],[20610,0," We "],[20613,1,""],[20612,1,""],[20611,1,""],[20610,1,""],[20439,0,"\n  We can define a CRDT"],[20458,4,""],[20458,0,"replay function from a CRDT definition. A"],[20498,1,""],[20498,0,"Assume we have "],[20440,73,""],[20440,0,"  We can define a replay function from a CRDT definition. Assume we have"],[20512,8,""],[20676,0,"\n"],[20676,0,"\n  #"],[20679,1,""],[20679,0,"$$"],[20680,0,"r(G) = "],[20679,0,"// "],[20568,0,"\n  "],[20568,3,""],[20676,0,"\n"],[20676,0,"\n3"],[20677,1,""],[20677,0,"  $r(emp"],[20682,3,""],[20682,0,"emptyset) = s^0"],[20694,0,"q("],[20699,0,")$"],[20676,0,"\n"],[20676,0,"\n  "],[20677,2,""],[20704,0,"\n"],[20704,0,"\n  $$"],[20708,0,"forall i: "],[20717,1,""],[20716,1,""],[20716,0,", G: P_i subset G: "],[20733,1,""],[20733,0,", "],[20734,1,""],[20733,1,""],[20733,0,", r(G)"],[20738,0," union {i}"],[20749,0," = q("],[20675,0," Then:"],[20682,1,""],[20681,1,""],[20680,1,""],[20676,4,""],[20675,1,""],[20772,234,""],[20676,0,"\n  Consider a network of collaborating replicas using a CRDT to create and replicate the events described by the event graph $G$. Once this network of peers has reaches quiescence, all peers will have converged on some document state.\n"],[20910,0," This "],[20911,5,""],[20911,0,"This document state ("],[20931,1,""],[20931,0,"mu"],[20932,1,""],[20931,1,""],[20911,20,""],[20911,0,"$r(g)"],[20915,1,""],[20914,1,""],[20914,0,"G)$ must emit this document state.\n  \n  "],[20949,2,""],[20952,0,"Mathematically "],[20966,1,""],[20966,0,", we can define an intermediate function c(G)$"],[21007,0,"$"],[21013,0," which i"],[21020,1,""],[21014,6,""],[21013,1,""],[21009,0,": "],[21011,1,""],[21012,1,""],[21012,0," => S"],[21018,0," which emits the corresponding CRDT state for e"],[21064,1,""],[21064,0,"any event graph. Then"],[21081,4,""],[21081,0,"We know $$"],[21090,0,"r(emptyset) = "],[21090,14,""],[21090,0,"c(emptyset) = s^0"],[21081,8,""],[21080,1,""],[21080,0," C is "],[21085,1,""],[21084,1,""],[21083,1,""],[21082,1,""],[21081,1,""],[21081,0,"$c$ is defined such that:\n  \n  "],[21107,2,""],[21110,0,"- "],[21131,0,"\n  "],[21132,2,""],[21211,0,"\n"],[21159,1,""],[21210,0,"\n  $r(emptyset) = q(s^0)$"],[21134,25,""],[21185,0,"\n"],[21133,1,""],[21184,0,"\n"],[21132,1,""],[21134,0,"- "],[21135,0," Adding an event to the set"],[21136,26,""],[21136,0,"We can add events to th"],[21157,2,""],[21157,0,"the CRDT state  "],[21172,1,""],[21172,0,"when their pred"],[21186,1,""],[21185,1,""],[21184,1,""],[21183,1,""],[21182,1,""],[21182,0," ver"],[21183,3,""],[21183,0,"parents"],[21189,1,""],[21189,0," events "],[21172,25,""],[21172,0,"b"],[21172,1,""],[21172,0,"b"],[21172,1,""],[21172,0,"by using the prepare and effect functions."],[21213,1,""],[21213,0,":"],[21213,1,""],[21213,0,"."],[21223,0,"G, "],[21227,3,""],[21243,1,""],[21243,0,"c"],[21261,1,""],[21260,1,""],[21260,0,"c(G)"],[21260,0,"u("],[21266,0,", t(e_i))"],[21275,1,""],[21273,0,", c(G)"],[20948,0,"\n"],[20676,1,""],[20947,0,"\n  We can define a replay function from a CRDT definition. Assume we have some CRDT defined as $(S, s^0, q, t, u, P)$ via @shapiro, where $q$, $t$ and $u$ are the _query_ function, _prepare_ function and _effect_ functions respectively."],[20440,236,""],[20711,0,"\n  "],[20712,2,""],[20487,0,"which are "],[20725,56,""],[20442,0,"We can define a replay function from a CRDT definition. "],[20958,1,""],[20781,0,"O"],[20781,1,""],[20781,0,"More formally, "],[20796,1,""],[20796,0,"a"],[20867,1,""],[20867,0,"."],[20869,6,""],[20872,0," s"],[20873,1,""],[20873,0,"is the _query_ function"],[20901,0," is the _update_ f"],[20918,1,""],[20918,0,"_"],[20909,0,"_"],[20910,9,""],[20910,0,"prepare"],[20918,0," function"],[20935,49,""],[20935,0," is the"],[20952,23,""],[20952,0,"function."],[20965,55,""],[20965,0,"Let "],[20980,0," be a function"],[21000,6,""],[21000,0," generates"],[21164,0," CRDT's"],[21200,0," s"],[21201,1,""],[21201,0,"such tha"],[21201,8,""],[21201,0,"so long as the event's parents are already in the CRDT stae"],[21259,1,""],[21259,0,"te"],[21275,1,""],[21275,0," |"],[21276,1,""],[21275,1,""],[21275,0,","],[21275,1,""],[21275,0," :"],[21333,0,"  Then $$"],[21341,0,"r(G) = q(c(G))"],[21356,0,"."],[21357,44,""],[21360,0,"// "],[21357,0,"\n  "],[21358,2,""],[21346,0,":"],[21122,0," iteratively"],[21212,61,""],[20292,1,""],[20291,1,""],[20291,0,"\nW"],[20257,0,"// "],[21467,1,""],[21510,11,""],[21510,0,"does"],[21761,1,""],[21761,0,"\n\n"],[21762,0,"\n"],[21762,0,"\nThis algorithm nee"],[21763,18,""],[21762,1,""],[21761,1,""],[21835,1,""],[21835,0," as it must generate the CRDT state on every peer (instead of once "],[21901,1,""],[21901,0,", across the whole network). And it must either regenerate the CRDT state on every incoming edit, or cache the CRDT state locally. Either option is "],[21835,0,". It must also"],[21839,21,""],[21839,0," is inefficient, as it"],[21870,0,"s"],[22013,0," (horribly slow)"],[22015,0,"which would be "],[22077,19,""],[22077,0," (removing any been"],[22095,1,""],[22094,1,""],[22094,0,"nefit from using event graphs)."],[22079,0,"which "],[22092,1,""],[22091,1,""],[22090,1,""],[22090,0,"es"],[22128,0," in the first place"],[21837,23,""],[21837,0,"Worse, i"],[21846,0," u"],[21847,1,""],[21847,0,"must"],[21860,1,""],[21859,1,""],[21859,0,"e"],[21843,1,""],[21843,0," "],[21836,1,""],[21836,0,"\n\n"],[22141,12,""],[21837,0,"\n> BENCHMARK\n"],[21835,1,""],[21835,0,":"],[21678,83,""],[21467,0,"\nA generic algorithm for doing this in Haskell is provided in @generic-crdt-replay.\n"],[21468,9,""],[21468,0,"This"],[21482,0," is implemented in"],[21500,18,""],[21486,11,""],[21486,0,"provided"],[21505,12,""],[21468,29,""],[21468,0,"A"],[21470,1,""],[21470,0,"h"],[21477,0," implementation of this algorithm is provided"],[20871,0," #"],[20872,1,""],[20872,0,"$S$, $S"],[20878,1,""],[20878,0,"s^"],[20879,1,""],[20879,0,"^0$ "],[20882,1,""],[20875,1,""],[20875,0," and"],[20885,0," are the state domain and initial state, respectively."],[21283,0,", so long as the delivery"],[21285,23,""],[21285,0,"though they must be added in order"],[21393,4,""],[21393,0,"The replay function emits the equivalent CRDT state, run through the CRDT's replay function:"],[21485,1,""],[21485,0,"\n  \n  "],[21486,2,""],[21490,0," "],[21506,0," "],[21508,1,""],[21444,0," #"],[21445,1,""],[21445,0,"@@"],[21446,1,""],[21445,1,""],[21445,0,"$$"],[21446,0,"c(G)"],[21453,3,""],[21453,0,"passed"],[21895,0,"// "],[21830,0,"// "],[21755,0,"// "],[25104,8,""],[25104,0,"Real software"],[25133,0,"s"],[25108,0," text editing"],[25190,0," "],[25190,8,""],[25190,0,", often"],[25104,4,""],[25104,0,"Modern"],[25152,6,""],[25151,1,""],[25150,1,""],[25150,0,"t"],[25150,1,""],[25150,0,"itsn"],[25153,1,""],[25153,0," "],[25153,0," own"],[25192,1,""],[25192,0,". This is usually kept"],[25210,4,""],[25210,0,"implemented using"],[25227,9,""],[25104,28,""],[25104,0,"Each replica "],[25116,1,""],[25108,8,""],[25104,4,""],[25104,0,"Modern text editing software"],[25104,28,""],[25104,0,"Consideri"],[25112,1,""],[25112,0," a set of replicas editing a s"],[25141,1,""],[25131,10,""],[25131,0,"collaboratively editing a document. The "],[25104,67,""],[25104,0,"Consider the task of adding collaborative editing to a "],[25158,1,""],[25158,0,"n existing text editing "],[25181,1,""],[25180,1,""],[25179,1,""],[25178,1,""],[25178,0,"or application. The application will"],[25230,1,""],[25225,0,"already "],[25238,20,""],[25238,0," a copy of the"],[25275,35,""],[25275,0," in"],[25361,7,""],[25361,0,"peer"],[25413,13,""],[25413,0,"editing application"],[25454,0," stored"],[25461,8,""],[25527,0," "],[25527,1,""],[25527,0," Simply runing "],[25541,1,""],[25540,1,""],[25539,1,""],[25538,1,""],[25537,1,""],[25536,1,""],[25536,0,"erunning the CRDT's "],[25535,21,""],[25535,0,"regenerating the new document state is insufficient - as "],[25591,1,""],[25590,1,""],[25589,1,""],[25589,0,"as it"],[25593,1,""],[25592,1,""],[25592,0,"the ediutin"],[25596,7,""],[25596,0,"text editor does not know how c"],[25573,0," inefficient - as syntax highlighting and other anon"],[25624,1,""],[25623,1,""],[25623,0,"notations will need to be regenerated. And it is"],[25573,98,""],[25626,1,""],[25626,0,"to update local curr"],[25645,1,""],[25645,0,"sorpo"],[25649,1,""],[25648,1,""],[25648,0," positions. And it is inefficient, as syntax highlighting will"],[25709,1,""],[25708,1,""],[25707,1,""],[25706,1,""],[25706,0,"information will need to be re"],[25718,0,"and other local an"],[25735,1,""],[25734,1,""],[25734,0,"markers "],[25760,0,"generated from scratch."],[25571,0,"("],[25571,1,""],[25785,4,""],[25785,0,"Instead,"],[25797,5,""],[25527,1,""],[25527,0,"\n\n"],[25413,19,""],[25413,0,"text editor"],[25443,4,""],[25443,0,"its "],[25521,0,"// "],[25781,7,""],[25781,0,"As such"],[25844,0,". This"],[25850,6,""],[25850,0," function"],[25870,14,""],[25874,0," _transformed_ "],[25875,14,""],[25874,1,""],[25877,0," _transformed_ "],[25892,1,""],[25898,0," )o"],[25900,1,""],[25899,1,""],[25898,1,""],[25898,0," (or operations)"],[26326,5,""],[26330,1,""],[26359,5,""],[26373,1,""],[26492,0," instead"],[26493,7,""],[26493,0,"also"],[26814,1,""],[26813,1,""],[26812,1,""],[26812,0,"ed"],[26808,7,""],[26808,0,"edited "],[26833,0," purely"],[27435,13,""],[27435,0,"par"],[27435,3,""],[27435,0,"eg-partial"],[24625,0,"\n\n\n"],[24391,0," And the formal definitions of these systyem"],[24434,1,""],[24433,1,""],[24432,1,""],[24432,0,"ems only provide\n\n\n\n// "],[24448,0," a query t"],[24457,1,""],[24457,0,"function #"],[24466,1,""],[24466,0,"$q$ which emits the entire new document state"],[24482,29,""],[24482,0,"the new "],[24486,4,""],[24486,0,"new "],[24486,4,""],[24486,0,"entire new document state."],[24482,3,""],[24482,0,"an"],[24483,1,""],[24483,0," copy of"],[24491,7,""],[24491,0," the"],[24484,0,"b"],[24484,1,""],[24514,1,""],[24514,0," - which is large even if "],[24514,26,""],[24514,0,"."],[24516,0,"\nThere are 3 reasons why this is "],[24548,1,""],[24547,1,""],[24546,1,""],[24545,1,""],[24544,1,""],[24543,1,""],[24542,1,""],[24541,1,""],[24541,0,"we want a transform"],[24550,1,""],[24550,0,"n OT style "],[24570,0," function st"],[24581,1,""],[24580,1,""],[24580,0,"instead:\n\n1. "],[24590,3,""],[24590,0,"1."],[24589,3,""],[24589,0,"\n+ Outputting a transformed series of events allows the edited document to remain purely in the text editing application's buffer. Text editors often use exotic, highly optimised data structures for their editing buffers. For example, VS Code uses a \"Piece Tree\" @vscode-buffer."],[58791,1,""],[58790,1,""],[58790,0,"+"],[59277,1,""],[59276,1,""],[59276,0,"+"],[24516,0,"\n"],[24516,0,"\nConsider the task of adding collaborative editing to an existing text editor application. The application will typically already store a copy of the current document state in some exotic data structure in order to support complex editing features. When the peer receives editing events from remote peers, the text editor wants to know how its stored document state should be modified to incorporate the new changes.\n"],[24932,1,""],[24651,0,"s"],[24693,4,""],[24693,0,"its own"],[24722,0,","],[24722,1,""],[24722,0,". It does this"],[24781,0," like syntax highlighting and multi-cursor replacement"],[24824,11,""],[24824,0,"editing"],[24855,0," an"],[24872,1,""],[25074,0," of a batch replay function"],[25381,0,"\n+ "],[25382,2,""],[25382,0,"+"],[25381,2,""],[25381,0,"\n+ Transformed events can often be calculated with little or no reference to earlier events in the event graph. Defining our system in terms of a partial transform function allows many optimisations to be made that would not otherwise be possible. For example, incremental per-character updates during live editing sessions, and pruning (or archiving) old events. This is explored in much more detail in @eg-partial below."],[25381,0,"\n+ The ed"],[25389,1,""],[25388,1,""],[25388,0,"text editor typically "],[25400,10,""],[25400,0,"needs to update cursor positions"],[25400,0,"cares about "],[25384,28,""],[25384,0,"Fine-grained updates are more useful for"],[25409,15,""],[25409,0,"more useful for"],[25409,15,""],[25409,0,"needed "],[25416,6,""],[25442,0," and such."],[25442,10,""],[25442,0,"."],[25426,0,"local "],[24339,0,"describe "],[24348,6,""],[24361,0,"embedded directly "],[24413,5,""],[24413,0,"T"],[24413,0,"This follows from "],[24431,3,""],[24431,0,"the"],[24431,39,""],[24431,0,"their pap"],[24437,3,""],[24437,0,"corresponding papers - which typically"],[24481,7,""],[24481,0,"decrib"],[24486,1,""],[24485,1,""],[24484,1,""],[24483,1,""],[24483,0,"scib"],[24486,1,""],[24485,1,""],[24485,0,"ribe"],[24509,0,": S => DD"],[24534,0," "],[24534,1,""],[24534,0,"bukl"],[24537,1,""],[24536,1,""],[24536,0,"lk "],[24571,0,"\n"],[24571,0,"\nThis is "],[24572,8,""],[24572,0,"For text editing, t"],[24590,1,""],[24572,0,"// "],[24572,21,""],[24572,0,"// For text editing,"],[24998,0,":\n\n-"],[25002,2,""],[25002,0," W"],[25003,1,""],[25003,0,"H"],[25083,0," Gra"],[25084,3,""],[25084,0,"Incorporating granular updates is more efficient than replacing the entire editing buffer"],[25001,1,""],[25000,1,""],[24999,1,""],[24998,1,""],[24998,2,""],[24998,0," h"],[25079,1,""],[25079,0,"\n\n+ "],[25172,0,"\n"],[25079,0," There are 3 reasons for this:"],[25203,0,"+ The editor will need to mo"],[25221,10,""],[25221,0,"usually need to move"],[25221,0,"often "],[25227,8,""],[25239,0," local cursor positions. Granular updates al"],[25273,10,""],[25264,9,""],[25264,0,"Fina"],[25267,1,""],[25267,0,"e"],[25264,4,""],[25263,1,""],[25262,1,""],[25262,0,". F"],[25264,1,""],[25264,0,"Gran"],[25264,4,""],[25263,1,""],[25263,0," Fine grained updates allow this.\n"],[25262,0," based on remote e"],[25279,1,""],[25278,1,""],[25272,6,""],[25272,0,"the position"],[25276,8,""],[25275,1,""],[25274,1,""],[25262,12,""],[25297,0,"+ "],[25297,2,""],[25297,0,"+"],[25202,0,"."],[25622,56,""],[25622,0,"For example, VS Code uses a \"Piece Tree\" @vscode-buffer."],[24800,0,"For example, VS Code uses a \"Piece Tree\" @vscode-buffer."],[24800,0," "],[24972,8,""],[24971,1,""],[24979,1,""],[24978,1,""],[24978,0,"ing"],[25003,0," a"],[25017,1,""],[24966,1,""],[24966,0," "],[25130,0,"Fine grained updates are better for"],[25165,9,""],[25175,9,""],[25269,0," and recomputing syntax highlighting and other information"],[25228,0,"."],[25230,6,""],[25230,0,"R"],[25266,0,"would necessitate"],[25283,3,""],[25315,0," information"],[25327,23,""],[25327,0," across the whole document."],[25230,0,"Amonghs"],[25236,1,""],[25235,1,""],[25235,0,"st other things, "],[25252,1,""],[25252,0,"t"],[25252,1,""],[25252,0,"r"],[25379,3,""],[25379,0,"The local user's "],[25396,38,""],[25411,1,""],[25411,0," may need to be updated"],[25470,0," "],[25469,2,""],[25469,0,"+"],[25470,450,""],[25470,0," "],[24347,0," "],[24347,1,""],[24413,93,""],[24413,0,"CRDT "],[24417,1,""],[24417,0,"s r"],[24419,1,""],[24419,0,"are defined"],[24413,0,"This follow "],[24424,1,""],[24424,0,"s from the "],[24413,22,""],[24430,0," to have a simple"],[24431,0,"in @sha"],[24435,3,""],[24435,0,"shapiro "],[24443,8,""],[24443,0,"with "],[24456,0," queryion "],[24465,1,""],[24464,1,""],[24463,1,""],[24462,1,""],[24462,0," function"],[24537,20,""],[24536,1,""],[24535,1,""],[24536,0,"\n\n\n"],[27235,898,""],[24537,0,"As such, we define a _partial transform_ function $T(V_0, V_m)$. This function outputs a list of _transformed_ events (or operations) $e_1, e_2, ...$ that can be applied to a document at some version $V_0$ in order to modify it to the document state at version $ceil(V_0 union V_m)$. The transform function is denoted $T(V_0, V_m) = [e_1, e_2, ...]$.\n\nThe transformed operations must match the semantic behaviour of the replay function. Formally:\n\n// $ r(ceil(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ... = r(ceil(V_0 union V_m)) $\n$ r(V_0) plus.circle T(V_0, V_m) = r(V_0 union V_m) $\n\n(where $plus.circle$ is the event application operator.)\n\nSubstituting $r(emptyset) = d_0$, the replay function can also be implemented in terms of $T$:\n\n$ forall V: r(ceil(V)) = d_0 plus.circle T(emptyset, V) $\n\nThus, the partial transform function is the only function we need to actually implement.\n"],[24537,8,""],[24537,0,"Instead,"],[24772,0,"merged "],[24806,4,""],[24806,0,"floor"],[24806,5,""],[24806,0,"ceil"],[24778,1,""],[24778,0," "],[24806,4,""],[24806,0,"floor"],[24536,0,"\n"],[24536,0,"\n"],[25554,5,""],[25538,15,""],[25538,0,"Text editr"],[25547,1,""],[25547,0,"ors"],[25551,10,""],[25564,1,""],[25565,30,""],[25565,0,"the document "],[25577,1,""],[25583,0," - usually"],[25593,11,""],[25586,7,""],[25586,0,"often in their own"],[25626,0,"s"],[25626,1,""],[25611,0,", internal"],[25595,6,""],[25595,0,"some"],[25599,3,""],[25688,14,""],[25784,1,""],[25784,0,"\n\n\n"],[25786,1,""],[25785,1,""],[25785,0," "],[25785,1,""],[25784,1,""],[25784,0," "],[24537,0,"This approach is impractical and "],[24542,28,""],[24542,0,"simplification"],[24537,19,""],[24537,0,"This isn't how "],[24548,4,""],[24548,0,"practical or useful for "],[24558,14,""],[24557,1,""],[24557,0,", and it "],[24537,29,""],[24537,0,"This isn't practical, and it"],[24536,29,""],[24535,1,""],[24895,0,"\n\n\n"],[24685,0," in V_m"],[24685,7,""],[24685,0," in V_m"],[24685,7,""],[24536,0,"\n"],[24536,0,"\nThis isn't useful for "],[24542,17,""],[24542,0,"approach doesn't line up with what"],[24551,25,""],[24551,0,"si"],[24552,1,""],[24551,1,""],[24551,0,"isn't useufl "],[24563,1,""],[24562,1,""],[24561,1,""],[24560,1,""],[24560,0,"ful for "],[24551,17,""],[24551,0,"is impractical, inefficient and"],[24581,1,""],[24580,1,""],[24579,1,""],[24578,1,""],[24578,0,", and precludes various a"],[24602,1,""],[24602,0,"optimization"],[24602,12,""],[24602,0,"optimisations. "],[24616,1,""],[24537,16,""],[24537,0,"Bulk updates are a"],[24537,81,""],[24537,0,"This is"],[24543,1,""],[24542,1,""],[24542,0,"sort of approach is never"],[24562,5,""],[24561,1,""],[24561,0," impractical and inefficient. consider "],[24591,9,""],[24591,0,"Consider "],[24591,9,""],[24537,54,""],[24537,0,"This sort of approach is impractical and inefficient. Consider the task of adding collaborative editing to an existing text editor application. Text editors already store the document state - often in some exotic, internal data structure. For example, VS Code uses a \"Piece Tree\" @vscode-buffer in order to support complex editing features like syntax highlighting and multi-cursor editing. When receiving an editing event from a remote peer, the text editor wants to know how its stored document state should be modified to incorporate the new changes. Fine grained updates are better for 3 reasons:\n"],[25137,1,""],[24692,1,""],[24691,1,""],[24690,1,""],[24690,0,"ing applications"],[24733,6,""],[24725,0,"edited "],[24740,0," i"],[24741,1,""],[24740,1,""],[24740,0," s"],[24741,1,""],[24740,1,""],[24743,5,""],[24743,0,"usually"],[24715,0,"have some way to "],[24758,1,""],[24757,1,""],[24757,0,". Usually they do this"],[24779,11,""],[24779,0," in an"],[24785,5,""],[24785,0," some"],[24783,2,""],[24783,0,"some "],[24787,1,""],[24714,73,""],[24714,0," have "],[24715,5,""],[24715,0,"store the do"],[24715,12,""],[24715,0,"have "],[24715,10,""],[24715,0,"use"],[24750,0,"s to store the text"],[24765,4,""],[24765,0,"document contents"],[24852,0,"efficiently "],[24947,0," I"],[24948,1,""],[24947,1,""],[25003,0,"\n\n"],[25000,3,""],[25000,0,"if th"],[24947,0," The buffer"],[24951,7,""],[24947,4,""],[25005,0,"e text was replaced in bulk, it would"],[25011,0," buffer"],[25007,0,"contents of the "],[24948,53,""],[24948,0,"I"],[24982,26,""],[24982,0," were replaced in bulk, the edit "],[25014,1,""],[25014,0,"or would need to "],[25031,5,""],[25031,0,"recompute styles"],[25004,0," whenever a remote user made a keystroke"],[25071,0,"constantly "],[25092,6,""],[25092,0,"syntax highlightinf "],[25111,1,""],[25110,1,""],[25110,0,"g information"],[24948,175,""],[24947,1,""],[24947,0," If the contents of the text buffer were replaced in bulk whenever a remote user made a keystroke, the editor would need to constantly recompute syntax highlighting information and "],[24947,181,""],[24947,0," The editor "],[24948,11,""],[24948,0,"Fine g"],[24953,1,""],[24952,1,""],[24951,1,""],[24950,1,""],[24949,1,""],[24948,1,""],[24948,0,"Fine grained edits are desired "],[24948,31,""],[24948,0,"If the document contents were repla"],[24964,19,""],[24964,0,"was"],[24966,1,""],[24965,1,""],[24964,1,""],[24964,0,"buffer was replaced en masse, it would cause vscode"],[25009,6,""],[25009,0,"visual studeio "],[25023,1,""],[25022,1,""],[25021,1,""],[25020,1,""],[25020,0,"io "],[24994,29,""],[24994,0,"the text editor would need to recompute st"],[25035,1,""],[25034,1,""],[25034,0,"its syntax highlight in"],[25056,1,""],[25055,1,""],[25054,1,""],[25054,0,"inf"],[25056,1,""],[25056,0,"g information and the local user's "],[25069,0,"."],[25069,0," (which may be ex"],[25085,1,""],[25084,1,""],[25084,0,"computationally very expensive). Worse,"],[25123,6,""],[25123,0," "],[25141,0,"cursor position would be lost."],[25172,156,""],[25532,3,""],[26921,0,"// "],[26829,0,"// "],[26630,0,"// "],[26082,0,"// "],[26080,0,"\n"],[26080,0,"This has an additional benefit for "],[26114,1,""],[26113,1,""],[26112,1,""],[26111,1,""],[26111,0,"when it ceoms"],[26123,1,""],[26122,1,""],[26121,1,""],[26120,1,""],[26120,0,"omes "],[26111,14,""],[26111,0,"for eg-walker: Our "],[26080,50,""],[26080,0,"This has an additional benefit for eg-walker: Our"],[26128,1,""],[26127,1,""],[26126,1,""],[26126,0,"// + Transformed events can often be calculated with little or no reference to earlier events in the event graph. Defining our system in terms of a partial transform function allows many optimisations to be made that would not otherwise be possible. For example, incremental per-character updates during live editing sessions, and pruning (or archiving) old events. This is explored in much more detail in @eg-partial below.\n"],[26126,5,""],[26079,0,"\n"],[26079,0,"\n"],[26080,2,""],[26079,0,"\n"],[26079,0,"\n"],[24535,0,"\n\nThere are many drawbacks to doing this. First, the CRDT "],[24588,5,""],[24537,51,""],[24536,1,""],[24535,1,""],[24591,90,""],[24596,7,""],[24596,0,"editor"],[25988,2,""],[26035,0,"Ideally, "],[26044,1,""],[26044,0,"t"],[26066,7,""],[26066,0," "],[26024,0,"algorithms like "],[26162,1,""],[26162,0,"\n\n"],[26162,0," Indeed, "],[26163,8,""],[26162,3,""],[26162,0," "],[26298,1,""],[26298,0,"\n\n\n"],[26298,0," For example, when a "],[26317,2,""],[26317,0,"n "],[26318,1,""],[26317,1,""],[26317,0,"an editing trace is purely sequential ("],[26337,19,""],[26337,0,"fully"],[26337,5,""],[26337,0,"purely sequential ("],[26337,19,""],[26337,0,"completely sequential (ie, all edits from "],[26368,11,""],[26368,0,"events "],[26359,16,""],[26358,1,""],[26358,0,", the transfom"],[26371,1,""],[26371,0,"rm fun"],[26364,13,""],[26364,0,"transform function can return the added "],[26387,17,""],[26387,0,"simply return the events"],[26382,29,""],[26382,0," doesn't need to do any work at all - it just returns #$"],[26437,1,""],[26436,1,""],[26436,0,"$$"],[26437,0,"V_m - V_0"],[26436,0,"the events in "],[26461,0,"."],[26461,0," in causal order"],[26480,1,""],[26479,1,""],[26478,1,""],[26478,0," "],[26479,80,""],[26479,0,"This also paves the way f"],[26503,1,""],[26503,0,"for"],[26541,1,""],[26541,0,"\n\nThese optimisations are "],[26567,8,""],[26578,10,""],[26600,6,""],[26602,5349,""],[26602,0,"\n"],[26602,1,""],[26602,0,"\n\n\n// Consider the task of adding collaborative editing to an existing text editor application. Text editors already store the document state - often in some exotic, internal data structure. For example, VS Code uses a \"Piece Tree\" @vscode-buffer in order to support complex editing features like syntax highlighting and multi-cursor editing. When receiving an editing event from a remote peer, the text editor wants to know how its stored document state should be modified to incorporate the new changes. Fine grained updates are better for 3 reasons:\n\n// + Incorporating granular updates is more efficient. Amongst other things, replacing the entire editing buffer would necessitate recomputing syntax highlighting information across the whole document.\n// + The local user's cursor position may need to be updated. Fine grained updates allow this.\n// + Transformed events can often be calculated with little or no reference to earlier events in the event graph. Defining our system in terms of a partial transform function allows many optimisations to be made that would not otherwise be possible. For example, incremental per-character updates during live editing sessions, and pruning (or archiving) old events. This is explored in much more detail in @eg-partial below.\n\n\n//  This is generally a bad idea in practical systems, as it conflates concerns of the CRDT's data structure (the editing tree of items, tombstones, etc) with concerns of the text editor, such as syntax highlighting and cursor positions.\n\n\n\n\n// Presumably, after each update message is received from a remote peer, implementations are expected to re-run the CRDT's _query_ function (which is a slow operation - at best $O(n)$ where $n$ is the size of the document) then replace wholesale the local text editing buffer with the new string. How is the local cursor position updated? Is syntax highlighting recomputed with each remote keystroke, or is the CRDT's data structure somehow tightly coupled to these concerns?\n\nConsider the task of adding collaborative editing to an existing text editor application. The application will typically already store a copy of the current document state in some exotic data structure in order to support complex editing features. When the peer receives editing events from remote peers, the text editor wants to know how its stored document state should be modified to incorporate the new changes.\n\n// Simply regenerating the new document state is insufficient - as the text editor does not know how to update local cursor positions. And it is inefficient, as syntax highlighting information and other local markers will need to be regenerated from scratch.\n\n\nThis grants our system to have two important practical characteristics:\n\n+ Outputting a transformed series of events allows the edited document to remain purely in the text editing application's buffer. Text editors often use exotic, highly optimised data structures for their editing buffers. For example, VS Code uses a \"Piece Tree\" @vscode-buffer.\n+ Transformed events can often be calculated with little or no reference to earlier events in the event graph. Defining our system in terms of a partial transform function allows many optimisations to be made that would not otherwise be possible. For example, incremental per-character updates during live editing sessions, and pruning (or archiving) old events. This is explored in much more detail in @eg-partial below.\n\n// The transform function is not needed mathematically, but it is of great practical importance because replicas typically store and maintain a recent local copy of the document being edited. Most events happen at either the most recent version of that document, or some nearby version.\n\n// When the local document is updated to include new events, ideally:\n\n// - The system only needs to do work proportional to the number of events added to the document.\n// - The system does not need to read or access old events. Ideally we want peers to be able to discard or archive old events to prevent the event log from growing without bound.\n// - Particularly for text editing, the diff between two nearby versions is usually much smaller (and proportionately faster to process) than inspecting the entire document.\n\n// The replay function should not need to re-process - or even visit - old events which have already been merged in. Ideally, we would like the replay function to do work proportional to the number of events added to the document.\n\n// To allow this, we would also like event graph implementations to define a _partialTransform_ function $T(G, V_0, V_m) -> [e_1, e_2, e_3, ...]$. _partialTransform_ outputs an ordered list events which can be used to advance a document state at version $V_0$ to the version at $V_0 union V_m$. Ie, $(r(G(V_0)) plus.circle e_1 plus.circle e_2 plus.circle ...) = r(G(V_0 union V_1))$.\n\n// Note that there are often many correct, functionally equivalent return values for _partialTransform_ for any given input. For example, in a sequence editor, the output of `[Delete(1), Delete(0)]` is equivalent to `[Delete(0), Delete(0)]` as both event sequences have the same effect when applied. Implementations must match the semantic definition of their corresponding replay function, but may still differ in the exact event stream they return for any given input.\n\n"],[26603,552,""],[27327,4071,""],[24536,0,"\n"],[24536,0,"\n"],[26606,723,""],[25444,0,"\n"],[25444,0,"\n// + Incorporating granular updates is more efficient. Amongst other things, replacing the entire editing buffer would necessitate recomputing syntax highlighting information across the whole document.\n// + The local user's cursor position may need to be updated. Fine grained updates allow this.\n// + Transformed events can often be calculated with little or no reference to earlier events in the event graph. Defining our system in terms of a partial transform function allows many optimisations to be made that would not otherwise be possible. For example, incremental per-character updates during live editing sessions, and pruning (or archiving) old events. This is explored in much more detail in @eg-partial below.\n\n"],[25444,0,"There are several benefits to this:"],[25777,3,""],[25682,3,""],[25480,3,""],[25479,0,"\n"],[24539,0,"// "],[26746,0,"// "],[27303,0,"// "],[25483,0,"\n+ t"],[25486,1,""],[25486,0,"This makes it esa"],[25502,1,""],[25501,1,""],[25501,0,"asier to efficiently integrate CR"],[25533,1,""],[25532,1,""],[25532,0,"collaborative editing into existing text applications, which already is"],[25602,1,""],[25601,1,""],[25601,0,"use their own custom, exotic internal data structures to store document contents. "],[25484,199,""],[25484,0,"+ This makes it easier to efficiently integrate collaborative editing into existing text applications, which already use their own custom, exotic internal data structures to store document contents. For example, VS Code uses a \"Piece Tree\" @vscode-buffer in order to efficiently support complex editing features like syntax highlighting and multi-cursor editing."],[25846,76,""],[25846,0," R"],[25889,11,""],[25889,0,"force vscode to"],[25895,7,""],[25895,0,"VS Code "],[25906,11,""],[25906,0,"recompute"],[25882,0," when remote "],[25887,8,""],[25887,0,"e"],[25887,1,""],[25882,0," whenever remote edits"],[25899,5,""],[25899,0,"events are "],[25899,11,""],[25899,0,"editing events are recieved"],[25921,1,""],[25922,0,"i"],[25944,7,""],[25944,0,"the editor"],[25486,540,""],[25486,0,"This makes it easier to efficiently integrate collaborative editing into existing text applications, which already use their own custom, exotic internal data structures to store document contents. For example, VS Code uses a \"Piece Tree\" @vscode-buffer in order to efficiently support complex editing features like syntax highlighting and multi-cursor editing. Replacing the entire editing buffer whenever remote editing events are received when would force the editor to recompute syntax highlighting information across the whole document."],[25486,106,""],[25486,0,"Existing "],[25486,9,""],[25486,0,"For large "],[25486,10,""],[25486,0,"Largu"],[25490,1,""],[25490,0,"e documents "],[25486,0,"Text editors usually use their own complex, "],[25521,9,""],[25521,0,"exoti "],[25526,1,""],[25526,0,"c data structures to "],[25547,54,""],[25528,0,"internal "],[25555,0," store"],[25561,28,""],[25561,0," the"],[25565,6,""],[25574,0,"'s"],[25584,1,""],[25584,0,". These data structures are optimised for in"],[25627,1,""],[25626,1,""],[25626,0,"fine grained, incremental updates"],[25915,0," inefficiently"],[26532,1,""],[27049,7,""],[27049,0,"that needs to "],[27062,1,""],[27059,3,""],[27053,6,""],[27049,4,""],[27049,0,"we need"],[27060,9,""],[24128,0,"\n"],[24128,0,"\n> TODO: Should we move this to "],[24137,23,""],[24137,0,"Consider t"],[24146,1,""],[24146,0,"moving this inside the eg-walker section."],[27006,5,""],[27007,1,""],[27007,0,")"],[27006,0,"ceil("],[27006,5,""],[27007,1,""],[213,0,"\n"],[213,0,"\n#set page()"],[224,0,"numbering: \"1\""],[237,0," / 1"],[240,1,""],[239,1,""],[238,1,""],[237,1,""],[72705,0,"/*"],[88143,0,"\n&"],[88144,1,""],[88144,0,"*/"],[31347,0,"// "],[31347,3,""],[31422,0," "],[31422,1,""],[31423,0," To "],[31426,1,""],[31425,1,""],[31424,1,""],[31423,1,""],[31422,1,""],[31422,0,", but many of the optimi"],[31428,18,""],[31424,4,""],[31423,1,""],[31422,1,""],[31422,0,". However, describing all of the optimisations we have made is outside the scope of this papp"],[31514,1,""],[31513,1,""],[31513,0,"perp."],[31517,1,""],[31516,1,""],[31516,0,"."],[31413,9,""],[31413,0,"implementation"],[31522,128,""],[31346,0,"\n"],[31346,0,"\nWe have also"],[31347,14,""],[31346,0,"\n"],[31346,0,"\nWe have colle"],[31347,13,""],[31347,0,"In order to assess the "],[31359,11,""],[31359,0,"evaluate the "],[31347,25,""],[31346,1,""],[31345,1,""],[31438,0,"for the sake of brevity, "],[31463,21,""],[31463,0,"a description of all of our"],[31504,16,""],[31504,0," l"],[31505,1,""],[31504,1,""],[31465,11,""],[31465,0,"list"],[31476,7,""],[31476,0," the"],[31494,0," we have made is"],[31543,0," To make the comp"],[31544,16,""],[31544,0,"To make a fari"],[31557,1,""],[31556,1,""],[31556,0,"ir com"],[31544,110,""],[31429,0,"@benchmarking shows detailed benchmarking results, comparing eg-walker to other approaches. "],[31520,0," Our implementation of eg-walker contains some novel optimiastions"],[31573,13,""],[31573,0,"optimisations. To make the "],[31596,4,""],[31596,0,"a fair comparison"],[31588,36,""],[31588,0,"F"],[31615,0,"detailed "],[31703,0,"However, fo"],[31713,1,""],[31712,1,""],[31712,0,"to make the comparison fair"],[31520,219,""],[31005,0," See @"],[31010,1,""],[31009,1,""],[31008,1,""],[31007,1,""],[31006,1,""],[31005,1,""],[100355,0,"/*"],[102105,0,"\n"],[102105,0,"\n*/"],[103936,0,"\n/*"],[105447,0,"\n*/"],[89244,27,""],[89244,0,"R"],[64694,82,""],[30167,17,""],[30151,0,"sequence editing "],[30181,26,""],[30181,0,"using the"],[30203,17,""],[30203,0," the"],[30217,0," CRDT "],[30217,1,""],[30180,0,". Eg-walker matches "],[30192,8,""],[30191,1,""],[30191,0,"'s "],[30182,12,""],[30182,0,"The resulting document order matches"],[30182,36,""],[30182,0,"Eg-walker matches"],[30199,6,""],[21699,0," <crdt-equivalence>"],[30261,0," (See @equi"],[30268,4,""],[30268,0,"crdt-equivalence)"],[30263,3,""],[30263,0,"As ep"],[30267,1,""],[30266,1,""],[30266,0,"per"],[30288,0,"."],[30261,28,""],[30199,23,""],[30199,0,", using the"],[30558,0," according to  (As per @crdt-equivalence)."],[30599,1,""],[30559,13,""],[30558,1,""],[30558,0,", "],[30559,3,""],[30559,0," "],[30560,1,""],[30560,0,"a"],[30584,1,""],[30706,5,""],[30706,0,"is"],[30720,24,""],[30720,0," with"],[30755,0," Eg-walker is faster than most"],[30781,4,""],[30781,0,"all other test"],[30781,14,""],[30781,0,"C"],[30781,1,""],[30781,0,"equivalent CRDTs in normla "],[30807,1,""],[30806,1,""],[30805,1,""],[30805,0,"al editing scenarios, but msy"],[30833,1,""],[30832,1,""],[30832,0,"ay be slower in "],[30845,3,""],[30845,0,"wh"],[30846,1,""],[30845,1,""],[30845,0,"when there is extreme amounts of concurrec"],[30886,1,""],[30886,0,"ncy."],[30755,186,""],[88008,0," #"],[88009,1,""],[88009,0,"@dt"],[88010,2,""],[88010,0,"dt"],[88009,0,"(source "],[88010,7,""],[88010,0,"with source code availba"],[88033,1,""],[88032,1,""],[88032,0,"able: "],[88041,0,")"],[88008,34,""],[88008,0," in the Dimanon"],[88022,1,""],[88021,1,""],[88020,1,""],[88019,1,""],[88018,1,""],[88018,0,"amond Types librar"],[88030,6,""],[88030,0,"c"],[88030,1,""],[88030,0,"CRDTY "],[88035,1,""],[88034,1,""],[88034,0," library @dt"],[88044,2,""],[88044,0,"dt"],[88046,1,""],[88046,0,". This implementation"],[88068,14,""],[88068,0,"stacks many"],[88196,0," our"],[88210,0," implmeentation"],[88232,14,""],[88232,0," usually"],[88216,1,""],[88215,0,"e"],[88734,0,"\n"],[88734,0,"\n"],[88298,0,"\n"],[88298,0,"\nI"],[88299,1,""],[88299,0,"Comp"],[88302,1,""],[88301,1,""],[88300,1,""],[88299,1,""],[88299,0,"Evaluating "],[88299,0,"Properly "],[88308,1,""],[88308,0,"e"],[88319,0,"eg-walker is tricky, because there is a "],[88348,11,""],[88348,0,"conte"],[88348,5,""],[88348,0,"many "],[88348,5,""],[88348,0,"contemporary CRDT libraries vary wid"],[88383,1,""],[88383,0,"ldly in performance."],[88298,0,"\n"],[88298,0,"\n"],[88298,1,""],[88297,1,""],[88137,1,""],[88137,0," "],[88297,0,"\n- Scales worse as concurr"],[88313,0,"compared to CRDTs "],[88341,0,"ency increases."],[88355,1,""],[88312,12,""],[88312,0," than"],[88348,0,". CRDTs tend"],[88349,11,""],[88349,0,"\n"],[88349,1,""],[88455,0," To make a fair comparuis"],[88479,1,""],[88478,1,""],[88477,1,""],[88477,0,"ison, we have implementat"],[88501,1,""],[88500,1,""],[88500,0,"ed"],[88491,0,"also "],[88507,0," a similarly @dt"],[88522,1,""],[88521,1,""],[88520,1,""],[88519,1,""],[88508,11,""],[88508,0,"our own CRDT library"],[88516,0,"FugueMax "],[88537,0,". This library uses "],[88552,5,""],[88552,0,"sh"],[88552,2,""],[88552,0,"uses all the same opti"],[88552,22,""],[88552,0,"shares a"],[88559,1,""],[88559,0,"its language, code style and libraries ("],[88598,1,""],[88597,1,""],[88597,0," ("],[88598,1,""],[88597,1,""],[88588,9,""],[88588,0,"data structures with diamond types in order to make (as much a"],[88641,9,""],[88640,1,""],[88639,1,""],[88639,0," (as much as possible)"],[88635,4,""],[88635,0,"achieve"],[88664,0," a like-for-like comparison."],[88496,15,""],[88496,0,"written our"],[88511,0," implementation"],[88512,0,"op"],[88513,1,""],[88512,1,""],[88512,0,"imp"],[88514,1,""],[88513,1,""],[88512,1,""],[88512,0,"optimised "],[88536,0," of"],[88548,0," in a"],[88566,0," - called dt"],[88566,12,""],[88351,50,""],[88351,0,"C"],[88405,0," - "],[88407,1,""],[88405,2,""],[88351,1,""],[88351,0,"Properly evaluating eg-walker is tricky, because c"],[88351,50,""],[88351,0,"C"],[88405,0," - "],[88407,1,""],[88406,1,""],[88406,0,"and feature sets"],[88688,1,""],[88688,0," with diamond types."],[88534,0," - "],[88536,1,""],[88535,1,""],[88534,1,""],[88534,0,", called _dt-crdt_"],[88726,0," It is fast - but "],[88727,17,""],[88726,1,""],[88696,0,"benchmark "],[88696,10,""],[88696,0,"benchmark "],[88696,10,""],[88832,331,""],[88728,104,""],[88728,0,"In this section, we:\n\n- Describe our benchmarking methodology and testing data\n- Introduce testing data\n"],[88728,531,""],[88728,0,"\n"],[88732,0,"Input data: "],[88732,12,""],[88747,0,"\n"],[88747,0,"\n"],[88748,2,""],[88747,0,"\n"],[88747,0,"\nIts extremely difficult to generate "],[88748,36,""],[88748,0,"Humans typs "],[88754,6,""],[88754,0," don't type "],[88748,18,""],[88748,0,"Humans don't type"],[88747,0,"\n"],[88747,0,"\nRandomly generated editing traces are o"],[88786,1,""],[88748,38,""],[88748,0,"Randomly generated editing traces are"],[88748,58,""],[88747,0,"\n"],[88747,0,"\nActual humans edit in very non-"],[88748,31,""],[88748,0,"Its very difficult to generate "],[88748,31,""],[88748,0,"Random testing data is a terrible fit for "],[88748,0,"Using "],[88754,1,""],[88754,0,"r"],[88748,7,""],[88748,0,"R"],[88748,0,"Using "],[88754,1,""],[88754,0,"r"],[88748,7,""],[88748,0,"R"],[88754,0,"ly generated"],[88748,54,""],[88748,0,"In our "],[88754,1,""],[88750,4,""],[88748,2,""],[88748,0,"Randomly generated testing data is a terrible fit for "],[88748,54,""],[88748,0,"Randomly generated testing data is a terrible fit for"],[88747,0,"\n"],[88747,0,"\nHumans don't edit documents randomly. We n"],[88789,1,""],[88789,0,"te "],[88791,1,""],[88791,0,"nd to type in runs, and "],[88811,4,""],[88811,0,"use backspace and "],[88815,0,"the "],[88833,0,"delete characters interchangably (and is"],[88872,1,""],[88872,0,"diosyncratically)."],[88861,0,"e"],[88891,0," We select, delete and "],[88903,0,"move, copy and past "],[88922,1,""],[88922,0,"e"],[88923,11,""],[88923,0," text."],[88892,2,""],[88892,0,"And we"],[88933,0," "],[88933,1,""],[88933,0,"\n\nRather than try and "],[88935,20,""],[88934,1,""],[88933,1,""],[88933,0," "],[88933,1,""],[88933,0,"\n\nRather than try "],[88935,16,""],[88935,0,"MAbny"],[88939,1,""],[88938,1,""],[88937,1,""],[88936,1,""],[88935,1,""],[88935,0,"Rather than try and write a random "],[88963,7,""],[88962,1,""],[88962,0,"n accurate generator for "],[88935,52,""],[88935,0,"Rather than try and write an accurate generator for"],[88933,0," Many of these "],[88934,14,""],[88934,0,"Run"],[88934,3,""],[88934,0,"Good C"],[88939,1,""],[88939,0,"collaborative text libraries can take adva"],[88972,9,""],[88971,1,""],[88970,1,""],[88969,1,""],[88968,1,""],[88968,0,"take advantage of these features of human generated text to optimize processing - using run-length encoding, "],[89056,0,"internal "],[89086,0,"understanding backspace operations"],[89084,0," for inserts, dal"],[89100,1,""],[89099,1,""],[89099,0,"eletes and backspace operations"],[89131,0," "],[89132,35,""],[89132,0,"and various other tricks. "],[89157,1,""],[88986,5,""],[88986,0,"the"],[89155,0," "],[89155,1,""],[89155,0," So"],[89157,1,""],[89156,1,""],[89156,0,"To properly benchmark our libraries, its important to use input data sets that capture real world editing "],[89247,15,""],[89247,0," editing features."],[89242,0," these"],[89311,13,""],[89311,0,"random generator, we have instead collected 6 editing traces for benchmarking in "],[89389,3,""],[89389,0,"C"],[89389,1,""],[89389,0,"collabo"],[89389,7,""],[89389,0,"different libraries in this paper."],[89425,359,""],[89424,1,""],[89423,189,""],[89422,1,""],[89504,0," We hope other libraries"],[89505,23,""],[89504,1,""],[89506,18,""],[89506,0,"O"],[89506,1,""],[89506,0,"Our "],[89509,1,""],[89508,1,""],[89507,1,""],[89506,1,""],[89506,0,"I"],[89506,1,""],[89506,0,"Here we will benchmark"],[89311,16,""],[89311,0,"simulator"],[89311,0,"random "],[89327,0," for text editin"],[89342,1,""],[89341,1,""],[89341,0,"s"],[89359,0," been slowly"],[89380,1,""],[89379,1,""],[89379,0,"ing"],[89382,2,""],[89382,0," 6"],[89379,3,""],[89379,0,"ed"],[89364,7,""],[89346,5,""],[89355,15,""],[89347,8,""],[89347,0,"will uinstea"],[89358,1,""],[89357,1,""],[89356,1,""],[89355,1,""],[89354,1,""],[89353,1,""],[89352,1,""],[89352,0,"instead benchmark our code using some real world, human generated "],[89402,16,""],[89395,7,""],[89394,1,""],[89394,0,", recorded "],[89405,2,""],[89419,51,""],[89419,0," from actual editing sessions"],[89328,14,""],[89327,1,""],[89272,0,"\n"],[89272,0,"\nCapturing these features in a random simulator"],[89310,9,""],[89310,0,"data g"],[89273,0,"Accurately "],[89284,1,""],[89284,0,"c"],[89327,0,"enerator is difficult. R"],[89350,1,""],[89349,1,""],[89349,0," Rather tha"],[89350,10,""],[89350,0,"IU"],[89351,1,""],[89351,0,"nstead,"],[89358,57,""],[89361,13,""],[89375,5,""],[89375,0," system"],[89389,0,"a set of "],[89398,5,""],[89540,0,"The editing traces we use "],[89566,23,""],[89540,25,""],[89540,0,"We use 2 editing traces from each of"],[89576,8,""],[89578,5,""],[89577,0,"the following "],[90165,0,"\n\n#figure(\n  table(\n    columns: (auto, auto, auto, auto),\n    [*Dataset*], [*Before (ms)*], [*After (ms)*], [*Speedup*],\n    [automerge-perf], [3.94], [0.26], [*15x*],\n    [seph-blog1], [7.17], [0.413], [*16.6x*],\n    [friendsforever], [3.50], [2.82], [*XXX*],\n    [ETC FILL ME OUT!]\n  ),\n  // canvas(length: 1cm, {\n\n  // }),\n  caption: [\n    Performance comparison of _transformPartial_ with and without clearing and fast forward optimisations. All other optimisations listed in this paper are enabled. The largest gains are in the purely linear tests (automerge-perf and seph-blog1) as, for a purely linear event graph, no state needs to be constructed at all.\n  ]\n)\n"],[90148,0,"generate diffs from"],[90167,17,""],[89782,0," We use the _automerge-perf_ trace [REF] and sefph"],[89831,1,""],[89830,1,""],[89829,1,""],[89829,0,"oph"],[89831,1,""],[89830,1,""],[89829,1,""],[89829,0,"ph-blog1_"],[89827,0,"_"],[89839,0," trace (from @edi"],[89853,3,""],[89853,0,"editing-traces)."],[89847,0,"a recording of [CRDTS GO BRRR] "],[89988,0," We use the _friendsforever_ and _clownschool_ traces from @edi"],[90048,3,""],[90048,0,"editing-traces."],[90341,19,""],[90341,0,"reconstruct traces from a "],[90366,1,""],[90365,1,""],[90365,0,"any git repository."],[90365,0,"indifi"],[90370,1,""],[90369,1,""],[90369,0,"vidual files in "],[90385,4,""],[90399,1,""],[90398,1,""],[90398,0,"ies. We've chosen Makefile"],[90416,0,"the "],[90428,0," from git git "],[90441,1,""],[90440,1,""],[90439,1,""],[90438,1,""],[90437,1,""],[90436,1,""],[90435,1,""],[90434,1,""],[90434,0,"the git repository fgor gi"],[90459,1,""],[90458,1,""],[90457,1,""],[90456,1,""],[90455,1,""],[90454,1,""],[90454,0,"or git itself, and node_cc "],[90480,0,"_"],[90473,0,"_"],[90428,0,"_"],[90420,0,"_"],[90485,0,"from "],[90483,1,""],[90475,1,""],[90475,0,"`src/"],[90484,1,""],[90484,0,"."],[90487,0,"`"],[90420,10,""],[90420,0,"`"],[90420,1,""],[90419,1,""],[90418,1,""],[90417,1,""],[90416,1,""],[90416,0,"`m"],[90417,1,""],[90417,0,"Makefile`"],[90490,0,"nodejs [REF]."],[90502,1,""],[90502,0,", as these "],[90502,11,""],[90502,0,". These are the "],[90510,8,""],[90510,0,"files are the largest"],[90516,15,""],[90516,0,"had the "],[90504,20,""],[90504,0,"Both of these files contain extremely complica"],[90542,8,""],[90542,0,"complex editing traces."],[90550,15,""],[90550,0,"event g"],[90556,1,""],[90556,0,"graphs, with large merges fo"],[90583,1,""],[90582,1,""],[90582,0,"of 6 more items and very few critical versions."],[90602,8,""],[90602,0,"almost no"],[90707,13,""],[90707,0,"Keystrokes*"],[90707,0,"*"],[90721,29,""],[90751,17,""],[90777,20,""],[90807,40,""],[90778,0,"    [friendsforever], [3.50],\n"],[90813,14,""],[90813,0,"clownschool"],[90808,0,"    [clownschool], [3.50],\n    [clownschool], [3.50],\n"],[90840,11,""],[90840,0,"git/make"],[90844,4,""],[90844,0,"Makefile"],[90868,11,""],[90868,0,"node"],[90843,1,""],[90843,0,"_"],[90843,1,""],[90843,0,"-"],[90872,0,"-node_cc"],[90706,0,"[*type"],[90711,1,""],[90710,1,""],[90709,1,""],[90708,1,""],[90708,0,"Type("],[90712,1,""],[90712,0,"*], "],[90718,10,""],[90718,0,"length "],[90718,7,""],[90718,0,"Length (key"],[90728,1,""],[90727,1,""],[90726,1,""],[90725,1,""],[90724,1,""],[90718,6,""],[90718,0,"Lnegth"],[90723,1,""],[90722,1,""],[90721,1,""],[90720,1,""],[90719,1,""],[90719,0,"ength"],[90727,0," [*Concurrency*],"],[90793,0,"["],[90767,0,"["],[90795,0,"]"],[90768,0,"]"],[90797,0,","],[90769,0,","],[90799,0," "],[90770,0," "],[90798,0,"s"],[90768,0,"s"],[90800,0,"e"],[90769,0,"e"],[90802,0,"q"],[90770,0,"q"],[90804,0,"u"],[90771,0,"u"],[90806,0,"e"],[90772,0,"e"],[90808,0,"n"],[90773,0,"n"],[90810,0,"t"],[90774,0,"t"],[90812,0,"i"],[90775,0,"i"],[90814,0,"a"],[90776,0,"a"],[90816,0,"l"],[90777,0,"l"],[90878,0,"["],[90851,0,"["],[90880,0,"]"],[90852,0,"]"],[90882,0,","],[90853,0,","],[90884,0," "],[90854,0," "],[90883,0,"c"],[90852,0,"c"],[90885,0,"o"],[90853,0,"o"],[90887,0,"n"],[90854,0,"n"],[90889,0,"c"],[90855,0,"c"],[90891,0,"u"],[90856,0,"u"],[90893,0,"r"],[90857,0,"r"],[90895,0,"r"],[90858,0,"r"],[90897,0,"e"],[90859,0,"e"],[90899,0,"n"],[90860,0,"n"],[90901,0,"t"],[90861,0,"t"],[90962,0,"["],[90934,0,"["],[90964,0,"g"],[90935,0,"g"],[90966,0,"i"],[90936,0,"i"],[90968,0,"t"],[90937,0,"t"],[90970,0,"]"],[90938,0,"]"],[90972,0,","],[90939,0,","],[90974,0," "],[90940,0," "],[90970,3,""],[90970,0,"a"],[90935,3,""],[90935,0,"a"],[90969,0,"s"],[90936,0,"s"],[90971,0,"y"],[90937,0,"y"],[90973,0,"n"],[90938,0,"n"],[90975,0,"c"],[90939,0,"c"],[90782,4,""],[90782,0,"259778"],[90824,0,"368209"],[90830,4,""],[90790,0," [0],"],[90837,0," [0],"],[90886,0," "],[90879,0,"26078]"],[90879,0,"["],[90886,0,", "],[90889,4,""],[90889,0,"0.45"],[90843,53,""],[90843,0,"    [friendsforever], [concurrent], [26078], [0.45],"],[90930,4,""],[90930,0,"24326"],[90937,0," [0.44]"],[90977,2,""],[90976,1,""],[90975,1,""],[90944,0,","],[90976,0,"348819"],[91017,2,""],[91016,1,""],[91015,1,""],[91015,1,""],[91015,0,"947337]"],[91023,0,"\n    [git-Makefile], [async], [348819],"],[90946,39,""],[90983,0,", []"],[91026,0," "],[91026,1,""],[91026,0,", []"],[91029,0,"6.11"],[90986,0,"0.08"],[90989,1,""],[90989,0,"9"],[90989,1,""],[90988,1,""],[90988,0,"10"],[91037,0,"*"],[91033,0,"*"],[91038,0,"*"],[91034,0,"*"],[91039,1,""],[91034,1,""],[90744,0," []"],[90746,0,"**"],[90749,0,","],[90747,0,"EG "],[90749,1,""],[90748,1,""],[90747,1,""],[90747,0,"RLE size"],[90751,4,""],[90750,1,""],[90747,0,"EG "],[90753,0," count"],[90963,0," [],"],[90965,0,"5346"],[90913,0,"3685]"],[90913,0,"["],[90919,0,","],[90913,0," "],[90860,0," "],[90813,0," "],[90862,0,"["],[90814,0,"["],[90864,0,"]"],[90815,0,"]"],[90866,0,","],[90816,0,","],[91083,0," "],[91034,0," "],[91085,0,"["],[91035,0,"["],[91087,0,"]"],[91036,0,"]"],[91089,0,","],[91037,0,","],[91089,0,"1215"],[91036,0,"101"],[90815,0,"1"],[90867,0,"1"],[90686,0,", auto"],[91112,37,""],[91125,323,""],[91124,1,""],[91124,0,"\n    "],[91125,4,""],[90730,0," (k)"],[90730,4,""],[90730,0," (k)"],[90773,0,"    [automerge-perf], [sequential], [259778], [0], [1],\n    [seph-blog1], [sequential], [368209], [0], [1],\n    [friendsforever], [concurrent], [26078], [0.45], [3685],\n    [clownschool], [concurrent], [24326], [0.44], [5346],\n    [node-node_cc], [async], [947337], [0.10], [101],\n    [git-Makefile], [async], [348819], [*6.11*], [1215],\n"],[91396,0,"// "],[91342,0,"// "],[91284,0,"// "],[91223,0,"// "],[91171,0,"// "],[91115,0,"// "],[90815,1,""],[90814,1,""],[90813,1,""],[90812,1,""],[90812,0,"6"],[90864,1,""],[90863,1,""],[90862,1,""],[90914,3,""],[90971,1,""],[90970,1,""],[90969,1,""],[91023,1,""],[91022,1,""],[91021,1,""],[91071,1,""],[91071,0,"7"],[91071,1,""],[91071,0,"8"],[91071,1,""],[91071,0,"9"],[91072,3,""],[90733,0,"op"],[90733,2,""],[91072,0,"819"],[91071,1,""],[91071,0,"8"],[91071,1,""],[91071,0,"7"],[91071,1,""],[91071,0,"8"],[91021,0,"337"],[90969,0,"326"],[90914,0,"078"],[90862,0,"209"],[90812,1,""],[90812,0,"9778"],[91411,3,""],[91354,3,""],[91293,3,""],[91229,3,""],[91174,3,""],[91115,3,""],[90773,338,""],[90730,4,""],[90809,0," "],[90862,0," "],[90919,0," "],[90919,1,""],[90918,0," "],[90977,0," "],[91033,0," "],[91088,0," "],[90694,0,"\n    align: [],"],[90707,1,""],[90706,1,""],[90706,0,"()"],[90707,0,"left, center, ce"],[90722,1,""],[90721,1,""],[90721,0,"right, right, right,"],[90740,1,""],[90707,4,""],[90707,0,"center"],[91181,0,"    Size "],[91181,9,""],[91181,0,"    Size"],[90868,0,"*"],[90867,0,"*"],[90923,0,"*"],[90922,0,"*"],[90924,1,""],[90922,1,""],[90869,1,""],[90867,1,""],[90873,0,"*"],[90872,0,"*"],[90928,0,"*"],[90927,0,"*"],[90929,1,""],[90927,1,""],[90874,1,""],[90872,1,""],[91047,0,"*"],[91043,0,"*"],[90988,0,"*"],[90984,0,"*"],[91193,0," estimates"],[91194,9,""],[91194,0,"m"],[91189,6,""],[91189,0,"Various size measurements for the data se"],[91229,1,""],[91228,1,""],[91227,1,""],[91227,0,"sets. Notably, "],[91233,9,""],[91232,1,""],[91232,0," "],[91223,0,"evaulsa"],[91229,1,""],[91228,1,""],[91227,1,""],[91226,1,""],[91226,0,"luation "],[91244,0,"Length is the numbner "],[91265,1,""],[91264,1,""],[91263,1,""],[91262,1,""],[91262,0,"er of keystrokes"],[91268,10,""],[91258,10,""],[91258,0,"tt"],[91259,1,""],[91259,0,"otal number i"],[91271,1,""],[91271,0,"of inserted + deleted characters. (Ea"],[91307,1,""],[91306,1,""],[91305,1,""],[91304,1,""],[91303,1,""],[91303,0," in the d"],[91311,1,""],[91311,0,"trace. Concurrency is a "],[91330,5,""],[91330,0,"is the mean number of "],[91333,0,"an estimate of concurrency - t"],[91362,1,""],[91362,0,"during a BFS of the "],[91374,0," traversal of the graph, this shows "],[91409,4,""],[91413,4,""],[91419,10,""],[91419,0,"number of concurrent"],[91429,10,""],[91429,0,"edits concurrent with each edit in the trace. "],[91474,1,""],[91474,0," EG RLE count is the "],[91455,5,""],[91455,0," keystrok"],[91456,8,""],[91456,0,"inserted or deleted character"],[91520,0,"number of graph "],[91530,6,""],[91530,0,"items in the event graph "],[91554,1,""],[91554,0," when run-length encoding is enabled for graph o"],[91601,1,""],[91601,0,"items. (Ie, "],[91530,0,"\"not"],[91533,1,""],[91533,0,"ntr"],[91535,1,""],[91534,1,""],[91533,1,""],[91532,1,""],[91531,1,""],[91530,1,""],[91185,428,""],[91185,0,"    Various size measurements for the evaluation datasets. Length is the total number of inserted + deleted characters in the trace. Concurrency is an estimate of concurrency - during a BFS traversal of the graph, this shows the mean number of edits concurrent with each inserted or deleted character in the trace. EG RLE count is the number of items in the event graph when run-length encoding is enabled for graph items. (Ie,"],[90774,6,""],[90774,0,"# Events"],[90776,6,""],[90775,1,""],[90774,0,"\\"],[90776,0," Evts"],[90780,1,""],[90779,1,""],[90778,1,""],[90778,0,"vents"],[91558,57,""],[91558,0,"which do not have "],[91533,0,"stored "],[91533,50,""],[91533,0,"events which do not triviall "],[91561,1,""],[91561,0,"y have one parent and one child."],[91533,60,""],[91533,0,"graph nodes in t"],[91533,16,""],[91533,0,"nodes in the event graph which "],[91558,6,""],[91558,0,"when \"runs\" are collapsed."],[91574,10,""],[91574,0,"joined."],[91570,0,"of trivial nodes (with 1 parent and 1 child) "],[91625,0," together"],[91635,0,"\n    \n    "],[91636,4,""],[91641,0,"Note that different datasets stress"],[91670,0,"are chosen to "],[91641,9,""],[91641,0,"These different types of"],[91665,10,""],[91657,8,""],[91656,1,""],[91686,0," the concu"],[91687,9,""],[91687,0,"our "],[91687,4,""],[91687,0,"the system differently."],[91698,0,"in "],[91712,1,""],[91711,1,""],[91710,1,""],[91710,0," ways."],[90821,0," [# R"],[90825,1,""],[90824,1,""],[90823,1,""],[90823,0,"\\"],[90823,1,""],[90823,0,"**"],[90824,0,"\\# Replicas"],[90836,0,"],"],[91073,0," [2],"],[91012,0," [2,"],[91015,1,""],[91015,0,"],"],[91196,0," [299],"],[91138,0," [194],"],[90895,0," [1[,"],[90899,1,""],[90898,1,""],[90898,0,"],"],[90953,0," [1],"],[90692,0,", auto"],[90748,0,", right"],[90840,8,""],[90840,0,"Agents"],[91308,1,""],[91307,1,""],[91307,0,":\n    \n    "],[91309,4,""],[91314,0,"\\ "],[91322,0,":"],[91314,1,""],[91314,0,"/"],[91390,1,""],[91390,0,"\n    / "],[91408,0,":"],[91408,1,""],[91396,1,""],[91390,6,""],[91390,0," "],[91314,1,""],[91314,0,"\\"],[91322,1,""],[91315,1,""],[91314,1,""],[91309,0,"    "],[91313,5,""],[91308,5,""],[91307,1,""],[91307,0,". "],[91309,6,""],[91309,0,"#"],[91309,1,""],[91309,0,"\\# events"],[91312,1,""],[91312,0,"E"],[91311,1,""],[91311,0," "],[91700,0," \\$"],[91702,1,""],[91702,0,"# Agents is the number of \"user agents\" which contributed to a trace. For gi"],[91776,2,""],[91776,0,"traces from git, this is the number of unique authors on the file."],[91830,0,"which have touched "],[91849,3,""],[90503,0," These are some of the most edited files from their respective git repositories."],[90677,33,""],[90677,0,"."],[91908,79,""],[91907,1,""],[91906,1,""],[90152,70,""],[90339,6,""],[90339,0,"extracted a trace for"],[90434,0," the git repository o"],[90454,1,""],[90454,0,"for"],[90579,0," sm"],[90581,1,""],[90581,0,"ome"],[91888,1,""],[91887,0,"\n\n\n"],[91912,287,""],[88728,0,"\nWe evaluate our system across 3 categories:\n\n/ Memory footprint: How much resident RAM does our system use while editing a document?\n/ Disk space: How large are editing traces or CRDT documents on disk?\n/ CPU performance: CPU performance is measured in a few different usage scenarios:\n"],[88727,1,""],[89013,0,"\n/ Disk space: How large are editing traces or CRDT documents on disk?"],[88861,70,""],[88943,0,"\n/ Memory footprint: How much resident RAM does our system use while editing a document?"],[88773,88,""],[88820,35,""],[88775,45,""],[88775,0,"Speed: Speed is measuref "],[88799,1,""],[88798,1,""],[88798,0,"d for both local edt"],[88817,1,""],[88817,0,"its (how long does it take to type a document locally?) and remote edits (how long "],[88847,23,""],[88847,0,"add a"],[88851,1,""],[88850,1,""],[88849,1,""],[88848,1,""],[88847,1,""],[88826,21,""],[88826,0,"much overhead is there while typing"],[88782,109,""],[88782,0,"We measure the speed t"],[88802,2,""],[88796,6,""],[88792,4,""],[88784,8,""],[88782,2,""],[88782,0,"We measure the sepe"],[88800,1,""],[88799,1,""],[88798,1,""],[88798,0,"peed to read all changes (in the systems'"],[88838,1,""],[88837,1,""],[88837,0,"'s network or disk format)"],[88811,11,""],[88811,0,"an entire document"],[88870,0," and generate the "],[88875,13,""],[88875,0,"\"realize\" the "],[88875,14,""],[88875,0,"emit the resulting document state. For eg-walker"],[88910,5,""],[88910,0,"E"],[88919,0," is "],[88829,0,"'s history"],[88933,0,"at a disadvantage here"],[88919,0," For CRDTs ths "],[88933,1,""],[88932,1,""],[88932,0,"is recieves the "],[88938,1,""],[88938,0,"e"],[88939,1,""],[88938,1,""],[88938,0,"ei"],[88948,0,"CRDT state"],[88953,5,""],[88953,0,"data ("],[88958,1,""],[88958,0,"in "],[88953,8,""],[88953,0,"messages"],[88811,20,""],[88811,0,"a do"],[88814,1,""],[88813,1,""],[88812,1,""],[88812,0,"ll \""],[88815,1,""],[88815,0,"events or m"],[88825,1,""],[88825,0,"CRDT messages in a document's"],[88862,41,""],[88866,0," generate"],[88875,5,""],[88906,0," "],[88906,1,""],[88905,1,""],[88905,0," "],[88905,0," Messages are sent in-order and fully run-length encoded, as they would be when reading items from disk or "],[88926,1,""],[88926,0," chronological "],[88975,0," where possible."],[88990,1,""],[88990,0," -"],[88992,1,""],[89042,0,"(in bluk) "],[89046,6,""],[89046,0,"bl"],[89047,1,""],[89047,0,"ulk) over the network."],[89069,78,""],[89069,0," For CRDTs this receives the CRDT messages Eg-walker is at a disadvantage here"],[89070,42,""],[89087,0," natural"],[89113,0," as the CRDT items have already "],[89069,76,""],[89228,0,"\n"],[89228,0,"\nWe do not benchmark the "],[89239,14,""],[89239,0,"present the"],[89247,3,""],[89247,0,"local"],[88780,0," (remote)"],[88806,8,""],[88806,0,"time take "],[88815,1,""],[88815,0,"n to"],[88820,4,""],[88820,0,"rp"],[88821,1,""],[88820,1,""],[88820,0,"process"],[88820,7,""],[88820,0,"convert"],[88879,17,""],[88879,0," into the"],[89238,23,""],[89238,0,"W"],[89238,1,""],[89238,0,"Generating "],[89238,0,"The task of "],[89238,12,""],[89238,0,"We do not "],[89238,21,""],[89238,0,"We do not Generating"],[89237,0,"\n"],[89237,0,"\nEg-walker is a "],[89252,1,""],[89252,0,"t a natural disadanva"],[89272,1,""],[89271,1,""],[89270,1,""],[89269,1,""],[89269,0,"vantage "],[89238,0,"// "],[89238,42,""],[89238,0,"// Eg-walker is at a natural disadvantage"],[89291,10,""],[89291,0,"present local "],[89281,24,""],[89281,0,"We do not present local spea"],[89308,1,""],[89307,1,""],[89307,0,"eed measurements - ie, w"],[89330,1,""],[89330,0,"ingesting events from a loacl"],[89358,1,""],[89357,1,""],[89356,1,""],[89356,0,"cal editor and (in the CRDT case) converting those messages into CRDT "],[89406,9,""],[89406,0," events"],[89424,0,"messages. Eg-walker is much faster in this case, as the"],[89478,1,""],[89477,1,""],[89476,1,""],[89476,0,"no conversion needs to take place. But all systems we have measured do tihs p"],[89552,1,""],[89551,1,""],[89550,1,""],[89549,1,""],[89548,1,""],[89548,0,"his quickly."],[89515,45,""],[89515,0,"all of the systems we measure here are fast enough that this is not a bottleneck."],[89576,0,"cobn"],[89579,1,""],[89578,1,""],[89578,0,"nversion process "],[89587,8,""],[89576,11,""],[89576,0,"taks"],[89579,1,""],[89578,1,""],[89578,0,"sk "],[89575,5,""],[89596,0," "],[89596,1,""],[92757,27,""],[92755,0,"\n\n\n"],[92756,0,"== Speed\n\n"],[92756,0,"\n"],[91521,0,"\n"],[91521,0,"\n#"],[91522,1,""],[91522,0,"\n#let p1_ff = json(\"results/xf-node_nodecc-ff.json\")"],[91528,5,""],[91528,0,"xx"],[91547,17,""],[91547,0,"stats_clows"],[91557,1,""],[91557,0,"nschool"],[91571,0,"\n\n#xx.op"],[91577,2,""],[91577,0,"op_stats.len"],[91586,3,""],[91586,0,"len()"],[92192,0,"\n    ..()"],[92200,0,"[x], [y]"],[92193,16,""],[92192,1,""],[91591,0,"\n\n#let stats)fi"],[91605,1,""],[91604,1,""],[91603,1,""],[91603,0,"_for(name) = {\n  \n  "],[91618,2,""],[91619,2,""],[91619,0,"}"],[91618,0,"  "],[91618,2,""],[91618,0,"  let json = "],[91630,1,""],[91629,1,""],[91628,1,""],[91627,1,""],[91626,1,""],[91625,1,""],[91624,1,""],[91624,0,"data = json(\"results/stats_\" + nsmr"],[91658,1,""],[91657,1,""],[91656,1,""],[91656,0,"ame + \".json\")\n  ()"],[91674,0,"[]"],[91675,0,"x"],[91677,0,", [y]"],[92286,0,"\n    stats_for"],[92291,0,"$"],[92291,1,""],[92291,0,"#"],[92301,0,"(\"clownschool\")"],[92291,0,"..."],[92294,1,""],[92293,1,""],[92292,1,""],[92291,1,""],[92291,0,".."],[91675,2,""],[91674,1,""],[91674,0,"name"],[91612,0,", type"],[91686,0,"type, "],[92329,0,", \"concurrent\""],[91694,1,""],[91693,1,""],[91692,1,""],[91692,0,"data.total"],[91697,5,""],[91697,0,"total_keystrokes"],[91691,0," str"],[91692,3,""],[91692,0,"str("],[91696,1,""],[91717,0,"), data.con"],[91725,3,""],[91725,0,"concurrency_estimate"],[91720,0,"str("],[91749,0,")"],[91749,0,".round"],[91754,1,""],[91753,1,""],[91752,1,""],[91751,1,""],[91750,1,""],[91749,1,""],[91724,0,"calc.round("],[91760,0,", 2)"],[91762,0,"digits: "],[91680,0,"\n    "],[91690,1,""],[91690,0,"\n    "],[91700,1,""],[91700,0,"\n    "],[91732,1,""],[91732,0,"\n    "],[91790,0,"\n    "],[91791,4,""],[91791,0,"  "],[91790,0,",\n    data.graph_rle_size"],[91796,0,"str("],[91819,0,")"],[91792,0,"    str(data.graph_rle_size)\n"],[91820,0,","],[91835,14,""],[91835,0,"nu"],[91835,2,""],[91835,0,"num_agents"],[92454,0,"    ..stats_for(\"clownschool\", \"concurrent\")\n    ..stats_for(\"clownschool\", \"concurrent\")\n    ..stats_for(\"clownschool\", \"concurrent\")\n    ..stats_for(\"clownschool\", \"concurrent\")\n    ..stats_for(\"clownschool\", \"concurrent\")\n"],[92498,0,","],[92544,0,"."],[92544,1,""],[92544,0,","],[92589,1,""],[92589,0,")m"],[92590,1,""],[92590,0,","],[92591,135,""],[92499,0,"\n    ..stats_for(\"clownschool\", \"concurrent\"),"],[92471,11,""],[92471,0,"automerge-p"],[92481,1,""],[92481,0,"paper"],[92490,10,""],[92490,0,"sequential"],[91522,69,""],[91521,1,""],[92384,0,"    ..stats_for(\"automerge-paper\", \"sequential\"),\n"],[92451,15,""],[92451,0,"seph-blog1"],[92496,11,""],[92496,0,"frien"],[92496,5,""],[92496,0,"friendsforever"],[92591,11,""],[92591,0,"node-node_cc"],[92607,10,""],[92607,0,"async"],[92595,1,""],[92595,0,"_"],[92600,1,""],[91719,0,", "],[91720,1,""],[91719,1,""],[91719,0,", 2"],[91721,1,""],[91720,1,""],[91719,1,""],[92574,0,"    ..stats_for(\"node_nodecc\", \"async\"),\n"],[92632,11,""],[92632,0,"git-makefile"],[92323,0,"// "],[92261,0,"// "],[92195,0,"// "],[92126,0,"// "],[92068,0,"// "],[92006,0,"// "],[92407,1,""],[92406,1,""],[92406,0,".."],[70397,64,""],[70199,99,""],[93157,0,"#let p3_ff = json(\"results/xf-friendsforever-ff.json\")\n#let p3_noff = json(\"results/xf-friendsforever-noff.json\")\n\n#let scale_data(filename, sf) = {\n  json(filename).map(val => (float(val.at(0))*sf, val.at(1)))\n}\n\n#figure(\n  canvas(length: 1cm, {\n    plot.plot(\n      size: (5, 3),\n      x-tick-step: 5,\n      y-tick-step: 500,\n      x-label: \"Events processed (in thousands)\",\n      y-label: [Eg-walker state size],\n      {\n        plot.add(scale_data(\"results/xf-friendsforever-noff.json\", 0.001), label: [Size without clearing])\n        plot.add(scale_data(\"results/xf-friendsforever-ff.json\", 0.001), label: [Size with clearing])\n      }\n    )\n  }),\n  caption: [\n    A comparison of the eg-walker state size while processing the _\"friendsforever\"_ data set, with and without state clearing. When the state is never cleared, the state grows linearly throughout the test. When the state is cleared at critical versions, it stays very small throughout this test.\n\n    // Smaller is better.\n  ],\n  kind: image,\n)"],[93803,0,"// "],[93795,0,"// "],[93693,0,"// "],[93586,0,"// "],[93578,0,"// "],[93539,0,"// "],[93489,0,"// "],[93465,0,"// "],[93443,0,"// "],[93423,0,"// "],[93408,0,"// "],[93403,0,"\n    "],[93404,4,""],[93368,0,"// "],[93306,0,"// "],[93272,0,"// "],[93212,0,"// "],[93157,0,"// "],[93419,0,"    chart"],[93423,5,""],[93419,4,""],[100,0,", chart"],[93426,0,"    chart.barchart()"],[93445,0,"\n      \n    "],[93452,0,"mode: \"clustered\",\n      "],[93471,6,""],[93392,0,"\n"],[93392,0,"\n#let data = (\n  \n  "],[93407,2,""],[93408,2,""],[93408,0,")"],[93407,0,"  ()"],[93410,0,"[]"],[93411,0,"automerge-perf"],[93411,14,""],[93411,0,"automerge-perf"],[93421,4,""],[93421,0,"paper"],[93427,0,", 3.5"],[93407,0,"  ([automerge-paper], 3.5)\n"],[93433,0,","],[93461,0,","],[93409,0,"("],[93409,1,""],[93439,15,""],[93439,0,"xxy"],[93445,3,""],[93445,0,"5"],[93530,0,"  "],[93530,2,""],[93505,0,"      mode: \"clustered\",\n"],[93511,0,"// "],[93546,9,""],[93546,0,"bai"],[93548,1,""],[93548,0,"sic"],[93554,0,"      data: data,"],[93564,6,""],[94025,297,""],[94072,0,"// "],[94057,0,"// "],[94052,0,"// "],[94026,0,"// "],[94012,0,"// "],[94006,0,"// "],[93997,0,"// "],[93986,0,"// "],[93881,0,"// "],[93771,0,"// "],[93760,0,"// "],[93718,0,"// "],[93665,0,"// "],[93638,0,"// "],[93613,0,"// "],[93590,0,"// "],[93572,0,"// "],[93566,0,"// "],[93554,0,"// "],[93533,0,"// "],[93505,0,"// "],[93485,0,"// "],[93461,0,"// "],[93452,0,"// "],[94141,3,""],[94123,3,""],[94115,3,""],[94086,3,""],[94069,3,""],[94060,3,""],[94048,3,""],[94034,3,""],[93926,3,""],[93813,3,""],[93799,3,""],[93754,3,""],[93698,3,""],[93668,3,""],[93640,3,""],[93614,3,""],[93593,3,""],[93584,3,""],[93569,3,""],[93545,3,""],[93514,3,""],[93491,3,""],[93464,3,""],[93452,3,""],[93553,0,"\n      label-key: 0,\n      value-key: (ra"],[93593,1,""],[93592,1,""],[93592,0,"..range(1, 2)),"],[93603,1,""],[93603,0,"1"],[93553,0,"\n      size: (9, auto),"],[93450,0,"\n\n\n#let data2 = (\n  ([15-24], 18.0, 20.1, 23.0, 17.0),\n  ([25-29], 16.3, 17.6, 19.4, 15.3),\n  ([30-34], 14.0, 15.3, 13.9, 18.7),\n  ([35-44], 35.5, 26.5, 29.4, 25.8),\n  ([45-54], 25.0, 20.6, 22.4, 22.0),\n  ([55+],   19.9, 18.2, 19.2, 16.4),\n)\n\n#canvas({\n  chart.barchart(mode: \"clustered\",\n                 size: (9, auto),\n                 label-key: 0,\n                 value-key: (..range(1, 5)),\n                 bar-width: .8,\n                 x-tick-step: 2.5,\n                 data2)\n})"],[94641,0,"// "],[94626,0,"// "],[94621,0,"// "],[94595,0,"// "],[94581,0,"// "],[94575,0,"// "],[94566,0,"// "],[94555,0,"// "],[94450,0,"// "],[94340,0,"// "],[94329,0,"// "],[94287,0,"// "],[94234,0,"// "],[94207,0,"// "],[94182,0,"// "],[94159,0,"// "],[94141,0,"// "],[94135,0,"// "],[94123,0,"// "],[94089,0,"// "],[94069,0,"// "],[94046,0,"// "],[94025,0,"// "],[93997,0,"// "],[93977,0,"// "],[93953,0,"// "],[93944,0,"// "],[93755,0,"// "],[93755,3,""],[93789,0,"// "],[93789,3,""],[93820,0,"// "],[93820,3,""],[93844,1,""],[93844,0,"4"],[93844,1,""],[93844,0,"5"],[93865,0,"// "],[93900,0,"// "],[93900,3,""],[93900,0,"// "],[93755,0,"// "],[93755,3,""],[93755,0,"// "],[93755,3,""],[93692,0,"\n#figure("],[93702,1,""],[93956,0,"\n)"],[93956,0,", kind: image,"],[93969,1,""],[93957,0," caption: []."],[93969,1,""],[93969,0,","],[93968,0,"asdf"],[93987,0,"// "],[93954,0,"// "],[93930,0,"// "],[93892,0,"// "],[93857,0,"// "],[93812,0,"// "],[93781,0,"// "],[93747,0,"// "],[93711,0,"// "],[93702,0,"// "],[93693,0,"// "],[94798,3,""],[94780,3,""],[94772,3,""],[94743,3,""],[94726,3,""],[94717,3,""],[94705,3,""],[94691,3,""],[94583,3,""],[94470,3,""],[94456,3,""],[94411,3,""],[94355,3,""],[94325,3,""],[94297,3,""],[94271,3,""],[94250,3,""],[94241,3,""],[94226,3,""],[94189,3,""],[94166,3,""],[94140,3,""],[94116,3,""],[94085,3,""],[94062,3,""],[94035,3,""],[94023,3,""],[94082,3,""],[94107,0,"// "],[94197,1,""],[94197,0,"2"],[94197,1,""],[94197,0,"1"],[94197,1,""],[94197,0,"0"],[94197,1,""],[94197,0,"2"],[94066,8,""],[94066,0,"col"],[94066,3,""],[94066,0,"columnchart()"],[94077,2,""],[94022,0,"\n"],[94135,0,"// "],[94067,11,""],[94067,0,"barchart"],[94132,3,""],[94679,3,""],[93432,0,", 4"],[93449,0,", 2"],[94204,1,""],[94204,0,"3"],[94208,0,"\n      legend"],[94215,6,""],[94215,0,"labels: []"],[94224,0,"xxx"],[94228,0,","],[94228,0,")"],[94223,0,"("],[94229,0,", [yyy]"],[93458,571,""],[93457,1,""],[93457,0,"\n\n"],[93458,0,"#let raw_timings ="],[93475,1,""],[93475,0," "],[93475,1,""],[93475,0,"= json(\"results/timings.json\")\n"],[93505,1,""],[93505,0,"\n"],[93457,1,""],[93504,0,"\n)"],[93455,2,""],[93502,0,"\n  ([xxy], 5, 2),"],[93438,17,""],[93485,0,"\n  ([automerge-paper], 3.5, 4),"],[93407,31,""],[93454,0,"\n#let data = ("],[93393,14,""],[93440,0,"\n"],[93505,1,""],[93478,6,""],[93478,0,"raw"],[93478,3,""],[93478,0,"raw_timings."],[93458,0,"// "],[93458,3,""],[93489,1,""],[93489,0,".d"],[93490,1,""],[93489,1,""],[93489,0,".at(''"],[93494,0,"dt"],[93489,9,""],[93489,0,"."],[93489,1,""],[93489,0,".dt"],[93490,2,""],[93489,1,""],[93489,0,".dt_merge.automerge"],[93499,9,""],[93498,1,""],[93498,0,".at('automerge-paper')"],[93502,1,""],[93502,0,"\""],[93518,1,""],[93518,0,"\""],[93521,0," )"],[93521,1,""],[93520,1,""],[93520,0,", 5"],[93458,0,"// "],[93441,0,"\nraw_timings.dt_merge.at(\"automerge-paper\")"],[93442,0,"#"],[93455,0,"at(\""],[93467,0,"\")"],[93442,0,"// "],[93441,0,"\n#$"],[93443,1,""],[93443,0,"raw_"],[93443,4,""],[93443,0,"raw_timings.dt_merge"],[93393,0,"// "],[93393,3,""],[93463,0,".clownschool"],[93464,11,""],[93464,0,"au"],[93465,1,""],[93464,1,""],[93464,0,"au"],[93464,2,""],[93464,0,"clownschool"],[93464,11,""],[93463,1,""],[93463,0,".at(\"automerge_"],[93477,1,""],[93477,0,"-paper\")"],[93442,0,"// "],[93442,3,""],[93455,0,"at(\""],[93467,0,"\")"],[93467,2,""],[93455,4,""],[93477,8,""],[93477,0,"-paper\")"],[93578,11,""],[93578,0,"x"],[93490,11,""],[93490,0,"x"],[93443,11,""],[93443,0,"x"],[93398,11,""],[93398,0,"x"],[93548,1,""],[93548,0,"raw_timings"],[93470,1,""],[93470,0,"raw_timings"],[93433,1,""],[93433,0,"raw_timings"],[93398,1,""],[93398,0,"raw_timings"],[93555,3,""],[93621,0,","],[93617,0," / "],[93619,1,""],[93618,1,""],[93617,1,""],[93574,0," raw_tim"],[93575,7,""],[93575,0,"raw_timings.dt-crdt_process_remote_edits"],[93586,1,""],[93586,0,".at(\""],[93619,0,"\"),"],[93621,0,".automerge-paper"],[93622,0,"at(\""],[93641,0,"\")"],[93441,0,"\n\n"],[93442,0,"\n#let bars_for_test(name) = {\n  \n  "],[93472,2,""],[93473,2,""],[93473,0,"}"],[93472,0,"  [name], "],[93474,0,"("],[93483,0,")"],[93475,0,"\n    "],[93487,1,""],[93487,0,"\n    "],[93490,2,""],[93487,0,"\n    "],[93488,4,""],[93488,0,"    raw_timings.at(\"dt-crdt_process_remote_edits\").at(\"automerge-paper\")"],[93542,17,""],[93542,0,"name"],[93547,0,"\n    "],[93548,4,""],[93488,0,"    raw_timings.at(\"dt-crdt_process_remote_edits\").at(name)\n"],[93570,26,""],[93570,0,"_merge"],[93547,0,","],[93588,0,","],[93589,1,""],[93708,156,""],[93707,1,""],[93707,0,"\n  bar"],[93710,3,""],[93710,0,"bars_for_test(\"automerge-paper')"],[93741,1,""],[93740,1,""],[93740,0,"\")"],[93441,0,"raw"],[93441,3,""],[93441,0,"raw_timings."],[93441,12,""],[93440,1,""],[93741,0,",\n  "],[93743,2,""],[93479,1,""],[93483,1,""],[93939,0,"\n        "],[93960,0,"\n        "],[93961,8,""],[93961,0,"      "],[93949,3,""],[93949,0,"dt-crdt"],[93960,3,""],[93960,0,"dt"],[93705,0,"  bars_for_test(\"automerge-paper\"),\n  bars_for_test(\"automerge-paper\"),\n  bars_for_test(\"automerge-paper\"),\n"],[93758,15,""],[93758,0,"seph-blog1"],[93789,15,""],[93789,0,"friendsforever"],[93824,15,""],[93824,0,"clown"],[93824,5,""],[93824,0,"clownschool"],[93807,0,"  bars_for_test(\"clownschool\"),\n"],[93856,11,""],[93856,0,"node"],[93856,4,""],[93856,0,"node_nodecc"],[93839,0,"  bars_for_test(\"node_nodecc\"),\n"],[93888,11,""],[93888,0,"git-m"],[93892,1,""],[93891,1,""],[93891,0,"-makefile"],[93903,1,""],[94134,0,"\n      x-label: []"],[94151,0,"asdf"],[94156,0,","],[94151,4,""],[94151,0,"Time taken (ms)"],[94031,0,"\n      colo"],[94032,10,""],[94031,1,""],[93470,0,"\n    let data = json(\"results/stats_\" + name + \".json\")\n"],[93471,4,""],[93471,0,"  "],[93476,5,""],[93476,0," stats"],[93526,0,"  (\n    name,\n    raw_timings.at(\"dt-crdt_process_remote_edits\").at(name),\n    raw_timings.at(\"dt_merge\").at(name),\n  )\n"],[93764,0,"// "],[93723,0,"// "],[93662,0,"// "],[93652,0,"// "],[93648,0,"// "],[93525,0,"  stats."],[93525,8,""],[93524,1,""],[93543,0," "],[93543,0,"stats.op_stats.len /"],[93625,0,"stats.op_stats.len / "],[93619,0," / 1000"],[93688,0," / 1000"],[94890,0,"// "],[94885,0,"    M"],[94889,1,""],[94885,4,""],[94396,15,""],[94396,0,"MOps / second processed"],[94396,1,""],[94396,0,"Mega "],[94396,5,""],[94396,0,"M"],[94898,10,""],[94898,0,"Larger"],[94893,0,"    Speed of "],[94897,9,""],[94897,0,"comparative speed"],[94897,1,""],[94897,0,"C"],[94914,0," of di"],[94919,1,""],[94918,1,""],[94918,0,"eg-walker"],[94918,9,""],[94918,0,"DT and DT-crdt algorithms. "],[94944,1,""],[94944,0,"\n    "],[94945,4,""],[94943,1,""],[94943,0,", meaus"],[94949,1,""],[94948,1,""],[94948,0,"sured in millions of operations"],[94969,0,"run-length encoded "],[94988,10,""],[94988,0,"events processed"],[94399,1,""],[94398,1,""],[94397,1,""],[94397,0," "],[94397,1,""],[94396,1,""],[94396,0,"M events"],[94204,0,"\n      title: \""],[94218,1,""],[94218,0,"[]"],[94219,0,"asdf"],[94224,0,","],[94204,0,"\n      "],[94205,6,""],[94204,1,""],[94409,5,""],[94409,0,"unit"],[94409,4,""],[94409,0,"label"],[94400,0,"\n      x-unit: []"],[94416,0,"asdf"],[94421,0,","],[94211,0,"// "],[94205,23,""],[94204,1,""],[94408,0,"// "],[94408,3,""],[94395,4,""],[94395,0,"x"],[94386,0,"// "],[94418,1,""],[94418,0,"mil"],[94420,1,""],[94419,1,""],[94418,1,""],[94418,2,""],[94418,0,"E"],[94443,0,", in millions"],[94443,13,""],[94418,0,"Millions of "],[94430,1,""],[94430,0,"e"],[94430,0,"RLE "],[95044,0," per second."],[94983,0," processing remote data"],[94479,434,""],[93948,202,""],[93936,12,""],[93936,0,"#let data ="],[94265,4,""],[94265,0,"(\n  bars_for_test(\"automerge-paper\"),\n  bars_for_test(\"seph-blog1\"),\n  bars_for_test(\"friendsforever\"),\n  bars_for_test(\"clownschool\"),\n  bars_for_test(\"node_nodecc\"),\n  bars_for_test(\"git-makefile\"),\n)"],[94466,0,"  "],[94433,2,""],[94433,0,"    "],[94401,2,""],[94401,0,"    "],[94369,2,""],[94369,0,"    "],[94334,2,""],[94334,0,"    "],[94303,2,""],[94303,0,"    "],[94267,2,""],[94267,0,"    "],[94478,2,""],[94478,0,"    "],[94443,4,""],[94443,0,"      "],[94409,4,""],[94409,0,"      "],[94375,4,""],[94375,0,"      "],[94338,4,""],[94338,0,"      "],[94305,4,""],[94305,0,"      "],[94267,4,""],[94267,0,"      "],[94490,4,""],[94490,0,"      "],[94453,6,""],[94453,0,"        "],[94417,6,""],[94417,0,"        "],[94381,6,""],[94381,0,"        "],[94342,6,""],[94342,0,"        "],[94307,6,""],[94307,0,"        "],[94267,6,""],[94267,0,"        "],[93936,12,""],[94459,13,""],[94459,0,"r"],[94421,13,""],[94421,0,"r"],[94383,13,""],[94383,0,"r"],[94342,13,""],[94342,0,"r"],[94305,13,""],[94305,0,"r"],[94263,13,""],[94263,0,"r"],[93447,13,""],[93447,0,"r"],[94388,0,"e"],[94362,0,"e"],[94336,0,"e"],[94307,0,"e"],[94282,0,"e"],[94252,0,"e"],[93448,0,"e"],[94395,0,"m"],[94368,0,"m"],[94341,0,"m"],[94311,0,"m"],[94285,0,"m"],[94254,0,"m"],[93449,0,"m"],[94402,0,"o"],[94374,0,"o"],[94346,0,"o"],[94315,0,"o"],[94288,0,"o"],[94256,0,"o"],[93450,0,"o"],[94409,0,"t"],[94380,0,"t"],[94351,0,"t"],[94319,0,"t"],[94291,0,"t"],[94258,0,"t"],[93451,0,"t"],[94416,0,"e"],[94386,0,"e"],[94356,0,"e"],[94323,0,"e"],[94294,0,"e"],[94260,0,"e"],[93452,0,"e"],[94423,0,"_"],[94392,0,"_"],[94361,0,"_"],[94327,0,"_"],[94297,0,"_"],[94262,0,"_"],[93453,0,"_"],[94429,1,""],[94397,1,""],[94365,1,""],[94330,1,""],[94299,1,""],[94263,1,""],[93453,1,""],[94422,1,""],[94391,1,""],[94360,1,""],[94326,1,""],[94296,1,""],[94261,1,""],[93452,1,""],[94415,1,""],[94385,1,""],[94355,1,""],[94322,1,""],[94293,1,""],[94259,1,""],[93451,1,""],[94408,1,""],[94379,1,""],[94350,1,""],[94318,1,""],[94290,1,""],[94257,1,""],[93450,1,""],[94401,1,""],[94373,1,""],[94345,1,""],[94314,1,""],[94287,1,""],[94255,1,""],[93449,1,""],[94394,1,""],[94367,1,""],[94340,1,""],[94310,1,""],[94284,1,""],[94253,1,""],[93448,1,""],[94387,1,""],[94361,1,""],[94335,1,""],[94306,1,""],[94281,1,""],[94251,1,""],[93447,1,""],[94381,0,"b"],[94356,0,"b"],[94331,0,"b"],[94303,0,"b"],[94279,0,"b"],[94250,0,"b"],[93447,0,"b"],[94388,0,"a"],[94362,0,"a"],[94336,0,"a"],[94307,0,"a"],[94282,0,"a"],[94252,0,"a"],[93448,0,"a"],[94395,0,"r"],[94368,0,"r"],[94341,0,"r"],[94311,0,"r"],[94285,0,"r"],[94254,0,"r"],[93449,0,"r"],[94402,0,"_"],[94374,0,"_"],[94346,0,"_"],[94315,0,"_"],[94288,0,"_"],[94256,0,"_"],[93450,0,"_"],[94409,0,"f"],[94380,0,"f"],[94351,0,"f"],[94319,0,"f"],[94291,0,"f"],[94258,0,"f"],[93451,0,"f"],[94416,0,"o"],[94386,0,"o"],[94356,0,"o"],[94323,0,"o"],[94294,0,"o"],[94260,0,"o"],[93452,0,"o"],[94423,0,"r"],[94392,0,"r"],[94361,0,"r"],[94327,0,"r"],[94297,0,"r"],[94262,0,"r"],[93453,0,"r"],[94430,0,"_"],[94398,0,"_"],[94366,0,"_"],[94331,0,"_"],[94300,0,"_"],[94264,0,"_"],[93454,0,"_"],[94437,0,"r"],[94404,0,"r"],[94371,0,"r"],[94335,0,"r"],[94303,0,"r"],[94266,0,"r"],[93455,0,"r"],[94444,0,"e"],[94410,0,"e"],[94376,0,"e"],[94339,0,"e"],[94306,0,"e"],[94268,0,"e"],[93456,0,"e"],[94451,0,"m"],[94416,0,"m"],[94381,0,"m"],[94343,0,"m"],[94309,0,"m"],[94270,0,"m"],[93457,0,"m"],[94458,0,"o"],[94422,0,"o"],[94386,0,"o"],[94347,0,"o"],[94312,0,"o"],[94272,0,"o"],[93458,0,"o"],[94465,0,"t"],[94428,0,"t"],[94391,0,"t"],[94351,0,"t"],[94315,0,"t"],[94274,0,"t"],[93459,0,"t"],[94472,0,"e"],[94434,0,"e"],[94396,0,"e"],[94355,0,"e"],[94318,0,"e"],[94276,0,"e"],[93460,0,"e"],[93840,98,""],[94626,0,"\n#let bar_for_remote(name) = {\n  let stats = json(\"results/stats_\" + name + \".json\")\n  (\n    name,\n    stats.op_stats.len / raw_timings.at(\"dt-crdt_process_remote_edits\").at(name) / 1000,\n    stats.op_stats.len / raw_timings.at(\"dt_merge\").at(name) / 1000,\n  )\n  // (\n  //   name,\n  //   raw_timings.at(\"dt-crdt_process_remote_edits\").at(name),\n  //   raw_timings.at(\"dt_merge\").at(name),\n  // )\n}\n\n#figure(\n  canvas(length: 1cm, {\n    chart.barchart(\n      mode: \"clustered\",\n      // mode: \"basic\",\n      size: (9, auto),\n      label-key: 0,\n      value-key: (..range(1, 3)),\n      labels: (\n        [dt-crdt], [dt]\n      ),\n      // x-unit: [x],\n      x-label: [Millions of RLE events / second processed],\n      (\n        bar_for_remote(\"automerge-paper\"),\n        bar_for_remote(\"seph-blog1\"),\n        bar_for_remote(\"friendsforever\"),\n        bar_for_remote(\"clownschool\"),\n        bar_for_remote(\"node_nodecc\"),\n        bar_for_remote(\"git-makefile\"),\n      ),\n    )\n  }),\n  caption: [\n    Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n\n    Larger is better.\n  ],\n  kind: image,\n)\n"],[94640,6,""],[94640,0,"local"],[95564,1,""],[95525,1,""],[95486,1,""],[95444,1,""],[95406,1,""],[95363,1,""],[95558,1,""],[95520,1,""],[95482,1,""],[95441,1,""],[95404,1,""],[95362,1,""],[95552,1,""],[95515,1,""],[95478,1,""],[95438,1,""],[95402,1,""],[95361,1,""],[95546,1,""],[95510,1,""],[95474,1,""],[95435,1,""],[95400,1,""],[95360,1,""],[95540,1,""],[95505,1,""],[95470,1,""],[95432,1,""],[95398,1,""],[95359,1,""],[95534,1,""],[95500,1,""],[95466,1,""],[95429,1,""],[95396,1,""],[95358,1,""],[95529,0,"l"],[95496,0,"l"],[95463,0,"l"],[95427,0,"l"],[95395,0,"l"],[95358,0,"l"],[95535,0,";"],[95501,0,";"],[95467,0,";"],[95430,0,";"],[95397,0,";"],[95359,0,";"],[95541,0,"o"],[95506,0,"o"],[95471,0,"o"],[95433,0,"o"],[95399,0,"o"],[95360,0,"o"],[95547,0,"c"],[95511,0,"c"],[95475,0,"c"],[95436,0,"c"],[95401,0,"c"],[95361,0,"c"],[95553,0,"a"],[95516,0,"a"],[95479,0,"a"],[95439,0,"a"],[95403,0,"a"],[95362,0,"a"],[95558,1,""],[95520,1,""],[95482,1,""],[95441,1,""],[95404,1,""],[95362,1,""],[95552,1,""],[95515,1,""],[95478,1,""],[95438,1,""],[95402,1,""],[95361,1,""],[95546,1,""],[95510,1,""],[95474,1,""],[95435,1,""],[95400,1,""],[95360,1,""],[95540,1,""],[95505,1,""],[95470,1,""],[95432,1,""],[95398,1,""],[95359,1,""],[95535,0,"o"],[95501,0,"o"],[95467,0,"o"],[95430,0,"o"],[95397,0,"o"],[95359,0,"o"],[95541,0,"c"],[95506,0,"c"],[95471,0,"c"],[95433,0,"c"],[95399,0,"c"],[95360,0,"c"],[95547,0,"a"],[95511,0,"a"],[95475,0,"a"],[95436,0,"a"],[95401,0,"a"],[95361,0,"a"],[95553,0,"l"],[95516,0,"l"],[95479,0,"l"],[95439,0,"l"],[95403,0,"l"],[95362,0,"l"],[94857,5,""],[94857,0,"local"],[95458,0,"_flat"],[95501,0,"_flat"],[95556,0,"// "],[95518,0,"// "],[95475,0,"// "],[95429,0,"// "],[94792,1,""],[94791,1,""],[94790,1,""],[94789,1,""],[94788,1,""],[94787,1,""],[94786,1,""],[94785,1,""],[94784,1,""],[94783,1,""],[94782,1,""],[94781,1,""],[94780,1,""],[94779,1,""],[94778,1,""],[94777,1,""],[94776,1,""],[94775,1,""],[94774,1,""],[94773,1,""],[94772,1,""],[94772,0,"/lo"],[94774,1,""],[94773,1,""],[94772,1,""],[94772,0,"_local"],[94650,0,", stat_name"],[94705,0,"stat_"],[95382,0,", \"automerge-paper\""],[95438,0,", \"seph-blog1\""],[95512,3,""],[95463,3,""],[95478,0,"friendsforever\", "],[95540,0,"\"clownschool\", "],[95495,0,"\""],[94646,4,""],[94646,0,"stat_name"],[94657,5,""],[95252,0,"\n      bar-style: blue,"],[95274,0,"]"],[95270,0,"["],[95275,1,""],[95270,1,""],[95274,0,")"],[95270,0,"("],[95275,0,", blue"],[95270,12,""],[95270,0,"(idx) => "],[95270,9,""],[95270,0,"palette.rea"],[95280,1,""],[95280,0,"d"],[107,0,", pal"],[109,3,""],[109,0,"palette"],[95287,3,""],[95286,1,""],[95286,0,".blue()"],[95292,1,""],[95291,1,""],[95287,4,""],[95286,1,""],[95286,0,".dark-green()"],[95298,1,""],[95297,1,""],[95297,0,"()"],[95298,1,""],[95297,1,""],[95042,0,"\n  let pale"],[95052,1,""],[95051,1,""],[95050,1,""],[95050,0," = (idx) => "],[95061,1,""],[95060,1,""],[95060,0," {\n    \n    "],[95063,4,""],[95064,4,""],[95064,0,"  }"],[95063,0,"    red"],[95074,0,"\n  "],[95075,2,""],[95052,1,""],[95051,1,""],[95050,1,""],[95298,0,"// "],[95291,0,"\n      bar-style: p,"],[95071,0,","],[95071,1,""],[95045,26,""],[95043,3,""],[95042,1,""],[95033,0,"let p(idx) = {\n    red\n  }"],[95033,0,"#"],[95057,2,""],[95049,4,""],[95049,0,"  "],[95054,0,")"],[95051,0,"("],[95055,0,", blue, green"],[95070,0,"// "],[95049,0,"// "],[95033,0,"// "],[95315,0,"// "],[95032,0,"\n\n#"],[95034,1,""],[95034,0,"#pal"],[95035,3,""],[95035,0,"palette.red.col"],[95049,1,""],[95048,1,""],[95047,1,""],[95046,1,""],[95046,0,"(1)"],[95047,1,""],[95047,0,"9"],[95047,1,""],[95047,0,"0"],[95047,1,""],[95047,0,"1"],[95047,1,""],[95047,0,"2"],[95047,1,""],[95047,0,"3"],[95093,3,""],[95069,3,""],[95050,3,""],[95068,18,""],[95068,0,"()"],[95069,0,"stroke: "],[95069,0,"\n    "],[95082,0,"\n    "],[95070,12,""],[95070,0,"    stroke:"],[95082,4,""],[95082,0,"  "],[95081,0," black,\n    fill: green,"],[95346,3,""],[95099,5,""],[95099,0,"().at(idx)"],[95100,0,"red, blue, green"],[95034,15,""],[95033,1,""],[95034,83,""],[93450,0,"#let p(idx) = {\n  (\n    stroke: black,\n    fill: (red, blue, green).at(idx),\n  )\n}\n"],[93449,0,"\n"],[93456,1,""],[93456,0,"colors"],[95368,1,""],[95368,0,"colors"],[94116,0,"\n      bar-style: colors,"],[93511,4,""],[93511,0,"light"],[93511,5,""],[93511,0,"green.aqua"],[93511,10,""],[93511,0,"pal"],[93511,3,""],[93511,0,"palette.light-green()"],[93530,2,""],[93532,5,""],[93531,1,""],[93530,1,""],[93506,3,""],[93506,0,"a"],[93506,1,""],[93506,0,"pale"],[93506,4,""],[93506,0,"palette.ligh"],[93517,1,""],[93516,1,""],[93515,1,""],[93514,1,""],[93514,0,"tan"],[93514,3,""],[93514,0,"tango-colors"],[93495,0,"    fill: (palette.tango-colors, palette.light-green).at(idx),\n"],[93499,0,"// "],[93565,7,""],[93565,0,"fill: ("],[93571,1,""],[93591,22,""],[93598,0,"+1+"],[93600,1,""],[93600,0,"+1+2+3"],[93598,8,""],[93579,12,""],[93578,1,""],[93578,0,".//"],[93578,1,""],[93578,0,".rainbow-colors.at(1)"],[93597,1,""],[93597,0,"2"],[93597,1,""],[93597,0,"3"],[93597,1,""],[93597,0,"idx + 1"],[93603,1,""],[93603,0,"2"],[93603,1,""],[93603,0,"3"],[93603,1,""],[93603,0,"4"],[93603,1,""],[93603,0,"2"],[93565,0,"// "],[93495,0,"    // fill: (palette.tango-colors, palette.light-green).at(idx),\n"],[93499,3,""],[93514,33,""],[93514,0,"red, palette.ligh"],[93527,4,""],[93527,0,"light-green()"],[93539,1,""],[93538,1,""],[93517,0,"."],[93517,1,""],[93506,11,""],[93506,0,"red"],[93506,3,""],[93506,0,"palette.red"],[93499,0,"// "],[93622,3,""],[93622,0,"// "],[93499,3,""],[93539,8,""],[93539,0,".at(idx)"],[93517,0,"."],[93517,1,""],[93517,0,".0"],[93518,1,""],[93517,1,""],[93517,0,".at(0)"],[93514,9,""],[93513,1,""],[93513,0,".blue()"],[93519,1,""],[93518,1,""],[93528,11,""],[93528,0,"green"],[93506,27,""],[93506,0,"green, bnl"],[93515,1,""],[93514,1,""],[93514,0,"lue"],[93513,4,""],[93513,0,"red.at(1)"],[93521,1,""],[93520,1,""],[93519,1,""],[93518,1,""],[93517,1,""],[93516,1,""],[93488,0,"1pt + "],[93488,1,""],[93488,0,"0.5"],[93490,1,""],[93489,1,""],[93488,1,""],[93488,0,"1"],[93505,0,"// "],[93500,0,"\n    fill: black,"],[93510,7,""],[93500,10,""],[93505,3,""],[96069,6,""],[96069,0,"local_"],[96069,0,"_"],[96075,1,""],[96069,1,""],[96006,0,"\n    "],[96006,5,""],[96047,11,""],[96068,73,""],[96064,4,""],[96064,0,"events"],[96064,0,"editing "],[94178,1,""],[94178,0,"5"],[94181,4,""],[94181,0,"5"],[94181,1,""],[94181,0,"4"],[94178,1,""],[94178,0,"3"],[94178,1,""],[94178,0,"4"],[94178,1,""],[94178,0,"5"],[94178,1,""],[94178,0,"4"],[94178,1,""],[94178,0,"5"],[94178,1,""],[94178,0,"6"],[94178,1,""],[94178,0,"5"],[94204,0,"\n      vb"],[94212,1,""],[94211,1,""],[94211,0,"bar-width: 0.7,"],[94224,1,""],[94224,0,"5"],[94211,0,"// "],[94211,3,""],[94215,5,""],[94215,0,"height"],[94211,0,"// "],[94204,0,"\n      x-tick-step: 100,"],[94226,1,""],[94225,1,""],[94224,1,""],[94224,0,"2"],[94178,1,""],[94178,0,"4"],[94178,1,""],[94178,0,"5"],[94061,0,"\n\nc"],[94063,1,""],[94063,0,"#cetz.set"],[94064,8,""],[94064,0,"set"],[94063,0,"// "],[116,0,", set"],[118,3,""],[118,0,"styles"],[118,6,""],[117,1,""],[116,1,""],[94063,3,""],[94067,0,"-style()"],[94074,0,"(\nfill: none,\nstroke: luma(0%),\nlabel: (offset: 0.2, anchor: auto),\ntick: (\nfill: none,\nstroke: luma(0%),\nlength: 0.1,\nminor-length: 0.08,\nlabel: (offset: 0.2, angle: 0deg, anchor: auto),\n),\ngrid: (\nstroke: (paint: luma(66.67%), dash: \"dotted\"),\nfill: none,\n),\n53/71\nCeTZ\nx: (fill: auto, stroke: auto, mark: auto, tick: auto),\ny: (fill: auto, stroke: auto, mark: auto, tick: auto),\n)"],[94341,5,""],[94335,6,""],[94064,0,"cetz.plot."],[94064,5,""],[94450,0,"// "],[94395,0,"// "],[94340,0,"// "],[94337,0,"// "],[94325,0,"// "],[94278,0,"// "],[94270,0,"// "],[94267,0,"// "],[94218,0,"// "],[94198,0,"// "],[94185,0,"// "],[94167,0,"// "],[94155,0,"// "],[94147,0,"// "],[94111,0,"// "],[94093,0,"// "],[94081,0,"// "],[94063,0,"// "],[116,0,", st"],[119,1,""],[118,1,""],[118,0,"styles"],[94070,0,"\n#styles."],[94072,7,""],[94071,1,""],[94071,0,"@"],[94071,1,""],[94071,0,"#draw.set"],[94077,3,""],[94077,0,"set-style()"],[94071,17,""],[94070,1,""],[94509,3,""],[94451,3,""],[94393,3,""],[94387,3,""],[94372,3,""],[94322,3,""],[94311,3,""],[94305,3,""],[94253,3,""],[94230,3,""],[94214,3,""],[94193,3,""],[94178,3,""],[94167,3,""],[94128,3,""],[94107,3,""],[94092,3,""],[94071,3,""],[94072,4,""],[94072,0,"draw"],[94095,4,""],[94095,0,"black"],[94077,383,""],[94071,7,""],[94070,1,""],[94069,1,""],[94103,0,"\n    set-style((\nfill: black,\nstroke: luma(0%),\nlabel: (offset: 0.2, anchor: auto),\ntick: (\nfill: none,\nstroke: luma(0%),\nlength: 0.1,\nminor-length: 0.08,\nlabel: (offset: 0.2, angle: 0deg, anchor: auto),\n),\ngrid: (\nstroke: (paint: luma(66.67%), dash: \"dotted\"),\nfill: none,\n),\nx: (fill: auto, stroke: auto, mark: auto, tick: auto),\ny: (fill: auto, stroke: auto, mark: auto, tick: auto),\n))"],[94108,0,"draw."],[94206,4,""],[94206,0,"black"],[94496,0,"// "],[94441,0,"// "],[94386,0,"// "],[94383,0,"// "],[94371,0,"// "],[94324,0,"// "],[94316,0,"// "],[94313,0,"// "],[94264,0,"// "],[94244,0,"// "],[94231,0,"// "],[94213,0,"// "],[94200,0,"// "],[94192,0,"// "],[94156,0,"// "],[94138,0,"// "],[94125,0,"// "],[94104,0,"// "],[94563,8,""],[94563,0,"col"],[94563,3,""],[94563,0,"columnchart()"],[94574,2,""],[94574,0,")"],[94574,0,"("],[94563,13,""],[94563,0,"col"],[94563,3,""],[94563,0,"barchart"],[94897,0,". More is better"],[94856,12,""],[94856,0,"M"],[94857,4,""],[94871,1,""],[94870,1,""],[94869,1,""],[96088,60,""],[96088,0,"x-label: [Mevents / sec processed. More is better],"],[96088,51,""],[96088,0,"      x-label: [Millions of RLE events / second processed],\n"],[96094,53,""],[96094,0,"x-label: [Mevents / sec processed. More is better],"],[95875,23,""],[95875,0,"      size: (5, 4),\n"],[95328,22,""],[95327,1,""],[96551,22,""],[96550,1,""],[94103,0,"\n    set-style()"],[94108,11,""],[94104,4,""],[94769,0,"\n      plot-args: (\n        \n        "],[94789,8,""],[94790,8,""],[94790,0,"      ),"],[94789,0,"        axis-style: \"schoolbook\""],[94816,0,"-"],[94797,25,""],[94797,0,"fill-below: true,"],[94797,17,""],[94797,0,"plot-style: black"],[94821,0,"// "],[94795,0,"// "],[94776,0,"// "],[94769,0,"\n      "],[94770,6,""],[94770,0,"      "],[94769,7,""],[94102,0,"debug: true, "],[94114,1,""],[94108,6,""],[94102,6,""],[94070,0,"\n#let raw_timings = json(\"results/timings.json\")"],[94076,11,""],[94076,0,"nm"],[94077,1,""],[94077,0,"="],[94077,1,""],[94077,0,"uim"],[94079,1,""],[94078,1,""],[94078,0,"m_patches"],[94104,7,""],[94104,0,"numpatches"],[94121,0,"\n"],[94070,51,""],[94069,1,""],[95415,0,"\n#let num_patches = json(\"results/numpatches.json\")"],[95414,1,""],[95579,0,"    stats.op_stats.len / raw_timings.at(\"dt-crdt_local\").at(name) / 1000,\n    stats.op_stats.len / raw_timings.at(\"dt_local\").at(name) / 1000,\n"],[95800,0,"// "],[95726,0,"// "],[95678,11,""],[95678,0,"n"],[95604,11,""],[95604,0,"n"],[95669,0,"u"],[95605,0,"u"],[95671,0,"m"],[95606,0,"m"],[95673,0,"_"],[95607,0,"_"],[95675,0,"p"],[95608,0,"p"],[95677,0,"a"],[95609,0,"a"],[95679,0,"t"],[95610,0,"t"],[95681,0,"c"],[95611,0,"c"],[95683,0,"h"],[95612,0,"h"],[95685,0,"e"],[95613,0,"e"],[95687,0,"s"],[95614,0,"s"],[95615,20,""],[95669,15,""],[95669,0,".at(\"dt_local\")"],[95615,0,".at(\"dt-crdt_local\")"],[95678,11,""],[95678,0,"raw_timings"],[95604,11,""],[95604,0,"raw_timings"],[95657,18,""],[95583,18,""],[95639,0,"n"],[95583,0,"n"],[95641,0,"u"],[95584,0,"u"],[95643,0,"m"],[95585,0,"m"],[95645,0,"_"],[95586,0,"_"],[95647,0,"p"],[95587,0,"p"],[95649,0,"a"],[95588,0,"a"],[95651,0,"t"],[95589,0,"t"],[95653,0,"c"],[95590,0,"c"],[95655,0,"h"],[95591,0,"h"],[95657,0,"e"],[95592,0,"e"],[95659,0,"s"],[95593,0,"s"],[95661,0,"."],[95594,0,"."],[95663,0,"a"],[95595,0,"a"],[95665,0,"t"],[95596,0,"t"],[95667,0,"("],[95597,0,"("],[95669,0,"n"],[95598,0,"n"],[95671,0,"a"],[95599,0,"a"],[95673,0,"m"],[95600,0,"m"],[95675,0,"e"],[95601,0,"e"],[95677,0,")"],[95602,0,")"],[95508,0,"// "],[95506,61,""],[95506,0,"  // let stats = json(\"results/stats_\" + stat_name + \".json\")\n  "],[95567,3,""],[95391,0," ?N"],[95393,1,""],[95392,1,""],[95392,0,"Note CRDT performance is very stable"],[95391,37,""],[95506,62,""],[95667,149,""],[95671,135,""],[95414,1084,""],[91809,0," (k)"],[91521,0," / 1000"],[91500,0,"cal.c"],[91504,1,""],[91503,1,""],[91503,0,"c.round("],[91539,0,")"],[91539,0,", digits: 2"],[91549,1,""],[91549,0,"1"],[93214,0,"\n"],[93214,0,"\n\n#let num_patches = json(\"results/numpatches.json\")\n#let bar_for_local(stat_name, name) = {\n  (\n    name,\n    num_patches.at(name) / raw_timings.at(\"dt-crdt_local\").at(name) / 1000,\n    num_patches.at(name) / raw_timings.at(\"dt_local\").at(name) / 1000,\n  )\n}\n\n#figure(\n  canvas(length: 1cm, {\n    chart.barchart(\n      mode: \"clustered\",\n      // mode: \"basic\",\n      size: (5, 4),\n      label-key: 0,\n      value-key: (..range(1, 3)),\n      labels: (\n        [dt-crdt], [dt]\n      ),\n      bar-style: colors,\n      // bar-style: palette.dark-green,\n      // x-unit: [x],\n      x-label: [Mevents / sec processed. More is better],\n      (\n        bar_for_local(\"automerge-paper\", \"automerge-paper\"),\n        bar_for_local(\"seph-blog1\", \"seph-blog1\"),\n        bar_for_local(\"friendsforever\", \"friendsforever_flat\"),\n        bar_for_local(\"clownschool\", \"clownschool_flat\"),\n        // bar_for_local(\"node_nodecc\"),\n        // bar_for_local(\"git-makefile\"),\n      ),\n    )\n  }),\n  caption: [\n    Comparative speed of DT and DT-crdt processing local editing events\n  ],\n  kind: image,\n)\n\n"],[94529,262,""],[93214,0,"\n#let raw_timings = json(\"results/timings.json\")\n\n#let colors(idx) = {\n  (\n    stroke: 1pt + black,\n    fill: (green, red).at(idx),\n    // fill: (palette.tango-colors, palette.light-green).at(idx),\n    // fill: palette.rainbow-colors.at(idx + 2)//.at(idx),\n  )\n}"],[93214,0,"\n"],[93214,0,"\nFirst, its "],[93222,4,""],[93222,0,"we note "],[93215,15,""],[93215,0,"The "],[93215,4,""],[93215,0,"P"],[93215,1,""],[93215,0,"eg"],[93216,1,""],[93215,1,""],[93215,0,"Eg-walker"],[93940,0,"        [dt-crdt], [dt]\n"],[93948,0,"// "],[93976,3,""],[93984,2,""],[93984,0,"eg-walker"],[96019,0,"// "],[96010,0,"\n        [crdt], [eg-walker]"],[93224,0," "],[93215,10,""],[93215,0,"Spee"],[93215,4,""],[93215,0,"We can brrea"],[93226,1,""],[93225,1,""],[93224,1,""],[93215,9,""],[93215,0,"There are essentially 2 scenarios "],[93215,34,""],[93215,0,"There are essentially 2 scenarios"],[94004,0," (dt-crdt)"],[94027,0," (dt)"],[96049,28,""],[96049,0,"\n        [crdt (dt-crdt)], [eg-walker (dt)]"],[95305,449,""],[95304,1,""],[93804,0,"\n    \n  set-style(\n    mark: (fill: black),\n    stroke: (thickness: 0.4pt, cap: \"round\"),\n    angle: (\n      radius: 0.3,\n      label-radius: .22,\n      fill: green.lighten(80%),\n      stroke: (paint: green.darken(50%))\n    ),\n    content: (padding: 1pt)\n  )"],[93805,4,""],[93808,0,"draw."],[94063,0,"\n  "],[94064,2,""],[94060,2,""],[94060,0,"    "],[94032,4,""],[94032,0,"      "],[94025,4,""],[94025,0,"      "],[93984,6,""],[93984,0,"        "],[93952,6,""],[93952,0,"        "],[93927,6,""],[93927,0,"        "],[93908,6,""],[93908,0,"        "],[93895,4,""],[93895,0,"      "],[93849,4,""],[93849,0,"      "],[93824,4,""],[93824,0,"      "],[93806,2,""],[93806,0,"    "],[93859,0,"// "],[94059,0,"// "],[94059,3,""],[94059,0,"// "],[94050,0,"// "],[94007,0,"// "],[93973,0,"// "],[93946,0,"// "],[93925,0,"// "],[93910,0,"// "],[93904,166,""],[93903,1,""],[93845,5,""],[93845,0,"green"],[93845,5,""],[93845,0,"black, stroke: black + 0.5pt"],[93860,5,""],[93860,0,"red"],[93832,0,"// "],[93876,0,"\n      "],[93877,6,""],[93825,0,"\n      s"],[93832,1,""],[93826,6,""],[93885,3,""],[93885,0,"// "],[93826,0,"      stroke: ()"],[93841,0,"thickness: 0.5pt"],[93856,1,""],[93855,1,""],[93854,1,""],[93853,1,""],[93852,1,""],[93851,1,""],[93841,10,""],[93841,0,"black + 0.5pt"],[93832,23,""],[93832,0,"x: ()"],[93836,0,"stroken"],[93842,1,""],[93841,1,""],[93841,0,"e: none"],[94237,0,"// "],[94265,3,""],[94284,10,""],[94284,0,"tang-"],[94284,5,""],[94284,0,"tango-dark()"],[94295,1,""],[94294,1,""],[94294,0,"-co"],[94284,13,""],[94284,0,"tango-dark-colors"],[94294,7,""],[94289,5,""],[94265,0,"// "],[94237,3,""],[93336,1,""],[93336,0,"5"],[93336,1,""],[93336,0,"1"],[93380,0,"\n    x: st"],[93389,1,""],[93388,1,""],[93388,0,"()"],[93389,0,"stroke: none"],[93385,17,""],[93381,4,""],[93381,0,"    grid: ()"],[93392,0,"fill: black"],[93404,0,","],[93385,20,""],[93381,4,""],[93850,0,"\n      "],[93851,6,""],[93850,0,",\n      grid: (fill: black),"],[93826,0,"axes: ("],[94028,0,")"],[93865,0,"// "],[93840,0,"// "],[93892,0,"      "],[93892,6,""],[93951,3,""],[93973,1,""],[93973,0,"5"],[93976,14,""],[93834,111,""],[93868,33,""],[93336,1,""],[93336,0,"5"],[93336,1,""],[93336,0,"0.5"],[93338,1,""],[93338,0,"7"],[93338,1,""],[93338,0,"8"],[93864,1,""],[93864,0,"7"],[93864,1,""],[93864,0,"8"],[93869,0,"\n      \n      "],[93870,6,""],[93877,0,"top: ()"],[93883,0,"\n        \n      "],[93892,0,"stroke: ()"],[93901,0,"thickness: 1pt"],[93828,0,"\n      "],[93932,4,""],[93932,0,"      "],[93924,6,""],[93924,0,"        "],[93891,8,""],[93891,0,"          "],[93878,6,""],[93878,0,"        "],[93843,6,""],[93843,0,"        "],[93947,0,"\n      "],[93948,6,""],[93948,0,"    "],[93828,0,"\n      fill: blue,"],[93860,0,"\n        tick:L {"],[93876,1,""],[93875,1,""],[93874,1,""],[93874,0," (),"],[93876,0,"length: -2"],[93885,0,"."],[93887,0,", minor-le "],[93897,1,""],[93897,0,"ngth: -0.5"],[93906,1,""],[93906,0,"1"],[94013,0,"// "],[94003,0,"// "],[93968,0,"// "],[93953,0,"// "],[93916,0,"// "],[93867,0,"// "],[93853,0,"// "],[93835,0,"// "],[93828,0,"styles.default"],[93828,0,"..."],[93830,15,""],[93830,0,"scie"],[93830,4,""],[93830,0,"styles.util."],[93828,14,""],[93828,0,"\n      tick: (\n        \n        "],[93843,8,""],[93844,8,""],[93844,0,"      )"],[93843,0,"        stok"],[93854,1,""],[93853,1,""],[93853,0,"roke: black"],[93859,5,""],[93859,0,"luma(100"],[93866,1,""],[93865,1,""],[93864,1,""],[93863,1,""],[93862,1,""],[93861,1,""],[93860,1,""],[93859,1,""],[93859,0,"black + 1pt"],[93877,0,"// "],[93849,0,"// "],[93835,0,"// "],[93828,0,"\n        axes: (tick: (length: 0), grid: (stroke: (dash: \"dotted\"))),\n  bar-width: .8,\n  y-inset: 1,"],[93915,2,""],[93915,0,"    "],[93898,2,""],[93898,0,"    "],[93917,4,""],[93917,0,"      "],[93898,4,""],[93898,0,"      "],[93829,8,""],[93829,0,"      "],[93857,1,""],[93857,0,"1"],[93857,1,""],[93857,0,"2"],[93884,6,""],[93884,0,"dashed"],[93932,1,""],[93932,0,"2"],[93932,1,""],[93932,0,"10"],[93913,1,""],[93913,0,"."],[93923,0,"// "],[93902,0,"// "],[93835,0,"// "],[94031,3,""],[94206,3,""],[94097,3,""],[94449,0,"\n      axis-style: scientific\""],[94468,0,"\""],[94480,0,","],[94469,10,""],[94469,0,"schoolboo"],[94477,1,""],[94476,1,""],[94475,1,""],[94475,0,"-bool"],[94479,1,""],[94479,0,"k"],[94479,1,""],[94479,0,"l"],[94475,5,""],[94475,0,"boo"],[94469,9,""],[94469,0,"scientific"],[95869,0,"\n      axis-style: \"scientific\","],[93828,0,"\n      barchart: ()_"],[93847,1,""],[93847,0,",\n      "],[93849,6,""],[93846,0,"\n        \n      "],[93855,0,"fill: red,"],[93829,45,""],[93828,1,""],[93906,3,""],[93906,0,"// "],[94011,3,""],[94011,0,"// "],[94004,0,"\n      grid "],[94015,1,""],[94015,0,": (\n        \n        "],[94019,8,""],[94020,8,""],[94020,0,"      ),"],[94019,0,"        fill: blue,"],[94143,0,"// "],[94143,3,""],[94143,0,"// "],[94143,3,""],[94170,0,"\n        fill: blue,"],[94179,0,"// "],[94257,3,""],[94219,3,""],[94201,3,""],[94203,3,""],[94203,0,"x"],[94203,1,""],[94203,0,"top"],[94244,0,",\n          fill: red,"],[94275,0,"// "],[94254,0,"// "],[94218,0,"// "],[94203,0,"// "],[94194,0,"  "],[94194,2,""],[94194,0,"\nstroke: (paint: luma(66.67%), dash: \"dotted\")"],[94143,0,"// "],[94198,0,"// "],[94038,0,"\n        stroke: (paint: luma(66.67%), dash: \"dotted\")"],[94047,0,"// "],[94047,3,""],[94027,0,"// "],[94095,0,"\n        fill: red;"],[94096,18,""],[94095,1,""],[94146,3,""],[94148,0,"// "],[94191,0,"\n      axes: ("],[94126,14,""],[94134,3,""],[94134,0,"// "],[94200,3,""],[94094,0,", thickness: 1pt"],[94243,0,"\n        padding: 1,"],[94262,0,"pt"],[94244,21,""],[94243,1,""],[94508,1,""],[94508,0,"6"],[94508,1,""],[94508,0,"5"],[94514,0,"\n      bac"],[94523,1,""],[94523,0,"r-width: 1,"],[94532,1,""],[94532,0,"10"],[94521,0,"// "],[94538,0,"\n      y-inset: 2,"],[94554,1,""],[94554,0,"5"],[94545,0,"// "],[94545,3,""],[94545,0,"// "],[94545,3,""],[94545,0,"// "],[94566,0,"// "],[94566,3,""],[94586,0,"// "],[94586,3,""],[94566,0,"// "],[94589,0,"// "],[94589,3,""],[94566,3,""],[94747,0,"// "],[94747,3,""],[94747,0,"// "],[94747,3,""],[94715,0,"// "],[94715,3,""],[94715,0,"// "],[94715,3,""],[94715,0,"// "],[94521,3,""],[94521,0,"// "],[94545,3,""],[94545,0,"// "],[94715,3,""],[93829,0,"      fill: red,"],[93835,10,""],[93835,0,"stroke: green,"],[93835,14,""],[93829,6,""],[94252,3,""],[94252,0,"// "],[94120,0,"\n      padding: 1,"],[94136,1,""],[94136,0,"0.5"],[94138,1,""],[94138,0,"1"],[94138,1,""],[94138,0,"2"],[94138,1,""],[94138,0,"3"],[94138,1,""],[94138,0,"4"],[94140,21,""],[94121,0,"      // fill: blue,\n"],[94161,52,""],[94142,0,"        // tick: (length: -.2, minor-length: -0.1),\n"],[94213,14,""],[94194,0,"      axes: (\n"],[94225,1,""],[94225,0,"1"],[94225,1,""],[94225,0,"5"],[94208,19,""],[94207,1,""],[94521,3,""],[94534,0,"000000000000"],[94545,1,""],[94544,1,""],[94543,1,""],[94542,1,""],[94541,1,""],[94540,1,""],[94539,1,""],[94521,0,"// "],[94571,0,"// "],[94452,0,"// "],[94452,3,""],[94459,9,""],[94459,0,"stacked100"],[94468,1,""],[94467,1,""],[94466,1,""],[94466,0,"100"],[94459,10,""],[94459,0,"clustered"],[94452,0,"// "],[94452,3,""],[94550,3,""],[94560,0,"0000000"],[94550,0,"// "],[94594,0,"\n      x-unit: 1000,"],[94613,0,"00000"],[94617,1,""],[94616,1,""],[94615,1,""],[94614,1,""],[94601,0,"// "],[94754,0,"// "],[96177,0,"// "],[93298,0,"\n"],[93298,0,"\n#figure(\n  \n  "],[93308,2,""],[93309,2,""],[93309,0,")"],[93308,0,"  uimag"],[93314,1,""],[93313,1,""],[93312,1,""],[93311,1,""],[93310,1,""],[93310,0,"image(\"diagrams/test.svg\")"],[93335,0,", fit: contain"],[93342,7,""],[93342,0,"\"contain\""],[93337,0,"width: 80%,. "],[93349,1,""],[93348,1,""],[93347,1,""],[93347,0,", "],[93348,1,""],[93348,0," "],[94312,0,"\n        stroke: (thickness: 0.8pt),"],[94285,0,"// "],[94332,18,""],[94332,0,"none"],[94332,4,""],[94332,0,"(thickness: 0.8pt)"],[94915,0,"\n      bar-styl;e"],[94931,1,""],[94930,1,""],[94930,0,"e: (),"],[94916,20,""],[94915,1,""],[93397,0,"// "],[93422,0,"\n    stroke: none,"],[94883,3,""],[94896,10,""],[94896,0,"left"],[94896,4,""],[94896,0,"scientific"],[94883,0,"// "],[94210,0,"\n      legend: {"],[94225,1,""],[94225,0,"(\n        \n        "],[94227,8,""],[94228,8,""],[94228,0,"      ),"],[94227,0,"        default-position: \"legend.north\",\n        stroke: none,"],[94235,0,"// "],[94975,3,""],[94975,0,"// "],[94975,3,""],[94729,1,""],[94729,0,"6"],[94729,1,""],[94729,0,"7"],[94729,1,""],[94729,0,"8"],[94293,0,"\n        padding: 0,"],[94312,0,".1"],[94235,3,""],[94261,0,"inner-"],[94272,0,"-east"],[94267,5,""],[94267,0,"south"],[94261,11,""],[94261,0,"north"],[94273,0,"\n        item: (),"],[94289,0," prev"],[94293,1,""],[94292,1,""],[94291,1,""],[94290,1,""],[94290,0,"preview: () "],[94300,0,"di"],[94301,1,""],[94300,1,""],[94300,0,"width: 1"],[94307,1,""],[94307,0,"0.1"],[94309,1,""],[94309,0,"2"],[94309,1,""],[94309,0,"2"],[94309,1,""],[94309,0,"3"],[94309,1,""],[94309,0,"4"],[95205,0,"\n      plot"],[95215,1,""],[95214,1,""],[95213,1,""],[95212,1,""],[95212,0,"x-ticks: 1, 2,)"],[95221,0,"("],[95227,0," 3"],[95230,0,","],[95212,0,"// "],[95212,22,""],[95212,0,"x-max: 5,"],[95220,0,"00"],[95219,1,""],[95219,0,"4"],[95219,1,""],[95219,0,"3"],[95219,1,""],[95219,0,"2"],[95219,1,""],[95219,0,"1"],[95212,0,"// "],[95212,3,""],[95219,3,""],[95219,0,"60"],[95220,1,""],[95219,1,""],[95219,0,"70"],[95220,1,""],[95220,0,"5"],[95220,1,""],[95219,1,""],[95219,0,"70"],[95220,1,""],[95219,1,""],[95219,0,"80"],[95219,1,""],[95219,0,"7"],[95219,1,""],[95219,0,"8"],[94273,0,"\n        default-position: \"legend.north-east\","],[94235,0,"// "],[94311,0,"inner-"],[94317,5,""],[94317,0,"south"],[95275,2,""],[95275,0,"100"],[94235,3,""],[94282,0,"// "],[95275,3,""],[95275,0,"80"],[94851,0,"6"],[94851,1,""],[94850,1,""],[94850,0,"5"],[94850,1,""],[94850,0,"6"],[94850,1,""],[94850,0,"7"],[94850,1,""],[94850,0,"6"],[94850,1,""],[94850,0,"7"],[94943,3,""],[94943,0,"// "],[95278,0,"\n      x-tick-step: 100,"],[95298,3,""],[95298,0,"10"],[95096,0,"// "],[95096,3,""],[95096,0,"// "],[95096,3,""],[95096,0,"// "],[95096,3,""],[95096,0,"// "],[95096,3,""],[93873,0,"\n  text(10pt)[asdf]"],[93886,6,""],[93876,10,""],[93874,2,""],[95220,0,"text(10pt)"],[95226,1,""],[95225,1,""],[95225,0,"5"],[95225,1,""],[95225,0,"10"],[93705,0,"text(10pt)"],[93719,0,"]"],[93715,0,"["],[93720,1,""],[93715,1,""],[93714,1,""],[93714,0,", "],[93720,0,")"],[93711,1,""],[93710,1,""],[93710,0,"5"],[93710,1,""],[93710,0,"6"],[93710,1,""],[93710,0,"7"],[93710,1,""],[93710,0,"8"],[93875,0,"\n#set text(19pt)"],[93887,1,""],[93887,0,"0"],[93721,0,"\n    text(8pt, name),"],[93705,0,"// "],[93729,10,""],[93733,1,""],[93904,0,"["],[93889,16,""],[93899,0,"  #set text(10pt)["],[95700,0,"]"],[93901,5,""],[93911,1,""],[93911,0,"{"],[95695,1,""],[95695,0,"}"],[95695,1,""],[95695,0,"]"],[93911,1,""],[93911,0,"["],[93915,0,"#"],[93907,1,""],[93906,1,""],[93906,0,"5"],[93906,1,""],[93906,0,"6"],[93906,1,""],[93906,0,"7"],[93906,1,""],[93906,0,"8"],[95258,10,""],[95258,0,"text(10pt)"],[93397,3,""],[93424,0,"// "],[93407,1,""],[93407,0,"5"],[93407,1,""],[93407,0,"1"],[93367,0,"\n"],[93367,1,""],[94549,0,"\n        y: (),"],[95163,10,""],[95163,0,"none"],[95163,4,""],[95163,0,"scientific"],[95175,0,"\n      minor-tick-step: 5,"],[95182,0,"x-"],[95182,21,""],[95180,2,""],[95178,2,""],[95176,2,""],[95175,1,""],[95365,0,"\n      pl"],[95373,1,""],[95372,1,""],[95372,0,"plot-arge"],[95380,1,""],[95380,0,"s: (),"],[95384,0,"\n        \n      "],[95393,0,"x-minor-tick-step: 5,"],[95395,6,""],[95399,5,""],[95399,0,"s"],[95402,1,""],[95402,0,"()"],[95403,0,"10, 20)"],[95409,1,""],[95393,0,"// "],[94562,0,"s"],[94562,1,""],[94562,0,"fill: "],[94562,6,""],[94562,0,"stroke: none"],[94558,1,""],[94558,0,"left"],[94558,4,""],[94558,0,"top"],[94558,3,""],[94558,0,"x"],[94558,0,"// "],[94627,0,"// "],[94627,3,""],[94558,3,""],[94562,6,""],[94562,0,"thickness"],[94573,4,""],[94573,0,"0"],[94624,0,"// "],[94624,3,""],[94624,0,"// "],[94558,0,"// "],[94558,4,""],[94558,0,"top"],[94558,3,""],[94558,0,"left"],[94558,0,"// "],[94630,3,""],[94657,0,"\n        st"],[94667,1,""],[94666,1,""],[94664,2,""],[94662,2,""],[94660,2,""],[94658,2,""],[94657,1,""],[94462,0,"\n      tick: (\n        \n        "],[94477,8,""],[94478,8,""],[94478,0,"      ),"],[94477,0,"        fill: black,"],[94491,5,""],[94491,0,"none"],[94485,0,"// "],[94499,0,"\n        length: 0.1,\n        stroke: black,\n        minor-length: 0.08,"],[94578,0,"// "],[94550,0,"// "],[94527,0,"// "],[94506,0,"// "],[94483,0,"// "],[94469,0,"// "],[94628,3,""],[94628,0,"// "],[94671,0,"\n        axes: (tick: (length: 0), grid: (stroke: (dash: \"dotted\"))),"],[94672,8,""],[94672,0,"      "],[94672,6,""],[94672,0,"        "],[94680,60,""],[94671,9,""],[94685,0,"\n        tick: (length: 0), grid: (stroke: (dash: \"dotted\")),"],[94710,0,".1"],[94711,1,""],[94711,0,"5"],[94738,6,""],[94738,0,"solid"],[94738,5,""],[94738,0,"dotted"],[94745,0,", thickness: 5pt"],[94731,16,""],[94731,0,"dash: \"dotted\", "],[94758,1,""],[94758,0,"1"],[94710,1,""],[94709,1,""],[94671,0,"\n        \n        "],[94672,8,""],[94681,0,"b"],[94681,1,""],[94679,2,""],[94679,0,"bar-width: 1,"],[94679,0,"// "],[94733,1,""],[94733,0,"0.1"],[94718,0,"// "],[94872,0,"// "],[94709,0,"\n        x: ()"],[94722,0,"\n          \n        "],[94723,10,""],[94815,0,"\n        )"],[94724,10,""],[94732,3,""],[94732,0,"  "],[94886,0,"\n        // left: (thickness: 0),"],[94815,33,""],[94853,0,"\n        )"],[94805,10,""],[94843,0,"\n          tick: (length: 0.1), grid: (stroke: (dash: \"dotted\", thickness: 1pt)),"],[94724,81,""],[94762,0,"\n"],[94723,1,""],[94731,3,""],[94731,0,"  "],[94718,1,""],[94718,0,"top"],[94718,3,""],[94718,0,"x"],[94731,2,""],[94731,0,"// "],[94761,1,""],[94723,0,"\n"],[94762,81,""],[94724,0,"          tick: (length: 0.1), grid: (stroke: (dash: \"dotted\", thickness: 1pt)),\n"],[94843,10,""],[94805,0,"        )\n"],[94853,33,""],[94815,0,"        // left: (thickness: 0),\n"],[94732,2,""],[94732,0,"// "],[94805,10,""],[94724,0,"        )\n"],[94723,0,"          "],[94722,20,""],[94720,3,""],[94709,11,""],[94872,3,""],[94718,3,""],[94735,1,""],[94734,1,""],[94734,0,".1"],[93888,0,"/// #let dict = (\n///   stroke: \"black\",\n///   fill: none,\n///   mark: (stroke: auto, fill: \"blue\"),\n///   line: (stroke: auto, mark: auto, fill: \"red\")\n/// )\n/// #styles.resolve(dict, merge: (mark: (stroke: \"yellow\")), root: \"line\")"],[94047,2,""],[94041,2,""],[93989,2,""],[93947,2,""],[93929,2,""],[93906,2,""],[93888,2,""],[94035,2,""],[94031,2,""],[93981,2,""],[93941,2,""],[93925,2,""],[93904,2,""],[93888,2,""],[93888,0,"\n"],[94079,14,""],[94079,0,", root: \"line\""],[94046,5,""],[94046,0,"base"],[94046,0,"(:) "],[94049,1,""],[94049,0,", "],[94046,0,"merge: "],[94090,14,""],[94090,0,", root: \"line\""],[93888,0,"\n\n#let barchart-default-style = (\n  axes: (tick: (length: 0), grid: (stroke: (dash: \"dotted\"))),\n  bar-width: .8,\n  y-inset: 1,\n)\n"],[94194,26,""],[94194,0,"barchart-default-style"],[94225,4,""],[94225,0,"barchart"],[94032,119,""],[94032,0,"\n  :"],[94035,1,""],[94035,0,"bar-width: 1,"],[94032,0,"\n  barchart: ("],[94062,0,"\n  "],[94063,2,""],[94063,0,"  )"],[94049,0,"  "],[94032,0,"\n  x: 5,"],[94071,0,"0"],[94076,0,"// "],[94057,0,"// "],[94043,0,"// "],[94082,3,""],[94060,3,""],[94043,3,""],[94078,0,"// "],[94074,0,"// "],[94055,0,"// "],[94041,0,"// "],[94033,0,"// "],[94019,0,"// "],[94098,0,"// "],[94016,0,"// "],[94002,0,"// "],[93985,0,"// "],[93922,0,"// "],[93890,0,"// "],[95004,0,"\n      barchart"],[95005,14,""],[95004,1,""],[94266,0,"barchart: ("],[95397,0,")"],[95379,3,""],[95355,3,""],[95316,3,""],[95298,3,""],[95335,1,""],[95335,0,"0"],[95298,3,""],[95298,0,"x"],[95368,0,"// "],[95347,0,"// "],[95311,0,"// "],[95298,0,"// "],[95038,0,"// "],[95192,0,"// "],[95029,0,"\n        x: {"],[95041,1,""],[95041,0,"(thickness: 0)"],[95038,1,""],[95038,0,"top"],[95044,0,"stroke: ("],[95066,0,")"],[95038,3,""],[95038,0,"x"],[95038,4,""],[95060,1,""],[95060,0,")"],[95038,0,"x: ("],[95038,1,""],[95038,0,"top"],[94999,3,""],[94999,0,"// "],[94999,3,""],[94999,0,"// "],[94999,3,""],[95010,1,""],[95010,0,"0.5"],[95012,1,""],[95012,0,"6"],[95012,1,""],[95012,0,"7"],[95012,1,""],[95012,0,"8"],[95014,0,"\n      y-inset: 2,"],[95030,1,""],[95030,0,"1"],[95030,1,""],[95030,0,"0.5"],[95032,1,""],[95032,0,"6"],[95032,1,""],[95032,0,"7"],[95032,1,""],[95032,0,"8"],[95032,1,""],[95032,0,"7"],[95057,0,"// "],[95098,3,""],[95098,0,"// "],[95098,3,""],[95098,0,"// "],[95180,3,""],[95180,0,"// "],[95180,3,""],[95180,0,"// "],[95213,3,""],[95098,3,""],[95098,0,"top: (\n          "],[95185,0,"\n          "],[95186,10,""],[95186,0,"        ),"],[95098,3,""],[95098,0,"left"],[95098,4,""],[95098,0,"bottom"],[95182,1,""],[95182,0,"5"],[95182,1,""],[95182,0,"1"],[95182,1,""],[95182,0,"0.1"],[95184,1,""],[95184,0,"5"],[95184,1,""],[95184,0,"4"],[95184,1,""],[95184,0,"5"],[95155,16,""],[95155,0,"dash: \"dotted\", "],[95162,6,""],[95162,0,"solid"],[95135,1,""],[95134,1,""],[95134,0,".1, stok"],[95141,1,""],[95140,1,""],[95139,1,""],[95138,1,""],[95137,1,""],[95136,1,""],[95183,1,""],[95183,0,"2"],[95183,1,""],[95183,0,"1"],[95183,1,""],[95183,0,"2"],[95183,1,""],[95183,0,"3"],[95138,1,""],[95138,0,"\n          "],[95199,0,"\n          "],[95200,10,""],[95253,0,"// "],[95253,3,""],[95253,0,"// "],[95253,3,""],[95200,0,"          stroke: (thickness: 0.8pt),"],[95232,1,""],[95231,1,""],[95230,1,""],[95230,0,"10"],[95034,0,"\n      x-"],[95035,8,""],[95034,1,""],[96057,0,"\n      y-min: 010"],[96073,1,""],[96072,1,""],[96071,1,""],[96071,0,"-10,"],[96064,1,""],[96064,0,"x"],[96073,1,""],[96072,1,""],[96072,0,"0.1"],[96074,1,""],[96074,0,"2"],[96074,1,""],[96074,0,"15"],[96075,1,""],[96075,0,"6"],[96075,1,""],[96075,0,"5"],[96075,1,""],[95118,0,"// "],[96077,1,""],[96077,0,"2"],[96077,1,""],[96077,0,"15"],[96078,1,""],[96078,0,"4"],[95314,1,""],[95314,0,"5"],[95314,1,""],[95314,0,"4"],[96078,1,""],[96077,1,""],[96077,0,"8"],[96077,0,"90"],[96078,1,""],[96077,1,""],[96077,0,"9"],[96077,1,""],[96077,0,"0"],[94783,209,""],[94278,176,""],[94664,41,""],[94664,0,"        // top: (stroke: (thickness: 0))\n"],[94723,34,""],[94901,204,""],[95006,104,""],[96796,6,""],[96796,0,"a"],[95184,6,""],[95184,0,"a"],[93569,6,""],[93569,0,"a"],[93502,6,""],[93502,0,"a"],[93373,6,""],[93373,0,"a"],[96777,0,"s"],[95170,0,"s"],[93560,0,"s"],[93498,0,"s"],[93374,0,"s"],[96782,0,"d"],[95174,0,"d"],[93563,0,"d"],[93500,0,"d"],[93375,0,"d"],[96787,0,"f"],[95178,0,"f"],[93566,0,"f"],[93502,0,"f"],[93376,0,"f"],[96788,4,""],[96788,0,"colors"],[95178,4,""],[95178,0,"colors"],[93565,4,""],[93565,0,"colors"],[93500,4,""],[93500,0,"colors"],[93373,4,""],[93373,0,"colors"],[93373,6,""],[93373,0,"barstyle"],[95186,6,""],[95186,0,"barstyle"],[96800,6,""],[96800,0,"barstyle"],[94278,638,""],[94253,0,"// "],[93606,0,"\n\n#let barchart_style = (\n      grid: (\n        // fill: blue,\n        stroke: (paint: luma(66.67%), dash: \"dotted\", thickness: 1pt)\n      ),\n      legend: (\n        default-position: \"legend.north-east\",\n        // default-position: \"legend.inner-south-east\",\n        item: ( preview: (width: 0.4) ),\n        stroke: none,\n        padding: 0.1,\n      ),\n\n      bar-width: 0.8,\n      y-inset: 0.7,\n      axes: (\n        // top: (stroke: (thickness: 0))\n        bottom: (\n          grid: (stroke: (dash: \"solid\", thickness: 0.3pt)),\n          stroke: (thickness: 10pt),\n        ),\n        // left: (thickness: 0),\n        stroke: (thickness: 0.4pt),\n      )\n    )"],[94263,4,""],[94263,0,"  "],[94255,6,""],[94255,0,"    "],[94219,8,""],[94219,0,"      "],[94186,8,""],[94186,0,"      "],[94175,8,""],[94175,0,"      "],[94138,10,""],[94138,0,"        "],[94077,10,""],[94077,0,"        "],[94059,8,""],[94059,0,"      "],[94018,8,""],[94018,0,"      "],[94004,6,""],[94004,0,"    "],[93984,6,""],[93984,0,"    "],[93962,6,""],[93962,0,"    "],[93952,6,""],[93952,0,"    "],[93930,8,""],[93930,0,"      "],[93908,8,""],[93908,0,"      "],[93867,8,""],[93867,0,"      "],[93811,8,""],[93811,0,"      "],[93764,8,""],[93764,0,"      "],[93748,6,""],[93748,0,"    "],[93739,6,""],[93739,0,"    "],[93669,8,""],[93669,0,"      "],[93646,8,""],[93646,0,"      "],[93632,6,""],[93632,0,"    "],[94219,2,""],[94213,4,""],[94213,0,"  "],[94179,6,""],[94179,0,"    "],[94148,6,""],[94148,0,"    "],[94139,6,""],[94139,0,"    "],[94104,8,""],[94104,0,"      "],[94045,8,""],[94045,0,"      "],[94029,6,""],[94029,0,"    "],[93990,6,""],[93990,0,"    "],[93978,4,""],[93978,0,"  "],[93960,4,""],[93960,0,"  "],[93940,4,""],[93940,0,"  "],[93932,4,""],[93932,0,"  "],[93912,6,""],[93912,0,"    "],[93892,6,""],[93892,0,"    "],[93853,6,""],[93853,0,"    "],[93799,6,""],[93799,0,"    "],[93754,6,""],[93754,0,"    "],[93740,4,""],[93740,0,"  "],[93733,4,""],[93733,0,"  "],[93665,6,""],[93665,0,"    "],[93644,6,""],[93644,0,"    "],[93632,4,""],[93632,0,"  "],[93376,0,"_"],[95122,8,""],[95122,0,"bar_style"],[96737,8,""],[96737,0,"bar_style"],[94824,3,""],[94849,0,"barchar"],[94849,7,""],[94849,0,"barchart_style"],[94818,1,""],[94863,1,""],[96502,0,"\n    draw.set-style(barchart: barchart_style)"],[96507,0,"// "],[96507,3,""],[96478,0,"\n  text(8pt)["],[96494,0,"#"],[96481,10,""],[96479,2,""],[96482,0,"text(8pt)["],[96478,1,""],[97319,0,"]"],[94792,1,""],[94791,1,""],[94791,0,", {"],[95730,1,""],[95730,0,"})"],[94797,1,""],[94793,1,""],[94792,1,""],[95727,1,""],[94781,35,""],[94781,0,"  text(8pt, canvas(length: 1cm, {"],[96475,35,""],[96475,0,"  text(8pt, canvas(length: 1cm, {\n"],[97314,1,""],[97314,0,")"],[96779,0,"\n            axis-style: \"scientific\",\n"],[96817,1,""],[96780,12,""],[96780,0,"          "],[96780,10,""],[96780,0,"        "],[96780,8,""],[96780,0,"      "],[96684,0,"\n      label-key: 0,"],[96643,20,""],[96685,61,""],[96636,1,""],[96636,0,"7"],[96965,9,""],[96965,0,"x-label: text(10pt)"],[96984,1,""],[96983,1,""],[96983,0,", ["],[97026,0,")"],[96664,0,"\n      \n      x-min: -0.08,"],[96665,6,""],[96664,1,""],[96682,1,""],[96682,0,"5"],[96682,0,"0"],[96683,1,""],[96682,1,""],[96682,0,"1"],[96682,1,""],[96682,0,"2"],[96684,0,"\n      x-max: 16,"],[97023,0,"Speed in "],[95221,0,"Speed in "],[93365,0,"// "],[93308,0,"// "],[93299,0,"// "],[95230,0,"Remote ingestion "],[95247,1,""],[95247,0,"s"],[95230,18,""],[95230,0,"Local s"],[95241,3,""],[95241,0,", "],[95242,1,""],[95241,1,""],[95241,0," in"],[97047,0,"Remote "],[97054,1,""],[97054,0,"s"],[93215,33,""],[93215,0,"In the following chart, we"],[93240,1,""],[93239,1,""],[93238,1,""],[93237,1,""],[93215,22,""],[93215,0,"There are 2 diff"],[93227,4,""],[93227,0,"editing scenarios "],[93244,1,""],[93244,0,":"],[93244,1,""],[93244,0," to consider"],[1728,17,""],[1728,0,"is often faster"],[1731,12,""],[1731,0,"competitive with"],[1747,5,""],[1728,3,""],[1728,0,"has "],[1728,4,""],[1689,0," Eg-walker inherits all the benefits "],[1332,0,"\n  "],[871,461,""],[871,0,"  Conflict-Free Replicated Data Types (CRDTs) are useful for multi-master collaborative text editing, but they have several downsides: The entire CRDT's state must be loaded in memory during editing sessions, and the state grows without bounds as it is edited. Transmitted and stored data is CRDT type specific - so innovations in CRDT algorithms usually require entire collaborative editing systems to be rewritten from scratch to incorporate new innovations."],[1334,0,"\n  "],[1332,2,""],[1335,0,"// "],[1616,0," f"],[1617,1,""],[1617,0,"the first text ("],[1627,6,""],[1627,0,"sequence "],[1627,9,""],[1627,0,"syss"],[1630,1,""],[1630,0,"tem for merging "],[1627,19,""],[1617,10,""],[1617,0,"to our "],[1617,7,""],[1617,0,"an"],[1618,1,""],[1617,1,""],[1616,1,""],[1331,1,""],[1334,3,""],[1332,2,""],[1331,1,""],[1387,19,""],[1454,0," "],[1454,1,""],[1387,0,", to our knowledge,"],[1608,1,""],[1608,0,". Eg-walker is"],[1738,0,"of pure operation based RDTs: the "],[1711,99,""],[1711,0," has performance that"],[1712,20,""],[1712,0,"performs extremely well: It is"],[1800,0," in most editing scenarios. "],[1827,1,""],[1827,0," And it inherits all of the benefits of pure operation based editing: "],[1897,89,""],[1897,0,"the network format is generic, not al"],[1928,6,""],[1927,1,""],[1926,1,""],[1926,0,". No context is needed to genera"],[1952,6,""],[1952,0,"emit events"],[1957,0,"local editing "],[1931,0,"CRDT state"],[1941,7,""],[1980,0,". And "],[1897,1,""],[1897,0,"T"],[1986,0,"events "],[1986,0,"remote "],[2000,0,"can be merged without"],[2014,7,""],[2014,0,"with far less context."],[1928,0,"And the CRDT state doesn't need to be stored and loadi"],[1981,1,""],[1981,0,"ed into RAM "],[1993,108,""],[1993,0,"during editing sessions."],[1743,11,""],[1743,0,"faster"],[1749,5,""],[1749,0," than"],[1799,4,""],[1799,0,"many"],[1799,4,""],[1799,0,"most"],[1740,14,""],[1740,0,"outperforms"],[2189,47,""],[2189,0,"is "],[2191,1,""],[2189,2,""],[2189,0,"is an optimized algorithm for sequence editing."],[53,72,""],[69935,444,""],[69947,427,""],[148,0,"\n#import \"charts.typ\""],[69968,0,"cj"],[69969,1,""],[69969,0,"harts.ff_chart"],[69968,0,"#"],[69968,1,""],[92479,1221,""],[92811,947,""],[92811,0,"charts.spe"],[92818,3,""],[92818,0,"speed_local"],[93170,398,""],[93193,863,""],[93193,0,"charts.speed_remote"],[92940,230,""],[92939,1,""],[92938,1,""],[92480,309,""],[92479,1,""],[92606,0,". the "],[92608,4,""],[92608,0,"The `_flat` f"],[92620,1,""],[92620,0,"variants of datasets here indicate "],[92608,47,""],[92608,0,"The `_flat` variants of datasets here indicate the "],[92655,4,""],[92655,0,"that we're measuring the simulated time assuming all edits in the data set happened linearly."],[92680,10,""],[92684,0," taken to integrate all events"],[92768,0," "],[92768,1,""],[92478,0,":\n\n/ Local time: asdf"],[92495,4,""],[92495,0,"The time taken to add events to the local state. This is rarely a bottleneck"],[92517,0,"locally generated "],[92548,6,""],[92548,0," stored"],[92571,19,""],[92571,0,"not a ba"],[92578,1,""],[92578,0,"a"],[92576,3,""],[92574,2,""],[92571,3,""],[92571,0,"rarely a bottleneck, as the time taken to modify a CRDT's state is trivial cm"],[92647,1,""],[92647,0,"ompared to other editing concerns (syntax highlighting, rendering, etc). Nevertyhe"],[92728,1,""],[92727,1,""],[92726,1,""],[92726,0,"hel"],[92728,1,""],[92727,1,""],[92727,0,"les"],[92729,1,""],[92728,1,""],[92727,1,""],[92727,0,"eless, eg-walker"],[92720,23,""],[92720,0,"Nevertheless, "],[92720,14,""],[92720,0,"No"],[92721,1,""],[92720,1,""],[92720,0,"Eg-walker does no prepropc"],[92745,1,""],[92744,1,""],[92744,0,"cessing"],[92720,0,"More notably, "],[92734,1,""],[92734,0,"e"],[92720,45,""],[92720,0,"Eg-walker does"],[92730,4,""],[92481,249,""],[92481,0,"/ Local time: The time taken to add locally generated events to the stored state. This is rarely a bottleneck, as the time taken to modify a CRDT's state is trivial compared to other editing concerns (syntax highlighting, rendering, etc). Eg-walker"],[93040,0,"// "],[93025,0,"// "],[93020,0,"// "],[92786,0,"// "],[92773,0,"// "],[92740,0,"// "],[92731,0,"// "],[93058,3,""],[93040,3,""],[93032,3,""],[92795,3,""],[92779,3,""],[92743,3,""],[92731,3,""],[93040,0,"// "],[93025,0,"// "],[93020,0,"// "],[92786,0,"// "],[92773,0,"// "],[92740,0,"// "],[92731,0,"// "],[92729,0," can process "],[92734,8,""],[92734,0,"ingest about "],[92720,27,""],[92720,0,"Notably, eg-walker does not need r"],[92753,1,""],[92720,33,""],[92720,0,"Eg-walker does no work to "],[92734,12,""],[92734,0,"n't need to preproces "],[92755,1,""],[92755,0,"s events"],[92757,0,"editing "],[92771,0," at all - "],[92719,0," Unlike a CRDT,"],[92735,1,""],[92735,0,"e"],[92795,1,""],[92794,1,""],[92793,1,""],[92793,0,". As a result, the "],[92808,4,""],[92808,0,"the CRDT state does not need to be loaded to make local editing events"],[92853,4,""],[92853,0,"generate and broadcast"],[92896,0,"."],[93226,3,""],[93208,3,""],[93200,3,""],[92963,3,""],[92947,3,""],[92911,3,""],[92899,3,""],[92719,0," More use"],[92725,3,""],[92725,0,"no"],[92726,1,""],[92725,1,""],[92724,1,""],[92723,1,""],[92722,1,""],[92721,1,""],[92720,1,""],[92720,0,"Notably,"],[92728,2,""],[92728,0," u"],[92802,14,""],[92802,0,". T"],[92805,2,""],[92802,0," "],[92802,1,""],[92803,0," As a result,"],[92816,2,""],[92816,0," t"],[92728,0," CRDTs need to "],[92735,8,""],[92735,0,"ingest "],[92735,7,""],[92735,0,"add local events by running threm"],[92767,1,""],[92766,1,""],[92765,1,""],[92735,30,""],[92735,0,"immediately convert local editing events into CRDT messages via  a"],[92800,1,""],[92799,1,""],[92799,0,"a `"],[92801,1,""],[92800,1,""],[92800,0," `prepare` function, which "],[92799,2,""],[92799,0,"the CRDT's "],[92810,1,""],[92810,0,"_"],[92818,1,""],[92818,0,"_"],[92829,0," which tak"],[92836,3,""],[92836,0,"requires the CRDT state to be taken as an argument."],[92887,9,""],[92887,0," U"],[92955,6,""],[92954,1,""],[92954,0," at all"],[92961,14,""],[92961,0,". As a result, local editing events "],[92997,46,""],[92997,0,"can be "],[93012,0,"d and"],[93017,4,""],[93027,0," to other replicas "],[93046,22,""],[92481,565,""],[92481,0,"/ Local time: The time taken to add locally generated events to the stored state. This is rarely a bottleneck, as the time taken to modify a CRDT's state is trivial compared to other editing concerns (syntax highlighting, rendering, etc). Notably, CRDTs immediately convert local editing events into CRDT messages via the CRDT's _prepare_ function, which requires the CRDT state to be taken as an argument. Unlike a CRDT, eg-walker doesn't need to preprocess editing events at all. As a result, local editing events can be generated and broadcast to other replicas"],[92479,0," Local events and remote events."],[92513,2,""],[92513,0,"When "],[92518,1,""],[92518,0,"l"],[92523,0," events happen,"],[92538,5,""],[92538,0,"\n\n"],[92538,0," the event must be "],[92539,18,""],[92513,26,""],[92513,0,"When local events happen,"],[92776,317,""],[92540,236,""],[92540,0,": The time taken to add locally generated events to the stored state. This is rarely a bottleneck, as the time taken to modify a CRDT's state is trivial compared to other editing concerns (syntax highlighting, rendering, etc). Notably,"],[92538,0," CRDTs immediately convert local editing events into CRDT messages via the CRDT's _prepare_ function, which requires the CRDT state to be taken as an argument. Unlike a CRDT, eg-walker doesn't need to preprocess editing events at all. As a result, local editing events can be generated and broadcast to other replicas\n"],[92537,0," in a C"],[92542,2,""],[92540,2,""],[92537,3,""],[92539,317,""],[92538,1,""],[92540,235,""],[92540,0,": The time taken to add locally generated events to the stored state. This is rarely a bottleneck, as the time taken to modify a CRDT's state is trivial compared to other editing concerns (syntax highlighting, rendering, etc). Notably, CRDTs immediately convert local editing events into CRDT messages via the CRDT's _prepare_ function, which requires the CRDT state to be taken as an argument. Unlike a CRDT, eg-walker doesn't need to preprocess editing events at all. As a result, local editing events can be generated and broadcast to other replicas\n"],[92540,1,""],[92539,1,""],[92538,1,""],[92538,2,""],[92538,0," t"],[92512,0,"\n"],[92512,0,"\nLocal events are almost never a bottleneck"],[92513,0,"Processing "],[92524,1,""],[92524,0,"l"],[92536,0," with "],[92541,1,""],[92541,0,"in "],[92543,1,""],[92537,6,""],[92537,0,"is"],[92539,11,""],[92539,0," basically"],[92568,0," on "],[92537,13,""],[92537,0,"should "],[92537,7,""],[92537,0,"is "],[92562,0,"well written, modern CRDT systems. O"],[92597,1,""],[92596,1,""],[92596,0," The time to process e"],[92617,1,""],[92609,8,""],[92609,0,"convert a "],[92618,1,""],[92618,0," local editing event "],[92583,5,""],[92583,0,"collaborative editing "],[92614,0,"CRDT based systems need "],[92638,9,""],[92651,20,""],[92651,0,"a"],[92651,1,""],[92650,1,""],[92649,1,""],[92649,0,"all local editing events into CRDT messages via the _pare"],[92705,1,""],[92704,1,""],[92703,1,""],[92703,0,"repare_ function, but c"],[92725,1,""],[92725,0,"this is a computationally trivial operation compared to "],[92768,13,""],[92768,0,". Our _dt-crdt_ CRD"],[92784,3,""],[92784,0,"FUGUE "],[92784,6,""],[92784,0,"implementation of Fugue processes in"],[92818,2,""],[92818,0,"local events"],[92808,22,""],[92808,0,"ca"],[92808,2,""],[92808,0,"processes local events into CRDT messages at a rate"],[92850,9,""],[92850,0,"between 5 and"],[92818,32,""],[92831,0," 10 million events per second."],[92808,0,"can "],[92820,1,""],[92819,1,""],[92818,1,""],[92818,0,"s incoming local editing events"],[92820,29,""],[92819,1,""],[92862,1,""],[92862,0,", which is much"],[92862,15,""],[92862,0,". "],[92863,1,""],[92845,0,"editing "],[92870,1,""],[92870,0," - far mroe than"],[92877,9,""],[92877,0,"faster than anyone can reasonably."],[92910,1,""],[92910,0," type. (And "],[92918,4,""],[92918,0,"Paste e"],[92918,7,""],[92918,0,"Large "],[92918,0,"And "],[92922,1,""],[92922,0,"l"],[92928,0,"paste events only count as a single "],[92921,0," internal run-lengh"],[92939,1,""],[92939,0,"th encoding ensures that "],[92963,1,""],[92983,23,""],[92983,0,"are just as fast as any other insert event)."],[93019,6,""],[93013,6,""],[93003,10,""],[93003,0,"a single character insertion"],[93033,0,"\n\nMore notably, "],[93035,14,""],[93035,0,"More notably,"],[93048,261,""],[93048,0," for a "],[93054,1,""],[93059,1,""],[93059,0," to"],[93049,98,""],[93049,0,"CRDTs require"],[93049,13,""],[93049,0,"the prepare "],[93060,1,""],[93069,0," of a CRDT"],[93079,7,""],[93103,27,""],[93103,0," to be"],[93080,29,""],[93080,0,"needs to query the CRDT state. As a result, any collaboratinv"],[93140,1,""],[93140,0,"g peer typically needs to load the who"],[93175,3,""],[93175,0,"entire CRDT C"],[93187,1,""],[93187,0,"state to be able to generate and broadcast local events"],[93244,16,""],[93244,0,"E"],[93253,0," has no such requirement"],[93277,133,""],[93277,0," - as events are simply appended to the"],[93294,22,""],[93294,0,"processed directly and immediately appended to the local event graph."],[93277,0,"."],[93278,7,""],[93278,0," E"],[93289,23,""],[93290,11,""],[93290,0,"simply"],[93330,1,""],[93330,0," and broa"],[93338,1,""],[93338,0,"adcast as--i"],[93349,1,""],[93348,1,""],[93348,0,"is "],[93348,3,""],[93347,1,""],[93346,1,""],[93345,1,""],[93345,0,"without change"],[93345,0,"to other peers"],[93359,14,""],[93359,0," without any change. This is still faster than"],[93380,25,""],[93379,1,""],[93690,0,"// "],[93675,0,"// "],[93670,0,"// "],[93436,0,"// "],[93423,0,"// "],[93390,0,"// "],[93381,0,"// "],[93380,0,"\n// TODO: Do I include local performance "],[93409,0,"editing "],[93429,0,"numbers at all?"],[93380,0,"\n"],[93380,0,"\nTh"],[93382,1,""],[93381,1,""],[93381,0,"Process"],[93381,7,""],[93381,0,"Merging remote edits is more "],[93405,5,""],[93405,0,"a be"],[93407,2,""],[93406,1,""],[93406,0," bigger bottleneck. Ho"],[93426,2,""],[93425,1,""],[93425,0," "],[93381,0,"Time"],[93384,1,""],[93381,3,""],[93381,0,"The speed at which a system can "],[93413,1,""],[93413,0,"m"],[93419,1,""],[93418,1,""],[93417,1,""],[93417,0,"e"],[93431,25,""],[93431,0," into a local do"],[93444,3,""],[93438,6,""],[93381,57,""],[93381,0,"Merging events from remote peers is a better test. "],[93431,1,""],[93419,12,""],[93419,0,",pre"],[93422,1,""],[93421,1,""],[93420,1,""],[93419,1,""],[93419,0,"more interesting performance test. Given some new peer has "],[93454,0,"The test here is"],[93458,12,""],[93458,0,"benchmark here is this: "],[93506,0,"joined a replicating"],[93515,11,""],[93515,0,"network of replicas, and "],[93536,4,""],[93536,0,"the peer recieves ("],[93545,10,""],[93545,0,"recieves "],[93545,9,""],[93545,0,"somehow receives "],[93482,10,""],[93482,0,"When a"],[93488,4,""],[93493,4,""],[93499,1,""],[93498,1,""],[93498,0,"s"],[93520,1,""],[93520,0,"ting "],[93524,1,""],[93520,4,""],[93520,0,"s"],[93498,1,""],[93498,0,"s"],[93532,17,""],[93532,0,"is setn "],[93539,1,""],[93538,1,""],[93537,1,""],[93537,0,"nt all "],[93540,4,""],[93540,0,"the entire event graph "],[93562,1,""],[93562,0,"."],[93522,0," we assume"],[93573,0," "],[93573,1,""],[93572,1,""],[93572,0," and must replay the event graph to "],[93454,28,""],[93580,0,"calculate the resulting document state. How long does this take?\n\n"],[93548,5,""],[93548,0," needs to"],[93648,0," CRDTs have"],[93655,4,""],[93655,0,"iteratively call _effe"],[93672,5,""],[93672,0,"_effect_"],[93672,0,"their "],[93686,0," function "],[93695,1,""],[93695,0,", mutating the local"],[93706,9,""],[93706,0,"a C"],[93708,1,""],[93707,1,""],[93707,0," CRDT object "],[93648,1,""],[93648,0,"\n\n- "],[93723,0,"to add all "],[93723,11,""],[93722,1,""],[93699,0," processing ea"],[93700,36,""],[93700,0,"adding each CRDT message to the local state object in causal order.\n- Eg-walker u"],[93780,1,""],[93780,0,"runs the replay function from above.\n\n"],[93805,0,"listed @repl"],[93816,1,""],[93815,1,""],[93814,1,""],[93813,1,""],[93812,1,""],[93812,0,"@eg"],[93813,2,""],[93813,0,"eg-partial "],[66286,0," M<"],[66288,1,""],[66287,1,""],[66287,0,"<eg-walker-algort"],[66303,1,""],[66303,0,"ithm>"],[93838,7,""],[93838,0,"walk"],[93835,7,""],[93835,0,"eg-walker-algorithm"],[93834,20,""],[93834,0,"[]"],[93835,0,"EG walker algorithm REFERENCE"],[93835,0,"TODO "],[93871,11,""],[93833,0," above in"],[93879,1,""],[93879,0,"."],[93882,0,"P"],[93882,1,""],[93882,0,"CRDT performance "],[93882,17,""],[93882,0,"CRDT performance"],[94523,0," <chart-remote>"],[93882,0,"As we can see"],[93882,13,""],[93898,0," is "],[93901,1,""],[93900,1,""],[93899,1,""],[93898,1,""],[93882,0,"Eg-walker "],[93891,0," "],[93892,17,""],[93892,0,"is"],[93882,12,""],[93882,0,"C"],[93882,1,""],[93882,0,"Eg-walker is much faster for "],[93882,29,""],[93882,0,"Eg-walker is much faster for"],[93881,0,"\n"],[93881,0,"\nNote that this is not the only"],[93882,30,""],[93881,1,""],[93880,1,""],[93881,0,"\n"],[93881,0,"\nHowever, this "],[93882,14,""],[93882,0,"This test actively punishes eg-walker."],[93881,0,"\n\n"],[93882,0,"Note that this is not the only way a "],[93882,11,""],[93882,0,"T"],[93908,1,""],[93907,1,""],[93907,0,"eg-walker can be used. Instead, the resulting document state can be sent"],[93939,0,"peers can "],[93887,0,"test is chosen "],[93887,15,""],[93887,0,"comparison is chosen as the worst possible case for e"],[93940,21,""],[93948,0,"."],[93881,0,"\n"],[93881,0,"\nNote that thi"],[93882,13,""],[93882,0,"This is perhaps overly pessimistic."],[93916,1,""],[93916,0," for eg-walker."],[93921,0,"our "],[93934,0," algorithm"],[93944,1,""],[93944,0,", "],[93945,1,""],[93944,1,""],[93944,0,". A "],[93946,2,""],[93946,0,"A "],[93946,2,""],[93946,0,"P"],[93946,1,""],[93946,0,"Another"],[93946,7,""],[93946,0,"Perhaps a better way to process incoming events is to "],[93889,8,""],[93889,0," the worst possible case"],[93913,27,""],[93913,0," for"],[93927,10,""],[93929,54,""],[93929,0,"It is much faster for p"],[93951,1,""],[93951,0,"replicas to send the res"],[93972,3,""],[93972,0,"current document state"],[93963,5,""],[93963,0,"instead send "],[94002,0,", and "],[94004,4,""],[94004,0,"and the event"],[94002,15,""],[94002,0,"."],[93971,0,"simply "],[94010,0," "],[94010,1,""],[94010,0," An eg-walker replica "],[94009,0," and the set of historical "],[94025,11,""],[94025,0,"events in the event graph("],[94050,1,""],[94050,0," (perhaps "],[94051,9,""],[94051,0,"to "],[94053,1,""],[94052,1,""],[94051,1,""],[94051,0,"so the replica can mereg "],[94075,1,""],[94074,1,""],[94073,1,""],[94073,0,"ge any other con"],[94076,13,""],[94076,0,"changes concurrent with the current state"],[94119,21,""],[94118,1,""],[94118,0," ("],[94119,1,""],[94118,1,""],[94009,0,". O"],[94011,1,""],[94010,1,""],[94009,1,""],[94009,0,", although"],[94019,109,""],[94019,0," historical events are"],[94040,1,""],[94039,1,""],[94038,1,""],[94038,0,"may t"],[94042,1,""],[94042,0,"still be needed to merge concurr"],[94067,7,""],[94067,0,"any events from other peers"],[94048,0,"eventually "],[94078,4,""],[94078,0,"concurrent "],[94112,0,"."],[94089,7,""],[94089,0,"changes "],[94078,11,""],[94102,1,""],[94102,0,". ("],[94104,1,""],[94103,1,""],[94103,0," (But only if those changes are concurrent with the current document state)."],[94105,4,""],[94105,0,"But "],[94108,1,""],[94107,1,""],[94106,1,""],[94105,1,""],[94105,1,""],[94105,0,"O"],[94177,182,""],[94177,0,"As we can see in @char"],[94195,4,""],[94195,0,"chart-remote, "],[94209,1,""],[94209,0,"e"],[94234,3,""],[94219,15,""],[94219,0,"has muhc mo"],[94229,1,""],[94228,1,""],[94227,1,""],[94226,1,""],[94225,1,""],[94225,0,"h"],[94225,1,""],[94225,0,"ch more varied performance c"],[94209,44,""],[94209,0,"eg-walker is much faster than CRDTs when the event graph is linear (or nearly linear, as is the case for _"],[94314,1,""],[94314,0,"`node_nodecc`."],[94327,1,""],[94327,0,")."],[94269,6,""],[94269,0,"largely sequential"],[94299,6,""],[94299,0,"sequent"],[94292,14,""],[94292,0,"mostly sequential"],[94345,0," In "],[94346,3,""],[94345,1,""],[94345,0," In the _frien"],[94353,6,""],[94353,0,"_friendsforever_ and _clown"],[94374,6,""],[94374,0,"_clownschool_ tests, performance is similar - however, "],[94428,1,""],[94427,1,""],[94218,0," still manages to process over 1M events per second in all our tests."],[94285,1,""],[94285,0," cases"],[94225,11,""],[94232,0,"es"],[94219,6,""],[94277,0," Events are run-length encoded, so this translates to "],[94278,53,""],[94278,0,"This is very fast"],[94278,17,""],[94278,0,"In absolute terms, this is extremely fast."],[94319,1,""],[94319,0,": "],[94320,1,""],[94319,1,""],[94319,0,". The slo"],[94321,7,""],[94321,0,"_git-makefile_ is the slowest test here processing 350k e"],[94377,1,""],[94377,0,"keystrokes in 15ms."],[94297,4,""],[94297,0,"both of these algorithms are"],[94325,3,""],[94381,11,""],[94381,0,", processing"],[94394,0,"12 years "],[94394,9,""],[94413,0,"just "],[94423,1,""],[94423,0,"\n\n"],[94176,0,"\nSome notes from our data s"],[94202,1,""],[94201,1,""],[94187,14,""],[94177,10,""],[94176,1,""],[94218,0," i"],[94219,1,""],[94208,0," both algorithms are extremly "],[94237,1,""],[94236,1,""],[94235,1,""],[94235,0,"ely fast."],[94245,1,""],[94245,0,"E"],[94255,1,""],[94314,64,""],[94353,1,""],[94353,0,". Eg-walker "],[94364,1,""],[94374,1,""],[94373,1,""],[94372,1,""],[94372,0,"es this data set of"],[94389,19,""],[94391,5,""],[94398,0,"\nEg-walker is much "],[94399,18,""],[94399,0,"Eg-walker is much"],[94416,8,""],[94535,1,""],[94535,0,"\n\n"],[94535,0," Thi"],[94538,1,""],[94537,1,""],[94536,1,""],[94536,0,"Entirely sequential edits need "],[94536,31,""],[94536,0,"Ths"],[94538,1,""],[94538,0,"is is due to @opt"],[94552,3,""],[94552,0,"opt-traversal"],[94551,0,"the optimisations de"],[94570,1,""],[94569,1,""],[94569,0,"described in "],[94596,0,". I"],[94598,1,""],[94598,0,"When a"],[94603,1,""],[94603,0,"an eve"],[94608,1,""],[94607,1,""],[94607,0,"diting rtace i"],[94614,7,""],[94614,0,"trace is q"],[94623,1,""],[94623,0,"sequential, the transform function does no work whatsoever."],[94658,24,""],[94658,0,"simplifies to a "],[94673,1,""],[94658,15,""],[94658,0,"simply outputs"],[94658,14,""],[94658,0,"does no wh"],[94667,1,""],[94667,0,"ork at all."],[94729,32,""],[94729,0,"nearly hafl the "],[94736,9,""],[94736,0,"half the time taken"],[94729,0,"the causal graph is extremely complex. "],[94009,1,""],[94009,0,". H"],[94011,1,""],[94010,1,""],[94009,0," to new peers"],[93983,0,"text of th"],[93992,1,""],[93991,1,""],[93983,8,""],[94009,0," text"],[94029,8,""],[94029,0,"However,"],[94029,8,""],[94029,0,"However, peers may still need"],[94059,0,"aces"],[94062,1,""],[94061,1,""],[94061,0,"cess to "],[94086,34,""],[94086,0," if they want to look at old version s"],[94123,1,""],[94122,1,""],[94122,0,"s of a document or"],[94154,90,""],[94147,0,"any "],[94158,0," which are concurrent with the current document state."],[94402,9,""],[94402,0,"replays"],[94551,3,""],[94551,0,"in"],[94630,1,""],[94630,0,":"],[94630,1,""],[94630,0,"."],[94637,2,""],[94637,0,"part of an"],[94810,26,""],[94722,88,""],[94722,0,"In the _friendsforever_ and _clownschool_ tests, the causal graph is extremely complex."],[94787,0,"s are"],[94792,3,""],[94811,0," About 40% of the processing time is taken up with "],[94857,5,""],[94857,0,"by query"],[94864,1,""],[94864,0,"ies to the "],[94812,63,""],[94812,0,"In our implementation "],[94833,1,""],[94833,0,", we pro"],[94840,1,""],[94839,1,""],[94839,0,"reprocess the causal graph to determine a traversal order"],[94869,10,""],[94869,0,"choose a"],[94876,1,""],[94877,0,"n efficient"],[94904,0,". This makes a "],[94911,8,""],[94911,0,"preprocessing m"],[94925,1,""],[94835,0,"before "],[94835,7,""],[94812,113,""],[94812,0,"Our impleme"],[94822,1,""],[94821,1,""],[94820,1,""],[94820,0,"ementation preprocesses the "],[94831,17,""],[94831,0,"spends some time deciding a "],[94858,1,""],[94857,1,""],[94857,0,"ion a"],[94861,1,""],[94860,1,""],[94859,1,""],[94858,1,""],[94857,1,""],[94857,0,"on a "],[94861,1,""],[94861,0,"n efficient traversal "],[94811,0," Performance "],[94812,0,"Eg-walker "],[94822,1,""],[94822,0,"p"],[94833,0," can "],[94812,0,"In very complex editing traces "],[94815,28,""],[94815,0,"highly concurrent editing traces, "],[94849,1,""],[94849,0,"e"],[94871,4,""],[94871,0,"is quite sensitive to the chosen traversal order. (O"],[94922,1,""],[94921,1,""],[94920,1,""],[94920,1,""],[94957,8,""],[94957,0,"choosing"],[94965,3,""],[94989,0,"before "],[94989,7,""],[94988,1,""],[94988,0,". This "],[94789,21,""],[94789,0,"have many "],[94771,28,""],[94771,0,"there are many "],[94785,1,""],[94780,5,""],[94776,4,""],[94771,5,""],[94771,0,"the causal graphs have many "],[94789,10,""],[94789,0,"are very \"bu"],[94800,1,""],[94800,0,"usy\" - there are n"],[94817,1,""],[94817,0,"amny no"],[94817,7,""],[94817,0,"many me"],[94823,1,""],[94822,1,""],[94822,0,"tiny merge and fork points"],[94817,5,""],[94817,0,"thousands f"],[94827,1,""],[94827,0,"f"],[94827,1,""],[94827,0,"of "],[94856,0," as the replicating peers went in and out "],[94864,34,""],[94864,0,"users typed and the peers went in and out of sync"],[94914,0," "],[94914,1,""],[94914,0," (We added sm"],[94926,1,""],[94926,0,"ome simulated l"],[94925,16,""],[94916,9,""],[94916,0,"Both of these data sets were generated wtih "],[94959,1,""],[94958,1,""],[94957,1,""],[94956,1,""],[94956,0,"ith simulated latency to sn"],[94982,1,""],[94981,1,""],[94981,0,"ensure this happened)"],[95001,0,",."],[95002,1,""],[95001,1,""],[95001,0,"."],[94860,24,""],[94860,0,"the replicas"],[94872,5,""],[94987,183,""],[94987,0,"About "],[94986,1,""],[94986,0," "],[94722,271,""],[94722,0,"In the _friendsforever_ and _clownschool_ tests, the causal graphs are very \"busy\" - there are thousands of tiny merge and fork points as the replicas went in and out of sync. (Both of these data sets were generated with simulated latency to ensure this happened.) About"],[94432,0," Interestingly ,"],[94447,1,""],[94446,1,""],[94446,0,", eg-walker perofrmanc"],[94458,10,""],[94458,0,"performance is "],[94448,0,"in datasets with very high concurrency like this, "],[94459,0," lik"],[94462,1,""],[94462,0,"ke this"],[94496,10,""],[94498,0,"the er"],[94503,1,""],[94502,1,""],[94502,0,"performance of "],[94527,15,""],[94527,0,"is highly dependant on the trav"],[94554,4,""],[94554,0,"order events are traversed. We "],[94582,3,""],[94582,0,"a"],[94582,1,""],[94582,0,"A bad per"],[94590,1,""],[94589,1,""],[94588,1,""],[94588,0,"traversal "],[94582,16,""],[94582,0,"This test can be as much as 8x slower if "],[94582,41,""],[94582,0,"A di"],[94585,1,""],[94584,1,""],[94583,1,""],[94582,1,""],[94581,1,""],[94581,0," A di"],[94585,1,""],[94584,1,""],[94584,0,"poorly chosen traversal order can make this test as much as 8x slower. We "],[94655,3,""],[94655,0,"To avoid this, we "],[94350,1,""],[94350,0,"\n\n"],[94352,322,""],[94352,0,"_git-makefile_ is the slowest test here. Eg-walker replays this data set in 15ms. Interestingly, in datasets like this with very high concurrency, the performance of eg-walker is highly dependant on the order events are traversed. A poorly chosen traversal order can make this test as much as 8x slower. To avoid this, we"],[94350,0," Eg-walker performance is much more varied than that of a CRDT, which "],[94414,6,""],[94414,0,"as CRDTs process"],[94417,13,""],[94417,0,"the _effect_ function in a CRDT is larg"],[94452,4,""],[94449,3,""],[94449,0,"has very "],[94453,5,""],[94453,0,"more consistent pe"],[94449,22,""],[94449,0,"doesn't "],[94449,8,""],[94449,0,"largely does the same work no matter where"],[94486,5,""],[94486,0,"what happens."],[94824,286,""],[94499,0," Eg-walker is much faster than CRDTs when the event graph is largely sequential (or mostly sequential, as is the case in `node_nodecc`). This is due to the optimisations described in @opt-traversal. When part of an editing trace is sequential, the transform function does no work at all."],[94509,0,", on the other hand,"],[94786,20,""],[94786,0,"turns into a "],[94798,1,""],[94797,1,""],[94797,0,"the i"],[94786,16,""],[94786,0,"resembles the identity function."],[94902,14,""],[94902,0,"We have v"],[94910,1,""],[94910,0,"found"],[94915,3,""],[94915,0," that in"],[95003,6,""],[95003,0,"quite"],[95008,10,""],[95008,0," sensitive"],[95008,10,""],[95008,0," dependant"],[95003,5,""],[95003,0,"highly"],[95032,0," in which"],[95154,0," pro"],[95157,1,""],[95157,0,"eprocess the causal graph to find a "],[95192,1,""],[95192,0,"n adq"],[95196,1,""],[95196,0,"equate o"],[95203,1,""],[95203,0,"order."],[95209,3,""],[95209,0," "],[95210,1,""],[95210,0,"However, ths op"],[95224,1,""],[95223,1,""],[95222,1,""],[95221,1,""],[95221,0,"is proc"],[95227,1,""],[95226,1,""],[95226,0,"eprocessing makes "],[95244,6,""],[95238,6,""],[95238,0,"has a tradeoff in that t"],[95261,1,""],[95253,8,""],[95252,1,""],[95252,0,": It makes the"],[95307,0," slower."],[95315,5,""],[95315,0," These"],[95534,5,""],[95534,0,"Our optimi"],[95538,6,""],[95538,0,"query"],[95538,5,""],[95538,0,"traversal order optimisation "],[95534,4,""],[95534,0,"Eg-walker spen"],[95534,14,""],[95534,0,"Our "],[95567,0,"- which dramatically improves the performance in _git-makefile_ makes these tests slower. About 40% of the time spent in each of these tests is simply in our quer"],[95711,18,""],[95711,0,"spent in query order optmi"],[95736,1,""],[95735,1,""],[95735,0,"imisation."],[95717,28,""],[95717,0,"optimisatin"],[95727,1,""],[95726,1,""],[95725,1,""],[95724,1,""],[95717,7,""],[95717,0,"pro"],[95719,1,""],[95719,0,"eprocessing the graph f"],[95741,1,""],[95741,0,"to find a fas"],[95751,3,""],[95750,1,""],[95750,0," "],[95750,1,""],[95750,0,"n ideal query order."],[95758,6,""],[95758,0,"traversal "],[94820,82,""],[94887,0," (like _git-makefile_)"],[94281,0," The l"],[94286,1,""],[94286,0,"sloest"],[94281,11,""],[94281,0," "],[94281,1,""],[94281,0," In absolute terms, the slowest test ("],[94318,1,""],[94318,0,"case (git-ak"],[94329,1,""],[94328,1,""],[94328,0,"makefile_"],[94324,0,"_"],[94338,0,") was still processed in just 15ms."],[94340,27,""],[94340,0,"was still processed in just"],[94350,10,""],[94350,0,"replayed "],[94361,5,""],[94361,0," about"],[94362,5,""],[94361,1,""],[94436,1,""],[94436,0,"\n\n"],[94340,4,""],[94345,0," pm;y "],[94346,5,""],[94346,0,"only took"],[94355,12,""],[94360,0," to process"],[94400,0," run-length "],[94404,8,""],[94404,0,"-length "],[94401,11,""],[94401,0,"runs of"],[94401,7,""],[94400,1,""],[94504,1,""],[94504,0,". The reason is that a CRDT's"],[94533,7,""],[94552,59,""],[94552,0,"i"],[94552,1,""],[94551,1,""],[94525,0,"the performance of "],[94570,0," is insensitive to the "],[94574,0,"largely "],[94601,0,"a"],[94601,1,""],[94601,0,"data"],[95241,8,""],[95241,0,"ideal o"],[95247,1,""],[95247,0,"traversal"],[95292,14,""],[95292,0,"itself can slow things down"],[95321,12,""],[95321,0,"In the"],[95368,8,""],[95368,0,","],[95370,0,"the causal graph i"],[95387,1,""],[95386,1,""],[95386,0,"s v"],[95388,21,""],[95386,1,""],[95386,0," is"],[95389,4,""],[95402,1,""],[95401,1,""],[95401,0,", as"],[95319,1,""],[95319,0,"."],[95497,88,""],[95496,1,""],[95593,0," -"],[95530,8,""],[95585,0,", but it"],[95593,2,""],[95611,0," slighly"],[95618,1,""],[95617,1,""],[95616,1,""],[95616,0,"tly"],[95612,7,""],[95612,0,"slightly"],[95612,8,""],[95611,1,""],[95585,1,""],[95585,0,"."],[95587,1,""],[95587,0,"B"],[95650,0," _friendsforever_ and _clownschool_"],[95685,20,""],[95648,2,""],[95648,0,"replaying"],[95696,0,"simply "],[95732,11,""],[95732,0," looking for an"],[93055,0," "],[93055,1,""],[96165,3,""],[96147,3,""],[96139,3,""],[95902,3,""],[95886,3,""],[95850,3,""],[95838,3,""],[96147,0,"// "],[96132,0,"// "],[96127,0,"// "],[95893,0,"// "],[95880,0,"// "],[95847,0,"// "],[95838,0,"// "],[93401,0," Eg-walker"],[93402,0,"Our "],[93406,1,""],[93406,0,"e"],[93415,0," implementation can ingest changes at about 70"],[93460,1,""],[93459,1,""],[93459,0,"60"],[93442,17,""],[93442,0,"abnout"],[93447,1,""],[93446,1,""],[93445,1,""],[93444,1,""],[93444,0,"out "],[93450,0," million changes per second on a modern computer."],[93481,18,""],[93481,0,"our test "],[93489,1,""],[93485,4,""],[93485,0,"computer."],[93493,0,"s"],[92558,0,"_"],[92546,0,"_"],[92559,1,""],[92546,1,""],[92558,0,")"],[92546,0,"("],[92559,1,""],[92546,1,""],[92558,0,"*"],[92546,0,"*"],[93507,0,"remote "],[93520,18,""],[93520,0,"*"],[93507,0,"*"],[93532,12,""],[93532,0," important"],[93554,5,""],[93554,0," question"],[94118,39,""],[94117,1,""],[94116,1,""],[94116,0,", an"],[94119,1,""],[94118,1,""],[94118,0,"perhaps along with"],[94154,0," to allow the replica to "],[94179,25,""],[94179,0,"loo"],[94181,1,""],[94180,1,""],[94179,1,""],[94179,0,"checkout "],[94204,2,""],[94204,0,"the "],[94225,4,""],[94233,54,""],[94233,0," from other "],[94234,11,""],[94233,1,""],[94233,0,"."],[94226,0,"conrru"],[94231,1,""],[94230,1,""],[94229,1,""],[94229,0,"current "],[94226,0,"fugu"],[94229,1,""],[94228,1,""],[94228,0,"ture "],[87885,9,""],[87885,0," (remote)"],[96210,0,"\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-remote>\n"],[96480,12,""],[96480,0,"all"],[96480,3,""],[96480,0,"all_speed_remote"],[96688,0,"all-"],[96451,0,"\n#figure(\n  text(8pt, charts.all_speed_remote),\n  caption: [\n    Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-all-remote>\n\n"],[96942,6,""],[96942,0,"local"],[96516,0,"// "],[96511,0,"\n    xxx"],[96777,0,"// "],[96772,0,"\n    xxx"],[96756,1,""],[96755,1,""],[96754,1,""],[96753,1,""],[96752,1,""],[96751,1,""],[96751,0,"local"],[87672,0,"is a"],[87675,1,""],[87674,1,""],[87673,1,""],[87672,1,""],[87672,0,"is pretty fast compared to contemporary CRDT libraries (see figure XXX). And it"],[87750,1,""],[87749,1,""],[87748,1,""],[87748,0,", "],[87749,1,""],[87748,1,""],[87748,0," it"],[87748,3,""],[87744,4,""],[87738,6,""],[87731,7,""],[87726,5,""],[87716,10,""],[87711,5,""],[87698,13,""],[87695,3,""],[87686,9,""],[87681,5,""],[87674,7,""],[87672,2,""],[87672,0,"is a"],[87674,2,""],[87672,2,""],[87831,0," "],[87456,376,""],[87456,0,"Contemporary CRDT libraries vary wildly in performance and feature sets. To make a fair comparison, we have also written our own optimised implementation of FugueMax in a CRDT library, called _dt-crdt_. This library shares its language, code style and data structures with diamond types in order to achieve (as much as possible) a like-for-like comparison with diamond types.Its "],[87456,379,""],[87456,0,"Contemporary CRDT libraries vary wildly in performance and feature sets. To make a fair comparison, we have also written our own optimised implementation of FugueMax in a CRDT library, called _dt-crdt_. This library shares its language, code style and data structures with diamond types in order to achieve (as much as possible) a like-for-like comparison with diamond types.Itsa "],[87835,1,""],[87834,1,""],[87834,0," also pre"],[87831,0," "],[87844,0,"tty fast compared to contemporary CRDT libraries (see figure XXX). A full write-"],[87913,11,""],[87913,0,"mo"],[87914,1,""],[87913,1,""],[87912,1,""],[87911,1,""],[87911,0,"The @"],[87915,1,""],[87911,4,""],[87911,0,"We have a m"],[87921,1,""],[87911,10,""],[87910,1,""],[87909,1,""],[87908,0," for a r"],[87914,2,""],[87912,2,""],[87908,4,""],[87527,0," "],[87527,1,""],[87527,0,". The fastest and "],[87529,16,""],[87529,0,"Performance differe"],[87547,1,""],[87547,0,"s "],[87541,0,"between fast and l"],[87558,1,""],[87558,0,"slow libraries "],[87581,0,"by up to "],[87584,6,""],[87584,0,"4 "],[87585,1,""],[87584,1,""],[87583,1,""],[87583,0," up to 4 "],[87572,20,""],[87572,0," can differ by 4 orders of magnitude (!)"],[87897,18,""],[87896,1,""],[87896,0," with diamond types - so "],[87920,1,""],[87919,1,""],[87918,1,""],[87917,1,""],[87916,1,""],[87915,1,""],[87789,4,""],[87788,1,""],[87788,0,", "],[87805,0," and optimizations"],[87172,0," ("],[87173,1,""],[87172,1,""],[87135,5,""],[87167,0," - hereafter _dt_"],[87181,2,""],[87181,0,"DT"],[87181,2,""],[87181,0,"dt"],[87167,17,""],[87167,0," (hereafter _dt-egwalker_)"],[87185,0,"_"],[87185,1,""],[87850,13,""],[87850,0,"_dt-egwalker_"],[87952,1,""],[87952,0,"\n\n"],[88031,0,". A detailed write-up on the optimizations"],[88060,13,""],[88060,0,"optimisations "],[87954,120,""],[87954,0,"Its also pretty fast compared to contemporary CRDT libraries (see figure XXX). A detailed write-up on the optimisations"],[87837,1,""],[87837,0,"s"],[88073,0," used in dt-crdt is at @crd"],[88097,3,""],[88097,0,"crdts-go-brrr.\n\n\n#figure(\n  text(8pt, charts.all_speed_remote),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-all-remote>\n"],[88142,16,""],[88142,0,"one"],[88142,3,""],[88142,0,"one_local"],[88171,3,""],[88171,0,"Speed ingesting the 'seph-blog1' trace in using various CRDTs"],[88227,0,"contemporary "],[88245,0,"."],[88245,1,""],[88245,0," libraries. Cola is "],[88261,0," @col"],[88263,3,""],[88263,0,"cola"],[88261,1,""],[88270,0,"the fastest in this test because it contains all the optimisations from "],[88295,47,""],[88294,1,""],[88294,0,". "],[88295,1,""],[88294,1,""],[88294,0," because it contains all the "],[88256,0," Yjs is the slowe"],[88272,1,""],[88271,1,""],[88271,0,"e"],[88271,1,""],[88271,0,"west library here, taking 205"],[88299,1,""],[88299,0,"58"],[88300,1,""],[88300,0,"9"],[88300,1,""],[88300,0,"6ms and "],[88307,1,""],[88332,42,""],[88332,0,", taking just 4ms."],[88349,0," (500x faster)"],[88364,0," Cola is faster than dt-crdt due to its use of a \""],[88404,10,""],[88404,0,"gtree"],[88404,5,""],[88404,0,"GTree@gtree"],[88410,5,""],[88410,0,"cola-gtree implementation using local caching"],[88448,7,""],[88448,0,"cursor caching. When this is disabled, performance with "],[88485,0," (cola-nocurosr"],[88499,1,""],[88498,1,""],[88497,1,""],[88497,0,"sor)"],[88500,0,"_"],[88487,0,"_"],[88505,0,"dt-crdt i"],[88505,9,""],[88517,5,""],[88517,0,"is similar to dt-crdt."],[88177,9,""],[88177,0,"apply lo"],[88184,1,""],[88183,1,""],[88182,1,""],[88205,0," to a local CRDT"],[88221,3,""],[88221,0," object"],[88276,0,"@yjs"],[88284,0,"500x slower than Cola in this test "],[88305,0,"@cola"],[88324,32,""],[88323,1,""],[88323,0,". ("],[88326,1,""],[88332,42,""],[88332,0," vs"],[88339,0," respectively"],[88352,13,""],[88339,13,""],[88497,0,"e"],[88497,1,""],[88497,0,"remarkably "],[88707,10,""],[88707,0,"one-o"],[88711,1,""],[88711,0,"local"],[88020,10,""],[88020,0,"@char"],[88021,4,""],[88021,0,"chart-one-local"],[88183,6,""],[88183,0,"applying "],[88183,0,"locally "],[88227,6,""],[87146,0," to see how "],[87146,12,""],[87024,0,"\nWe were concerned eg-walker would be too slow for practical use."],[87025,19,""],[87025,0,"E"],[87034,0," is quite different from"],[87035,23,""],[87035,0,"adds"],[87035,4,""],[87035,0,"is quite different from"],[87053,5,""],[87043,10,""],[87037,6,""],[87034,3,""],[87025,1,""],[87025,0,"We were concerned e"],[87025,19,""],[87025,0,"To alay the concern that e"],[87025,24,""],[87025,0,"We were concerned that"],[87094,0," "],[87094,1,""],[87094,0," To this end, "],[87108,2,""],[87108,0,"w"],[87110,5,""],[87111,12,""],[87111,0,"wrote "],[87153,4,""],[87163,10,""],[87192,8,""],[87192,0," CRDT library"],[87257,68,""],[87257,0,"performs quite well"],[87437,52,""],[87365,72,""],[87365,0," is quite fast, especially for linear or mostly-linear data sets, "],[87430,1,""],[87429,1,""],[87379,1,""],[87379,0,". Eg-walker particularly shines for"],[87414,15,""],[87390,0," is m"],[87380,1,""],[87380,0,"\n\n"],[87395,1,""],[87394,1,""],[87407,0," fast"],[87412,7,""],[87450,0," where the @opt"],[87462,3,""],[87462,0,"opt-traversal"],[87461,0,"optimisations described in "],[87502,0," "],[87457,46,""],[87457,0,"CRDT data structr"],[87473,1,""],[87473,0,"ure does not need to be generated at all. O"],[87515,1,""],[87514,1,""],[87514,0," And "],[87518,1,""],[87517,1,""],[87516,1,""],[87515,1,""],[87515,0,"But is i"],[87522,1,""],[87521,1,""],[87520,1,""],[87520,0,"t is slower than CRDTs"],[87519,5,""],[87519,0,"we suspect the laogirht"],[87534,8,""],[87534,0,"alog"],[87537,1,""],[87536,1,""],[87536,0,"gorithm scales"],[87550,18,""],[87550,0," worse than CRDTs when datasets have extremely high concurrency. Luckily, h"],[87624,1,""],[87624,0,"extremely high "],[87624,15,""],[87624,0,"we "],[87626,1,""],[87624,2,""],[87624,0,"extremely high "],[87624,0,"edi"],[87626,1,""],[87625,1,""],[87624,1,""],[87624,0,"text editing documents with "],[87667,0,"concurrency seem relative"],[87684,8,""],[87684,0,"quite rare in practice."],[87613,0," (10+ concurrent "],[87615,15,""],[87615,0,"20+ concurrent"],[87615,0,"eg "],[87632,0," "],[87632,1,""],[87632,0,", offline edi"],[87644,1,""],[87643,1,""],[87642,1,""],[87641,1,""],[87641,0," collaborative "],[87642,14,""],[87632,10,""],[87632,0," replicas all making changes while offline)"],[87745,0,"s"],[87746,11,""],[87746,0," very rare"],[87686,60,""],[87686,0,"editing scenarios like that seem"],[87718,5,""],[87718,0," extremely"],[87746,0," We couldn't find or gene"],[87746,25,""],[87747,0,"\nIn order to failr"],[87764,1,""],[87763,1,""],[87763,0,"rly compare dt-egwalker with other impl"],[87798,4,""],[87792,6,""],[87792,0,"its CRDT style counterparts, we have also "],[87748,86,""],[87748,0,"In order to fairly compare dt-egwalker with its CRDT style counterparts, we have also"],[88032,89,""],[87833,0," written our own optimised implementation of FugueMax in a CRDT library, called _dt-crdt_.\n"],[87923,0," "],[87923,1,""],[87747,0,"\nComparing "],[87748,10,""],[87747,1,""],[87923,0," This library "],[87924,13,""],[87924,0,"We wrote this library because performance"],[87954,11,""],[87954,0,"CRDT performance"],[87954,0,"the "],[87958,5,""],[87969,0," of CRDT libraries differs "],[87973,0,"fast and slow "],[88010,0,"immensely"],[87747,273,""],[87746,1,""],[87746,0,"\n"],[87802,17,""],[87802,0,", and that makes finding"],[87804,22,""],[87804,0,"son"],[87806,1,""],[87806,0," finding a fair o"],[87822,1,""],[87822,0,"comparison"],[87822,0,"point of "],[87841,0," for dt-egwalker is tr"],[87858,5,""],[87858,0,"was tricky. We ended up writing our "],[87781,6,""],[87781,0,"i"],[87781,1,""],[87781,0,"wildly"],[87802,0,". A cursory"],[87806,7,""],[87806,0,"quick benchmark of "],[87822,3,""],[87822,0,"found a 500x difference between "],[87804,49,""],[87804,0,"As @char"],[87808,4,""],[87808,0,"chart-one-local shows, we see a 500x difference in performance between the best performing library in our set and the wrose"],[87930,1,""],[87929,1,""],[87928,1,""],[87927,1,""],[87927,0,"orst. In order to find"],[87949,13,""],[87945,4,""],[87945,0,"failr"],[87949,1,""],[87948,1,""],[87948,0,"rly evalusa"],[87958,1,""],[87957,1,""],[87957,0,"ate dt-egwalker, we've "],[87980,58,""],[87979,1,""],[87978,1,""],[87977,1,""],[87976,1,""],[87997,0," ou"],[87999,1,""],[87999,0,"wn implementation "],[88002,0,"optimized"],[88010,1,""],[88009,1,""],[88008,1,""],[88008,0,"sed "],[88002,0,"highly "],[88018,0," CRDT"],[88039,0,"in _dt-crdt_"],[88042,0,"the "],[88056,0,"library"],[87907,24,""],[87899,8,""],[87899,0,"and worst performing library we tested"],[88007,7,""],[88062,0," @dt-c"],[88064,4,""],[88064,0,"dt-crdt"],[88062,1,""],[88072,126,""],[88071,0," Li"],[88073,1,""],[88072,1,""],[88072,0,"T"],[88072,1,""],[88071,1,""],[88259,0," The optimisations are decribed in more "],[88281,18,""],[88281,0," document "],[88290,1,""],[88290,0,"ed in a blog post @crd"],[88309,3,""],[88309,0,"crdts-go-brrr."],[88307,0,":"],[88307,1,""],[88293,14,""],[88293,0,"here:"],[88297,2,""],[88297,0," "],[88298,14,""],[88298,0,"@crdts-go-brrr"],[88315,166,""],[93657,5,""],[93657,0,"rarely"],[93676,3,""],[93676,0," when using"],[93740,156,""],[93843,3,""],[93843,0,"which is"],[93848,3,""],[93843,5,""],[93843,0,"far"],[93843,42,""],[93843,0,"which is somewhat faster than most people's typing speed"],[93849,168,""],[93849,0,"ou"],[93850,1,""],[93849,1,""],[93849,0,"outstrips most people's typing speed."],[93864,8,""],[93864,0,"user's"],[93849,0,"comfortably "],[93870,12,""],[93870,0," the"],[93887,0," of most users"],[93918,0,"while processing local editing events in a CRDt, "],[93966,1,""],[93965,1,""],[93964,1,""],[93964,0,"T, "],[93970,0," CRDT's"],[93995,10,""],[94061,10,""],[94039,4,""],[94057,0,"s"],[94063,1,""],[94131,0,"any "],[94140,0,"ly generated"],[94161,0,"Event graph b"],[94161,13,""],[94161,0,"E"],[94161,1,""],[94373,17,""],[94373,0,"in our tests - and does so with no data lo"],[94408,0,"historical "],[94426,0,"aded in memory at all."],[94408,11,""],[94391,16,""],[94391,0," doesn't ened "],[94404,1,""],[94403,1,""],[94402,1,""],[94401,1,""],[94400,1,""],[94400,0,"need any"],[94413,0," to be"],[94419,1,""],[94419,0," "],[94437,6,""],[94437,0,"in the "],[94443,1,""],[94439,4,""],[94437,2,""],[94437,0,"at all"],[88733,0," Yjs performs much better when processing remote events - we assum"],[88788,11,""],[88788,0,"."],[94502,7,""],[94502,0,"The performance while merging"],[94550,2,""],[94550,0," much"],[94570,21,""],[94938,0," @eg-walk"],[94940,7,""],[94940,0,"eg-walker-algorithm"],[94939,20,""],[94938,1,""],[94976,0," // @eg-walker-algorithm"],[95002,0,"N"],[95002,1,""],[95006,7,""],[95006,0," is perhaps an unrei"],[95025,1,""],[95025,0,"alistically b"],[95037,1,""],[95037,0,"bad scenario"],[95049,20,""],[95065,23,""],[95065,0,"R"],[95065,0,"An alternate setup "],[95065,19,""],[95065,0,"Alternately, "],[95078,1,""],[95078,0,"r"],[95065,14,""],[95065,0,"Performance would be much better if r"],[95109,11,""],[95126,0,"text of the "],[95160,8,""],[95160,0," to"],[95173,0,". Historical events can be fetched lazily - they are only used"],[95231,4,""],[95231,0,"needed "],[95238,62,""],[95238,0," "],[95238,1,""],[95238,0,"when"],[95243,8,""],[95243,0,"computing"],[95289,1,""],[95289,0,"ing"],[95292,26,""],[95292,0," events which are concurrent with the document's current state"],[95357,0,"Nevertheless,"],[95370,1,""],[95370,0,"a"],[95370,0," "],[97327,240,""],[95599,0,"\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-remote>\n"],[95403,19,""],[95403,0,"eg-walker is"],[95489,11,""],[95494,0," just"],[95451,3,""],[95451,0,"our"],[95526,0," is capable of"],[95549,1,""],[95548,1,""],[95548,0,"ing"],[95585,15,""],[95585,0,"the test cases we have. "],[95608,1,""],[96365,10,""],[96354,0,"when processing"],[96369,2,""],[96628,12,""],[96628,0,"event graph"],[96910,16,""],[96923,0," code itself"],[96928,7,""],[96923,5,""],[96910,0," traversal order"],[96907,3,""],[96907,0,"While our"],[96945,0," code"],[97006,5,""],[97006,0," and _node_nodecc_,"],[96992,32,""],[96992,0,"the asyncronous tests"],[97001,0,"h"],[97024,19,""],[97024,0," our concurrent tests slower, as the "],[97057,4,""],[97056,1,""],[97055,1,""],[97054,1,""],[97053,1,""],[97052,1,""],[97204,0," "],[97204,1,""],[97204,0," Turning off this optimi"],[97204,24,""],[97204,0,"\n\n"],[97205,1,""],[97204,1,""],[97204,0," "],[97204,1,""],[97204,0,"\n\n// TODO: Consider a graph for that."],[98161,109,""],[98161,0,"\n= Conclusiont"],[98174,1,""],[98173,1,""],[98173,0,"n\n\nWe have "],[98176,8,""],[98176,0,"As we have shown, "],[98176,18,""],[98176,0,"Event graphs are a novel, exciting approach to building realtime collaborative editing applications. Our eg-walker algorithm i"],[98301,1,""],[98301,0,"solves many problems with re"],[98328,1,""],[98327,1,""],[98327,0,"traditional CRDT based approaches, such as:"],[98277,4,""],[98277,0,"We believe ouir "],[98292,1,""],[98291,1,""],[98290,1,""],[98290,0,"r "],[98311,0," can ba"],[98317,1,""],[98317,0,"e used to"],[98332,1,""],[98395,0,"\n\n- L"],[98399,1,""],[98399,0,"The neex"],[98406,1,""],[98406,0,"d to keep, pass around and store in RAM a l"],[98448,1,""],[98447,1,""],[98411,36,""],[98411,0,"repli"],[98411,5,""],[98411,0,"keep, pass around and store in RAM a"],[98433,14,""],[98433,0,"load a large CRDT state that grows inde"],[98468,4,""],[98468,0,"without bound as a document is edited\n- The "],[98508,4,""],[98506,2,""],[98506,0,"-"],[98327,68,""],[98327,0,"alleviate the burden of "],[98176,175,""],[98176,0,"Event graphs are a novel, exciting approach to building realtime collaborative editing applications. We believe our eg-walker algorithm can be used to alleviate the burden of"],[98350,37,""],[98350,0," l"],[98351,1,""],[98351,0,"storing and"],[98367,0,"ing"],[98389,0," object"],[98421,24,""],[98421,0,"."],[98397,0,"for the text document "],[98444,2,""],[98337,0,"some of the problems o"],[98358,1,""],[98358,0,"that CRDTs fasc"],[98372,1,""],[98371,1,""],[98371,0,"ce in real "],[98377,5,""],[98374,3,""],[98374,0,"when building software, such as:\n\n- "],[98410,1,""],[98410,0,"T"],[98413,0," need to"],[98421,18,""],[98421,0,"sto"],[98423,1,""],[98422,1,""],[98421,1,""],[98421,0," store and"],[98431,4,""],[98438,1,""],[98437,1,""],[98436,1,""],[98484,0,". This st"],[98492,1,""],[98491,1,""],[98490,1,""],[98489,1,""],[98488,1,""],[98487,1,""],[98486,1,""],[98486,0,"CRDTs need to manage a state object"],[98546,1,""],[98546,0," ad "],[98549,1,""],[98548,1,""],[98548,0,"s the document is edited. This dataset is ver"],[98590,3,""],[98590,0,"usually extremely difffic"],[98614,1,""],[98613,1,""],[98612,1,""],[98612,0,"icult to prune.\n- CRDT based systems"],[98630,0,"The file format and network format for "],[98687,0," is dependent on the CRDT algorithm itself. Different sequence based CRDTs (like Fugue @g"],[98775,1,""],[98775,0,"fugu"],[98775,4,""],[98775,0,"fugue"],[98773,1,""],[98779,0,", RGA@rga"],[98787,1,""],[98786,1,""],[98785,1,""],[98784,1,""],[98784,0,"@rg"],[98785,2,""],[98785,0,"rga"],[113391,0,")"],[113380,0,"("],[113392,0,", \"works.bib\""],[98788,0," @y"],[98790,1,""],[98790,0,"Nicolaescu2016YATA"],[98787,1,""],[98786,1,""],[98785,1,""],[98785,0,"rg"],[98785,2,""],[98785,0,"Roh2011RGA,"],[98816,0," and others)"],[98665,3,""],[98665,0,"that"],[98665,4,""],[98665,0,"that"],[98680,0," collaborative"],[98638,11,""],[98638,0," and"],[98657,16,""],[98657,0," used by"],[98666,0,"CRDT based "],[98690,0," editing"],[98732,16,""],[98732,0,"algorithm itself"],[98741,0,"'s state"],[98749,7,""],[98848,0," all use differenc"],[98865,1,""],[98865,0,"t"],[98817,0,"YATA"],[98853,4,""],[98866,0," data"],[98870,1,""],[98867,3,""],[98867,0,"CRDT state formats. "],[98886,1,""],[98885,1,""],[98885,0,". As a result, new CRDT based "],[98909,6,""],[98909,0,"algorithms require entirely new file formats and network protocols to be r"],[98982,1,""],[98982,0,"written and deployed. "],[99003,1,""],[98277,14,""],[98277,0,"They "],[98281,1,""],[98280,1,""],[98279,1,""],[98278,1,""],[98277,1,""],[98277,0,"Algorih"],[98283,1,""],[98282,1,""],[98282,0,"ithms like"],[98302,25,""],[98302,0," can"],[98342,0," users of"],[98356,1,""],[98356,0," based systems"],[98363,0,"co"],[98364,1,""],[98363,1,""],[98363,0,"te"],[98364,1,""],[98363,1,""],[98363,0,"text editing "],[99018,0," Tuhis"],[99023,1,""],[99022,1,""],[99021,1,""],[99020,1,""],[99020,0,"his is"],[99019,7,""],[99018,1,""],[99018,0,"\n"],[99018,1,""],[99018,0," Eg-walker "],[99028,1,""],[99028,0,"'s format is "],[99019,22,""],[99019,0,"The event graph format can be common"],[99042,13,""],[99042,0,"is completely agnostic to the CRD"],[99072,3,""],[99072,0,"sequence CRDT being used"],[99072,24,""],[99072,0,"ordering algorithm"],[99072,9,""],[99081,0," used to order concurrent edits."],[99018,0," By const"],[99026,1,""],[99025,1,""],[99025,0,"trast,"],[99031,2,""],[99031,0," t"],[99126,0,"\n\nEg-walker has "],[99137,5,""],[99137,0," also "],[99138,5,""],[99138,0,"combines aspects of both "],[99128,35,""],[99128,0,"Eg-walker combines aspects of both"],[98277,15,""],[98277,0,"Pure operation-based systems like"],[98320,4,""],[98330,5,""],[98330,0," amny"],[98334,1,""],[98333,1,""],[98332,1,""],[98331,1,""],[98331,0,"m"],[98331,1,""],[98331,0,"s"],[98331,1,""],[98331,0,"many"],[98352,4,""],[98352,0,"faced by"],[98352,87,""],[98276,0," CRDT based collaborative text editing has some p"],[98277,48,""],[98276,1,""],[98277,0,"As we ha"],[98277,8,""],[98352,0,"faced by CRDT systems, like:"],[98360,13,""],[98359,1,""],[98358,1,""],[98277,88,""],[98277,0,"They have some significant adva"],[98277,31,""],[98277,0,"Our eg-walker algorithm builds on existing CRDT algorithms while "],[98310,0," the "],[98310,5,""],[98311,0,"the foundation of "],[98343,0,"based "],[98366,0,"alleviating some of the"],[98388,1,""],[98387,1,""],[98386,1,""],[98386,0,"the large downsides of CRDTs. In particular:"],[98434,0,"Eg-walker d"],[98444,1,""],[98444,0,"doesn't "],[98452,4,""],[98501,21,""],[98500,1,""],[98457,0,"all p"],[98461,1,""],[98461,0,"replicating peers "],[98510,0,"based "],[98530,141,""],[98530,0,"The state object for CRDT"],[98551,0,"text based "],[98566,0,"s g"],[98568,1,""],[98568,0,"g"],[98567,2,""],[98566,1,""],[98561,1,""],[98555,6,""],[98551,4,""],[98550,5,""],[98546,4,""],[98539,7,""],[98533,6,""],[98530,3,""],[98530,0,"CRDTs need to manage a state object that grows without bound as the document is edited. This dataset is usually extremely difficult to prune."],[98530,141,""],[98530,0,"The state object for CRDT"],[98551,0,"text based "],[98566,0,"s g"],[98568,1,""],[98530,38,""],[98529,1,""],[98528,0," intom "],[98534,1,""],[98533,1,""],[98533,0," memory while editing"],[98541,13,""],[98541,0,"during editing"],[98548,0,"collaborative "],[98569,0," sessions"],[98579,0," The CRDT state object"],[98580,4,""],[98580,0,"This "],[98602,0," is "],[98603,3,""],[98603,0,"is "],[98603,3,""],[98603,0,"can be large"],[98603,12,""],[98603,0,"generally grows without bound, and pruning it is very difficult. "],[98667,1,""],[98667,0," Eg-walker only needs histo"],[98689,0,"to access "],[98704,0,"i"],[98704,1,""],[98704,0,"rical events when merging - and even then, only when merging events "],[98752,20,""],[98751,1,""],[98750,1,""],[98749,1,""],[98748,1,""],[98747,1,""],[98747,0,"it o"],[98747,4,""],[98747,0,"like OT based systems, it only needs to access events back to the last common critical version."],[98825,9,""],[98913,12,""],[98913,0,"depends"],[98950,0," type definition"],[98928,0,"type definition of the "],[98955,12,""],[98961,0," oj"],[98963,1,""],[98963,0,"bject"],[98968,16,""],[99185,9,""],[99185,0,"formats"],[99220,0," The vigorous pace of "],[99220,22,""],[99340,24,""],[99340,0,"also combines aspects of operational transform based systems"],[99330,70,""],[99330,0,"Eg-walker achieves this without"],[99330,0,"remar"],[99330,5,""],[99330,0,"Rm"],[99331,1,""],[99331,0,"emarkably, "],[99342,1,""],[99342,0,"e"],[99373,0," sa"],[99375,1,""],[99366,9,""],[99366,0,"while still p"],[99378,1,""],[99378,0,"a"],[99378,1,""],[99378,0,"having excellent performance."],[99366,5,""],[99366,0,"despite"],[99373,6,""],[99391,0,"real-world "],[99414,0," Our s"],[99419,1,""],[99419,0,"algorithm can merge events"],[99415,30,""],[99415,0,"Even in our sloest"],[99432,1,""],[99431,1,""],[99430,1,""],[99430,0,"west d"],[99427,9,""],[99427,0,"omre "],[99431,1,""],[99430,1,""],[99429,1,""],[99428,1,""],[99427,1,""],[99427,0,"most complex data sets, we were able to merge over 1 million run-length encoded events p"],[99507,0,"text editing "],[99528,0,"er second. This "],[99539,5,""],[99538,1,""],[99538,0," This is "],[99544,3,""],[99544,0,"out"],[99539,8,""],[99539,0,"When editing traces are linear"],[99563,6,""],[99559,4,""],[99559,0,"have linear causal histories, our system outperforms all other approaches"],[99600,0,"significantly "],[99646,0," - as it reduces to a simple identity function."],[99652,2,""],[99652,0,"our "],[99651,0," the CRDT"],[99656,4,""],[99656,0,"me"],[99657,1,""],[99657,0,"achi"],[99656,5,""],[99656,0,"CRDT machinery is completely unn"],[99688,44,""],[99688,0,"n"],[99688,1,""],[99688,0,"eeded.\n\nWe think this approach is a fascinating direction for future research, and hope "],[99771,5,""],[99771,0,"sincerely hope others build on this work "],[99696,116,""],[99696,0,"We think this approach is a fascinating direction for future research, and sincerely hope others build on this work"],[99765,0," in the fea"],[99775,1,""],[99774,1,""],[99774,0,"ield of realtime collaborative editing. We"],[99816,5,""],[99857,0," and find it as interesting and useful as we have.\n"],[99857,0,","],[99975,0,"financial and resar"],[99993,1,""],[99992,1,""],[99992,0,"earch"],[99985,12,""],[99985,0,"and "],[99985,4,""],[99975,10,""],[99975,0,"finanicn"],[99982,1,""],[99981,1,""],[99980,1,""],[99979,1,""],[99979,0,"ncial and moral "],[100002,3,""],[100002,0," from"],[148,0,"\n#import \"@preview/algo:0.3.3\": algo, i, d, comment, code"],[108259,0,"\n\n"],[108260,0,"\n#code(\n  indent-guides: 1pt + gray,\n  row-gutter: 5pt,\n  column-gutter: 5pt,\n  inset: 5pt,\n  stroke: 2pt + black,\n  fill: none,\n)[\n  ```py\n  def fib(n):\n      if n < 0:\n          return None\n      if n == 0 or n == 1:        # this comment is\n          return n                # normal raw text\n      return fib(n-1) + fib(n-2)\n  ```\n]"],[108397,2,""],[108397,0,"haskell"],[108614,298,""],[108405,189,""],[108405,0,"initialState :: CRDT\nquery :: CRDT -> Doc\n\n-- Modify a CRDT by applying a local update.\nupdate :: (CRDT, (Id, Event)) -> CRDT\n\n-- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\nmerge :: (CRDT, CRDT) -> CRDT\n\nmergeAll :: [CRDT] -> CRDT\nmergeAll crdts = foldl initialState crdts\n"],[108703,2,""],[108392,2,""],[108701,0,"  "],[108659,0,"  "],[108632,0,"  "],[108601,0,"  "],[108530,0,"  "],[108491,0,"  "],[108446,0,"  "],[108424,0,"  "],[108403,0,"  "],[108392,0,"  "],[108354,0,"// "],[108340,0,"// "],[108318,0,"// "],[108299,0,"// "],[108270,0,"// "],[108324,3,""],[108302,3,""],[108270,3,""],[108270,0,"// "],[108302,0,"// "],[108302,3,""],[108314,1,""],[108314,0,"0"],[108314,1,""],[108314,0,"1"],[108314,1,""],[108314,0,"2"],[108314,1,""],[108314,0,"3"],[108321,0,"// "],[108389,0,"// "],[108363,3,""],[108363,0,"// "],[108386,0,"\n  stroke: none,"],[108401,1,""],[108401,0,","],[108396,6,""],[108386,10,""],[108267,0,"\n  title: \"asdf',"],[108270,0,"// "],[108262,4,""],[108262,0,"algo"],[108267,0,"\n  title: \"Asdf\","],[108276,8,""],[108267,9,""],[108262,4,""],[108262,0,"code"],[108761,0," <asdf>"],[108257,0," @asdf"],[108257,6,""],[108761,7,""],[108270,3,""],[108270,0,"// "],[108267,0,"\n  block-align: none,"],[108282,6,""],[108282,0," none,"],[108270,0,"// "],[108270,3,""],[108430,3,""],[108441,0,"\n  stok"],[108447,1,""],[108446,1,""],[108446,0,"r"],[108446,1,""],[108446,0,"roke: none,"],[108444,0,"// "],[108259,1,""],[108257,0," the following haskell "],[108272,8,""],[108272,0,"set of methods"],[108827,15,""],[108826,1,""],[108317,20,""],[108367,0,"\n  // indent-guides: 1pt + gray,"],[108317,32,""],[108449,0,"\n  // stroke: 2pt + black,"],[108410,26,""],[108423,0,"\n  // inset: 5pt,"],[108393,17,""],[108406,0,"\n  // column-gutter: 5pt,"],[108368,25,""],[108381,0,"\n  // indent-guides: 1pt + gray,"],[108336,32,""],[108871,0,"\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n"],[109054,1,""],[109701,0,"\n)"],[109702,1,""],[109702,0,"]"],[109705,181,""],[109705,0,"CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n"],[109705,0,"// "],[205,0,"\n#import \"@preview/lovelace:0.1.0\": *"],[68777,0,"\n@"],[68778,1,""],[68778,0,"#algoritghm"],[68788,1,""],[68787,1,""],[68786,1,""],[68786,0,"hm(\n  "],[68790,2,""],[68777,13,""],[68777,0,"\n\n"],[68778,0,"\n#ps"],[68780,2,""],[68780,0,"pseudocode(\n  \n  "],[68792,2,""],[68793,2,""],[68793,0,")"],[68792,0,"  [123],\n  [asdf]"],[68778,0,"\n#algorithm(\n  capt"],[68793,4,""],[68793,0,"caption: \"The Partial TRansfo"],[68815,7,""],[68815,0,"Transform Algorithm\",\n  "],[68839,2,""],[68869,0,"  "],[68860,2,""],[68860,0,"    "],[68851,2,""],[68851,0,"    "],[68876,0,"\n  "],[68877,2,""],[68877,0,")"],[206,0,"// "],[245,0,"\n#import \"@preview/algorithmic:0.1.0\": algo"],[284,4,""],[284,0,"algorithm"],[68928,0,"// "],[68924,0,"// "],[68913,0,"// "],[68902,0,"// "],[68888,0,"// "],[68842,0,"// "],[68830,0,"// "],[68828,0,"\n#import \"@preview/algorithmic:0.1.0\"\n#import algorithmic: algorithm\n\n#algorithm({\n  import algorithmic: *\n  Function(\"Binary-Search\", args: (\"A\", \"n\", \"v\"), {\n    Cmt[Initialize the search range]\n    Assign[$l$][$1$]\n    Assign[$r$][$n$]\n    State[]\n    While(cond: $l <= r$, {\n      Assign([mid], FnI[floor][$(l + r)/2$])\n      If(cond: $A [\"mid\"] < v$, {\n        Assign[$l$][$m + 1$]\n      })\n      ElsIf(cond: [$A [\"mid\"] > v$], {\n        Assign[$r$][$m - 1$]\n      })\n      Else({\n        Return[$m$]\n      })\n    })\n    Return[*null*]\n  })\n})"],[68911,24,""],[68911,0,"  import algorithmic: *\n"],[68947,13,""],[68947,0,"ResetState"],[68952,0,"-"],[68952,1,""],[68947,1,""],[68947,0,"r"],[68947,1,""],[68947,0,"R"],[68968,12,""],[68968,0,"state\""],[68968,6,""],[68968,0,"A\", \"n\", \"v\""],[68967,13,""],[68967,0,"\"s\""],[68968,1,""],[68968,0,"S"],[68970,0,","],[68968,1,""],[68968,0,"tate"],[68968,0,"s"],[68979,0,"\n    Assign[\"state\"][\"dummy\"]"],[69006,0," data"],[68991,1,""],[68996,1,""],[68998,1,""],[69008,1,""],[69009,0,"\n    \n    "],[69010,4,""],[69015,0,"\n    "],[69011,4,""],[69012,4,""],[69010,0,"  })\n  \n  "],[69015,2,""],[69018,0,"Function(\"TransformPartial\", args: (\"graph\", []"],[69064,0,"V_9"],[69066,1,""],[69066,0,"0"],[69068,0,", []"],[69071,0,"V_m"],[69075,0,"), {\n    \n    "],[69080,4,""],[69081,4,""],[69081,0,"  })"],[69063,1,""],[69063,0,"#"],[69063,1,""],[69063,0,"$"],[69067,1,""],[69067,0,"$"],[69070,1,""],[69070,0,"$"],[69074,1,""],[69074,0,"$"],[69054,7,""],[69054,0,"$$"],[69055,0,"G"],[69076,0,"    Assign[#"],[69087,1,""],[69087,0,"$s$][(dummy data)]\n    Assign(["],[69117,1,""],[69116,1,""],[69116,0,"[$C$][$g"],[69123,1,""],[69123,0,"G4"],[69124,1,""],[69124,0,"$"],[69122,0,"\"GreatestCom"],[69123,11,""],[69123,0,"greatestCommonVersion\""],[69146,0,"("],[69148,0,")"],[69123,22,""],[69122,1,""],[69123,0,"\"greatestCommonVersion\""],[69150,0,"]"],[69163,0,"// "],[69528,0,"// "],[69521,0,"// "],[69512,0,"// "],[69492,0,"// "],[69479,0,"// "],[69470,0,"// "],[69441,0,"// "],[69402,0,"// "],[69393,0,"// "],[69364,0,"// "],[69330,0,"// "],[69285,0,"// "],[69257,0,"// "],[69245,0,"// "],[69224,0,"// "],[69203,0,"// "],[69593,0,"// "],[69593,3,""],[69593,0,"// "],[69157,0,"\n  Fo"],[69160,2,""],[69160,0,"For(cond: \"asdf\", {})"],[69171,5,""],[69170,1,""],[69170,0,"[]"],[69171,0,"\""],[69171,1,""],[69171,0,"Event $$"],[69178,0,"(i, i"],[69182,1,""],[69182,0,"e, "],[69183,0,"_i"],[69187,0,"P_i) in \"inOrderTraversal(G"],[69212,0,"\""],[69215,0,", C, V_0)"],[69217,0,"\"from: \" "],[69223,1,""],[69228,0,"\"to:\" "],[69243,0,"\n    \n  "],[69248,0,"If(cond: []"],[69258,0,"$$"],[69259,0,"\"isCri"],[69260,5,""],[69260,0,"isCriticalVersion\"(P_i)"],[69285,0,", {\n      \n      "],[69289,6,""],[69290,6,""],[69290,0,"    })"],[69289,0,"      "],[69289,6,""],[69289,0,"    Assign[$s$][(dummy data)]\n"],[69289,0,"  "],[69321,0,"      CallI(\"yield\", (\"asdf\", \"Fdsa\"))"],[69342,0,"args: "],[69342,6,""],[69327,0,"// "],[69327,3,""],[69359,0,"[]"],[69360,1,""],[69359,1,""],[69342,1,""],[69356,1,""],[69348,8,""],[69348,0,", \"Fdsa\")"],[69342,0,"("],[69327,5,""],[69327,0,"FnI"],[69327,0,"// "],[68828,0,"\n"],[68828,0,"\n#listi"],[68829,6,""],[68828,1,""],[68827,1,""],[69327,3,""],[69331,1,""],[69330,1,""],[69330,0,"["],[69336,1,""],[69336,0,"]"],[69337,3,""],[69337,0,"["],[69344,9,""],[69344,0,"]"],[69345,1,""],[69327,3,""],[69327,0,"CallI"],[69331,1,""],[69339,6,""],[69339,0,"$$"],[69340,0,"e_i"],[69358,440,""],[69357,1,""],[69158,0,"  For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" C, \"to:\" V_0)$], {\n"],[69243,0,"\n    "],[69244,4,""],[69244,0,"  })"],[69328,0," union V_m"],[69316,1,""],[69316,0,"V_0"],[69423,0,"\n      #"],[69430,1,""],[69430,0,"If(cond: []"],[69440,0,"##"],[69441,1,""],[69440,1,""],[69440,0,"$\"isCriticalVersion\"(P_i)$"],[69464,0,"}"],[69461,0,"{"],[69462,2,""],[69467,0,", {\n        \n        "],[69471,8,""],[69472,8,""],[69472,0,"      })"],[69505,0,"\n      })"],[69472,9,""],[69496,0,"\n"],[69471,1,""],[69477,0,"  "],[69497,1,""],[69497,0,"\n        State[]"],[69512,0,"Conitnue"],[69512,8,""],[69512,0,"Continue"],[69506,5,""],[69506,0,"Call"],[69520,0,"[]"],[69520,2,""],[69510,1,""],[69510,0,"(smallcaps("],[69529,0,"\""],[69521,0,"\""],[69531,1,""],[69531,0,"))"],[69506,4,""],[69506,0,"State"],[69479,4,""],[69479,0,"State"],[69484,1,""],[69484,0,"(smallcaps(\""],[69501,0,"\""],[69502,1,""],[69502,0,")"],[69503,1,""],[69503,0," "],[69509,1,""],[69509,0,"]"],[69484,1,""],[69484,0,"[$"],[69485,1,""],[69485,0,"#"],[69564,0,"\n    \n    "],[69565,4,""],[69570,0,"Call"],[69570,4,""],[69570,0,"Call[S"],[69575,1,""],[69575,0,"setPrepare"],[69575,10,""],[69575,0,"setPrepareVersion]"],[69592,1,""],[69575,17,""],[69575,0,"setPrepare"],[69575,10,""],[69575,0,"S"],[69574,2,""],[69570,4,""],[69570,0,"Call"],[69565,9,""],[69565,0,"    "],[69564,5,""],[69485,1,""],[69485,0,"$"],[69484,2,""],[69484,0,"("],[69509,1,""],[69509,0,"]"],[69503,1,""],[69503,0,"["],[69502,1,""],[69502,0,"]"],[69501,1,""],[69484,12,""],[69484,0,"["],[69479,5,""],[69479,0,"Call"],[69506,5,""],[69506,0,"Call"],[69506,4,""],[69506,0,"State"],[69479,4,""],[69479,0,"State"],[69484,1,""],[69484,0,"(smallcaps(\""],[69501,0,"\""],[69502,1,""],[69502,0,")"],[69503,1,""],[69503,0," "],[69509,1,""],[69509,0,"]"],[69484,1,""],[69484,0,"[$"],[69485,1,""],[69485,0,"#"],[69564,0,"\n    "],[69565,4,""],[69565,0,"\n    Call"],[69570,4,""],[69570,0,"Call[S"],[69575,1,""],[69575,0,"setPrepare"],[69575,10,""],[69575,0,"setPrepareVersion][asdf]"],[69570,4,""],[69570,0,"FnI"],[69572,1,""],[69592,4,""],[69592,0,"()"],[69593,1,""],[69592,1,""],[69592,0,"asdf"],[69592,4,""],[69592,0,"#"],[69592,1,""],[69592,0,"$s$, $P_i$"],[69603,0,"\n    Assign[#"],[69615,1,""],[69615,0,"$$"],[69616,0,"m"],[69618,0,"][FnI[asdf][asdf]]"],[69620,0,"$"],[69620,1,""],[69619,1,""],[69619,0," "],[69619,1,""],[69614,0,"("],[69620,0,", "],[69637,1,""],[69637,0,")"],[69626,4,""],[69626,0,"prepare"],[69635,4,""],[69635,0,"$i$, $e$"],[69642,0,"_i"],[69647,0,"\n    "],[69648,4,""],[69648,0,"\nState[#smallcaps(\"yield\") $e_i$]"],[69649,0,"    "],[69680,3,""],[69680,0,"o'"],[69647,1,""],[69679,1,""],[69679,0,"e_i"],[69617,1,""],[69617,0,"e_i'"],[69617,3,""],[69617,0,")"],[69617,1,""],[69617,0,"e_i)"],[69617,0,"("],[69621,1,""],[69617,1,""],[69620,1,""],[69618,0,"'"],[69685,1,""],[69683,0,"'"],[69650,0,"\n    Assign([$e'_i$], FnI[prepare][$i$, $e_i$])"],[69617,4,""],[69617,0,"m"],[69635,0,"$s$, "],[69687,0,"$s4"],[69689,1,""],[69689,0,"$, "],[69693,8,""],[69693,0,"m"],[69678,7,""],[69678,0,"effect"],[69674,21,""],[69706,6,""],[69706,0,"FnI[effect][$s$, $m$]"],[69653,22,""],[69652,1,""],[69683,0,"$"],[69683,1,""],[69683,0,"#"],[69243,0,"\n        Fn[setPrepareVersion][$s$, $P_i$]\n    Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n    State[#smallcaps(\"yield\") #FnI[effect][$s$, $m$]]"],[69244,8,""],[69244,0,"      "],[69244,6,""],[69244,0,"    "],[69335,27,""],[69356,1,""],[69337,1,""],[69330,0,"\n    Cm"],[69335,2,""],[69335,0,"Cmt[]"],[69339,0,"Transformed effect"],[69351,6,""],[69351,0,"operation is discarded"],[69331,43,""],[69330,1,""],[69243,0,"\n    Cmt"],[69248,3,""],[69248,0,"Cmt[]"],[69252,0,"As above"],[69248,0,"// "],[69152,4,""],[69151,1,""],[69150,1,""],[69150,0,"]\n"],[69836,2,""],[69836,0,"    "],[69782,4,""],[69782,0,"      "],[69733,4,""],[69733,0,"      "],[69695,4,""],[69695,0,"      "],[69687,4,""],[69687,0,"      "],[69678,6,""],[69678,0,"        "],[69641,8,""],[69641,0,"          "],[69600,8,""],[69600,0,"          "],[69553,6,""],[69553,0,"        "],[69521,6,""],[69521,0,"        "],[69476,4,""],[69476,0,"      "],[69378,2,""],[69378,0,"    "],[69373,2,""],[69373,0,"    "],[69348,4,""],[69348,0,"      "],[69299,4,""],[69299,0,"      "],[69261,4,""],[69261,0,"      "],[69240,4,""],[69240,0,"      "],[69154,2,""],[69154,0,"    "],[69876,0,"\n      })"],[69877,6,""],[69877,0,"    "],[69877,4,""],[69877,0,"  "],[69152,1,""],[69884,121,""],[70608,0,"// "],[70606,0,"// "],[70602,0,"// "],[70570,0,"// "],[70519,0,"// "],[70484,0,"// "],[70453,0,"// "],[70446,0,"// "],[70438,0,"// "],[70421,0,"// "],[70404,0,"// "],[70369,0,"// "],[70348,0,"// "],[70317,0,"// "],[70247,0,"// "],[70162,0,"// "],[70117,0,"// "],[70100,0,"// "],[70069,0,"// "],[69992,0,"// "],[69989,0,"// "],[69950,0,"// "],[69934,0,"// "],[69890,0,"// "],[69886,0,"// "],[68812,10,""],[69874,0,"\nThis code matches"],[69875,17,""],[69875,0,"An implementation of the above function in "],[69875,43,""],[69875,0,"We provide an implement"],[69875,23,""],[69874,1,""],[69873,1,""],[71631,0,"\n\n#figure(\n  charts.ff_chart,\n  caption: [\n    A comparison of the eg-walker state size while processing the _\"friendsforever\"_ data set, with and without state clearing. When the state is never cleared, the state grows linearly throughout the test. When the state is cleared at critical versions, it stays very small throughout this test.\n\n    // Smaller is better.\n  ],\n  kind: image,\n)"],[71263,8,""],[71263,0,"spee"],[71263,4,""],[71263,0,"speed_ff"],[71286,297,""],[71244,91,""],[71637,723,""],[71637,0,"?"],[71637,1,""],[71637,0,"ODO: Would it be worth making a line graph out of this?\n#figure(\n  table(\n    columns: (auto, auto, auto, auto),\n    [*Dataset*], [*Before (ms)*], [*After (ms)*], [*Speedup*],\n    [automerge-perf], [3.94], [0.26], [*15x*],\n    [seph-blog1], [7.17], [0.413], [*16.6x*],\n    [friendsforever], [3.50], [2.82], [*XXX*],\n    [ETC FILL ME OUT!]\n  ),\n  // canvas(length: 1cm, {\n\n  // }),\n  caption: [\n    Performance comparison of _transformPartial_ with and without clearing and fast forward optimisations. All other optimisations listed in this paper are enabled. The largest gains are in the purely linear tests (automerge-perf and seph-blog1) as, for a purely linear event graph, no state needs to be constructed at all.\n  ]\n)"],[72359,0,"// "],[72355,0,"// "],[72031,0,"// "],[72018,0,"// "],[72009,0,"// "],[71981,0,"// "],[71976,0,"// "],[71953,0,"// "],[71906,0,"// "],[71860,0,"// "],[71813,0,"// "],[71750,0,"// "],[71711,0,"// "],[71702,0,"// "],[71693,0,"// "],[71633,0,"// "],[71632,0,"\n\n#figure(\n  charts.speed_ff,\n  caption: [\n\n    // Smaller is better.\n  ],\n  kind: image,\n)\n\n"],[71675,0,"    Performance of DT "],[71696,1,""],[71695,1,""],[71694,1,""],[71694,0,"dt_egwal"],[71701,1,""],[71700,1,""],[71699,1,""],[71698,1,""],[71697,1,""],[71696,1,""],[71696,0,"-ega"],[71699,1,""],[71699,0,"walker algorithm with and without "],[71675,58,""],[71675,0,"    Performance of dt-egwalker algorithm with and without"],[67664,4,""],[67725,3,""],[67725,0,"is"],[67717,1,""],[67717,0," version"],[67756,0," t"],[67757,1,""],[67756,1,""],[67756,0," the set of visited events "],[67782,1,""],[67765,0,"$G$ "],[67771,0," all"],[67765,11,""],[67780,0,"("],[67806,0,"()"],[67807,1,""],[67806,1,""],[67806,0,")"],[68285,0,"If the event also"],[68292,10,""],[68292,0,"version after the event ("],[68316,1,""],[68300,0,"${i$"],[68303,1,""],[68302,1,""],[68301,1,""],[68300,1,""],[68315,0," is also a critical version,"],[68344,1,""],[68344,0,"t"],[68368,0," entirely"],[68305,0,"_"],[68300,0,"_"],[68346,70,""],[68346,0,"the transform function has no can pass the even"],[68369,24,""],[68369,0,"will not modify the event at all"],[67824,30,""],[67824,0,"b"],[67898,4,""],[67898,0,"must"],[67927,0," Because causally later events are unaffa"],[67967,1,""],[67967,0,"ected by the state"],[67980,5,""],[67980,0,"state object,"],[67993,28,""],[68047,12,""],[68058,3,""],[68058,0,"We reset the"],[68076,10,""],[68076,0," "],[68102,177,""],[68102,0,"\n\n"],[67544,0,"2 mo"],[67547,1,""],[67546,1,""],[67556,2,""],[67556,0,"we can"],[68109,0,"\n"],[68110,3,""],[68110,0,"Further,"],[68118,2,""],[68118,0," t"],[68119,1,""],[68119,0,"i"],[68126,0,"docujme"],[68132,1,""],[68131,1,""],[68130,1,""],[68130,0,"ment "],[68109,0,"\n"],[68109,0,"\nAlso, any time a "],[68126,1,""],[68126,0,"n event "],[68125,9,""],[68125,0,"the cau"],[68131,1,""],[68130,1,""],[68129,1,""],[68129,0,"state contains no "],[68135,0,"does not "],[68155,1,""],[68154,1,""],[68153,1,""],[68152,1,""],[68151,1,""],[68151,0," any concurrent events, the transform function will have no f"],[68211,1,""],[68211,0,"effect on the event itself. The "],[68242,1,""],[68241,1,""],[68240,1,""],[68239,1,""],[68239,0,"In these cases, the event already entirely describes its behaviour."],[68239,17,""],[68239,0,"T"],[68289,1,""],[68289,0," at its own parent version - so when the document is at the parent version, no transformation is needed. "],[68393,1,""],[68393,0," "],[68393,1,""],[68393,0," Combining both of these "],[68404,14,""],[68404,0,"this with "],[68394,20,""],[68394,0,"When both t"],[68404,1,""],[68403,1,""],[68399,4,""],[68399,0,"an event's parent version and "],[68410,0,"version and "],[68437,4,""],[68437,0,"arebo"],[68441,1,""],[68440,1,""],[68440,0," both critical versions, "],[68422,0,"its "],[68110,359,""],[68110,0,"Also, any time the state does not contain any concurrent events, the transform function will have no effect on the event itself. The event already entirely describes its behaviour at its own parent version - so when the document is at the parent version, no transformation is needed. When an event's version and its parent version are both critical versions,"],[68468,276,""],[68468,0," "],[68469,1,""],[68469,0,"t"],[68393,0," On its own, this fact wouldn't help much as we would still need to run the CRDT's prepare vun"],[68461,26,""],[68461,0,"add the corresponding CRDT message to the eg-walker state. However, if"],[68531,8,""],[68531,0," both an"],[68582,5,""],[68605,0," state doesn't matter (it will be cleared anyway). So the"],[68686,6,""],[68686,0,"simply"],[68726,0," directly"],[68736,0,"\n\nThis happens a lot in practice. Most "],[68770,5,""],[68770,0,"Entirely sequential event traces are very common, and even in eve"],[68790,5,""],[68790,0,"editing histi"],[68802,1,""],[68802,0,"ories"],[68807,7,""],[68839,1,""],[68837,2,""],[68837,0,"e"],[68837,1,""],[68837,0,"editing histories which have s"],[68861,6,""],[68861,0,"contain some concurrent edits, most edits are often made entirely se"],[68892,37,""],[68892,0,"large"],[68892,5,""],[68892,0,"entirely sequential, critical events are very common."],[68947,0,"// "],[68735,1,""],[68735,0," "],[68735,1,""],[68735,0,". we do not need to run the CRDT's _prepare_ or _effect_ functions at all."],[68737,1,""],[68737,0,"W"],[69018,0,"\n\nTaken together, these "],[69035,7,""],[69035,0," we call these optimisations \"far"],[69067,1,""],[69067,0,"st foward"],[69075,1,""],[69074,1,""],[69073,1,""],[69072,1,""],[69072,0,"rwarding\"."],[69049,0," two"],[69084,1,""],[69084,0,"_"],[69068,1,""],[69068,0,"_"],[69086,0," It makes a big difference in practice."],[69374,44,""],[69374,0,"The code"],[69378,4,""],[69378,0,"algoritih"],[69386,1,""],[69385,1,""],[69384,1,""],[69383,1,""],[69383,0,"ithm presented above can be modified as follows:"],[68842,0," Many editing histories are"],[68869,9,""],[68869,0," completely"],[68891,34,""],[68891,0," ("],[68892,1,""],[68891,1,""],[68891,0,". F"],[68893,1,""],[68893,0,"()"],[68894,1,""],[68894,0,"Fo"],[68895,1,""],[68894,1,""],[68893,1,""],[68892,1,""],[68891,1,""],[68891,0," (for example this "],[68904,0,","],[68911,0,"document was generated "],[68906,28,""],[68906,0,"the editing trace fo rthis docu"],[68927,10,""],[68927,0,"this document)."],[68942,7,""],[68942,0," E"],[68948,2,""],[68948,0,"when"],[68970,6,""],[69002,53,""],[69002,0,"its very common to have runs o"],[69031,1,""],[69031,0,"of "],[69026,8,""],[69026,0,"large runs of sequential "],[69050,1,""],[69050,0,", critical events. Eg"],[69069,2,""],[69068,1,""],[69068,0," We see this happen in the _node_nodecc_ editing trace "],[69122,1,""],[69122,0," later in this pa"],[69138,1,""],[69137,1,""],[69137,0,"paper."],[69081,7,""],[69081,0,"show up "],[69212,39,""],[71378,0,"// "],[68811,32,""],[68811,0,"This is "],[68818,1,""],[68815,3,""],[68811,4,""],[68811,0,"This happens a lot in practice. "],[68810,0,"\nIn a totally linear event graph, every event is a critical version. In this case, the transformPartial function returns the event graph itself in causal order. No data structure is built, and no additional memory is consumed to build it."],[68811,0,"// "],[69183,0," When the event graph is entirely sequential, the transform function simply returns et"],[69268,1,""],[69267,1,""],[69267,0,"the event graph itself ("],[69290,1,""],[69290,0,"(in "],[69293,1,""],[69292,1,""],[69291,1,""],[69290,1,""],[69289,1,""],[69289,0,"."],[69267,22,""],[69267,0,"a travera"],[69275,1,""],[69275,0,"sal of the event graph"],[69299,6,""],[69299,0,"W"],[69322,0,"onl"],[69324,1,""],[69323,1,""],[69322,1,""],[69299,0,"Even "],[69304,1,""],[69304,0,"w"],[69298,0," No additional memory is consumed."],[72158,0,"// "],[72341,0,"\n"],[72341,0,"\n"],[72730,0," <ff-memory>"],[72342,0,"In @ff-"],[72346,3,""],[72346,0,"ff-memory we c"],[72359,1,""],[72359,0,"see the effect this has on memory size while processing one of our real-world data sets. The "],[72437,15,""],[72437,0,"editing traces. the edit"],[72453,8,""],[72453,0,"The editing trace contains many events"],[72485,6,""],[72485,0,"critical events. With fast forward optimisations enabled, the eg-walker state size stays extremely small."],[72500,0," as the document goes in and out of sync"],[72785,14,""],[72785,0,"fast forward optimisations "],[72811,1,""],[72813,0,"//"],[72814,1,""],[72813,1,""],[72813,0,"//"],[72811,0," enabled"],[72630,0," When it is "],[72631,11,""],[72630,1,""],[73201,0," <speed-ff>"],[73053,0,"\nIn @spee"],[73058,4,""],[73058,0,"speed-ff, "],[73054,0,"The performance "],[73054,16,""],[73068,0,"we can see the ep"],[73084,1,""],[73083,1,""],[73083,0,"performance difference"],[73054,3,""],[73063,0," shows "],[73070,13,""],[73096,0," this optimisation makes in our various test cases. S"],[73148,1,""],[73148,0,"The _giot"],[73156,1,""],[73155,1,""],[73155,0,"t-makefile_ test"],[73167,4,""],[73167,0,"editing trace does not contain any critical events - so t"],[73223,1,""],[73223,0,"performance is unchanged. In comparison , "],[73264,1,""],[73263,1,""],[73262,1,""],[73262,0,", the fully sequential editing traces im"],[73300,0,"can be processed "],[73300,17,""],[73300,0,"are processed 15 and 1.6x "],[73322,0,"6"],[73316,0,"x"],[73328,2,""],[73327,1,""],[73326,1,""],[73316,10,""],[73314,0,"apprixmi"],[73321,1,""],[73320,1,""],[73319,1,""],[73318,1,""],[73318,0,"oximately "],[73330,0,"x faster "],[73338,1,""],[73338,0," as a result."],[111292,0,"#set heading()"],[111305,0,"numbering: \"a\", sup"],[111321,3,""],[111321,0,"supplement: : "],[111334,1,""],[111333,1,""],[111333,0,"\"Appendin"],[111341,1,""],[111340,1,""],[111340,0,"ix\""],[111291,0,"#counter(heading).update(0)"],[111382,0,"\n#set heading(numbering: \"a\", supplement: \"Appendix\")"],[111319,53,""],[111329,0,"\n#counter(heading).update(0)"],[111291,28,""],[111291,0,"// "],[111385,1,""],[111387,1,""],[111358,1,""],[111358,0,"A"],[111291,3,""],[111301,0,"\\"],[111301,1,""],[111355,0,"Appendix "],[111355,9,""],[111384,0,"="],[111384,1,""],[111384,0,"="],[111356,0,":"],[111356,1,""],[111356,0,")"],[111356,1,""],[111355,1,""],[111355,0,"1.a"],[111327,1,""],[111327,0,"1"],[111357,1,""],[111356,1,""],[111355,1,""],[111355,0,"A"],[111384,1,""],[111327,1,""],[111327,0,"0"],[111683,0,"// "],[111664,0,"// "],[111638,0,"// "],[111621,0,"// "],[111596,0,"// "],[111564,0,"// "],[111550,0,"// "],[111531,0,"// "],[111510,0,"// "],[111503,0,"// "],[112049,0,"// "],[112049,3,""],[111710,3,""],[111688,3,""],[111659,3,""],[111639,3,""],[111611,3,""],[111576,3,""],[111559,3,""],[111537,3,""],[111513,3,""],[111503,3,""],[111442,0,"\n"],[111442,1,""],[111442,0,"\n"],[111442,0,"\nIn this "],[111443,8,""],[111443,0,"In this section, we present the generic CR"],[111471,14,""],[111471,0,"a generic event graph s"],[111481,13,""],[111481,0,"replay functio for "],[111499,1,""],[111498,1,""],[111497,1,""],[111496,1,""],[111495,1,""],[111495,0,"n for any CRDT"],[111497,0,"which ma"],[111497,8,""],[111497,0,"which matches the behaviour of "],[111528,4,""],[111536,0,", as per "],[111443,102,""],[111443,0,"In this section, we present a generic replay function which matches the behaviour of any CRDT, as per @crdt"],[111546,4,""],[111546,0,"crdt-equivalence."],[111536,8,""],[111536,0,". See"],[111559,0," fro "],[111563,1,""],[111562,1,""],[111561,1,""],[111561,0,"or details"],[111572,0,"\n\n"],[111573,1,""],[111572,1,""],[111572,0,"\n\nThis algorithm is presented in Haskell."],[111612,0,", becauyse "],[111622,1,""],[111621,1,""],[111620,1,""],[111619,1,""],[111619,0,"se "],[111612,10,""],[111612,0,". Because haskell memoizes function "],[111647,1,""],[111647,0," return values, this method does not "],[111668,16,""],[111668,0,"algorithm "],[111661,17,""],[111648,13,""],[111648,0,"application"],[111639,20,""],[111639,0,"re"],[111640,1,""],[111639,1,""],[111639,0,"the return value of functions by default, the"],[111681,3,""],[111681,0,"performance here is "],[111614,87,""],[111614,0,"In another language, this algorithm would need to actively memoize function return values to prevent expoen"],[111720,1,""],[111719,1,""],[111719,0,"nential behaviour. We "],[111740,1,""],[111739,1,""],[111738,1,""],[111737,1,""],[111736,1,""],[111617,0,"any other"],[111626,7,""],[111626,0,"another"],[111620,6,""],[111617,3,""],[111624,0," "],[111617,8,""],[111617,0,"t"],[111617,1,""],[111617,0,"other programming"],[111643,0,"s"],[111691,0," some"],[111743,10,""],[111743,0,"time complexity. W"],[111760,1,""],[111759,1,""],[111759,0," We a"],[111763,1,""],[111762,1,""],[111761,1,""],[111761,0,"e have also implemented this method, "],[111760,38,""],[111760,0,"In @am"],[111764,2,""],[111764,0,"am-converter we present a "],[111789,1,""],[111789,0,"n equivalent method in Rust"],[111802,6,""],[111802,0,"algorithm"],[111819,0,", specifically wrapping "],[111821,13,""],[111830,0,"Au"],[111831,1,""],[111830,1,""],[111830,0,"sequence"],[111830,8,""],[111821,9,""],[111821,0,"which uses Automerge @autom"],[111843,5,""],[111843,0,"automerge"],[111841,1,""],[111851,0," to replay events"],[111861,7,""],[111861,0," sequence editign "],[111878,1,""],[111877,1,""],[111876,1,""],[111876,0,"ng ee"],[111880,1,""],[111880,0,"vents. The "],[111887,4,""],[111886,1,""],[111886,0," In rh"],[111891,1,""],[111890,1,""],[111889,1,""],[111889,0," "],[111886,4,""],[111821,10,""],[111821,0,"presenting "],[111831,1,""],[111830,1,""],[111829,1,""],[111828,1,""],[111828,0,"ed using"],[111890,0," (though"],[111891,0,"- "],[111893,1,""],[111899,0," the algorithm could easily be adapted to "],[111938,3,""],[111938,0,"for"],[111940,1,""],[111940,0,"r"],[111938,3,""],[111938,0,"to  "],[111941,1,""],[111941,0,"use any CRDT"],[111949,0,"event source and compatible "],[101354,0,"\n\n\n== File size\n\n\n"],[101371,0,"E"],[101371,1,""],[101371,0,"Using "],[101371,6,""],[101371,0,"Storing "],[101371,8,""],[67534,9,""],[67534,0,"We "],[67536,1,""],[67534,2,""],[67534,0,"There are"],[67513,19,""],[67513,0,"fast "],[67513,5,""],[67513,0,"fast forwar"],[67517,7,""],[67513,4,""],[67513,0,"fast "],[67517,1,""],[67517,0,"z"],[67517,1,""],[67513,4,""],[67513,0,"null transformation"],[101371,0,"U"],[101371,1,""],[101371,0,"Storing the"],[101379,3,""],[101379,0,"a pure "],[101379,7,""],[101379,0,"the raw"],[101385,1,""],[101384,1,""],[101383,1,""],[101383,0,"\"raw\" events provides a "],[101383,6,""],[101371,30,""],[101371,0,"The evnts "],[101375,6,""],[101375,0,"raw "],[101375,4,""],[101375,0,"events "],[101375,0,"rwa "],[101385,1,""],[101375,4,""],[101375,0,"raw "],[101371,0,"Storing "],[101379,4,""],[101379,0,"and sending "],[101401,0," also has a "],[101407,6,""],[101407,0,"seems to decrease"],[101407,9,""],[101407,0,"slightly "],[101424,0,"s fiole "],[101431,1,""],[101430,1,""],[101429,1,""],[101428,1,""],[101428,0,"le size in most cases. "],[101450,1,""],[101449,0," compared to storing and sending CRDT messages. The reason is that "],[101516,1,""],[101515,1,""],[101515,0,":\n\n- Editing positions are "],[101520,0,"The file format has "],[101536,4,""],[101536,0,"do"],[101520,18,""],[101520,0,"Events have one fewer n"],[101542,1,""],[101527,37,""],[101527,0,"are sm"],[101520,13,""],[101520,0,"Editing piositio"],[101528,8,""],[101528,0,"positions"],[101520,0,"Intg"],[101523,1,""],[101523,0,"eger "],[101528,1,""],[101528,0,"e"],[101545,0," are "],[101520,30,""],[101520,0,"Editing positions are a single integer."],[101541,0," stored as"],[101568,1,""],[101568,0," - which is smaller than the "],[101593,4,""],[101593,0,"anm "],[101596,1,""],[101595,1,""],[101595,0," (origin"],[101597,6,""],[101597,0,"_ori"],[101597,4,""],[101597,0,"_originLeft_, orin"],[101611,4,""],[101611,0,"originRight_ "],[101623,1,""],[101623,0,")"],[101611,0,"_"],[101625,0," pair for Fugue or ("],[101644,1,""],[101644,0,"(_parent_ , "],[101655,1,""],[101654,1,""],[101653,1,""],[101653,0,", _seq_) for RGA."],[101669,0,"@g"],[101670,1,""],[101670,0,"rga"],[101670,3,""],[101670,0,"Roh2011RGA"],[101643,0," YATA@yata"],[101649,4,""],[101649,0,"Nicolaescu2016YATA or the"],[101670,4,""],[101670,0," "],[101670,1,""],[101670,0," a"],[101690,0," ap"],[101692,1,""],[101691,1,""],[101691,0,"pair"],[101715,0,"\n- Editing positions"],[101569,1,""],[101568,1,""],[101568,0,". Positions take up "],[101570,18,""],[101570,0,"This is"],[101577,25,""],[101577,0," less data"],[101727,0," "],[101710,18,""],[101710,0,"Run-length encoding techniques seem to p"],[101741,9,""],[101741,0,"perform "],[101709,0," Edits tend to be close together in space"],[101709,41,""],[101741,0,"seem to "],[101757,0,"a bit "],[101757,6,""],[101757,0,"better "],[101749,15,""],[101749,0,"pack editing "],[101749,13,""],[101749,0,"work better on editing positions than on "],[101708,82,""],[101708,0,"- Run-length encoding techniques seem to work better on editing positions than on"],[101515,6,""],[101515,0," e"],[101703,82,""],[101703,0,"\n\n"],[101370,0,"\n"],[101370,0,"\nThere are two fi"],[101386,1,""],[101385,1,""],[101385,0,"different ways CRDT"],[101381,0,"at least "],[101409,4,""],[101409,0,"event data can be stored:\n\n- "],[101437,1,""],[101436,1,""],[101436,0,"+ "],[101436,2,""],[101436,0,"+"],[101371,68,""],[101407,9,""],[101407,0,"slightly "],[101407,9,""],[101486,0,", though the difference is not "],[101370,0,"\n"],[101370,0,"\nRaw events are s"],[101386,1,""],[101386,0,"also (usually) slightly smaller on disk"],[101381,11,""],[101381,0," "],[101389,26,""],[101389,0," take up less space "],[101382,0,"also "],[101414,0,"on disk or over the network. The reason is that "],[101371,91,""],[101371,0,"Raw events also usually take up less space on disk or over the network. The reason is that"],[101402,0," slightly"],[101470,168,""],[101471,0,"ev"],[101472,1,""],[101471,1,""],[101488,0," in an event graph"],[101511,6,""],[101511,0,"represented"],[101542,19,""],[101542,0,", while CRDTs typically need multiple fields. For example,"],[101640,5,""],[101639,1,""],[101638,1,""],[101601,0,"Fugue, FugueMax and "],[101620,1,""],[101619,1,""],[101618,1,""],[101617,1,""],[101616,1,""],[101616,0," "],[101606,1,""],[101606,0," and"],[101619,0," use"],[101624,0,"a pair of "],[101675,23,""],[101606,4,""],[101606,0,","],[101616,0," and YATA@Nicolaescu2016YATA"],[101688,12,""],[101688,0,", and "],[101727,14,""],[101694,0,"RGA@Roh2011RGA"],[101708,5,""],[101708,0," stores positions as a"],[101754,5,""],[101753,1,""],[101753,0,"."],[101544,5,""],[101544,0,"wheras"],[101548,0,"e"],[101756,0,"\n\n"],[101371,10,""],[101371,0,"Storing raw events instead of CRDT messages"],[101406,8,""],[101406,0,"messages"],[101371,113,""],[101371,0,"Raw events also usually a"],[101395,1,""],[101395,0,"take up less space t"],[101414,1,""],[101414,0,"on disk and over the network compared to CRDT messages, though the difference is not as dra"],[101498,7,""],[101498,0," so dramatic."],[101818,0,"We "],[101820,1,""],[101819,1,""],[101818,1,""],[101818,0,"The re"],[101823,1,""],[101822,1,""],[101821,1,""],[101821,0,"re are 2 ways event data can be stored:\n\n+ Each event is stored \"as-os"],[101890,1,""],[101889,1,""],[101889,0,"is\", complete with its inserted content (if any)."],[101911,0," ap"],[101913,1,""],[101912,1,""],[101912,0,"parent information, "],[101931,1,""],[101912,0,"data, "],[101918,18,""],[101918,0,"p"],[101918,1,""],[101918,0,"p"],[101918,1,""],[101918,0,"list po"],[101924,1,""],[101923,1,""],[101923,0,"of parent versions and "],[101946,28,""],[101946,0,"inserted text (if any). E"],[101970,1,""],[101969,1,""],[101969,0," On disk, the events can be replayed from "],[101862,149,""],[101862,0,"+ Each event is stored \"as-is\", complete with its data, list of parent versions and inserted text (if any). On disk, the events can be replayed from"],[101967,1,""],[101960,1,""],[101959,1,""],[101959,0,", "],[101960,1,""],[101959,1,""],[101959,0," ("],[101967,0,")"],[101946,22,""],[101946,0,"the inserted text "],[101946,18,""],[101946,0,"for insert events, the inserted text"],[101993,4,""],[102020,0," any point in time to "],[102025,17,""],[102025,0,"snapshot (or from the \"roo"],[102050,1,""],[102049,1,""],[102048,1,""],[102047,1,""],[102047,0,"start of history) to "],[102038,9,""],[102038,0,"i"],[102038,1,""],[102038,0,"from the "],[102068,0,"generate any document state.\n+ Events are "],[102099,11,""],[102099,0,"The file format stores a recent document snapshot and a list of events with inserrt"],[102181,1,""],[102180,1,""],[102180,0,"ted content removed. This allows the "],[102201,16,""],[102107,7,""],[102141,4,""],[102141,0," alongside"],[102168,0,". The"],[102173,5,""],[102173,0," with"],[102169,4,""],[102169,0," Each event"],[102180,32,""],[102180,0," does not i"],[102190,1,""],[102190,0,"store its inserted content. This approach takes up less space on disk - as deleted characters are not stored anywhere. And "],[102265,0,"any "],[102276,11,""],[102276,0," content"],[102265,4,""],[102280,0," is"],[102283,4,""],[102294,15,""],[102294,0,"  "],[102295,1,""],[102295,0,"at all. "],[102231,0," is a tradeoff. It t"],[102250,1,""],[102249,1,""],[102247,2,""],[102097,222,""],[102097,0,"+ The file stores a recent document snapshot alongside a list of events. Each event does not store its inserted content. This approach is a tradeoff.  takes up less space on disk - as deleted content is not stored at all."],[102232,16,""],[102259,0,","],[102260,2,""],[102301,0," And generating the resulting document state is much faster."],[102306,11,""],[102306,0,"loading "],[102306,8,""],[102306,0,"producing "],[102360,0," ("],[102361,1,""],[102360,1,""],[102360,0," However, the downside is that the system cannot "],[102217,0," ("],[102218,1,""],[102217,1,""],[102217,0," (The replay algorithm is indiffi"],[102249,1,""],[102249,0,"erent to the s"],[102262,1,""],[102243,0,"totally "],[102270,0,"content "],[102277,1,""],[102217,60,""],[102409,0,"produce "],[102409,8,""],[102409,0,"load"],[102409,4,""],[102409,0,"generate"],[102409,8,""],[102409,0,"produce any docum"],[102417,9,""],[102417,0,"the a"],[102421,1,""],[102421,0,"an"],[102417,6,""],[102417,0,"any historical document state."],[102409,7,""],[102409,0,"recoin"],[102414,1,""],[102413,1,""],[102413,0,"nstruct"],[101818,42,""],[101818,0,"There are a myriad of ways event data can be stored, but "],[101869,6,""],[101869,0,". In this paper we'll look at 2 approaches:"],[102504,0,"\nBoth of these formats allow the system to merge any changes, that happen "],[102505,73,""],[102505,0,"Both of these formats allow the system to merge any changes, that happen"],[101360,9,""],[101360,0,"Storage size"],[101425,21,""],[101384,5,""],[101374,10,""],[101374,0,"Storing the event graph"],[101374,23,""],[101374,0,"The event graph "],[101389,1,""],[101402,0,"s"],[101437,0," storing "],[101445,1,""],[101450,9,""],[101446,4,""],[101446,0,"the CRDT state (via its "],[101466,4,""],[101466,0,"a list of CRDT messages)."],[101491,43,""],[101798,0,"From a wide "],[101798,12,""],[101798,0,"Taking a wide p"],[101807,6,""],[101807,0,"broad perspa"],[101818,1,""],[101818,0,"ective, "],[101826,1,""],[101826,0,"r"],[101826,1,""],[101826,0,"t"],[101835,0," or co"],[101840,1,""],[101839,1,""],[101838,1,""],[101837,1,""],[101837,0,"f course"],[102582,13,""],[102582,0," that "],[102583,5,""],[102582,1,""],[102582,0," recieved "],[102583,9,""],[102583,0,"received from remote peers. However, only "],[102611,14,""],[102610,1,""],[102575,0,"future "],[102617,0," "],[102617,1,""],[102617,0," (2) trades off "],[102618,3,""],[102618,0,"The second approach"],[102638,11,""],[102638,0,"use "],[102641,1,""],[102641,0,"s less space "],[102638,16,""],[102638,0,"results in smaller file sizes but "],[102668,4,""],[102668,0,"at the es"],[102676,1,""],[102676,0,"xpense of not being able to replay"],[102704,6,""],[102704,0,"generate eraly "],[102704,15,""],[102704,0,"produce early docum"],[102575,7,""],[102575,0,"future "],[102575,7,""],[102571,4,""],[102693,19,""],[102693,0,"reproduce earlier document states.\n\n"],[101751,7,""],[101751,0,"represents "],[101770,1,""],[101762,8,""],[101762,0,"document positions"],[101794,0,"Id"],[101795,1,""],[101795,0,"D"],[101450,0,"equivalent "],[101471,30,""],[101374,0,"We have found "],[101374,14,""],[101374,0,"In our experiments, "],[101381,13,""],[101381,0,"testing "],[101388,1,""],[101388,0,", "],[101390,1,""],[101390,0,"t"],[101559,0," in a more simple format - "],[101586,4,""],[101602,60,""],[101602,0," compared to"],[101673,29,""],[101614,0," (_originLeft_, _originRight_) for"],[101693,20,""],[101743,19,""],[101693,0,"or (_parentID_, _seq_) for "],[101734,41,""],[101736,0,"\n"],[101736,0,"\n"],[102672,0,"\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-all-local>\n"],[102701,15,""],[102701,0,"file"],[102701,4,""],[102701,0,"filesize_full"],[102671,0,"\n\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-all-local>\n"],[102909,18,""],[103148,18,""],[102952,1,""],[102951,1,""],[102950,1,""],[102949,1,""],[102949,0,"smol"],[101737,1,""],[101736,1,""],[101736,0,"\n"],[101736,0,"\nDifferent implementations"],[101747,15,""],[101747,0,"storage solutions "],[101737,0,"Of course, "],[101748,1,""],[101737,11,""],[101737,0,"D"],[101765,0,"vary on a number of factors. O"],[101794,1,""],[101793,1,""],[101737,11,""],[101737,0,"CRDT s"],[101749,0,"f f"],[101751,1,""],[101750,1,""],[101749,1,""],[101749,0," formats"],[101757,10,""],[101737,49,""],[101737,0,"There sis a"],[101747,1,""],[101746,1,""],[101745,1,""],[101744,1,""],[101743,1,""],[101743,0,"is a large range of "],[101737,26,""],[101737,0,"CRDT implmeentations"],[101742,15,""],[101737,5,""],[101737,0,"@crdts-har"],[101737,10,""],[101737,0,"@crdts-har"],[101738,9,""],[101738,0,"crdts-hard-parts"],[101737,17,""],[101736,1,""],[101735,1,""],[101736,0,"\n"],[101736,0,"\nA great deal of work has gone into optimising exissting"],[101783,9,""],[101783,0,"isigin"],[101783,6,""],[101783,0,"existing CRDT algorithms."],[101737,71,""],[101736,1,""],[101735,1,""],[101826,0," on disk. And "],[101836,4,""],[101836,0,"So"],[101837,1,""],[101837,0,"toring"],[101836,7,""],[101836,0,"The concensus "],[101840,10,""],[101836,4,""],[101836,0,"In pro"],[101841,1,""],[101840,1,""],[101839,1,""],[101836,3,""],[101836,0,"Opensource "],[101836,11,""],[101836,0,"Popular implementations seem to be largely using "],[101836,49,""],[101836,0,"Using run-el"],[101847,1,""],[101846,1,""],[101846,0,"length encoding"],[101835,0," "],[101835,1,""],[101842,0,"a com"],[101842,5,""],[101774,10,""],[101803,3,""],[101803,0,"is"],[101805,3,""],[101803,17,""],[101803,0,"can be efficiently stored on disk"],[101836,70,""],[101836,0,". "],[101837,1,""],[101735,0," Compress"],[101736,8,""],[101736,0,"C"],[101736,1,""],[101735,1,""],[101735,0,"\n\nComp"],[101737,4,""],[101737,0,"Some fomr"],[101745,1,""],[101744,1,""],[101744,0,"rm of efifi"],[101754,1,""],[101753,1,""],[101752,1,""],[101752,0,"ficient compression is usually wanted "],[101783,7,""],[101783,0,"desired as raw event traces"],[101794,0,"\""],[101794,17,""],[101794,0,"naive JSON "],[101794,0,"storing event "],[101807,1,""],[101807,0,"s as "],[101812,5,""],[101811,1,""],[101810,1,""],[101809,1,""],[101809,0,"in a n"],[101759,12,""],[101759,0," binary packing"],[101812,4,""],[101812,0,"ina  "],[101816,1,""],[101815,1,""],[101814,1,""],[101814,0," a simple"],[101823,2,""],[101737,92,""],[101736,1,""],[101735,1,""],[101735,0,"\n\nI"],[101737,1,""],[101737,0,"We have compared our "],[101737,21,""],[101737,0,"Our event logs "],[101737,0,"The resulting "],[101737,14,""],[101737,0,"The size of "],[101749,1,""],[101749,0,"o"],[101737,27,""],[101737,0,"We have compared "],[101745,9,""],[101745,0,"implmeented"],[101745,11,""],[101745,0,"implmeente"],[101745,10,""],[101745,0,"implmeen"],[101752,1,""],[101751,1,""],[101750,1,""],[101749,1,""],[101749,0,"emented a "],[101758,1,""],[101758,0,"n event"],[101759,0," efficient"],[101769,1,""],[101769,0," "],[101775,0," log format following th"],[101787,12,""],[101787,0,"in the same style as Yjs and Automerge"],[101811,0,"@yjs"],[101829,0,"@auto"],[101830,4,""],[101830,0,"automerge"],[101808,0,"the "],[101843,0," CRDT libraries. When "],[101860,5,""],[101859,1,""],[101859,0," To do a \"like for like\" comparison, "],[101859,0," In "],[101860,3,""],[101860,0,"O"],[101860,1,""],[101859,1,""],[101737,0,"Our dt "],[101737,7,""],[101737,0,"Our dt library contains "],[101761,22,""],[101761,0,"an"],[101863,0," "],[101863,1,""],[101864,7,""],[101864,0,"A true"],[101898,1,""],[101897,1,""],[101897,0," is tricky because yjs "],[101916,4,""],[101915,1,""],[101915,0,":\n\n- All libraries comp"],[101934,4,""],[101934,0,"use different forms of compression. Dt uses LZ4 compression on the text content only. Automerge GZ"],[102030,2,""],[102030,0,"uses GZIP compression on parts of the colum"],[102072,1,""],[102071,1,""],[102071,0,"i"],[102071,1,""],[102071,0,"umnar format, and"],[102087,1,""],[102086,1,""],[102085,1,""],[102084,1,""],[102083,1,""],[102083,0,". And Yjs uses no compressin"],[102110,1,""],[102110,0,"on at all.\n- "],[102121,2,""],[102121,0,"-"],[101737,0,"For comparison, "],[101753,1,""],[101753,0,"o"],[101753,26,""],[101753,0,"e"],[101753,1,""],[101753,0,"we have implmeented"],[101761,11,""],[101761,0,"implmeme"],[101768,1,""],[101767,1,""],[101766,1,""],[101765,1,""],[101765,0,"emented an"],[101909,0," for the"],[101910,7,""],[101909,1,""],[101909,0," of size "],[101917,1,""],[102142,0," Yjs does not store any deleted content. This is a tradeoff - not storing deleted content results in smaller "],[102243,0,"a "],[102253,0," "],[102253,1,""],[102253,0,"file size ("],[102263,1,""],[102262,1,""],[102262,0," a"],[102263,1,""],[102262,1,""],[102262,0,", faster loading (as the document state does not need to be regenerated) and"],[102335,3,""],[102334,1,""],[102262,0," and"],[102266,1,""],[102281,0," times."],[102290,4,""],[102290,0,"T"],[102340,0,"."],[102342,0," ?Ho"],[102345,1,""],[102344,1,""],[102343,1,""],[102343,0,"However, intermediate docum"],[102352,18,""],[102352,0,"earlier document states cannot be recomputed. Automerge and "],[102398,14,""],[102397,1,""],[102397,0,"\n- Yjs also does not store"],[101875,0," Auto"],[101879,1,""],[101878,1,""],[101877,1,""],[101876,1,""],[101876,0,"(Automerge"],[101877,9,""],[101877,0,"The fil"],[101883,1,""],[101882,1,""],[101881,1,""],[101881,0,"automerge file format is documented"],[101875,41,""],[102423,0," the full causal graph"],[102428,17,""],[102428,0,"parents of each c"],[102444,1,""],[102444,0,"operation."],[102428,0,"causal "],[101390,4,""],[101401,0,"s"],[101402,8,""],[101407,1,""],[101374,17,""],[101374,0,"E"],[101386,0," seem to"],[101374,0,"Our testing indicates "],[101396,1,""],[101396,0,"e"],[101409,8,""],[101409,0,"su"],[101410,1,""],[101409,1,""],[101409,0,"usually "],[101409,8,""],[101408,0," usually"],[101396,0,"thjat"],[101400,1,""],[101399,1,""],[101398,1,""],[101398,0,"at for text documents, "],[101902,0," The automerge file format is documented in detail here: @autom"],[101960,5,""],[101960,0,"automerge-storage."],[102016,0,"file "],[102025,0," between different libraries"],[102599,900,""],[102599,0,"In our testing, we ahve"],[102621,1,""],[102620,1,""],[102619,1,""],[102618,1,""],[102618,0,"have disabled all compress"],[102632,12,""],[102632,0,"compression in all libraries "],[102660,1,""],[102660,0,", and "],[102660,6,""],[102660,0,". We show 2 tests: in the first, "],[102599,94,""],[102599,0,"In our testing, we have disabled compression in all libraries. We show 2 tests: in the first,"],[102755,3,""],[102755,0,"File size using diamon"],[102771,6,""],[102771,0,"DT "],[102755,0,"Resulting "],[102765,1,""],[102765,0,"f"],[102775,9,""],[102755,20,""],[102755,0,"Dis"],[102755,3,""],[102755,0,"File size to store the complete event graph using dt and automerge. "],[102822,1,""],[102822,0," In this test, events "],[102837,7,""],[102837,0,"we store the complete text"],[102850,13,""],[102850,0,"text for the "],[102846,17,""],[102846,0,"all "],[102751,99,""],[102751,0,"    File size to store the complete event graph using dt and automerge. In this test, we store all"],[102849,150,""],[102823,26,""],[102823,0,"The full document content "],[102832,17,""],[102832,0,"event content is stored, allowing the docuen"],[102875,1,""],[102874,1,""],[102874,0,"ment c"],[102879,1,""],[102879,0,"to be reconstructed at any version."],[102995,158,""],[102995,0,"\n    File size to store the c"],[103023,1,""],[103023,0,"event graph using "],[102996,45,""],[102996,0,"    File size to store the event graph using"],[102807,0,","],[102812,0," the equivalent CRDT state using"],[103073,0," dt, and the equivalent CRDT state using Yjs. In h"],[103122,1,""],[103122,0,"this test, only the "],[103133,9,""],[103133,0,"we only store characters which were"],[103147,21,""],[103147,0,"the even"],[103151,4,""],[103133,18,""],[103133,0,"yjs only stores the content of "],[103153,0,"inserted "],[103170,3,""],[103170,0,"for events which wer "],[103190,1,""],[103190,0,"e present"],[103170,29,""],[103170,0,"that was still present"],[103119,15,""],[103119,0,"Y"],[103135,4,""],[103174,0," in the fil"],[103184,1,""],[103184,0,"nal document state. And dt, equivalently, stores the final document"],[103226,0,"includes a copy "],[103242,6,""],[103242,0," o"],[103243,1,""],[103242,1,""],[103242,0,"of"],[103263,0," stat "],[103268,1,""],[103268,0,"e itself."],[102671,6,""],[102671,0," erd"],[102674,1,""],[102673,1,""],[102673,0,"diting scenarios"],[102691,1,""],[102691,0,"I"],[102691,1,""],[102691,0,"i"],[102703,1,""],[102703,0," test,"],[102597,0,"\n- Automerge stores timestamp information"],[102610,0,"also "],[102643,0," for each change."],[102723,0,". All timestamps are "],[102725,19,""],[102725,0,"Automerge timestamps are "],[102725,25,""],[102724,1,""],[102723,1,""],[102723,0,", and timestamps are discarded "],[102753,1,""],[102754,1,""],[102754,0,"\n\n"],[101979,6,""],[101979,0,"We have done our best to do a"],[102076,19,""],[102076,0,". I"],[102078,1,""],[102077,1,""],[102076,1,""],[102076,0,". I"],[102077,2,""],[102076,1,""],[102076,0," is tricky because:"],[102076,0,". This is"],[102084,1,""],[102083,1,""],[102082,1,""],[102305,0," In our b"],[102313,1,""],[102313,0,"tests below we disable all compression./"],[102352,1,""],[102351,0," "],[102351,1,""],[102616,5,""],[102731,0," We have disa"],[102732,12,""],[102732,0,"In our tests were h"],[102750,1,""],[102749,1,""],[102748,1,""],[102747,1,""],[102747,0," have set all time s"],[102766,1,""],[102765,1,""],[102765,0,"stamps to the unix epoch time.\n- Yjs does not store the causal parents of each operation."],[102610,59,""],[102736,0,"\n- Yjs does not store any deleted content. This is a tradeoff - not storing deleted content results in a smaller file size and faster loading times. (The document state does not need to be regenerated.) However, earlier document states cannot be recomputed."],[102353,257,""],[102479,0,"\n- All libraries use different forms of compression. Dt uses LZ4 compression on the text content only. Automerge uses GZIP compression on parts of the columnar format. And Yjs uses no compression at all. In our tests below we disable all compression."],[102103,250,""],[102229,250,""],[102103,0,"- All libraries use different forms of compression. Dt uses LZ4 compression on the text content only. Automerge uses GZIP compression on parts of the columnar format. And Yjs uses no compression at all. In our tests below we disable all compression.\n"],[102364,5,""],[102355,0,"Unlike dt and yjs, "],[102369,1,""],[102369,0,"Y"],[102374,1,""],[102374,0,"a"],[102422,6,""],[102422,0,"event"],[102383,0," also"],[102815,92,""],[102814,1,""],[102813,1,""],[102862,0," we "],[102863,3,""],[102863,0,"ad"],[102864,1,""],[102863,1,""],[102863,0,"dt is compared to automerge. E"],[102892,1,""],[102892,0,"All events are "],[102892,15,""],[102892,0,"The file"],[102896,0,"resulting "],[102910,0," stores "],[102911,7,""],[102911,0,"contains full "],[102920,5,""],[102920,0,"the inserted content ov"],[102942,1,""],[102942,0,"f every"],[102497,0," "],[102497,1,""],[102497,0,"\n- Au"],[102501,1,""],[102500,1,""],[102499,1,""],[102498,1,""],[102497,1,""],[102497,0," Autom"],[102497,6,""],[102813,0,"\n- Automerge and yjs "],[102830,1,""],[102830,0,"Y"],[102834,0,"also store \"transaction"],[102825,32,""],[102825,0," also stores"],[102814,23,""],[102813,1,""],[102497,0," Automerge also stores transaction boundaries"],[102497,45,""],[102076,0,", but this is tricky because every library works slightly differently "],[102023,1,""],[102009,1,""],[102144,0,","],[102144,1,""],[102143,1,""],[102143,0,", stores slightly different data and uses a different binary encoding scheme"],[102219,25,""],[102219,0,". In particular:"],[102239,48,""],[102239,0,"The use of compression differs"],[102298,4,""],[102310,5,""],[102298,0,"stored "],[102476,10,""],[102476,0,"the other tested libraries"],[102486,7,""],[102938,0,"N"],[102938,1,""],[102938,0,"In "],[103352,0," <f"],[103354,1,""],[103354,0,"chart-dt-vs-automerge>"],[103706,0," <chart-dt-vs-automerge>"],[103720,9,""],[103720,0,"yjs"],[102938,3,""],[102946,0,"the resulting filesize in "],[102991,107,""],[102991,0,". In @chart-dt-vs-automerge, we compare "],[102993,38,""],[102993,0,"Figures"],[102993,7,""],[102993,0,"@chart-c"],[103000,1,""],[103000,0,"dt-vs-automerge and @chart-dt-vs-yjs compare our dt librar"],[103049,9,""],[103049,0,"dt library with that of "],[103045,0,"the reuslting "],[103049,10,""],[103049,0,"resulting filesize using "],[103102,0,"automerge and yjs."],[103119,1,""],[103119,0," for 4 of our editing rtace.s"],[103147,1,""],[103146,1,""],[103145,1,""],[103144,1,""],[103143,1,""],[103142,1,""],[103141,1,""],[103141,0,"traces."],[103124,2,""],[103124,0,"some "],[103119,0," respectively"],[103164,0," In @chart-dt-vs-automerge events are "],[103191,11,""],[103191,0,"dt stores "],[103191,0,"our "],[103195,1,""],[103195,0,"D"],[103198,7,""],[103198,0,"librari"],[103204,1,""],[103204,0,"y stores full e"],[103191,28,""],[103165,26,""],[103164,1,""],[103164,0," In @chart-dt-vs-automerge our DT library is configured to store the text of "],[103240,1,""],[103239,1,""],[103238,1,""],[103238,0,"for all events. In @chart-dt-vs-yjs, "],[103274,1,""],[103273,1,""],[103273,0," our library is configured to only store the final document state."],[102964,0," "],[102974,0," different"],[103257,0,"input "],[103257,6,""],[103257,0,"Insert "],[103263,0,"`"],[103257,0,"`"],[103234,0,"match automerge, "],[103240,1,""],[103240,0,"A"],[103255,1,""],[103255,0,"ing"],[103249,9,""],[103249,0,". In this case we store"],[103355,0," match Yjs, and it"],[103384,0,"s"],[103365,8,""],[103365,0,". We"],[103380,1,""],[103367,0,"In this test "],[103380,1,""],[103380,0,"w"],[90403,0,", hereafter DT_"],[90415,0,"_"],[90403,16,""],[90387,0,")DT"],[90389,1,""],[90388,1,""],[90387,1,""],[90387,0,"(DT) "],[90392,4,""],[90392,0,"collaborative editing"],[90387,5,""],[103549,2,""],[103549,0,"DT"],[103842,2,""],[103842,0,"DT"],[103976,2,""],[103976,0,"DT"],[103691,0," The raw document size is the number of characters in the final reconstructed document state (when all events are merged)."],[103784,6,""],[103784,0,"after "],[103811,1,""],[102987,32,""],[102987,0,"with and without dete"],[103004,4,""],[103004,0,"deleted characters, for comparison with Automerge and Yjs respectively"],[103021,1,""],[103021,0," storage"],[103082,0,"\n//"],[103082,0," See "],[102955,132,""],[102955,0,"We show the resulting file size with and without deleted character storage, for comparison with Automerge and Yjs respectively. See @chart-dt-vs-automerge and @chart-dt-vs-yjs."],[103636,9,""],[92191,1,""],[92215,8,""],[92215,0,"in 2"],[92626,70,""],[92539,0,"/ Disk space: How large are editing traces or CRDT documents on disk?\n// "],[92700,0,"\n"],[92700,0,"\nMemory "],[92701,7,""],[92701,0,"Usin"],[92701,4,""],[92701,0,"Event graphs also have reduced memory usage - "],[92724,23,""],[92724,0,"a different memory profile - since"],[92750,8,""],[92750,0,", since evebts"],[92763,1,""],[92762,1,""],[92761,1,""],[92761,0,"nts can be "],[92736,36,""],[92736,0,"RA"],[92737,1,""],[92736,1,""],[92735,1,""],[92735,0," resident memory profile, but the "],[92765,4,""],[92765,0,"we do not evaluate RAM "],[92784,4,""],[92783,1,""],[92783,0," memory usage in this paper."],[92240,9,""],[114349,0,"\n#header"],[114356,1,""],[114355,1,""],[114355,0,"uing"],[114358,1,""],[114357,1,""],[114356,1,""],[114355,1,""],[114355,0,"ing(level: 0, numbering: \"\")"],[114382,0,", "],[114388,8,""],[114386,0,"// "],[114386,5,""],[114386,0,"// ="],[114384,0,"\"Appendix\""],[114366,1,""],[114366,0,"1"],[114369,15,""],[114413,0,"\n#counter(heading).update(0)"],[114413,0,"\n// ="],[114381,5,""],[114408,0,"\n#heading(level: 1, \"Appendix\")"],[114350,31,""],[114377,31,""],[114350,0,"#heading(level: 1, \"Appendix\")\n"],[114408,5,""],[114381,0,"// =\n"],[114413,28,""],[114369,0,"numbering: \"\", "],[114369,15,""],[114350,0,"// "],[114348,0,"#align(center, text(17pt)[\n  *Eg-walker: Text editing on the Event Graph*\n])"],[114378,42,""],[114378,0,"Appendix"],[114355,6,""],[114355,0,"left"],[114483,0,"."],[114347,0,"\n// TODO: Use a different font for this!"],[116813,0,"\n"],[116813,0,"\n= Bebn"],[116819,1,""],[116818,1,""],[116818,0,"nchmark Setup\n\nAll jbench"],[116837,6,""],[116837,0,"vbe"],[116839,1,""],[116838,1,""],[116837,1,""],[116837,0," "],[116837,1,""],[116837,0,"benchmarks were run on the following "],[116860,14,""],[116860,0,"a Ryzen 7950x CPU "],[116877,1,""],[116877,0," "],[116877,1,""],[116877,0," running linux "],[116886,6,""],[116886,0,"Linux Mint"],[116892,4,""],[116892,0,"6.2.0-38"],[116899,1,""],[116899,0,"9. ?R"],[116903,1,""],[116902,1,""],[116902,0,"Rust code (Automerge, Diamond "],[116924,8,""],[116924,0,"DT, DT-=c"],[116932,1,""],[116931,1,""],[116931,0,"c"],[116931,1,""],[116931,0,"CRDT, Cola) "],[116907,36,""],[116907,0,"projects were"],[116907,13,""],[116907,0,"code w"],[116907,6,""],[116907,0,"was"],[116907,0,"code "],[116915,0," compiled with rustc"],[116930,5,""],[116930,0,"~"],[116930,1,""],[116930,0,"rustc`"],[116930,0,"`"],[116936,0,"-1.5"],[116939,1,""],[116939,0,"74.1"],[116944,0," and run on a single "],[116964,1,""],[116964,0,", pinned core (for consistency). All "],[116997,4,""],[116996,1,""],[116996,0," N"],[116997,1,""],[116997,0,"Javascript was run using nodejs "],[117022,7,""],[117022,0,"`nodejs-"],[117029,1,""],[117029,0,"` "],[116936,1,""],[116936,0," v"],[117030,0," v21.5.0"],[117013,4,""],[117013,0,"w"],[117013,1,""],[117013,0,"run "],[117017,5,""],[117017,0,"with"],[117038,1,""],[117038,0,". All tests "],[117044,6,""],[117044,0,"b"],[117044,1,""],[117044,0,"performance based "],[117044,18,""],[117044,0,"time baseed "],[117055,1,""],[117054,1,""],[117054,0,"d"],[117054,1,""],[117053,1,""],[117053,0,"d tests e"],[117061,1,""],[117061,0,"were run for 100"],[117074,0,"at least "],[117086,0," sa"],[117087,2,""],[117087,0,"iterations and "],[117097,5,""],[117097,0,". The "],[117099,4,""],[117098,1,""],[117098,0," "],[117098,1,""],[117097,1,""],[117097,0," and had less that "],[117115,1,""],[117114,1,""],[117114,0,"n 5% inter-run variance."],[117097,41,""],[117097,0,". "],[117098,1,""],[117098,0," "],[117098,1,""],[117066,16,""],[117066,0,"based on the mean of at least"],[117100,0,"test "],[117116,0," The version of "],[117117,15,""],[117117,0,"All benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n  table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    [*Dataset*], [*Type*], [*\\# Events (k)*], [*Concurrency*], [*EG RLE count*], [*\\# Agents*],\n  )"],[117434,2,""],[117338,4,""],[117338,0,"  "],[117281,4,""],[117281,0,"  "],[117230,4,""],[117230,0,"  "],[117221,2,""],[117221,0,"#"],[117337,7,""],[117337,0,"Library"],[117350,4,""],[117350,0,"Version / Git Hash"],[117371,69,""],[117371,0,"\n  [dt], [`7adf4bafeccb4`],"],[117251,24,""],[117351,2,""],[117351,0,"Diamond Types (DT / DT-c"],[117374,1,""],[117374,0,"CRDT)"],[117400,0,"\n  [Yjs], [v13.6.10],"],[117411,1,""],[117411,0,"v "],[117264,6,""],[117264,0,"left"],[117270,6,""],[117270,0,"left"],[117270,4,""],[117270,0,"right"],[117381,0,"Git "],[117381,4,""],[117381,0,"SHA "],[117381,4,""],[117419,0,"\n  [Automerge] "],[117433,1,""],[117433,0,", [v 0-"],[117439,1,""],[117438,1,""],[117438,0,"0.5.5],"],[117251,0,", auto"],[117326,0," [Language],"],[117336,0,"*"],[117328,0,"*"],[117399,0,"[Rust], "],[117435,0,"[Rust], "],[117436,4,""],[117436,0,"Javascript"],[117477,0,"[Rust], "],[117276,5,""],[117276,0,"left"],[117494,0,"\n  [JSON-Joy], [Javascript], [`38392b30228abc42`],"],[117420,1,""],[117536,4,""],[117494,0,"  [JSON-Joy], [Javascript], [`38392b30228a`],\n"],[117543,8,""],[117543,0,"Cola"],[117551,10,""],[117551,0,"Rust"],[117559,14,""],[117559,0,"v 0.1.1"],[117493,0,"\n  [Yjs], [Javascript], [v 13.6.10],"],[117424,36,""],[117055,5,""],[117055,0,"measurements"],[117068,17,""],[117068,0,"are based on the"],[116945,0," with `-C target-cpu=native`."],[116946,0,"and compiled in release mode "],[117003,0," Code is"],[117011,4,""],[117040,18,""],[117040,0," (for consistency)"],[117041,1,""],[117056,1,""],[116901,1,""],[116901,0,"\n\n"],[117058,1,""],[117058,0,"\n\n"],[117101,1,""],[117101,0,"\n\n"],[117058,0," Rust tests all had a "],[117058,22,""],[117079,4,""],[117079,0,"using"],[106228,20,""],[106256,3,""],[106255,1,""],[106255,0,","],[106276,0," and the Invisible College"],[106303,0," None of this would have been possible without the endless conversations"],[106354,0,"finan"],[106354,5,""],[106350,4,""],[106350,0,"financial support and the "],[106397,0," "],[106397,1,""],[106372,4,""],[106372,0,"the "],[106397,0," we have had about collaborative editing."],[106405,4,""],[106405,0," shared"],[106349,0," "],[106349,1,""],[106349,0," you"],[106352,1,""],[106351,1,""],[106350,1,""],[106349,1,""],[104018,0," The insert length is the number of bytes in in"],[104060,5,""],[104060,0,"that inserted"],[103937,10,""],[103937,0,"bytes"],[104055,13,""],[104055,0,"con"],[104057,1,""],[104056,1,""],[104055,1,""],[104055,0,"of inser"],[104055,8,""],[104039,0,"total "],[104061,0,"of inserted text. The difference between inserted length and filesize"],[104078,52,""],[104039,0,"aggregate "],[104087,0," in the env"],[104097,1,""],[104096,1,""],[104096,0,"ve"],[104091,7,""],[104091,0,"all events"],[117552,0,", auto"],[117553,5,""],[117552,1,""],[117865,0,"\n\nCola "],[117867,5,""],[117867,0,"The \"nocu"],[117867,9,""],[117867,0,"Cola with cursor optimi"],[117867,23,""],[117867,0,"Cola with cursor optimisation removed is available at #link(https://github.com/josephg/cola-nocursors/, https://github.com/josephg/cola-nocursors/)"],[118013,0,"\""],[117971,0,"\""],[118014,1,""],[117971,1,""],[117969,0,"\""],[117927,0,"\""],[117970,1,""],[117927,1,""],[118013,1,""],[117971,42,""],[117970,1,""],[117969,1,""],[117969,0,", "],[117927,0,"dest, "],[117932,1,""],[117931,1,""],[117930,1,""],[117930,0,"t: "],[117932,1,""],[117931,1,""],[117930,1,""],[117929,1,""],[117928,1,""],[117927,1,""],[117970,1,""],[117969,1,""],[117969,0,")."],[117921,0,"//"],[117920,0," https://github.com/josephg/cola-nocursors/`"],[117921,0,"`"],[117965,0,"."],[103709,0,"\n    Relative file size storing the event graph using DT and Automerge, com"],[103783,1,""],[103782,1,""],[103781,1,""],[103780,1,""],[103779,1,""],[103779,0,". "],[103780,1,""],[103780,0," In each of"],[103781,10,""],[103710,71,""],[103710,0,"    Relative file size storing the event graph using DT and Automerge."],[103785,0,"// "],[103780,0," The full event content is stored"],[103781,32,""],[103781,0,"Events are stored in "],[103781,0,"All "],[103785,1,""],[103785,0,"e"],[103806,0,"full "],[103810,1,""],[103810,0,", allowing the document to be reconstru"],[103840,9,""],[103840,0,"reconstruct "],[103851,1,""],[103851,0,"ed from any version. "],[103871,1,""],[103871,0," The size i"],[103876,6,""],[103876,0,"filesize is shown here relative to the ins"],[103917,1,""],[103916,1,""],[103915,1,""],[103710,205,""],[103710,0,"    Relative file size storing the event graph using DT and Automerge. All events are stored in full, allowing the document to be reconstructed from any version. The filesize is shown here relative to the"],[104420,0,"// "],[104415,0,"\n    File size "],[104420,10,""],[104420,0,"Relative file size of "],[104439,3,""],[104439,0,"storing the event graph in DT and Yjs, compared to the size of the final do"],[104506,8,""],[104506,0,"resulting document. Both "],[104526,5,""],[104526,0,"Yj"],[104527,1,""],[104526,1,""],[104525,1,""],[104525,0," Yjs only stores inserted content that was still present in the final document state. And DT, equivalently, includes a copy of the final document state itself."],[104611,22,""],[104611,0,"DT is configured to "],[104525,157,""],[104525,0," "],[104525,1,""],[104524,1,""],[104524,0," after all changes have been applied."],[104525,36,""],[104524,1,""],[104524,0,". 1.0 on this graph would indicate the "],[104525,38,""],[104516,0,"(stored) "],[104533,0," when all "],[104539,4,""],[104539,0,"the "],[104539,4,""],[104539,0,"all changes have been merged"],[104568,0," DT has been configured to only store the fuin"],[104613,1,""],[104612,1,""],[104611,1,""],[104611,0,"inal document snapshot. Yjs "],[104568,0," Yjs only stores inserts which have not been deleted in the resulting document, and"],[104654,0," is (equivae"],[104665,1,""],[104665,0,"lently) configured"],[104683,20,""],[104683,0," here"],[104683,5,""],[104726,5,""],[104725,1,""],[104725,0," "],[104725,1,""],[104687,5,""],[104720,0," but no "],[104727,1,""],[104727,0," inserted content."],[104736,0," item"],[104737,4,""],[104737,0,"event"],[104725,3,""],[104725,0,"the content for "],[104755,0,"s is elided"],[104766,8,""],[104646,5,""],[104646,0,"."],[104733,5,""],[104732,1,""],[104731,1,""],[104731,0,"t. I"],[104733,2,""],[104731,2,""],[104731,0,"t for i"],[104716,0,"."],[104718,5,""],[104718,0,"T"],[104730,3,""],[104730,0,"of"],[103769,0," "],[103769,1,""],[103769,0," the CRDT sta"],[103769,13,""],[103745,11,""],[103745,0,"document"],[103911,0," size of the inserted content. "],[103941,1,""],[103912,0,"total "],[103925,4,""],[103925,0," all"],[103946,0," in the event graph"],[103966,0," (1.0 indicates the "],[103966,20,""],[103966,0," (1.0 indicates the "],[103966,20,""],[103965,1,""],[103965,0," - which is the minimum the"],[103991,1,""],[103990,1,""],[103989,1,""],[103981,8,""],[103981,0,"lower bound on "],[103981,15,""],[103981,0,"lowest possible bound on file size."],[103977,39,""],[103977,0,"a lower bound,"],[103891,5,""],[103985,1,""],[103985,0,"."],[103969,5,""],[103969,0,"forms a "],[104758,0,"o"],[104758,1,""],[104432,1,""],[104432,0,"\n"],[118147,0,"block("],[118501,0,")"],[118501,1,""],[118147,6,""],[51565,0,"\nfkgsjdflgjf"],[51566,11,""],[51565,1,""],[51728,0,"*"],[51720,0,"*"],[51729,1,""],[51720,1,""],[50967,506,""],[50967,0,"messages"],[50242,0,"// "],[50242,3,""],[50242,0,"// "],[50242,3,""],[95503,0,"\n    "],[95504,4,""],[95504,0,"    "],[95503,5,""],[4003,0,"\n"],[4003,0,"\n\n#figure(\n  fletcher.diagram(\n    // cell-size: 1mm,\n    spacing: (8mm, 8mm),\n    // node-stroke: black + 0.5pt,\n    node-stroke: 0.5pt,\n    // node-shape: rectangular,\n    // debug: 1,\n    // node-fill: blue.lighten(90%),\n  {\n    let (a, b, c, d) = ((0, 0), (-1, -1), (1, -1), (0, -2))\n    node(a, $A$)\n    node(b, $B$)\n    node(c, $C$)\n    node(d, $D$)\n    edge(a, b, bend: -10deg, \"->\")\n    edge(a, c, bend: 10deg, \"->\")\n    edge(b, d, bend: -10deg, \"->\")\n    edge(c, d, bend: 10deg, \"->\")\n  }),\n  caption: [Example event graph]\n) <eg-simple>"],[4538,11,""],[4537,1,""],[4467,0,"// "],[4432,0,"// "],[4398,0,"// "],[4363,0,"// "],[4346,0,"// "],[4329,0,"// "],[4312,0,"// "],[4295,0,"// "],[4235,0,"// "],[4230,0,"\n    \n    "],[4231,4,""],[4232,4,""],[4231,0,"    let (evts, crdt, xf) = (0,0"],[4258,0,"("],[4263,0,"), (1, 0, "],[4272,1,""],[4271,1,""],[4271,0,"), (2, 0))\n    node(evts, []"],[4298,0,"Events]"],[4304,1,""],[4305,0,")"],[4282,0,"    node(evts, [Events])\n"],[4316,4,""],[4316,0,"crdts"],[4320,1,""],[4323,6,""],[4323,0,"CRDT Mess"],[4331,1,""],[4330,1,""],[4329,1,""],[4329,0,"sgs"],[4331,1,""],[4330,1,""],[4329,1,""],[4329,0,"essages"],[4298,0,"Orig "],[4312,0,"    node(crdt, [CRDT Messages])\n"],[4353,4,""],[4353,0,"xf"],[4358,13,""],[4358,0,"XF Operations"],[4373,0,"\n    edge(evts, cf"],[4390,1,""],[4390,0,"rdt)"],[4374,0,"    edge(evts, crdt)\n"],[4404,6,""],[4408,0,", xf"],[4393,0,", \"->\""],[4396,1,""],[4396,0,"="],[4396,1,""],[4396,0,"-"],[4396,1,""],[4396,0,"--"],[4397,1,""],[4418,0,", \"->\""],[4425,0,"\n    render()"],[4430,8,""],[4428,2,""],[4426,2,""],[4425,1,""],[4226,0,"\n    render: (grid, nodes, edges, options) => {\n      \n      "],[4274,6,""],[4275,6,""],[4275,0,"    },"],[4274,0,"      cetx"],[4283,1,""],[4283,0,"z.canvas({\n        \n        "],[4294,8,""],[4295,8,""],[4295,0,"      })"],[293,0,"\n@"],[294,1,""],[294,0,"#improt "],[301,1,""],[300,1,""],[299,1,""],[298,1,""],[298,0,"port"],[301,1,""],[300,1,""],[299,1,""],[298,1,""],[298,0,"ort \"p"],[303,1,""],[303,0,"@preview/cetx"],[315,1,""],[315,0,"z"],[302,14,""],[302,0,"\"@preview/cetz:0.1.2\": ce"],[326,1,""],[325,1,""],[324,1,""],[323,1,""],[4324,0,"        fletcher.draw-diagram(grid, edges, "],[4360,0,"nodes, "],[4374,0,"options)"],[110,0,", dr"],[112,2,""],[111,1,""],[110,1,""],[110,0,"\n#import \"@preview/fletcher:0.2.0\" as fletcher: node, edge"],[53,0,"// "],[147,24,""],[147,0,": *"],[4422,0,"\n        [asdf]"],[4431,6,""],[4431,0,"\n        "],[4423,8,""],[4432,0,"let n1 = fletcher."],[4432,0,"// "],[4453,0,"\n        cetz.rect"],[4467,4,""],[4467,0,"draw.rect((0,0), (1, 10"],[4489,1,""],[4489,0,"))"],[4432,3,""],[4450,0,"find-o"],[4455,1,""],[4455,0,"\n        "],[4462,2,""],[4460,2,""],[4458,2,""],[4456,2,""],[4455,1,""],[4450,5,""],[4450,0,"find-node-at()"],[4463,0,"nodes, (0, 0"],[4475,1,""],[4475,0,"))"],[4501,5,""],[4501,0,"n1"],[4424,0,"        let n1 = fletcher.find-node-at(nodes, (0, 0))\n"],[4491,1,""],[4491,0,"2"],[4525,1,""],[4525,0,"2"],[4559,6,""],[4559,0,"n2"],[4477,0,"\n        let p "],[4491,1,""],[4491,0,"1 = fletcher.get-no"],[4504,6,""],[4504,0,"get-node-anchor()"],[4520,0,"n1, 90deg"],[4478,0,"        let p1 = fletcher.get-node-anchor(n1, 90deg)\n"],[4583,54,""],[4531,0,"        let n2 = fletcher.find-node-at(nodes, (2, 0))\n"],[4598,1,""],[4598,0,"2"],[4628,1,""],[4628,0,"2"],[4661,6,""],[4661,0,"p1, p2"],[4631,0,"-"],[4638,0,"\n        fletcher.get"],[4639,20,""],[4638,1,""],[4524,2,""],[4524,0,"135"],[4524,3,""],[4524,0,"90"],[4423,0,"\nfletcher.compute-grid()"],[4433,14,""],[4432,1,""],[4432,0,".compute-node-positions()"],[143,1,""],[143,0,"3"],[143,1,""],[143,0,"2"],[143,1,""],[143,0,"3"],[149,1,""],[148,1,""],[147,1,""],[147,0," as fletcher: node, edge, f"],[173,1,""],[172,1,""],[171,1,""],[171,0,", *"],[173,1,""],[172,1,""],[171,1,""],[4445,0,"// "],[4444,0,"\n"],[4444,0,"\n        fletcher.comp"],[4462,4,""],[4462,0,"compute-grid()"],[4475,0,"grid, options"],[4489,0,".bounding-size"],[4444,0,"\nc"],[4445,1,""],[4445,0,"        cetz.draw.tex"],[4463,3,""],[4462,1,""],[4462,0,".content()"],[4471,0,"\"asdf\""],[4471,0,"(0, 0), "],[4453,0,"// "],[4444,0,"\n"],[4444,1,""],[4453,3,""],[4473,0,"0"],[4473,1,""],[4472,1,""],[4472,0,"10"],[4476,1,""],[4476,0,"10"],[4519,4,""],[4519,0,"bides"],[4523,1,""],[4522,1,""],[4521,1,""],[4520,1,""],[4519,1,""],[4519,0,"nodes"],[4453,0,"// "],[4500,0,"// "],[4453,3,""],[4472,2,""],[4472,0,"0"],[4476,1,""],[4475,1,""],[4475,0,"0"],[4495,3,""],[4495,0,"// "],[4757,0,"// "],[4703,0,"// "],[4650,0,"// "],[4596,0,"// "],[4453,0,"// "],[4826,0,"// "],[4983,0,", stroke: 1.1pt"],[4881,0,"ed, "],[4904,0,"(-1, 1), "],[4935,0,"\n    node(ed, []"],[4950,0,"(Editor)"],[4959,0,")"],[4959,0,", stroke: none"],[5081,0,"\n    edge(ed, evts)"],[5099,1,""],[5099,0,", \"->\")"],[5103,0,"-"],[5100,0," bend: 50deg,"],[5107,1,""],[5107,0,"3"],[4909,1,""],[4909,0,"05."],[4911,1,""],[4910,1,""],[4910,0,".5"],[4911,1,""],[4911,0,"6"],[4911,1,""],[4911,0,"7"],[4911,1,""],[4911,0,"4"],[4911,1,""],[4911,0,"5"],[4951,0,"text(10pt, "],[4972,0,")"],[4957,1,""],[4956,1,""],[4956,0,"5"],[4956,1,""],[4956,0,"6"],[4956,1,""],[4956,0,"7"],[4956,1,""],[4956,0,"10"],[4957,1,""],[4957,0,"7"],[4956,4,""],[4956,0,"100%"],[4956,4,""],[4956,0,"17pt"],[4957,1,""],[4957,0,"4"],[4957,1,""],[4957,0,"3"],[4957,1,""],[4957,0,"1"],[4957,1,""],[4957,0,"0"],[4957,1,""],[4956,1,""],[4956,0,"8"],[4956,1,""],[4956,0,"9"],[4956,1,""],[4956,0,"10"],[5121,1,""],[5121,0,"2"],[5499,19,""],[5499,0,"CRDT based collaborative editing system"],[5499,0,"Data flow in a "],[4872,0,"    let (ed, evts, crdt, xf) = ((-1, 0.5), (0,0), (1, 0), (2, 0))\n    node(ed, text(10pt, [(Editor)]), stroke: none)\n    node(evts, [Orig Events])\n    node(crdt, [CRDT Messages], stroke: 1.1pt)\n    node(xf, [XF Operations])\n    edge(ed, evts, bend: 20deg, \"-->\")\n    edge(evts, crdt, \"->\")\n    edge(crdt, xf, \"->\")\n\n"],[5197,4,""],[5201,0,"2"],[5208,0,"2"],[5213,0,"2"],[5219,11,""],[5222,1,""],[5222,0,"-1"],[5231,1,""],[5231,0,"-1"],[5240,1,""],[5240,0,"1"],[5240,1,""],[5240,0,"-1"],[5245,51,""],[5333,0,"2"],[5288,0,"2"],[5258,0,"2"],[5434,0,"2"],[5407,0,"2"],[5366,0,"2"],[5441,0,"2"],[5415,0,"2"],[5373,0,"2"],[5355,40,""],[5354,1,""],[5249,0,"// "],[5362,0,"// "],[4444,0,"\nf"],[4445,1,""],[4445,0,"        fletc"],[4453,0,"// "],[4453,3,""],[4458,0,"che"],[4460,1,""],[4459,1,""],[4458,1,""],[4457,1,""],[4457,0,"cher.draw.line"],[4467,4,""],[4467,0,"line()"],[4472,0,"("],[4472,1,""],[4472,0,"(0"],[4473,1,""],[4473,0,"100, 100"],[4481,1,""],[4481,0,"), (0,0))"],[4473,3,""],[4473,0,"10"],[4479,1,""],[4453,0,"// "],[4444,0,"\n        fletcher.draw.line(grid."],[4453,0,"// "],[4453,3,""],[4477,0,"sizes.at(0)"],[4472,0,"("],[4489,0,", 0), (grid.sizes.at(0), 0)"],[4510,1,""],[4510,0,"1"],[4516,0,")"],[4489,0,".at(0)"],[4513,0,"at(0),"],[4518,1,""],[4518,0,"."],[4493,1,""],[4493,0,"1"],[4522,1,""],[4522,0,"2"],[4493,1,""],[4493,0,"2"],[4522,1,""],[4522,0,"3"],[4473,0,"0, "],[4498,3,""],[4526,1,""],[4525,1,""],[4524,1,""],[4502,0,"-"],[4502,1,""],[4502,0,"0, "],[4496,1,""],[4496,0,"1"],[4496,1,""],[4496,0,"0"],[4525,1,""],[4525,0,"1"],[4525,1,""],[4525,0,"2"],[4525,1,""],[4525,0,"3"],[4268,3,""],[4442,0,"        fletcher.draw.line((0, grid.sizes.at(0).at(0)), (0, grid.sizes.at(0).at(3)))\n"],[4535,0,"// "],[4470,3,""],[4492,0,", 1"],[4524,0,", 1"],[4526,1,""],[4526,0,"0"],[4494,1,""],[4494,0,"0"],[4499,3,""],[4519,1,""],[4519,0,"1"],[4442,0,"        fletcher.draw.line((grid.sizes.at(0).at(0), 0), (grid.sizes.at(0).at(1), 0))\n"],[4575,1,""],[4575,0,"1"],[4604,1,""],[4604,0,"2"],[4604,1,""],[4604,0,"3"],[4604,1,""],[4604,0,"1"],[4535,0,"// "],[4450,0,"// "],[5702,0,"// "],[5670,0,"// "],[5639,0,"// "],[5591,0,"// "],[5557,0,"// "],[5500,0,"// "],[5474,0,"// "],[5447,0,"// "],[5408,0,"// "],[5378,0,"// "],[5331,0,"// "],[5301,0,"// "],[5250,0,"// "],[5304,3,""],[4529,0,"\n        // fletcher.draw.line((grid.sizes.at(0).at(0), 0), (grid.sizes.at(0).at(1), 0))"],[4450,3,""],[4475,5,""],[4475,0,"cen"],[4475,3,""],[4475,0,"centers"],[4496,1,""],[4496,0,"grid.centers.at(0).at(0)"],[4512,1,""],[4512,0,"1"],[4522,1,""],[4522,0,"\n          "],[4560,0,"\n          "],[4561,10,""],[4561,0,"        "],[4534,0,"grid.centers.at(0).at(0) + "],[4581,1,""],[4581,0,"0"],[4585,1,""],[4585,0,"grid.centers.at(1).at(0)"],[4583,0," / 2"],[4623,0,"// "],[4531,0,"// "],[4450,0,"// "],[4441,0,"\n        l"],[4450,1,""],[4450,0,"fletcher.draw.rec"],[4464,3,""],[4464,0,"rect()"],[4469,0,"\n          \n        "],[4480,0,"(),\n          ()"],[4481,0,"(grid.centers.at(0).at(0), grid.centers.at(1).at(0))"],[4481,53,""],[4480,1,""],[4480,0,"(grid.centers.at(0).at(0), grid.centers.at(1).at(0))"],[4545,1,""],[4544,1,""],[4544,0,"(grid.centers.at(0).at(0), grid.centers.at(1).at(0))"],[4569,0,"grid.sizes.at(0).at(0) / 2"],[4569,26,""],[4569,0," + grid.sizes.at(0).at(0) / 2"],[4624,0," + grid.sizes.at(0).at(0) / 2"],[4641,1,""],[4641,0,"1"],[6150,3,""],[6115,3,""],[6081,3,""],[6030,3,""],[5993,3,""],[5933,3,""],[5904,3,""],[5874,3,""],[5832,3,""],[5799,3,""],[5749,3,""],[5665,3,""],[4545,0,"\n            "],[4612,1,""],[4612,0,"\n            "],[4678,0,"\n            "],[4679,12,""],[4679,0,"          "],[4529,1,""],[4529,0,"2"],[4647,1,""],[4647,0,"2"],[4647,1,""],[4647,0,"0"],[4647,1,""],[4647,0,"2"],[4481,0,"\n            "],[4519,1,""],[4519,0,"\n            "],[4556,0,"\n            "],[4557,12,""],[4557,0,"          "],[4518,0," - grid.sizes.at(0).at(0) / 2"],[4585,0," - "],[4549,39,""],[4549,0,"            grid.centers.at(1).at(2) - grid.sizes.at(1).at(0) / 2,"],[4608,1,""],[4608,0,"2"],[4767,1,""],[4767,0,"2"],[4794,0,"// "],[4782,0,"// "],[4716,0,"// "],[4649,0,"// "],[4637,0,"// "],[4624,0,"// "],[4557,0,"// "],[4490,0,"// "],[4478,0,"// "],[4450,0,"// "],[4821,3,""],[4806,3,""],[4737,3,""],[4667,3,""],[4652,3,""],[4636,3,""],[4566,3,""],[4496,3,""],[4481,3,""],[4450,3,""],[4608,1,""],[4608,0,"1"],[4583,1,""],[4583,0,"1"],[4742,1,""],[4742,0,"1"],[4767,1,""],[4767,0,"1"],[4767,1,""],[4767,0,"2"],[4742,1,""],[4742,0,"2"],[4583,1,""],[4583,0,"2"],[4608,1,""],[4608,0,"2"],[4794,0,"// "],[4782,0,"// "],[4716,0,"// "],[4649,0,"// "],[4637,0,"// "],[4624,0,"// "],[4557,0,"// "],[4490,0,"// "],[4478,0,"// "],[4450,0,"// "],[4441,0,"\n        fletcher.compu"],[4459,5,""],[4459,0,"to"],[4459,2,""],[4459,0,"to-physical-coords()"],[4478,0,"("],[4478,1,""],[4478,0,"grid, (1, 1"],[4489,1,""],[4489,0,"))"],[4450,0,"let x == "],[4458,1,""],[4457,1,""],[4457,0," "],[4493,1,""],[4493,0,"0"],[4496,1,""],[4496,0,"0"],[4442,0,"        let x = fletcher.to-physical-coords(grid, (0, 0))\n"],[4512,1,""],[4512,0,"y"],[4551,1,""],[4551,0,"1"],[4554,1,""],[4554,0,"1"],[4557,0,"\n        fletch"],[4571,1,""],[4570,1,""],[4569,1,""],[4569,0,"tcher.draw.rect(x, y)"],[4493,1,""],[4493,0,"-1"],[4494,1,""],[4493,1,""],[4493,0,"0.5"],[4495,1,""],[4495,0,"1"],[4495,1,""],[4495,0,"2"],[4495,1,""],[4495,0,"3"],[4495,1,""],[4495,0,"4"],[4495,1,""],[4495,0,"5"],[4495,1,""],[4495,0,"6"],[4495,1,""],[4495,0,"7"],[4495,1,""],[4495,0,"8"],[4441,0,"\n"],[4441,0,"\n        let x("],[4455,1,""],[4454,1,""],[4454,0," "],[4454,1,""],[4454,0,"rect(x, y"],[4462,1,""],[4461,1,""],[4460,1,""],[4459,1,""],[4459,0,"topleft, botright) {\n          \n          "],[4480,10,""],[4481,10,""],[4481,0,"        }"],[4478,0,"= "],[4482,0,"          "],[4482,10,""],[4644,0,"\n"],[4493,1,""],[4643,0,"\n        }"],[4483,10,""],[4633,0,"\n"],[4482,1,""],[4600,8,""],[4600,0,"          "],[4542,8,""],[4542,0,"          "],[4482,8,""],[4482,0,"          "],[4638,1,""],[4496,1,""],[4496,0,"a"],[4496,1,""],[4496,0,"a"],[4558,1,""],[4558,0,"b"],[4534,8,""],[4534,0,"topleft"],[4595,6,""],[4595,0,"botright"],[4637,1,""],[4636,1,""],[4635,1,""],[4634,1,""],[4634,0,"a, b"],[4649,0,"\n        \n        "],[4650,8,""],[4659,0,"rect(0,"],[4665,1,""],[4664,1,""],[4664,0,"(0,0), (1,1))"],[4665,1,""],[4665,0,"-1.5"],[4668,1,""],[4667,1,""],[4666,1,""],[4666,0,"2"],[4666,1,""],[4666,0,"1"],[4268,0,"// "],[4268,3,""],[4268,0,"// "],[4662,0,"// "],[6913,0,"// "],[6845,0,"// "],[6839,0,"// "],[6802,0,"// "],[6764,0,"// "],[6727,0,"// "],[6689,0,"// "],[6669,0,"// "],[6649,0,"// "],[6629,0,"// "],[6609,0,"// "],[6546,0,"// "],[6518,0,"// "],[6486,0,"// "],[6455,0,"// "],[6407,0,"// "],[6373,0,"// "],[6316,0,"// "],[6290,0,"// "],[6263,0,"// "],[6224,0,"// "],[6194,0,"// "],[6147,0,"// "],[6117,0,"// "],[6066,0,"// "],[6000,0,"// "],[5996,0,"// "],[5989,0,"// "],[5980,0,"// "],[5946,0,"// "],[5889,0,"// "],[5832,0,"// "],[5776,0,"// "],[5719,0,"// "],[5682,0,"// "],[5618,0,"// "],[5573,0,"// "],[5526,0,"// "],[5438,0,"// "],[5350,0,"// "],[5262,0,"// "],[5249,0,"// "],[5154,0,"// "],[5070,0,"// "],[5057,0,"// "],[5042,0,"// "],[4973,0,"// "],[4903,0,"// "],[4888,0,"// "],[4872,0,"// "],[4802,0,"// "],[4732,0,"// "],[4717,0,"// "],[4686,0,"// "],[4654,0,"// "],[4643,0,"// "],[4608,0,"// "],[4546,0,"// "],[4485,0,"// "],[4445,0,"// "],[4385,0,"// "],[4365,0,"// "],[4318,0,"// "],[4281,0,"// "],[4264,0,"// "],[4232,0,"// "],[4208,0,"// "],[4173,0,"// "],[4148,0,"// "],[4125,0,"// "],[4105,0,"// "],[4096,0,"// "],[7142,0,"\n"],[7142,0,"\n@#"],[7144,1,""],[7143,1,""],[7143,0,"#image(\"diagrams/sync.svg\")"],[7142,0,"\n// #figure("],[7143,3,""],[7152,1,""],[7152,0,"  "],[7180,0,"\n  "],[7181,2,""],[7181,0,")"],[7180,0,"."],[7180,1,""],[7180,0,",\n  captch"],[7189,1,""],[7188,1,""],[7187,1,""],[7187,0,"tion: "],[7182,11,""],[7182,0,"  caption:"],[7184,8,""],[7184,0,"//   caption: [Data flow in a CRDT based collaborative editing system]"],[7184,3,""],[7182,4,""],[7182,0,"  "],[7181,0,"\n  width: 50%,"],[7182,13,""],[7181,1,""],[7179,0,", width: 50%"],[7188,1,""],[7188,0,"3"],[7188,1,""],[7188,0,"4"],[7188,1,""],[7188,0,"5"],[8045,0,"]\n)"],[8044,0,"tive editing syste"],[8042,0," CRDT based collabo"],[8041,1,""],[8040,0,"n "],[8039,0,"ata flow "],[8038,0,"["],[8037,0,"\n#figure(\n  image(\"diagrams/dataflow-eg.svg\", width: 65%),\n  caption:"],[8036,1,""],[7189,1,""],[7188,0,"6"],[7174,0,"dataflow"],[7170,4,""],[2441,0,"\n\n"],[2442,0,"test"],[2442,6,""],[423,26,""],[423,0,"#set page(\npaper: \"a4\",\nnumbering: \"1\",\nmargin: (x: 50pt),\n)\n#set text(9pt)"],[1045,0,"\n#columns(2)[\n  "],[1059,2,""],[126768,0,"\n]"],[1060,29,""],[2456,1,""],[2455,1,""],[2455,0,"\n]"],[1060,0,"#pad(left: 2em, right: 2em)[\n"],[2504,0,"\n= Previous Inro"],[2519,1,""],[2518,1,""],[2518,0,"troduction"],[2516,12,""],[2516,0,"Introduction\n"],[2503,0,"\n\nReal-time collabo"],[2515,7,""],[2515,0,"collaboratively"],[2529,1,""],[2528,1,""],[2528,0," editing has become an essential feature for many types of software, including document editors such as Google Docs or Microsoft Word, and graphics software such as Figma.\nTwo families of algorithms have "],[2727,5,""],[2727,0,"to enable this collaboration "],[2737,4,""],[2737,0,"real-time"],[2761,0,"have been extensively studied: Operational Transformation ()"],[2820,0,"OT"],[2823,0,", and Conflict-free Replicated Data Types ()"],[2866,0,"CERDT"],[2870,1,""],[2869,1,""],[2868,1,""],[2867,1,""],[2867,0,"RDTs"],[2872,0,"."],[2823,1,""],[2872,0,"\nOT is "],[2792,0,"\\"],[2792,1,""],[2792,0,"*"],[2819,0,"*"],[2830,0,"*"],[2866,0,"*"],[2866,1,""],[2866,0,"_"],[2830,1,""],[2830,0,"_"],[2819,1,""],[2819,0,"_"],[2793,0,"_"],[2792,0,"_"],[2794,1,""],[2793,1,""],[2883,0,"the older techniques "],[2903,1,""],[2902,1,""],[2902,0,", having been int"],[2904,15,""],[2904,0,"introduced in 1989 @Ellis1989, "],[2892,0," and more widely-used"],[2956,0,"and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collabi"],[3033,1,""],[3027,6,""],[3027,0,"collaboration in Google Docs @DayRichter2010.\nThe first CRDT for colla"],[3092,5,""],[3092,0,"collaborative textt ed"],[3113,1,""],[3112,1,""],[3111,1,""],[3110,1,""],[3110,0," editing appeared in 2006 @Oster2006.w"],[3147,1,""],[3147,0," /* */\n\n= Relatre"],[3163,1,""],[3162,1,""],[3161,1,""],[3161,0,"ed "],[3163,1,""],[3162,1,""],[3161,1,""],[3161,0,"tted"],[3164,1,""],[3163,1,""],[3162,1,""],[3162,0,"ed Work\n\nGu et al.'s mark \\'&"],[3190,1,""],[3189,1,""],[3189,0,"& retrace methods "],[3206,1,""],[3205,1,""],[3205,0," @Gu2005 has "],[3214,4,""],[3214,0,"is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to inerlea"],[3462,1,""],[3461,1,""],[3460,1,""],[3459,1,""],[3458,1,""],[3458,0,"terleaving."],[2644,2,""],[2643,1,""],[2643,0,","],[2660,0," or Overleaf,"],[3157,7,""],[3157,0,", and dozens of algorithms have been published in the OT and CRDT families.i"],[3232,1,""],[3232,0,"\n\nhe "],[3236,1,""],[3235,1,""],[3234,1,""],[3234,0,"The core problem that all these salg"],[3269,1,""],[3268,1,""],[3267,1,""],[3266,1,""],[3266,0,"algorithms solve is how to automatically merge concurrent edits to a linear sequence ()"],[3352,0,"such as the characters of a text document"],[3394,0,", such that all replicas converge towards the same state, and that state correctly reflects the intensions of the users' edis."],[3519,1,""],[3518,1,""],[3518,0,"ts."],[3324,8,""],[3324,0,"p"],[3324,1,""],[3324,0,"insertions and deletions of elements in"],[3552,0,"\nFor example, in Figure TODO, "],[2710,0,"\n\n"],[2711,0,"In such softtware"],[2727,1,""],[2726,1,""],[2725,1,""],[2724,1,""],[2723,1,""],[2723,0,"ware, each user's local device maintains a replica of the shared document ()"],[2788,8,""],[2788,0,"fioe"],[2791,1,""],[2790,1,""],[2790,0,"le"],[2794,0,"e.g. in a tab of their web browser"],[2829,0,", and a user's o"],[2844,1,""],[2844,0,"edits to the file are immedi"],[2866,6,""],[2866,0,"immediately applied to their own local ccopy"],[2909,1,""],[2908,1,""],[2907,1,""],[2906,1,""],[2906,0,"opy, without waiting for a network round-trip, in order to ensure user interface responsiveness regardless of network latency."],[2829,7,""],[2829,0,".\nA"],[2967,0," that the"],[2991,0," is"],[3008,1,""],[3007,1,""],[3006,1,""],[3005,1,""],[3036,0,"\nDifferent users may here"],[3060,1,""],[3059,1,""],[3058,1,""],[3057,1,""],[3057,0,"therefore make edits concurrently"],[2766,7,""],[2766,0,"coppy"],[2770,1,""],[2769,1,""],[2769,0,"y"],[2741,5,""],[2740,1,""],[2747,0," locally"],[3089,0,", and the software must merge such concurrentt e"],[3136,1,""],[3135,1,""],[3134,1,""],[3134,0," edits in a way tthat "],[3155,1,""],[3154,1,""],[3153,1,""],[3152,1,""],[3151,1,""],[3151,0,"hat preserves tthe "],[3169,1,""],[3168,1,""],[3167,1,""],[3166,1,""],[3166,0,"he users' intentions, and that ensures that all "],[3192,5,""],[3198,1,""],[3197,1,""],[3197,0,"ing"],[3210,0,"devices converge towards the same state.\n\nFor example, in FIgure"],[3273,1,""],[3272,1,""],[3271,1,""],[3270,1,""],[3269,1,""],[3269,0,"igure TODO, user 1 "],[3281,7,""],[3281,0,"two users initially have the same document \"\""],[3325,0,"Helo"],[3330,0,"."],[3856,349,""],[3331,0,"\nUser 1 inserts a second letter L "],[3364,1,""],[3363,1,""],[3363,0,"\"\""],[3364,0,"l"],[3366,0," at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $\\\"\"AB\"\\\" plus.circle italic(\"Insert\")(1, \\\"C\\\") = \\\"\"ACB\"\\\"$"],[3481,21,""],[3498,1,""],[3498,0,"3"],[3503,1,""],[3503,0,"l"],[3507,12,""],[3508,0," it can apply it directly to obtain \"\""],[3545,0,"Hello!"],[3552,0,", but when user 1 receives $italic(\"Insert\")(3, \\\"l\\\")$"],[3597,1,""],[3597,0,"4"],[3602,1,""],[3602,0,"!"],[3607,0," it cannot insert"],[3618,6,""],[3618,0,"apply that "],[3525,8,""],[3524,1,""],[3620,0,"operation directly, since doing so wowuld r"],[3662,1,""],[3661,1,""],[3660,1,""],[3659,1,""],[3658,1,""],[3657,1,""],[3657,0,"uld result in the state \"\""],[3682,0,"Hello"],[3686,1,""],[3686,0,"!o"],[3689,0,".\nDude "],[3695,1,""],[3694,1,""],[3693,1,""],[3693,0,"e to the concurrent insertion at an earlier index, the exclamaion"],[3743,0," user 1 must insert"],[3774,0,"t"],[3778,0," mark at index 5."],[4319,0,"\n#fi"],[4321,2,""],[4321,0,"figure()"],[4328,0,"\n  \n"],[4331,0,"fletcher.d"],[4340,1,""],[4340,0,"diagram()"],[4348,0,"\n    \n  "],[4353,0,"node()"],[4358,0,"()"],[4359,0,"0,0"],[4363,0,", `Helo`"],[4376,0,",\n  c"],[4380,1,""],[4380,0,"caption: []"],[4390,0,"Two concurrent insertions into a text document."],[4438,0,","],[4441,0," <two-inserts>"],[4361,1,""],[4361,0,"1"],[4348,0,"\n    node()"],[4358,0,"()"],[4359,0,"0,0"],[4363,0,", \"\""],[4366,0,"User 1"],[4374,0,","],[4376,0,"    node((0,0), \"User 1\"),\n"],[4386,1,""],[4386,0,"2"],[4398,1,""],[4398,0,"2"],[4415,1,""],[4415,0,"0.1"],[4428,0,"\n    node()"],[4438,0,"()"],[4439,0,"0, "],[4441,1,""],[4441,0,"1"],[4443,0,", `Hello`"],[4428,0,","],[4348,0,"{}"],[4349,1,""],[4458,0,"}"],[4375,1,""],[4401,1,""],[4427,1,""],[4349,0,"\n    let ()"],[4359,0,"left1, right1, left2, right2, left3, right3"],[4403,0," = ()"],[4407,0,"()"],[4408,0,"0,0"],[4412,0,", ()"],[4415,0,"2,0"],[4419,0,", ()"],[4422,0,"0,1"],[4425,1,""],[4425,0,"), ()"],[4429,0,"2,1"],[4433,0,", ()"],[4436,0,"0,2"],[4439,1,""],[4439,0,"), ()"],[4443,0,"2,2"],[4510,7,""],[4510,0,"left1"],[4534,5,""],[4534,0,"left2"],[4549,0,"\n    edge "],[4558,1,""],[4558,0,"()"],[4559,0,"left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$"],[4453,0,"//"],[4481,0,"//"],[4577,0,"\"\""],[4578,0,"->"],[4580,1,""],[4580,0,"\", "],[4410,1,""],[4410,0,"2"],[4418,1,""],[4417,1,""],[4417,0,"2)"],[4438,1,""],[4438,0,"0"],[4445,1,""],[4445,0,"0"],[4576,6,""],[4605,0,", \"\""],[4608,0,"->"],[4528,0,"\n    node()"],[4538,0,"right1, `Helo`"],[4578,0,"\n    node "],[4587,1,""],[4587,0,"()"],[4588,0,"right2, `Helo!`"],[4663,0,"\n    "],[4664,4,""],[4663,1,""],[4664,0,"    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\")\n"],[4673,4,""],[4673,0,"right"],[4681,4,""],[4681,0,"right"],[4707,1,""],[4707,0,"4"],[4712,1,""],[4712,0,"!"],[4604,0,"\n    "],[4605,4,""],[4553,25,""],[4529,0,"    node(left2, `Hello`)\n"],[4553,0,"\n    node()"],[4563,0,"left3, `Hello!`"],[4631,0,"    node()"],[4640,0,"right3, `Hello!`"],[4453,2,""],[4479,2,""],[4461,1,""],[4461,0,"2.1"],[4489,1,""],[4489,0,"2.1"],[4491,1,""],[4491,0,"2"],[4463,1,""],[4463,0,"2"],[4463,1,""],[4463,0,"4"],[4491,1,""],[4491,0,"4"],[4474,0,":"],[4503,0,":"],[4717,0,", label-side: left"],[4731,4,""],[4731,0,"right"],[4797,0,", label-side: left"],[4817,0,"    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n"],[4830,1,""],[4830,0,"2"],[4837,1,""],[4837,0,"4"],[4837,1,""],[4837,0,"3"],[4858,1,""],[4858,0,"4"],[4858,1,""],[4858,0,"5"],[4863,1,""],[4863,0,"!"],[4938,1,""],[4938,0,"3"],[4943,1,""],[4943,0,"l"],[4909,1,""],[4909,0,"2"],[4917,1,""],[4917,0,"3"],[4973,0,"\n    edge "],[4982,1,""],[4982,0,"()"],[4983,0,"()"],[4984,0,"0,1.5"],[4990,0,", ()"],[4993,0,"2,0.5"],[4999,0,", stroke: blue"],[5001,12,""],[5001,0,"mar"],[5003,1,""],[5002,1,""],[5001,1,""],[5001,0,"strok"],[5001,5,""],[5001,0,"mar"],[5001,3,""],[5001,0,"stroke: blue"],[5009,4,""],[5009,0,"gray"],[5009,4,""],[5009,0,"blue"],[5009,4,""],[5009,0,"dash"],[5009,4,""],[5009,0,"()"],[5010,0,"paint: blue"],[4999,23,""],[4985,0,".1"],[4995,1,""],[4995,0,"1.9"],[5003,0,", \"\""],[5006,0,"->"],[5009,0,", stroke: blue"],[5019,0,"(paint: "],[5031,0,")"],[5011,21,""],[5011,0,"\"\""],[5012,0,"dashed"],[5020,0,"\n    edge()"],[5030,0,"()"],[5031,0,"1.9,1.5"],[5039,0,", ()"],[5042,0,"0.1,0.5"],[5050,0,", \"\""],[5053,0,"->"],[5056,0,", \"\""],[5059,0,"dashed"],[5019,0,", bend: +10deg"],[5028,1,""],[5028,0,"2"],[5080,0,", bend: -20deg"],[3275,4,""],[3275,0,"@two-inserts"],[3268,7,""],[129778,6,""],[129778,0,"\"association-for-computing-machinery\""],[3798,523,""],[4659,0,"Two families of algorithms to enable real-time collaboration have been extensively studied: _Operational Transformation_ (OT) and _Conflict-free Replicated Data Types_ (CRDTs).\nOT is the older and more widely-used technique, introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006, and dozens of algorithms have been published in the OT and CRDT families.\n\n"],[3690,0,", which would be inconsistent with the other user's state and the intended insertion position"],[4672,0,"\n  placement: top,"],[4768,0,"\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, resul"],[4983,1,""],[4982,1,""],[4981,1,""],[4980,1,""],[4979,1,""],[4979,0,"which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was "],[5323,147,""],[5096,0,"introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\nOT works well when users' states have diverged only by a small amount."],[5243,0,"\n\nIn @two-inserts, each user performed only one operation since the last v"],[5316,1,""],[5316,0,"version they had in common, which makes OT s"],[5245,0,"OT s"],[5248,1,""],[5248,0,"is simple in the case of "],[5273,2,""],[5272,1,""],[5286,0," where"],[5373,18,""],[5373,0,".\nIn general, if user 1 performed $$"],[5408,0,"k"],[5410,0," operations and user 2 performed $$"],[5444,0,"m"],[5446,0," operations, merging their stattes "],[5480,1,""],[5479,1,""],[5478,1,""],[5477,1,""],[5477,0,"es using OT has a"],[5493,1,""],[5493,0,"a complexity of O"],[5509,1,""],[5509,0,"$$"],[5510,0,"O()"],[5512,0,"km"],[5516,0," in the best case, since each of the $$"],[5554,0,"k"],[5556,0," operations must be transformed with respect to each of tthe $$"],[5617,2,""],[5616,1,""],[5615,1,""],[5614,1,""],[5613,1,""],[5613,0,"he $$"],[5617,0,"m"],[5619,0," operationis "],[5631,1,""],[5630,1,""],[5629,1,""],[5629,0,"s and vice versa.\nSome OT operations "],[5655,11,""],[5655,0,"algorithms even have c"],[5676,1,""],[5676,0,"a complexity that is quadratic or cubic in the number of operationis pe"],[5746,1,""],[5745,1,""],[5744,1,""],[5743,1,""],[5742,1,""],[5742,0,"s performed by each user."],[5666,4,""],[5665,1,""],[5705,0,"even "],[5767,0,"\nThis is acceptable for online collaboration since $$"],[5819,0,"k"],[5821,0," and $$"],[5827,0,"m"],[5829,0," are small, but if users may edit a document offline or if the software supports explicit branching and merging workflows, $O(km)$ can become impracticably slow."],[5766,0," @Roh2011RGA, @Li2006"],[5778,1,""],[5513,0," "],[5977,0," "],[5779,8,""],[5768,0," @Li2006 "],[5768,1,""],[5787,0," Sun2020OT"],[5788,0,"@"],[5982,0," @Upwelling"],[5257,0," and fast"],[5466,0," since their last common version"],[5906,0," typically"],[6085,0,"\n\nMoreover, OT algorithms "],[6087,24,""],[6087,0,"Moreover, most practical implementations of OT require a central server to determine "],[6162,10,""],[6162,0,"impose a total order on operations.\nAlthough it pos "],[6213,1,""],[6212,1,""],[6211,1,""],[6210,1,""],[6210,0,"is possible to perform OT in a peer-to-peer context without a central server, such algorithms have "],[6304,5,""],[6304,0,"are challenging to reason about, as evidenced by the fact that many published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF."],[6466,202,""],[6511,1,""],[6511,0," have been proposed as an alternative to OT that makes no assumptions about network "],[6560,35,""],[6560,0,"requires no central server."],[6588,49,""],[6708,27,""],[6708,0,"since"],[6667,0,"over a "],[6679,1,""],[6680,2,""],[6680,0,"CRDT"],[6695,0," for text"],[6731,0,"\nThese algorithms "],[6685,10,""],[6684,1,""],[6684,0,"s"],[6680,0,"text "],[6690,9,""],[6735,0,"work by giving each character a unique identifier "],[6784,1,""],[6784,0,", and using those IDs instead of p"],[6817,1,""],[6817,0,"integer indexes to identify the position of insertions and deletions in the document.\nThis approach can be easeir to "],[6933,1,""],[6932,1,""],[6931,1,""],[6930,1,""],[6929,1,""],[6928,1,""],[6927,1,""],[6927,0,"ier to reason about ()"],[6948,0,"since IDs are not taf"],[6968,1,""],[6967,1,""],[6966,1,""],[6966,0,"affected by concurrent operations"],[7000,0,", bu "],[7004,1,""],[7004,0,"t it has the downside "],[7006,20,""],[7006,0,"storing and ttransm"],[7018,7,""],[7018,0,"transmo"],[7024,1,""],[7024,0,"itting those IDs introduces overhead.\nMoreover, many CRDT algorithms need to retain IDs of deleted characters as _tombstones_, which introduces furether "],[7176,1,""],[7175,1,""],[7174,1,""],[7173,1,""],[7172,1,""],[7171,1,""],[7171,0,"ther overhead."],[6661,0,"WOOT"],[915,1,""],[931,1,""],[1116,0,"\n\n"],[1117,0,"  Collaborative text editing algorithms allow several users to concurrently modify a text file, while ensuring that concurrent edeit"],[1248,1,""],[1247,1,""],[1246,1,""],[1246,0,"its can be merged automat"],[1264,7,""],[1254,0,"automatically "],[1213,40,""],[1213,0,"and"],[1230,3,""],[1237,1,""],[1236,1,""],[1236,0," concurrent edits into a consistent state.\n  Existing collaboration algorithms are either slow to merge files that have diverged substantially ()"],[1380,0,"e.g. due to offline editing"],[1408,0,", "],[1378,2,""],[1378,0,", "],[1407,0," ()"],[1409,0,"in "],[1412,1,""],[1412,0,"the case of Operational Transformation"],[1453,0,"or incur overheads due to giving a unique ID to every character ()"],[1518,0,"in the case of CRDTs"],[1539,0,".\n  In this paper we introduce Eg-walker, a collaboration algorithm that achieves the best of both the OT and the CRDT worlds"],[1450,0,"/OT"],[1667,0,": it avoids the overheads of CRDTs while simult"],[1708,6,""],[1708,0,"simultaneously offering fast merges.\n  Our implementation of Eg-walker "],[1609,0," for text"],[1788,0,"outperforms existing CRDT and OT algorithms in most editing scenarios, while also using less memory, having smaller file sizes, and supporting peer-to-peer collaborat"],[1944,10,""],[1944,0,"collaboration without a central server."],[1985,1366,""],[6706,0,"\n  Conflict-Free Replicated Data Types (CRDTs) are useful for multi-master collaborative text editing, but they have several downsides: The entire CRDT's state must be loaded in memory during editing sessions, and the state grows without bounds as it is edited. Transmitted and stored data is CRDT type specific - so innovations in CRDT algorithms usually require entire collaborative editing systems to be rewritten from scratch to incorporate new innovations._Pure Operation-Based RDT_ solve these problems. However, to our knowledge, no pure operation based RDT has yet been proposed for text editing.\n\n  // In this paper we present a new formalism for pure operation logs\n\n  In this paper we introduce _Eg-walker_ (Event Graph Walker). Eg-walker is an efficient algorithm for collaboratively editing text using pure operations. Eg-walker performs extremely well: It outperforms existing text based CRDT implementations in most editing scenarios. And it inherits all of the benefits of pure operation based editing: The network format is generic. And the CRDT state doesn't need to be stored and loaded into RAM during editing sessions.\n\n  Eg-walker is built on top of a new formal model which we call _event graphs_. Using this formalism we show how any CRDT can be adapted to the \"pure operation\" model. Eg-walker is an optimized algorithm for sequence editing.\n*/\n"],[6706,0,"\n/*"],[6710,2,""],[7313,73,""],[7775,2,""],[1984,0,"  ()"],[1987,0,"TODO: quantify the performance improe"],[2023,1,""],[2023,0,"vement?"],[2031,0,"\n  Our result makes it feasible for text editors to retain fine-grained editing history, and to reconstruct the document at arbitrary points in time"],[2090,12,""],[2090,0,"character-by-chara"],[2090,18,""],[2090,0,"keystroke-granularity"],[2188,0," by replaying that history."],[2067,0,"collaborative "],[2034,10,""],[2034,0,"This"],[1986,0,"_"],[2032,0,"_"],[1987,0,"*"],[1986,0,"*"],[1987,2,""],[2032,1,""],[2032,0,"*"],[1378,6,""],[2030,4,""],[2030,0,"Our result"],[1058,29,""],[2197,1,""],[1058,2,""],[1086,2,""],[1246,2,""],[1503,2,""],[1711,2,""],[1939,2,""],[1987,2,""],[2182,1,""],[5245,1,""],[5245,0," at least "],[5263,17,""],[5232,10,""],[5232,0,"cost"],[5769,379,""],[6510,0,"Moreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server, such algorithms are challenging to reason about, as evidenced by the fact that many published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF.\n\n"],[5857,32,""],[6183,38,""],[6183,0,"avoids having to transform operations"],[6346,4,""],[6346,0,"some"],[6410,1,""],[6409,1,""],[6408,1,""],[6408,0,"("],[6421,0,")"],[1503,15,""],[1503,0,"W"],[6444,0,"\n\nIn this paper we propose _Event Graph Walker_ ()"],[6493,0,"Eg-walker"],[6503,0,", an algorithm that combines the strengths of OT and CRDT"],[6505,17,""],[6505,0,"which "],[6510,1,""],[6548,0," in a single algorithm."],[6505,5,""],[6505,0,"an approach to collaborative editing that"],[6607,0,"\nAt times when there is no concurrency, Eg-walker simply uses "],[6608,61,""],[6608,0,"Like OT, Eg-walker uses integer indexes to identify insertion and deletion positions, and it avoids the overheads of CRDTs at times when there is no concurrency.\nOn the other hand, when two users perform #"],[6812,1,""],[6812,0,"$$"],[6813,0,"m"],[6815,0," and $$"],[6821,0,"k"],[6821,1,""],[6821,0,"m"],[6813,1,""],[6813,0,"k"],[6804,0,"concurrently "],[6836,0," operations respectively, Eg-walker can merge them at a cost of $$"],[6901,0,"O()"],[6903,0,"()"],[6904,0,"k+m"],[6908,0," log ()"],[6914,0,"k+m"],[6920,0,", which is much faster than the $$"],[6953,0,"O()"],[6955,0,"k m"],[6960,0," cost or worse incorr"],[6980,1,""],[6979,1,""],[6978,1,""],[6978,0,"urrec"],[6982,1,""],[6982,0,"d by OT algorithms.\n\n"],[6951,0," cost of"],[6968,5,""],[7006,0,"In a nutshell, Eg-walker "],[7006,13,""],[7006,0,"To merge concurrent operations"],[7048,0,"must also transform their "],[7073,1,""],[7072,1,""],[7071,1,""],[7071,0," indexes of insertions and deletions like in @two-inserts.\nInstead of transforming one operation with respect to one other operation, Eg-walker performs the "],[7203,0,", as in OT"],[7238,0,"merge by building a data structure "],[7258,0,"temporary "],[7283,0,"that reflects all of the operations that have occurred since the last version they had in common, and using that structure to perform the transformation.\nIn "],[7437,3,""],[7437,0,"That structure is essentially a type of CRDT, wth th"],[7488,1,""],[7487,1,""],[7486,1,""],[7485,1,""],[7484,1,""],[7484,0,"ith the difference that "],[7437,71,""],[7437,0,"In fact, that data structure "],[7445,0," we use a CRDT to implement"],[7492,1,""],[7492,0,".\nHowever, unlike existing algorithms, we only invoke the CRDT to perform merges, and we avoid the CRDT overhead when there is no concurrency."],[5977,0," @crdt-papers"],[5553,5,""],[5553,0,"where"],[7238,13,""],[7243,0,"s sets of concurrent operations"],[7238,6,""],[7238,0,"transforms"],[7640,28,""],[7640,0,"for operations "],[7640,15,""],[7640,0,"whenever operations are not concurrent (which is the common case in most editing workflows)"],[7282,0,"first "],[7426,0,"then "],[7455,12,""],[7468,1,""],[7467,1,""],[7466,1,""],[7465,1,""],[7464,1,""],[7464,0," each operation"],[7742,0,"\n\n"],[7743,0,"This paper makes the following contributions:\n\n* We "],[7790,1,""],[7790,0,"-"],[7795,0,"show "],[7795,5,""],[7795,0,"unify the fields of OT and CRDT, which to date have been largely separate research areas, by demonstrating how to combine the strengths of both in a single algorithm."],[7519,2,""],[7519,0,"is"],[7789,0,"\n- We "],[7792,3,""],[7792,0,"TODO"],[7986,11,""],[7986,0,"M"],[8355,3,""],[7986,0,"/*\n"],[9647,3,""],[9947,0,"*/\n"],[7970,16,""],[7973,0,"= Related Work\n\n"],[7968,0,"\n\n// TODO: do we want to emphasise that "],[7979,29,""],[7979,0,"what is the implication of our results? I'd say that we can efficiently store the editting "],[8065,1,""],[8069,0,"history of a document, and replay the history to "],[8060,0," keystroke-granularity"],[8140,0,"any point in order to reconstruct past versions ofa "],[8191,1,""],[8190,1,""],[8190,0," a documentt."],[8202,1,""],[8201,1,""],[8201,0,". Ant"],[8205,1,""],[8205,0,"ything else hat t"],[8221,1,""],[8220,1,""],[8219,1,""],[8218,1,""],[8217,1,""],[8217,0,"that this approach enables that was not feasible before?"],[8293,0,"\n\n"],[8294,0,"// https://neil.fraser.name/writing/sync/eng047-fraser.pdf\n// https://neil.fraser.name/writing/sync/"],[8293,0,"\n// Explain relationship to \n"],[8321,0,"b"],[8321,1,""],[8321,0,"merging in version control systte"],[8353,1,""],[8352,1,""],[8352,0,"ems such as Git, Darcs, etc."],[8482,0,"\n// Some discussion of Differential Sync in http://archagon.net/blog/2018/03/24/data-laced-with-history/"],[8587,0,"\n\n"],[8588,0,"// Raph Levien's unified theory of CCRD"],[8626,1,""],[8625,1,""],[8624,1,""],[8624,0,"RDT nd "],[8630,1,""],[8629,1,""],[8628,1,""],[8628,0,"and OT"],[8632,2,""],[8632,0,"OT//"],[8635,1,""],[8634,1,""],[8634,0,"\n// https://medium.com/@raphlinus/towards-a-unified-theory-of-operational-transformation-and-crdt-70485876f72f"],[8273,0,"\n\n// TODO: make the point about supporting p2p collaboration, and explain why it's important\n\n// make clear that we're just talking about plain text in this paper"],[8273,0," Is the "],[8280,1,""],[8280,0,"re a broader less on that "],[8297,1,""],[8305,0,"can be learnt from tthis work"],[8324,1,""],[8333,0,", which applies tto "],[8352,1,""],[8351,1,""],[8350,1,""],[8350,0,"o other syste,s "],[8365,1,""],[8364,1,""],[8363,1,""],[8363,0,"ms as well?"],[8536,0,"\n\n// https://irenezhang.net/blog/2021/06/05/hints.html"],[8540,0," Hints fro"],[8549,1,""],[8548,1,""],[8548,0,"or writing system,s p"],[8568,1,""],[8567,1,""],[8566,1,""],[8565,1,""],[8565,0,"s papers"],[7741,0,"\n\nM"],[7743,1,""],[7743,0,"The fact that both sequential and concurrent operations are fast makes Eg-walker suitable for both real-time collaboration and offline work."],[7773,15,""],[7783,0," and large merges"],[7885,0,"\nMoreover, since Eg-walker assumes no central server, it can be deployed in a peer-to-peer style.\nAlthough all existing CRDTs and a few OT algorithms "],[7949,11,""],[7949,0,"used over"],[7974,5,""],[7974,0,"network"],[8035,0,"can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software suh "],[8158,1,""],[8157,1,""],[8156,1,""],[8156,0,"uch as Google Docs.\nIn contrast, Eg-walker's performance matches or surpasses that of centralised algorithms.\nTherefore "],[8275,1,""],[8275,0,", it paves the way towards the wis"],[8308,1,""],[8308,0,"despread adoption of peer-to="],[8336,1,""],[8336,0,"-peer collaboration software"],[8266,12,""],[8266,0,"I"],[8268,0," therefore"],[8363,0,", and perhaps overcoming the dominance of centralised cloud software that exists today."],[8451,0,"\nIn this paper we focus on collaborative editing of plain text files, although we believe that our approach could be generalised to other file types such as rich text, spreadsheets, graphics, presentations e"],[8657,1,""],[8656,1,""],[8656,0,",e tc."],[8661,1,""],[8660,1,""],[8659,1,""],[8658,1,""],[8657,1,""],[8657,0," CAD, etc."],[8661,0," drawings"],[1972,0,"\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software."],[2143,196,""],[8418,0,"in the market "],[8891,568,""],[7715,0,"\nMoreover, we use the CRDT only temporarily for merges, and we never write CRDT data to disk or send it over the network."],[7808,2,""],[7808,0,"and never"],[7769,5,""],[7769,0,";"],[11538,21,""],[11538,0,"Background"],[11549,0,"\n\n"],[11550,0,"We consider a collaborative plain text editor whose state is a linear sequence of characters, and which may be edited by inserting or deleting characters at any position.\nWe use the notation $italic(\"Insert\")(3, \\\"l\\\")$"],[11759,1,""],[11759,0,"i"],[11762,5,""],[11762,0,"s"],[11765,0," to denote the insertion of string $$"],[11801,0,"s"],[11803,0," at index $$"],[11814,0,"i"],[11816,0," ()"],[11818,0,"which is zero-based"],[11838,0,", and $italic(\"Insert\")(i, s)$"],[11865,1,""],[11864,1,""],[11863,1,""],[11853,6,""],[11853,0,"Delete"],[11865,0," to denote the deletion of one character at "],[11892,3,""],[11892,0,"the"],[11909,0,"index $$"],[11916,0,"i"],[11918,0,"."],[11762,1,""],[11762,0,"c"],[11793,6,""],[11793,0,"character"],[11804,1,""],[11804,0,"c"],[11922,0,"\nRuns of consecutive "],[11923,0,"Our algorithm compresses "],[11948,1,""],[11948,0,"r"],[11968,0,"insertions or deletions, but conceptually it is simpler to work with single-character operations.\n\n== System M"],[12077,1,""],[12077,0,"model"],[12077,5,""],[12077,0,"model\n\nWe "],[12084,3,""],[11997,39,""],[11997,0,"we describe it in terms of"],[11996,0," for simi"],[12004,1,""],[12004,0,"plicity"],[12086,0,"Each device on which a user is editing a document is a _replica_, and each device stores the full editing history of the document."],[12215,1,""],[12215,0," "],[12215,1,""],[12215,0,".\n"],[12161,6,""],[12161,0,"replica"],[12218,0,"When a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also make edits while offline, which are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumption "],[12576,1,""],[12576,0,"s about "],[11721,0,"Such "],[11725,0," an edit is captured as an _operation_;"],[11765,1,""],[11765,0,"w"],[11824,12,""],[11824,0,"operation that inserts"],[11923,25,""],[11923,0,"is the operation that deletes"],[11926,3,""],[11926,0,"an"],[11820,3,""],[11820,0,"an"],[11644,4,""],[11644,0,"and "],[11644,4,""],[11868,22,""],[11951,0," "],[11951,1,""],[11951,0," (which is zero-based)"],[11953,8,""],[11953,0,"inexes"],[11958,1,""],[11957,1,""],[11956,1,""],[11955,1,""],[11955,0,"dexes are"],[11896,21,""],[11961,9,""],[11961,0,"implementation"],[12063,2,""],[12063,0,"the algorithm"],[12634,0,"the underlying network via which operations are replicated: any reliable broadcast protocol ()"],[12727,0,"which detects and retransmits lost messages"],[12771,0," is sufficient. For example, "],[12786,0,"\n"],[12787,1,""],[12800,0,"a relay c"],[12808,1,""],[12808,0,"server could store and forward messages from one replica to the others, or they could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay."],[13002,0,"\n\n"],[13003,0,"== Event graphs"],[13012,6,""],[13012,0,"graphs\n\n"],[13000,0,", but we assume replicas a "],[13026,1,""],[13026,0,"re non-Byzantine"],[12883,4,""],[12883,0,"replicas"],[13066,0,"O"],[13066,1,""],[13066,0,"We represent the editing history of a document as an _event gra-"],[13129,1,""],[13129,0,"ph_, which is a DAG"],[13147,1,""],[13146,1,""],[13145,1,""],[13145,0,"directed acyclic graph ()"],[13169,0,"DAG"],[13173,0," in which every node is labelled with an operatn"],[13220,1,""],[13220,0,"ion and a unique ID."],[13065,0,"\nIn order to correctly interpret an operation such as $italic(\"Delete\")(i)$, we need to know the exact state of the document at the time when the operation was"],[13157,0," which character was at index $$"],[13188,0,"i"],[13190,0," at"],[13192,1,""],[13191,1,""],[13191,33,""],[13225,0," generated."],[13153,4,""],[13153,0,"determine"],[13241,0,"\nTo this end, "],[13242,13,""],[13242,0,"We therefore store each operation with enough context to be able to reconstruct the exact state of the document "],[13254,0," associate each operation with a _version_ of the document, and we"],[13420,0,"as of any version."],[13327,20,""],[13418,0,"\n"],[13420,0,"Specifically, "],[13434,1,""],[13434,0,"w"],[13608,0,"\nEach node has incoming edges from a set of _parent nodes_, and we stored "],[13681,1,""],[13680,1,""],[13680,0," the graph in transitively reduced form ()"],[13721,0,"i.e. with "],[13608,0,"\nWhen the graph contains an edge from node $$"],[13652,0,"a"],[13654,0," to node $$"],[13664,0,"b"],[13666,0," we say that $$"],[13680,0,"a"],[13682,0," is a _parent_ of $$"],[13701,0,"b"],[13703,0,", and write $$"],[13716,0,"a -> b"],[13723,0,"."],[13725,64,""],[13725,0,"W"],[13779,4,""],[13779,0,"i"],[13779,1,""],[13779,0,"no redun"],[13782,5,""],[13782,0,"redundante"],[13791,1,""],[13791,0," edges: if $$"],[13803,0,"a -> b"],[13810,0," "],[13703,20,""],[13759,33,""],[13759,0,"if $$"],[13763,0,"a"],[13765,0," is a parent of %$$"],[13782,2,""],[13781,1,""],[13781,0,"$$"],[13782,0,"b"],[13784,0," and "],[13759,30,""],[13759,0,"no redundant edges"],[13778,0,".\nWhen there is a directed grap"],[13808,1,""],[13807,1,""],[13806,1,""],[13805,1,""],[13805,0,"path from $$"],[13816,0,"a"],[13818,0," to $$"],[13823,0,"b"],[13825,0," we say that $$"],[13839,0,"a"],[13841,0," _happened before_ $$"],[13861,0,"b"],[13863,0,", and write $$"],[13876,0,"a -> b"],[13883,0,".\n\nA collaborative text editing algorithm can then be viewed as a funcion "],[13956,1,""],[13955,1,""],[13954,1,""],[13953,1,""],[13953,0,"tion "],[13884,0,"\nThe "],[13703,0,", and $b$ is a _child_ of $a$"],[13918,0,"_fontier"],[13925,1,""],[13924,1,""],[13923,1,""],[13922,1,""],[13921,1,""],[13920,1,""],[13920,0,"rontier_ is the set of nodes with no children.\n\nWhenever a user performs an operation, a new node labelled with that operation is added to the graph, and the previous frontier becomes the new node's parents."],[13913,0,"\nThe $$"],[13919,0,"->"],[13922,0," relation is a strict partial order."],[13934,1,""],[13934,0," therefore "],[13734,10,""],[13734,0,"T"],[13745,1,""],[13745,0,"s"],[13767,5,""],[13773,0," it contains"],[14180,0,"\nThat node and its incoming edges are then replicated over the network.\nTwo replicas can merge their states "],[14281,7,""],[14281,0,"event graphs by simply taking the union of the sets of nodes and edges."],[14426,0,"that takes an event graph as input, and determin"],[14466,8,""],[14466,0,"deterministically produces "],[14484,9,""],[14484,0,"returns "],[14352,0,"\nConceptually, the graph grows monotonically, "],[14353,45,""],[14353,0,"We discuss later how old parts of the graph can be pruned when they are no longer needed."],[9120,0," <related-work>"],[9016,2535,""],[12063,0,"\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n\n/*\n= Related Work <related-work>\n\n// Explain relationship to merging in version control systems such as Git, Darcs, etc.\n\n// https://neil.fraser.name/writing/sync/eng047-fraser.pdf\n// https://neil.fraser.name/writing/sync/\n// Some discussion of Differential Sync in http://archagon.net/blog/2018/03/24/data-laced-with-history/\n\n// Raph Levien's unified theory of CRDT and OT\n// https://medium.com/@raphlinus/towards-a-unified-theory-of-operational-transformation-and-crdt-70485876f72f\n\nMost practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server, such algorithms are challenging to reason about, as evidenced by the fact that many published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF.\n\nConflict-Free Replicated Data Types (CRDTs) are useful for multi-master collaborative text editing, but they have several downsides: The entire CRDT's state must be loaded in memory during editing sessions, and the state grows without bounds as it is edited. Transmitted and stored data is CRDT type specific - so innovations in CRDT algorithms usually require entire collaborative editing systems to be rewritten from scratch to incorporate new innovations._Pure Operation-Based RDT_ solve these problems. However, to our knowledge, no pure operation based RDT has yet been proposed for text editing.\n\nIn this paper we introduce _Eg-walker_ (Event Graph Walker). Eg-walker is an efficient algorithm for collaboratively editing text using pure operations. Eg-walker performs extremely well: It outperforms existing text based CRDT implementations in most editing scenarios. And it inherits all of the benefits of pure operation based editing: The network format is generic. And the CRDT state doesn't need to be stored and loaded into RAM during editing sessions.\n\nEg-walker is built on top of a new formal model which we call _event graphs_. Using this formalism we show how any CRDT can be adapted to the \"pure operation\" model. Eg-walker is an optimized algorithm for sequence editing.\n\nGu et al.'s mark \\& retrace method @Gu2005 is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n*/\n\n= Previous introduction"],[14610,12,""],[14610,0,"Introduction\n"],[12151,3,""],[12182,0,"/*\n"],[12182,3,""],[12634,0,"/*\n"],[11986,0," deterministic"],[12050,18,""],[12058,0,"the document state resulting from applying all operations in the graph.\n()"],[12131,0,"In fact, this is the formulation of pure operation-based CRDTs, as discussed in@"],[12210,1,""],[12210,0," @<"],[12212,1,""],[12212,0,"re"],[12212,2,""],[12212,0,"related-work"],[12225,0,"."],[12193,0," @polog1"],[12200,1,""],[12148,18,""],[12148,0,"how"],[12185,0," are formulated"],[11500,0,"\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\", bend: +20deg)\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\", bend: -20deg)\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n"],[12313,47,""],[12313,0,"The event graph corresponding to <<"],[12347,1,""],[12346,1,""],[12346,0,"@tw"],[12347,2,""],[12347,0,"two-inserts"],[12345,0," the activity in"],[12374,0,"."],[12381,11,""],[12381,0,"gra-"],[12384,1,""],[12383,1,""],[12382,1,""],[12381,1,""],[12381,0,"simple-graph"],[12381,12,""],[12381,0,"graph-example"],[12276,0,"*/"],[11535,0,"/*"],[11530,0,"\n    node()"],[11540,0,"()"],[11541,0,"0,0"],[11545,0,", \"\", sh"],[11551,2,""],[11551,0,"shape: round"],[11558,5,""],[11558,0,"circle, fill: black"],[11548,0,"a"],[12399,16,""],[11547,3,""],[11547,0,"$italic(\"Insert\")(i, c)$"],[11565,1,""],[11565,0,"0"],[11568,0,"\\\"H\\\""],[11573,1,""],[11575,28,""],[11548,0,"id_1, "],[11552,1,""],[11552,0,":"],[11530,0,"\n    let ()"],[11540,0,"char1, char2, char3, char4, char4"],[11568,5,""],[11568,0,"char4"],[11572,1,""],[11572,0,"5, char5"],[11579,1,""],[11579,0,"6"],[11581,0," = ()"],[11585,0,"()"],[11586,0,"0,0"],[11590,0,", ()"],[11593,0,"0."],[11594,1,""],[11594,0,",,0"],[11596,1,""],[11595,1,""],[11595,0,"0.5"],[11599,0,", ()"],[11602,0,"0,1"],[11606,0,", ()"],[11609,0,"0,1.5"],[11615,0,", ()"],[11618,0,"0,2"],[11622,0,", ()"],[11625,0,"0,2.5"],[11642,5,""],[11642,0,"char1"],[11685,0,"    node(char1, $id_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char1, $id_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char1, $id_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char1, $id_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char1, $id_1: italic(\"Insert\")(0, \\\"H\\\")$)\n"],[11698,1,""],[11698,0,"2"],[11750,1,""],[11750,0,"2"],[11750,1,""],[11750,0,"3"],[11802,1,""],[11802,0,"4"],[11854,1,""],[11854,0,"5"],[11906,1,""],[11906,0,"6"],[11705,1,""],[11705,0,"2"],[11757,1,""],[11757,0,"3"],[11809,1,""],[11809,0,"4"],[11861,1,""],[11861,0,"5"],[11913,1,""],[11913,0,"6"],[11730,1,""],[11730,0,"e"],[11782,1,""],[11782,0,"l"],[11834,1,""],[11834,0,"o"],[11886,1,""],[11886,0,"l"],[11881,1,""],[11881,0,"3"],[11933,1,""],[11933,0,"4"],[11938,1,""],[11938,0,"!"],[11725,1,""],[11725,0,"1"],[11777,1,""],[11777,0,"2"],[11829,1,""],[11829,0,"3"],[11618,1,""],[11618,0,"-1"],[11626,1,""],[11626,0,"1"],[11629,2,""],[11588,1,""],[11588,0,"2"],[11595,1,""],[11595,0,"1"],[11611,1,""],[11611,0,"0"],[11619,1,""],[11619,0,"0.5"],[11623,1,""],[11623,0,"0"],[11628,1,""],[11628,0,"0.5"],[11632,1,""],[11632,0,"0"],[11947,0,"\n    edge()"],[11957,0,"char1, char2"],[11971,0,"    edge(char1, char2)\n    edge(char1, char2)\n    edge(char1, char2)\n    edge(char1, char2)\n"],[11984,1,""],[11984,0,"2"],[11991,1,""],[11991,0,"3"],[12007,1,""],[12007,0,"3"],[12030,1,""],[12030,0,"4"],[12053,1,""],[12053,0,"4"],[12014,1,""],[12014,0,"4"],[12037,1,""],[12037,0,"5"],[12060,1,""],[12060,0,"6"],[12063,750,""],[11529,0,"node"],[11532,1,""],[11531,1,""],[11530,1,""],[11529,1,""],[11530,0,"no"],[11531,1,""],[11530,1,""],[11528,1,""],[11528,0,"node-"],[11532,1,""],[11531,1,""],[11530,1,""],[11529,1,""],[11528,1,""],[11528,0,")"],[11528,1,""],[11528,0,"(node-inset: 2pt, "],[11541,1,""],[11541,0,"34"],[11542,1,""],[11541,1,""],[11541,0,"4"],[11544,0,", node-defocus: 0"],[11541,1,""],[11541,0,"8"],[11541,1,""],[11541,0,"6"],[12003,0,", _"],[12005,1,""],[12005,0,"\"\""],[12006,0,"->"],[12032,0,", \"\""],[12035,0,"->"],[12061,0,", \"\""],[12064,0,"->"],[12090,0,", \"\""],[12093,0,"->"],[12119,0,", \"\""],[12122,0,"-."],[12123,1,""],[12123,0,">"],[12394,1,""],[12393,1,""],[12393,0,"e new"],[12390,0,"\n"],[12390,1,""],[12565,0,"\nO"],[12566,1,""],[12566,0,"Once an operation has been added to the graph it is immutable ()"],[12629,3,""],[12629,0,"w"],[12717,0,")"],[12566,5,""],[12566,0,"A"],[12567,1,""],[12578,0," is immutable once it has"],[12600,4,""],[12627,16,""],[12390,0,"\nFor example, @graph-example shows the event graph resulting from the operations in @two"],[12475,3,""],[12475,0,"two-inserts."],[12391,97,""],[12720,0,"For example, @graph-example shows the event graph resulting from the operations in @two-inserts.\n"],[12719,0,"\n"],[12231,490,""],[11501,0,"Whenever a user performs an operation, a new node labelled with that operation is added to the graph, and the previous frontier becomes the new node's parents.\nThe new node and its incoming edges are then replicated over the network.\nTwo replicas can merge their event graphs by simply taking the union of the sets of nodes and edges.\nAn operation is immutable once it has been added to the graph (we discuss later how old parts of the graph can be pruned when they are no longer needed).\n\n"],[12817,0,"\nOperations that happened one after another are related by $$"],[12877,0,"->"],[12880,0,", whild "],[12887,1,""],[12886,1,""],[12886,0,"e concurrent operations appear in different branches."],[9644,10,""],[9644,0,"edits"],[10000,7,""],[10000,0,"; the corresponding operationis"],[10030,1,""],[10029,1,""],[10029,0,"s"],[11271,0,","],[11465,0,"\n$a parallel b := (a != b) and (a arrow.r.not b) and (b arrow.r.not a)$"],[11466,70,""],[11465,1,""],[11063,13,""],[11063,0,"an _event_ consisting of"],[11155,4,""],[11155,0,"event"],[11168,4,""],[11168,0,"event"],[11478,0,"\nEvents $a$ and $b$ are _concurrent_ if neither event happened-before the other: $a parallel b := (a != b) and (a arrow.r.not b) and (b arrow.r.not a)$."],[11514,0,", written $a parallel b$$"],[11538,0,","],[11539,1,""],[11543,41,""],[11544,30,""],[11559,1,""],[11559,0,"$$"],[11560,1,""],[11565,1,""],[11565,0,"$"],[11581,1,""],[11584,53,""],[11319,0,"The _frontier_ is the set of nodes with no children.\n"],[11319,53,""],[11585,0,"The _frontier_ is the set of nodes with no children.\n"],[11542,0," both events are in the graph, but"],[11722,13,""],[11722,0,"containing"],[12985,0,"\nThe frontier of this graph is the set of events with IDs $$"],[13044,0,"{}"],[13045,0,"id_5, id_6"],[13057,0,"."],[12986,73,""],[13108,0,"The frontier of this graph is the set of events with IDs ${id_5, id_6}$.\n"],[13167,0,"italic(\""],[13174,1,""],[13176,0,")"],[13181,0,"italic("],[13190,0,")"],[12358,1,""],[12409,1,""],[12460,1,""],[12511,1,""],[12562,1,""],[12613,1,""],[12364,1,""],[12414,1,""],[12464,1,""],[12514,1,""],[12564,1,""],[12614,1,""],[12345,0,"italic("],[12354,0,")"],[12435,50,""],[12386,0,"    node(char3, $id_3: italic(Insert)(2, \\\"l\\\")$)\n"],[12403,0,"italic("],[12412,0,")"],[12461,0,"italic("],[12470,0,")"],[12443,58,""],[12386,0,"    node(char2, $italic(id)_2: italic(Insert)(1, \\\"e\\\")$)\n"],[12519,0,"italic("],[12528,0,")"],[12577,0,"italic("],[12586,0,")"],[12635,0,"italic("],[12644,0,")"],[12366,0,"\""],[12425,0,"\""],[12484,0,"\""],[12543,0,"\""],[12602,0,"\""],[12661,0,"\""],[12373,0,"\""],[12433,0,"\""],[12493,0,"\""],[12553,0,"\""],[12613,0,"\""],[12673,0,"\""],[11901,0,", and replica adds it to its copy of the graph"],[11837,4,""],[11837,0,"event"],[11851,14,""],[11851,0,"parent event IDs"],[11910,0,"eaach "],[11915,1,""],[11914,1,""],[11913,1,""],[11912,1,""],[11912,0,"ac"],[11913,1,""],[11912,1,""],[11912,0,"ch "],[12083,127,""],[12083,0,"; it always represents the event as it was originally generated, not some transformed version of the operation"],[12061,9,""],[12061,0,"event"],[12106,5,""],[12106,0,"operation"],[11648,5,""],[11648,0,"events"],[11718,4,""],[11718,0,"event"],[11815,4,""],[11815,0,"event"],[11861,9,""],[11861,0,"edges"],[11927,2,""],[11927,0,"them"],[11422,0," as per Lamport @Lamport1978"],[11473,9,""],[11472,1,""],[11497,0,"We say that "],[11509,1,""],[11509,0,"e"],[11828,0," in the local"],[11836,5,""],[11836,0,"replica's local copy of the graph"],[13353,0,"\n\n== Document versions"],[13367,8,""],[13367,0,"versions\n\n== Storing event graphs"],[10564,369,""],[10564,0,"W"],[13008,0,"\nIn order to correctly interpret an operation such as $italic(\"Delete\")(i)$, we need to determine which character was at index $i$ at the time when the operation was generated.\nWe therefore associate each operation with a _version_ of the document, and we store enough context to be able to reconstruct the exact state of the document as of any version.\n\n"],[11238,0," neither happened before the other:"],[11290,1,""],[11295,1,""],[12807,0,"\nThe events with IDs $$"],[12829,0,"italic()"],[12836,0,"id"],[12839,0,"_5"],[12842,0," and $$"],[12848,0,"italic()"],[12855,0,"id"],[12858,0,"_6"],[12861,0," are concurrent, and"],[12881,124,""],[12881,0," t"],[12970,0,"]"],[12970,1,""],[12970,0,"\n\nAlthough the event graph contains a node "],[12972,41,""],[12972,0,"The event graph for a substantial document, such a s"],[13023,1,""],[13022,1,""],[13022,0,"s a research paper, c"],[13042,1,""],[13042,0,"may t"],[13046,1,""],[13046,0,"contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form e"],[13140,1,""],[13140,0,"by exploiting the typical editing patterns of humans writing text: characters tend to be inserted con"],[13240,1,""],[13239,1,""],[13239,0,"in "],[13241,1,""],[13240,1,""],[13239,1,""],[13238,1,""],[13238,0,"in "],[13240,1,""],[13239,1,""],[13238,1,""],[13238,0,"or deleted in consecutive runs, and the "],[13277,1,""],[13276,1,""],[13275,1,""],[13274,1,""],[13274,0,"many stretches of the event graph are "],[13292,3,""],[13292,0,"a tuyp"],[13297,1,""],[13296,1,""],[13295,1,""],[13295,0,"ypical"],[13318,0,"linear.\nAs IDs we can use pairs of "],[13328,0," event"],[13359,0,"replica ID and sequence number, which also compress very well."],[13279,9,""],[13279,0,"portions"],[13420,0,"\nWe describe the storage format in more detail in SEction "],[13477,1,""],[13476,1,""],[13475,1,""],[13474,1,""],[13473,1,""],[13472,1,""],[13472,0,"e"],[13472,1,""],[13471,1,""],[13471,0,"ection TODO."],[11803,0," in the graph"],[11926,17,""],[11919,7,""],[11919,0,"operation"],[13356,0,"a "],[13372,0," a per-replica"],[13876,336,""],[13521,0,"A collaborative text editing algorithm can then be viewed as a deterministic function that takes an event graph as input, and returns the document state resulting from applying all operations in the graph.\n(In fact, this is how pure operation-based CRDTs @polog are formulated, as discussed in @related-work).\n\n"],[13563,5,""],[13823,1,""],[13824,0,")"],[13521,306,""],[13875,0,"A collaborative text editing algorithm can be viewed as a deterministic function that takes an event graph as input, and returns the document state resulting from applying all operations in the graph.\n(In fact, this is how pure operation-based CRDTs @polog are formulated, as discussed in @related-work.)\n\n"],[13697,0,"\n"],[13696,0,"\nWe call the state of the document at a given point in time a _version_, and each "],[13773,5,""],[13773,0,"the event graph contains enough information to be able to reconstruct "],[13843,128,""],[13893,0,"\nA version is identified by "],[13894,28,""],[14095,0,"\nConvergence "],[10545,0,"\n\nOne of the properties that the collaboration algorithm must satisfy is _convergence_; "],[10632,1,""],[10631,1,""],[10631,0,": any two replicas that have seen the se"],[10670,1,""],[10670,0,"ame set of operations must be in the same state, even if the operations requi"],[10742,5,""],[10742,0,"arrived in a different order.\nThis is the core of the Strong Eventual Consistency model"],[26989,8,""],[26989,0,"@Shapiro2011"],[35618,8,""],[35618,0,"@Shapiro2011"],[39134,8,""],[39134,0,"@Shapiro2011"],[40964,8,""],[40964,0,"@Shapiro2011"],[42793,8,""],[42793,0,"@Shapiro2011"],[10829,0," @Shapiro2011, and "],[10772,0," "],[10772,0,"If we assume that every non-crashed replica eventually receives every operation,"],[10772,0,"If we assume that every non-crashed replica eventually receives every operation, This is the core of the Strong Eventual Consistency model @Shapiro2011, and \n"],[10772,158,""],[10853,23,""],[10853,0,"the algorithm achieves"],[10904,6,""],[10916,6,""],[10916,0,".\nOur algorithm also satisfies the strong list specification"],[10876,0,"_"],[10877,1,""],[10877,0,"s"],[10884,1,""],[10884,0,"e"],[10893,1,""],[10893,0,"c"],[10904,0,"_"],[10953,0,"_"],[10979,0,"_ "],[10980,1,""],[10980,0,", a formal specification of collaborative text editing @Attiya2016."],[9437,161,""],[9437,0,"Our implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n"],[9437,0,"//"],[9977,5,""],[9982,1,""],[9982,0," their local copy"],[14409,0,"\n\n"],[14410,0,"Due to convergence, any two replicas that have the same set of events must be in the same state,"],[14505,1,""],[14505,0,"."],[14506,1,""],[14507,0,"Therefore, "],[14518,1,""],[14518,0,"a"],[14624,0," "],[14624,1,""],[14719,12,""],[14719,0,"This function j"],[14733,1,""],[14733,0,"can use the parent-child relationships between events, but for concurrent events there is no order."],[14517,0,"\n\n"],[14519,2,""],[14519,0,"A"],[14517,0," "],[14507,11,""],[14507,0,"The set of events that happened-before "],[14538,1,""],[14538,0," "],[14546,0,"a given event $$"],[14561,0,"e"],[14563,0," ()"],[14565,0,"i.e., the parents of $$"],[14587,0,"e"],[14589,0,", the grandparents, etc."],[14614,0," is a"],[14618,1,""],[14618,0,"exactly the set of events that were known at the time when $$"],[14678,0,"e"],[14680,0," was generated, which in turn defines the e"],[14722,1,""],[14722,0,"document state in which $$"],[14747,0,"e"],[14749,0," must be interpreted.\n"],[14212,197,""],[14211,1,""],[14573,0,"\nWe call the state of the document at a given point in time a _version_, and the event graph contains enough information to be able to reconstruct the exact state of the document as of any version.\n"],[14772,0,"#definition(\"Versions\")[\n  The _version_ of a graph $G$, denoted as $V = floor(G)$, is the graph's _frontier set_. That is, $V$ is the set of events in $G$ that do not have any descendants within $G$.\n]\n\nThe version is a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\n\n// We depart from existing literature (eg po-log) by using the frontier set to denote the graph's _version_.\n\n// We can uniquely name an event graph (or a subset of an event graph) by its _version_, denoted as $floor(G)$. We define versions in a slightly different way that other approaches (eg [po-log]):\n\n// The version of graph $G$ is the set of events in $G$ that do not have a child in the same graph.\n\nFormally:\n\n$ floor(G) = {forall i in G | exists.not j in G: i -> j } $\n// $ floor(G) = {forall i_1 in G | exists.not i_2 in G: i_1 < i_2 } $\n\nThere is a one-to-one correspondence between versions and the corresponding expanded event graph. Given some version $V$, the corresponding graph $G$ can be reconstructed as $G = ceil(V)$ where:\n\n$ ceil(V) = V union {i | exists v in V : i -> v} $\n\n// $ forall G: G = ceil(floor(G)) $\n\nThe empty version $emptyset$ is the version of the empty event graph. The empty version is sometimes called the _root version_.\n"],[14572,0,"\n\nSince the set of events that happened boef"],[14615,1,""],[14615,0,"="],[14615,1,""],[14614,1,""],[14613,1,""],[14613,0,"efore some "],[14574,7,""],[14574,0,"T"],[14618,0,"event $$"],[14625,0,"e"],[14627,0," does not change "],[12208,0,"\nIf any parent event is missing, the receiving replica "],[12245,10,""],[12253,0,"waits for it to arrive before "],[12222,0,"s"],[12222,1,""],[12228,0,"s"],[12230,2,""],[12230,0,"are"],[12265,2,""],[12265,0,"them"],[12287,0,"adding them to the graph; the result is a simple causal broadcast protocol."],[12361,0," @Birman1991 @Cachin2011"],[14821,1,""],[14821,0,", because $$"],[14832,0,"e"],[14834,0," "],[14834,1,""],[14833,1,""],[14832,1,""],[14831,1,""],[14831,0,"an event is only added to the graph once all of its parents are present, and an event's set of parents is immutable."],[14750,1,""],[14751,0,"Moreover, "],[14761,1,""],[14761,0,"t"],[14751,0,"//"],[14958,0,"\nTherefore, the "],[14970,4,""],[14970,0,"an event's set of parents "],[14674,0,".\nSince the state of the document must be a deterministic function of the set of events, the parents of $e$"],[14781,15,""],[14781,0," unambiguously"],[14802,1,""],[15064,38,""],[15064,0,"\n\n"],[15065,0,"Generally, we can define the _version_ of an event graph to be its frontier set:\n\nSince a "],[15154,1,""],[15154,0,"n event graph grows only by adding events that are concurrent to or children of existing events ()"],[15251,0,"but "],[15254,1,""],[15253,1,""],[15252,1,""],[15251,1,""],[15251,0,"we never add a parent of an existing elem"],[15288,4,""],[15288,0,"event"],[15145,0,"\n\n$ floor(G) = {forall i in G | exists.not j in G: i -> j } $"],[15149,5,""],[15149,0,"math.sans(Version)"],[15174,7,""],[15210,1,""],[15208,1,""],[15148,6,""],[15153,0,"\""],[15161,0,"\""],[15148,0," "],[15206,0," "],[15065,12,""],[15065,0,"W"],[15067,4,""],[15342,0,", the version completely specifies the "],[15356,10,""],[15356,0,"umambiguously"],[15384,0,"set of events in the graph."],[15413,401,""],[15541,418,""],[15156,1,""],[15156,0,"e_1"],[15178,1,""],[15178,0,"e_2"],[15188,1,""],[15188,0,"e_1"],[15195,1,""],[15195,0,"e_2"],[15549,131,""],[15550,98,""],[15352,67,""],[15352,0,"There is a one-to-one correspondence between versions and the corresponding expanded event graph"],[15352,1,""],[15352,0,"t"],[15397,39,""],[15397,0,"an"],[15411,0," and its version."],[15559,149,""],[15430,0,"Given some version $V$, the corresponding graph $G$ can be reconstructed as $G = ceil(V)$ where:\n\n$ ceil(V) = V union {i | exists v in V : i -> v} $\n"],[15428,1,""],[15471,9,""],[15471,0,"set of events"],[15509,19,""],[15509,0,"follows"],[15521,4,""],[15521,0,"sans(\"Version\")"],[15527,7,""],[15527,0,"Events"],[15550,1,""],[15550,0,"e_1"],[15563,1,""],[15563,0,"e_2"],[15574,1,""],[15574,0,"e_1"],[15581,1,""],[15581,0,"e_2"],[15588,0,"\nFor all valid event gap"],[15611,1,""],[15610,1,""],[15610,0,"raphs, $$"],[15618,0,"\\"],[15615,0," $G%"],[15618,1,""],[15618,0,"$"],[15620,0," we have"],[15630,1,""],[15630,0,"sans(\"Events\")()"],[15645,0,"sans(\"Events\")"],[15651,6,""],[15651,0,"Version"],[15660,0,"()"],[15661,0,"G"],[15664,0," = G"],[15669,0,"."],[15683,2,""],[15683,0,"can be seen as"],[15810,39,""],[15938,0,"\n/*"],[16361,0,"*/"],[14544,51,""],[14588,0," to the replica that generated $$"],[14620,0,"e"],[14603,19,""],[15167,226,""],[15327,0,"Since an event graph grows only by adding events that are concurrent to or children of existing events (we never add a parent of an existing event), there is a one-to-one correspondence between an event graph and its version.\n"],[15243,11,""],[15542,0,"Therefore, "],[15553,1,""],[15553,0,"f"],[15553,1,""],[15553,0,"F"],[15552,1,""],[15542,10,""],[15243,0," as follows"],[15243,11,""],[15542,0,"Therefore, "],[15553,1,""],[15553,0,"f"],[15243,0," as follows"],[15553,9,""],[15553,0,"Hence"],[15641,0,"\n"],[15780,0,"\nThe set of parents of an event in the graph is the version of the document in which that op"],[15871,1,""],[15870,1,""],[15870,0,"event's "],[15870,8,""],[15870,0,"operation must be interpreted."],[15972,3,""],[15972,0,"We also call the"],[16003,20,""],[26985,884,""],[26985,0,"\n"],[26985,0,"TODO: old material in this section, to be edited"],[27870,4084,""],[28472,74,""],[28358,114,""],[28357,1,""],[16023,0,"// The event graph may become very large, but the version is almost always quite small - usually 2 items or less.\n"],[15781,120,""],[15643,0,"The set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\n"],[15779,0,"hence also "],[15911,0,"\nEven if the event graph is very large, a version ar"],[15962,1,""],[15961,1,""],[15961,0,"rarely "],[15936,7,""],[15936,0,"and the number of replicas are"],[15991,0,"consists of more than two events."],[16147,114,""],[16025,1,""],[16093,3,""],[16093,0,"; w"],[16108,17,""],[16108,0,"it"],[16029,13,""],[16029,0,"_root version_"],[16094,36,""],[15440,5,""],[15440,0,"change"],[15453,0,"s"],[15446,0," tthe"],[15448,1,""],[16101,0,"\n\n== REp"],[16108,1,""],[16107,1,""],[16107,0,"eplaying editing history\n\nCollaboroative"],[16146,1,""],[16145,1,""],[16144,1,""],[16143,1,""],[16142,1,""],[16141,1,""],[16141,0,"ative editing algorithms are use"],[16172,1,""],[16172,0,"ually df"],[16179,1,""],[16179,0,"efined in terms of sending and receiving messages.\nThe abstraction of an event grqpah "],[16264,1,""],[16263,1,""],[16262,1,""],[16261,1,""],[16260,1,""],[16260,0,"aph allows us to reframe these algorithms in a simpler way: "],[16320,6,""],[16320,0,"a"],[16359,16,""],[16359,0,"is"],[16725,2,""],[11749,0," $$"],[11751,0,"a eq.not b"],[11762,0,","],[14609,0," generating"],[14671,79,""],[14665,9,""],[14665,0,"T"],[14499,0,"; the state of the document must be a deterministic function of the set of events"],[14501,0,"hence, "],[14587,0," that have occurred"],[14676,94,""],[14608,0,"the set of events that were known to the generating replica at the time when $e$ was generated "],[14608,1,""],[14608,0,"T"],[14703,1,""],[14703,0,"is t"],[14706,0,"exacl"],[14710,1,""],[14710,0,"tly "],[14770,12,""],[14770,0,", i.e., $e$'s parents and all of their ancestors"],[14820,0,"hef"],[14822,1,""],[14821,1,""],[14820,1,""],[14820,0,"T"],[14820,1,""],[14823,0,"refore, the"],[14924,208,""],[14718,0,"sub"],[14756,14,""],[14685,0,"a given event "],[14928,0,"Given an event graph $G$ (as"],[14955,1,""],[14955,0," set of events), "],[14972,1,""],[14972,0,"w"],[14999,14,""],[14999,0,"$$"],[15000,0,"G"],[14954,47,""],[14954,0,"re"],[14954,2,""],[14954,0,"a set of events), we define the _version_ of $G"],[14954,0,"represented as "],[15976,0," in practice"],[15889,30,""],[15889,0,"is"],[25980,1195,""],[9014,0,"\n\n/*\nIn @eg-walker, we introduce _eg-walker_ (_Event Graph Walker_). Eg-walker can efficiently replay any event graph of sequence edits and generate the corresponding document state. Natively, eg-walker traverses the entire event graph to generate the corresponding CRDT state (using FugueMax @fugue). During this traversal, events are transformed and applied. However, traversing the entire event graph to regenerate the CRDT state on every peer is inefficient and slow. And it precludes replicas from pruning any events in the event graph.\n\nIn @eg-partial we show how the algorithm can be optimised to visit only a small subset of events in the graph when merging changes from remote peers. This optimisation also dramatically improves performance for linear editing traces - by about 15x in our testing.\n\n@benchmarking evaluates the performance of eg-walker, comparing it to equivalent CRDT based approaches on file size, CPU time and memory usage in real world editing environments. Eg-walker is faster and smaller than equivalent CRDT based approaches in our real world data sets. However, it scales worse than CRDTs in extremely concurrent environments (eg very complex git editing histories).\n*/"],[9822,392,""],[8842,0,"\n- @benchmarking evaluates the performance of eg-walker, comparing it to equivalent CRDT based approaches on file size, CPU time and memory usage in real world editing environments. Eg-walker is faster and smaller than equivalent CRDT based approaches in our real world data sets. However, it scales worse than CRDTs in extremely concurrent environments (eg very complex git editing histories).\n"],[9236,1,""],[8844,0," In"],[8862,0,"we "],[8873,1,""],[10219,1,""],[17759,0,"\nThis allows us to sepaarat"],[17785,1,""],[17784,1,""],[17783,1,""],[17782,1,""],[17782,0,"rate the replicatiton of "],[17800,1,""],[17806,0,"the "],[17791,19,""],[17791,0,"process of replicating the event graph from the algorihm tha"],[17845,0,"t"],[17852,0,"t ensures convergence."],[17979,0,"\nMoreover, "],[17980,10,""],[17980,0,"In addition to determining the document state from an entire event graph, th"],[18055,1,""],[18054,1,""],[18054,0,"we need an _incremental update_: when we have an existing event graph and document state, and a small number of events are added to the graph "],[18172,0," from a remoet rep"],[18189,1,""],[18188,1,""],[18187,1,""],[18186,1,""],[18185,1,""],[18184,1,""],[18184,0,"e re"],[18187,1,""],[18186,1,""],[18185,1,""],[18184,1,""],[18184,0,"e "],[18185,1,""],[18184,1,""],[18184,0,"te replica"],[18218,0,"\n"],[18218,1,""],[18217,1,""],[18217,0,", we need to efficiently the "],[18245,1,""],[18244,1,""],[18243,1,""],[18242,1,""],[18242,0,"determine the corresponding update to make to the document state so that it reflects the new events ()"],[18343,0,"without re-processing the entire graph"],[18382,0,".\nThis incremental update is what both CRDT"],[18421,0,"OT and "],[18432,0," algorithms focus on.\n"],[18383,0,"\n\n"],[18384,0,"This updat4e"],[18395,1,""],[18394,1,""],[18394,0,"e to tthe do"],[18384,22,""],[18384,0,"For text documents, the incremental update is also described as insertions and deletions at particular indexes; however, the indexes may differ from those in the original events due to th "],[18571,1,""],[18571,0,"e effects of concurrent events."],[18595,6,""],[18595,0,"operations"],[18678,0,"If there are no concurrent events, OT is stri"],[18722,1,""],[18722,0,"aightforward: the incremental update is identical to the operation in the original event "],[18810,1,""],[18810,0,", as no o"],[18818,1,""],[18818,0,"transformation takes place.\nIf there is concurrency, each new event must be transffor"],[18902,1,""],[18901,1,""],[18900,1,""],[18900,0,"ormed with regard to eah "],[18924,1,""],[18923,1,""],[18922,1,""],[18922,0,"ach concurrent event.\nIn CRDTs, each event is translated into operations that use unique IDs instead of indexes, based on the context in whcih "],[19064,1,""],[19063,1,""],[19062,1,""],[19061,1,""],[19061,0,"ich the event was generated"],[18871,0,"OT must ttrans"],[18879,6,""],[18879,0,"transform "],[18903,20,""],[18923,0," ex"],[18925,1,""],[18924,1,""],[18923,1,""],[18923,0," existing,"],[18952,0,"\n"],[19097,0,", and then these operatoins "],[19124,1,""],[19123,1,""],[19122,1,""],[19121,1,""],[19120,1,""],[19120,0,"ions "],[18977,0,"first "],[19131,0,"are applied to a data structure that reflects all of the operations "],[19063,7,""],[19063,0,"document state"],[19206,0,"seen so far ()"],[19219,0,"including both "],[19235,0,"\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, based on the document state in which the event was generated, and then these operations are applied to a data structure that reflects all of the operations seen so far (including both )"],[19235,0,"\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, based on the document state in which the event was generated, and then these operations are applied to a data structure that reflects all of the operations seen so far (including both )"],[19235,566,""],[19219,15,""],[19219,0,"both concurrent operations and those that happened before"],[19277,0,".\nIn order to update the text editor "],[19313,1,""],[19313,0,", these updates to the CRDT's internal structure need to be translaed "],[19382,1,""],[19381,1,""],[19380,1,""],[19380,0,"ted back into index-based insertions and deletions.\nMany CRDT papers elide this translation back ind"],[19479,1,""],[19479,0,"to indexes, but it is important for ppra"],[19518,1,""],[19517,1,""],[19516,1,""],[19516,0,"ac"],[19517,1,""],[19516,1,""],[19516,0,"ractical applications ()"],[19539,0,"ffor e"],[19544,1,""],[19543,1,""],[19542,1,""],[19541,1,""],[19540,1,""],[19540,0,"or example, to ensure that the user's cursor position remains in the correct place"],[19570,0," local"],[19628,0," when another user changes text earlier in the document"],[19684,0,"."],[19472,0,"from unique IDs "],[19493,2,""],[19699,0,"\n\n~Thu"],[19701,1,""],[19704,0,"s, regardless of whether the OT or the CRDT appproach "],[19749,1,""],[19757,0,"is used, a collaborative editing algorithm can be boiled down to an incremental updaate "],[19844,1,""],[19843,1,""],[19842,1,""],[19841,1,""],[19841,0,"te to an event graph: given an event to be added to an existing event graph, return the operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event."],[17367,0," over a network"],[17734,3,""],[17733,1,""],[17752,11,""],[17752,0,"could be processed in any"],[17922,0,"_"],[17949,0,"_"],[18112,0," function"],[18316,8,""],[18369,2,""],[18369,0,", "],[18409,1,""],[20121,0,"\n\n= The event "],[20129,1,""],[20129,0,"E"],[20135,0,"Graph Walker A"],[20148,1,""],[20148,0,"algorithm\n\nEg-walker is a collaborative editing algorithm explicitly "],[20206,11,""],[20206,0,"based on the idea of replaying an event graph."],[20188,0,"text "],[20257,0,"\nThe persistent state of eg-walker consists only of the event graph ()"],[20326,0,"no CRDT state is written to disk"],[20359,0,", and it is based on a replication layer that ensures that all replicas eventually "],[20421,0," non-crashjed"],[20433,1,""],[20432,1,""],[20431,1,""],[20431,0,"ed"],[20454,0,"receive every event that any replica adds to its copy of the graph.\n\nWhen a replica receives an event graph from another replica or loads it from disk, it first replays the graph to determine the current document sttae"],[20671,1,""],[20670,1,""],[20669,1,""],[20669,0,"ate.\nIt does this by performing a topological sort, "],[20719,0," of the DAG"],[20732,0,"and then transforming each event in topologically sorted order so "],[20764,31,""],[20764,0," "],[20768,0,"tthat "],[20773,1,""],[20772,1,""],[20771,1,""],[20770,1,""],[20769,1,""],[20769,0,"hat if the transformed insertions and deletiionis "],[20818,1,""],[20817,1,""],[20816,1,""],[20815,1,""],[20814,1,""],[20813,1,""],[20813,0,"ons are applied in topologically sorted order "],[20858,1,""],[20858,0,", the resulting document correctly "],[20860,0,"starting with t"],[20874,1,""],[20874,0,"an empty document, "],[20897,9,""],[20897,0,"final"],[20922,0,"represents the document resulting from all edits in the event graph "],[20989,1,""],[20989,0," @Attiya2016"],[20989,0," in a way that is consistent with the strong list specification"],[21064,0,".\n\nIn general, replaying an event graph using a CRDT algorithm is not difficult; the core inisight "],[21156,1,""],[21162,0,"of eg-walker are a number of algorithmic optimisatios"],[21214,1,""],[21214,0,"ns that make tthis "],[21232,1,""],[21231,1,""],[21230,1,""],[21229,1,""],[21228,1,""],[21228,0,"his process efficient."],[21065,0,"\n\nMoreover, once the document state has been loaded in this way, "],[20365,11,""],[20365,0,"the algoir"],[20374,1,""],[20373,1,""],[20373,0,"r"],[20369,5,""],[20369,0,"algorithmb"],[20378,1,""],[20378,0," builds on"],[20388,3,""],[20508,12,""],[21062,0,"\nIn graphs with concurrent operations "],[21062,0,"\n"],[21101,0,"there are multiple possible topological sorts "],[21146,1,""],[21146,0,", and eg-walker guarantees that the final document is the same, regardless which of these orders is chosen "],[21252,1,""],[21252,0,"\n"],[21252,1,""],[21252,0,".\nHowever, the choice of topological sort order affects the perof"],[21316,1,""],[21315,1,""],[21315,0,"formance of the algorithm, as discussed s"],[21355,1,""],[21355,0,"in Section TODO."],[21253,0,"\nFor example, the graph in @gr"],[21281,2,""],[21281,0,"graph-example has two possible soet"],[21315,1,""],[21314,1,""],[21314,0,"rt orders; eg-walker will either output "],[21347,7,""],[21347,0,"insert the second \"\""],[21366,0,"l"],[21368,0," at index 3 and then the exp"],[21395,1,""],[21395,0,"clamation mark at index 5 ()"],[21422,0,"like User 1 in @tw"],[21438,2,""],[21438,0,"two-inserts"],[21450,0,", or "],[21347,0,"first "],[21461,0,"first insert the exclamation mark at index 4 followed by the second \"\""],[21530,0,"l"],[21532,0," at index 3.\nEither way, the final document is the same "],[21587,1,""],[21587,0,"."],[21145,0," order"],[21549,0," (like User 1 in @two-inserts)"],[21561,1,""],[21561,0,"2"],[20258,108,""],[20258,0,"T"],[20258,1,""],[20258,0,"The persistent state of eg-walker consists only of the event graph (no CRDT state is written to disk), and t"],[20258,108,""],[20258,0,"`"],[20258,1,""],[20258,0,"T"],[21886,0,"\n\n"],[21887,0,"// The persistent state of eg-walker consists only of the event graph (no CRDT state is written to disk), and t"],[21991,7,""],[20411,0,"\nEach replica stores the event graph alongside the current state of the document.\n\nTo reconstruct the state of the document at any point in time, eg-walker replays the subset of events corresp"],[20596,7,""],[20596,0,"corresponding to that document version."],[20636,152,""],[20951,0,".\nThe resulting document"],[20976,14,""],[20447,0," on disk"],[20696,0," event"],[20913,52,""],[20913,0,"set of events processed"],[20938,0,"\"Correctly\" means that "],[20961,1,""],[20961,0,"t"],[20938,17,""],[20938,0,"Our correctness criterion is"],[21055,0,", and it is maximally non-interleaving @fu"],[21095,2,""],[21095,0,"fugue, i.e. "],[21106,1,""],[21106,0,", o"],[21108,1,""],[21108,0,"concurrent insertions at the same position are placed one after another, and not interleaved"],[21055,0," ()"],[21057,0,"i.e., it converges and it applies operations in the right place"],[21166,1,""],[21167,0,"("],[21266,0,")"],[21686,20,""],[21686,0,"\"\""],[21687,0,"!"],[21770,13,""],[21770,0,"T"],[21800,0," either way,"],[21812,9,""],[21812,0," but"],[21816,1,""],[21830,12,""],[21915,63,""],[21915,0,"The event graph replay extends directly to incremental updates: when new events are added to the graph ()"],[22019,0,"ensuring that an event is only added after all of its parents are already in the graph"],[22106,0,", "],[21946,8,""],[21946,0,"easily"],[22106,0,"\n\n== Making replay fast"],[22106,0,"each added event in turn becomes the "],[22123,20,""],[22123,0,"becomes the next element of a topologically sorted sequence."],[21917,1,""],[21917,0,"is"],[22184,0,"\nWe can th"],[22193,1,""],[22192,1,""],[22192,0,"performing exactly the same transformation to "],[22234,0," "],[22234,1,""],[22192,46,""],[22192,0,"transform each new event in the same was"],[22231,1,""],[22231,0,"y as during replay, resulting in the operation that needs to be applied to the current document so that it reflects the intended effect of the"],[22372,1,""],[22372,0,"at event."],[22251,130,""],[22251,0,"and then apply the transformed operation to the current document state."],[21947,6,""],[21947,0,"directly"],[22018,44,""],[22018,0,", since"],[22045,0,"must "],[22050,4,""],[22057,0," be"],[22073,1,""],[21984,0," a"],[21996,1,""],[21997,3,""],[21997,0,"is"],[21915,6,""],[21915,0,"E"],[22115,1,""],[22115,0,"the"],[22220,5,""],[22597,0,"\n- The CRDT's state grows without bounds.\n- The CRDT's state needs to be available both when emitting new, local events, and when merging remote events. Generally, this data structure in its entirety needs to be loaded entirely into RAM on each peer before any editing can happen.\n- The storage format and network protocols are tied to a particular CRDT algorithm. This makes protocol standardization and code reuse very difficult when new CRDTs are invented.\n"],[22492,2,""],[22492,0,"/*\n"],[22495,1,""],[23056,0,"\n*/"],[25621,5366,""],[23177,0,"\n\nI"],[23179,1,""],[23179,0,"The idea of capturing a DAG of operations in the form they were generated appears in several algorithms, including pure operation-based CRDTs @oplog"],[23322,5,""],[23322,0,"po"],[23322,2,""],[23322,0,"polog and []"],[23333,0,"time machines"],[23347,0," ()"],[23349,0,"TODO: citation"],[23364,0,"."],[23332,1,""],[23345,1,""],[22385,0,"it workse "],[22394,1,""],[22393,1,""],[22393,0," essentially by simulating a network of communic"],[22440,1,""],[22440,0,"cating peers and their states.\n"],[22471,1,""],[22471,0,"T"],[23449,0,"\nHowever, to our knowledge"],[23450,25,""],[23450,0,"Existing "],[23450,0,"However, "],[23459,1,""],[23459,0,"e"],[23468,0,"publications on op"],[23485,1,""],[23484,1,""],[23484,0,"pure operation-based CRDTs consider only datatypes such as sets and registers, but not text or lists."],[26004,1423,""],[20937,0,"\n// TODO: add a diagram to illustrate flattening a DAG into a total order?"],[20123,0,"#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $italic(id)_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $italic(id)_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $italic(id)_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $italic(id)_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $italic(id)_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $italic(id)_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"->\")\n    edge(char2, char3, \"->\")\n    edge(char3, char4, \"->\")\n    edge(char4, char5, \"->\")\n    edge(char4, char6, \"->\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\n"],[20885,13,""],[20885,0,"topological-sort"],[20833,45,""],[20833,0,"Example of topologically sorting an eventt graph"],[20874,1,""],[20309,10,""],[20309,0,"e"],[20312,28,""],[20332,10,""],[20332,0,"e"],[20335,28,""],[20338,240,""],[20367,116,""],[20337,0,"\n    node()"],[20347,0,"()"],[20348,0,"0,0"],[20352,0,", \"\""],[20355,1,""],[20355,0,"\", shape: cir "],[20368,1,""],[20368,0,"cle"],[20166,0,", node-stroke: black"],[20375,0,"."],[20163,1,""],[20163,0,"1"],[20377,15,""],[20186,0,", node-shape: circle"],[20186,20,""],[20186,0,", node-shape: circle"],[20186,20,""],[20377,0,", shape: circle, stroke: black"],[20375,1,""],[20375,0," "],[20375,1,""],[20375,0,"-"],[20367,5,""],[20367,0,"char3"],[20377,0,"$"],[20374,0,"$"],[20378,0,"$"],[20375,0,"$"],[20376,3,""],[20375,2,""],[20375,0,"-"],[20375,1,""],[20375,0,"a"],[20375,1,""],[20375,0,"0"],[20375,1,""],[20375,0,"a"],[20374,3,""],[20374,0,"text(0.8em, $f$)"],[20387,1,""],[20387,0,"a"],[20328,0,"text(0.8em, "],[20346,0,")"],[20335,1,""],[20335,0,"1"],[20341,3,""],[20341,0,"a"],[20163,1,""],[20163,0,"2"],[20187,0," node-fill: black,"],[20205,16,""],[20204,1,""],[20461,0,", []"],[20464,0,"$$"],[20465,0,"e_1"],[20469,1,""],[20463,1,""],[20461,7,""],[20455,0,", $e_1$"],[20468,0,", label-pos: 0"],[20163,1,""],[20163,0,"3"],[20217,4,""],[20217,0,"e"],[20221,4,""],[20221,0,"e"],[20225,4,""],[20225,0,"e"],[20229,4,""],[20229,0,"e"],[20233,4,""],[20233,0,"e"],[20237,4,""],[20237,0,"e"],[20277,4,""],[20277,0,"0"],[20285,2,""],[20286,0,"-"],[20288,0,".5"],[20302,4,""],[20302,0,"e"],[20333,4,""],[20333,0,"e"],[20324,0,"    node(e1, text(0.1em, $a$))\n    node(e1, text(0.1em, $a$))\n    node(e1, text(0.1em, $a$))\n    node(e1, text(0.1em, $a$))\n"],[20334,1,""],[20334,0,"2"],[20365,1,""],[20365,0,"3"],[20396,1,""],[20396,0,"4"],[20427,1,""],[20427,0,"5"],[20458,1,""],[20458,0,"6"],[20319,1,""],[20319,0,"e_1"],[20352,1,""],[20352,0,"e_2"],[20385,1,""],[20385,0,"e_3"],[20418,1,""],[20418,0,"3_4"],[20418,1,""],[20418,0,"e"],[20451,1,""],[20451,0,"e+"],[20452,1,""],[20452,0,"_5"],[20458,0,"    node(e5, text(0.1em, $e_5$))\n"],[20468,1,""],[20468,0,"6"],[20486,1,""],[20486,0,"6"],[20491,84,""],[20500,3,""],[20500,0,"e"],[20501,1,""],[20504,4,""],[20504,0,"e"],[20535,0,"    edge(e1, e2, $e_1$, \"->\", label-pos: 0)\n    edge(e1, e2, $e_1$, \"->\", label-pos: 0)\n    edge(e1, e2, $e_1$, \"->\", label-pos: 0)\n    edge(e1, e2, $e_1$, \"->\", label-pos: 0)\n    edge(e1, e2, $e_1$, \"->\", label-pos: 0)\n"],[20545,1,""],[20545,0,"2"],[20589,1,""],[20589,0,"3"],[20633,1,""],[20633,0,"4"],[20677,1,""],[20677,0,"5"],[20711,44,""],[20549,1,""],[20549,0,"3"],[20593,1,""],[20593,0,"4"],[20637,1,""],[20637,0,"5"],[20681,1,""],[20681,0,"6"],[20555,1,""],[20555,0,"2"],[20599,1,""],[20599,0,"3"],[20643,1,""],[20643,0,"4"],[20687,1,""],[20687,0,"5"],[20163,1,""],[20163,0,"2"],[20246,0,".5"],[20713,0,"    edge(e5, e6, $e_5$, \"->\", label-pos: 0)\n"],[20754,1,""],[20754,0,"1"],[20733,1,""],[20733,0,"6"],[20321,3,""],[20321,0,"()"],[20322,0,"Am1"],[20324,1,""],[20323,1,""],[20323,0,",1"],[20359,0,")"],[20356,0,"("],[20357,3,""],[20357,0,"A,2"],[20393,1,""],[20392,1,""],[20391,1,""],[20391,0,"()"],[20392,0,"A,3"],[20426,3,""],[20426,0,"()"],[20427,0,"A,4"],[20461,3,""],[20461,0,"<"],[20461,1,""],[20461,0,"()"],[20462,0,"A,5"],[20498,1,""],[20497,1,""],[20496,1,""],[20496,0,"()"],[20497,0,"A,6"],[20217,1,""],[20217,0,"a"],[20221,1,""],[20221,0,"a"],[20225,1,""],[20225,0,"a"],[20229,1,""],[20229,0,"a"],[20233,1,""],[20233,0,"e"],[20233,1,""],[20233,0,"a"],[20237,1,""],[20237,0,"a"],[20304,1,""],[20304,0,"a"],[20339,1,""],[20339,0,"a"],[20374,1,""],[20374,0,"a"],[20409,1,""],[20409,0,"a"],[20444,1,""],[20444,0,"a"],[20479,1,""],[20479,0,"a"],[20514,1,""],[20514,0,"a"],[20558,1,""],[20558,0,"a"],[20602,1,""],[20602,0,"a"],[20646,1,""],[20646,0,"a"],[20690,1,""],[20690,0,"a"],[20734,1,""],[20734,0,"a"],[20518,1,""],[20518,0,"a"],[20562,1,""],[20562,0,"a"],[20606,1,""],[20606,0,"a"],[20650,1,""],[20650,0,"a"],[20694,1,""],[20694,0,"a"],[20738,1,""],[20738,0,"z"],[20738,1,""],[20738,0,"a"],[20247,1,""],[20246,1,""],[20292,0,"\n    let ()"],[20302,0,"b1, b2, b3"],[20309,3,""],[20309,0," b3"],[20313,0," = ()"],[20317,0,"()"],[20318,0,"0.5,1.5"],[20326,0,", ()"],[20329,0,"0.5,1"],[20335,0,", ()"],[20338,0,"0.5,0.5"],[20577,1,""],[20576,1,""],[20576,0,"(A,"],[20580,0,")"],[20622,2,""],[20622,0,"(A,"],[20626,0,")"],[20670,0,")"],[20668,0,"("],[20669,2,""],[20669,0,"A"],[20670,1,""],[20670,0,","],[20672,0,")"],[20716,0,")"],[20714,0,"("],[20717,1,""],[20714,3,""],[20714,0,"(A,"],[20718,0,")"],[20760,2,""],[20760,0,"(A,"],[20764,0,")"],[20809,0,")"],[20806,2,""],[20806,0,"(A,"],[20558,0,"    node(a1, text(0.1em, $(A,1)$))\n    node(a2, text(0.1em, $(A,2)$))\n    node(a3, text(0.1em, $(A,3)$))\n    node(a1, text(0.1em, $(A,1)$))\n    node(a2, text(0.1em, $(A,2)$))\n    node(a3, text(0.1em, $(A,3)$))\n"],[20663,105,""],[20567,1,""],[20567,0,"b"],[20602,1,""],[20602,0,"b"],[20637,1,""],[20637,0,"b"],[20585,1,""],[20585,0,"B"],[20620,1,""],[20620,0,"B"],[20655,1,""],[20655,0,"B"],[20939,0,"    edge(a1, a2, $(A,1)$, \"->\", label-pos: 0)\n    edge(a2, a3, $(A,2)$, \"->\", label-pos: 0)\n    edge(a3, a4, $(A,3)$, \"->\", label-pos: 0)\n"],[20958,1,""],[20958,0,"B"],[21004,1,""],[21004,0,"B"],[21004,1,""],[21004,0,"B"],[21050,1,""],[21050,0,"B"],[20948,1,""],[20948,0,"b"],[20952,1,""],[20952,0,"b"],[20998,1,""],[20998,0,"b"],[21044,1,""],[21044,0,"b"],[20994,1,""],[20994,0,"b"],[21040,1,""],[21040,0,"b"],[21041,1,""],[21041,0,"2"],[21045,1,""],[21045,0,"2"],[21045,1,""],[21045,0,"3"],[21074,1,""],[21074,0,"1"],[20983,0,", label-side: right"],[20997,5,""],[20997,0,"left"],[20374,5,""],[20374,0,"a"],[20405,5,""],[20405,0,"a"],[20436,5,""],[20436,0,"a"],[20467,5,""],[20467,0,"a"],[20498,5,""],[20498,0,"a"],[20529,5,""],[20529,0,"a"],[20560,5,""],[20560,0,"a"],[20591,5,""],[20591,0,"a"],[20622,5,""],[20622,0,"a"],[21011,0,", label-side: left"],[21075,0,", label-side: left"],[20645,0,"e_"],[20647,1,""],[20648,1,""],[20649,1,""],[20647,0,"\""],[20650,0,"\""],[20696,1,""],[20741,1,""],[20786,1,""],[20831,1,""],[20876,1,""],[20921,1,""],[20984,1,""],[21047,1,""],[20694,1,""],[20738,1,""],[20782,1,""],[20826,1,""],[20870,1,""],[20914,1,""],[20976,1,""],[21038,1,""],[20692,1,""],[20735,1,""],[20778,1,""],[20821,1,""],[20864,1,""],[20907,1,""],[20968,1,""],[21029,1,""],[20692,0,"e_\""],[20697,0,"\""],[20739,0,"e_\""],[20744,0,"\""],[20786,0,"e_\""],[20791,0,"e_\""],[20791,3,""],[20791,0,"\""],[20833,0,"e_\""],[20838,0,"\""],[20814,47,""],[20768,0,"    edge(a5, a6, $e_\"A5\"$, \"->\", label-pos: 0)\n"],[20861,0,"\n    edge(a5, a6, $e_\"A5\"$, \"->\", label-pos: 0)"],[20768,47,""],[20880,0,"e_\""],[20885,0,"\""],[20927,0,"e_\""],[20932,0,"\""],[20992,0,"e_\""],[20997,0,"\""],[21057,0,"e_\""],[21062,0,"\""],[20318,3,""],[20318,0,"1"],[20327,3,""],[20327,0,"1"],[20334,3,""],[20334,0,"1"],[21097,0,"\n    edge()"],[21107,0,"a1, b1, \"\""],[21116,0,"->"],[21120,0,"\n    edge()"],[21130,0,"a3, b3, \"\""],[21139,0,"->"],[21143,0,"\n    edge()"],[21153,0,"b2, a5, \"\""],[21162,0,"->"],[21119,0,", bend: -20deg"],[21127,1,""],[21127,0,"+"],[21156,0,", bend: -20deg"],[21193,0,", bend: +20deg"],[21117,0,"|"],[21155,0,"|"],[21193,0,"|"],[21196,14,""],[21158,14,""],[20650,0,"|"],[20698,0,"|"],[20746,0,"|"],[20794,0,"|"],[20842,0,"|"],[20890,0,"|"],[20938,0,"|"],[21004,0,"|"],[21070,0,"|"],[14400,0,"|"],[14430,0,"|"],[14460,0,"|"],[14490,0,"|"],[14520,0,"|"],[20317,0,", b4"],[20349,0,", ()"],[20352,0,"1,0"],[21067,1,""],[21067,0,"3"],[21071,1,""],[21071,0,"4"],[21123,0,"    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 1, label-side: left)\n"],[21102,1,""],[21102,0,"0"],[21145,1,""],[21145,0,"4"],[21136,2,""],[21136,0,"(0,-0.5)"],[21142,1,""],[21142,0,"6"],[21142,1,""],[21142,0,"5"],[21136,8,""],[21136,0,"b4"],[20890,2,""],[20890,0,"(0,-0.6)"],[20896,1,""],[20896,0,"51"],[20911,7,""],[20357,0,"\n    let ()"],[20367,0,"c1, cc2,"],[20374,1,""],[20373,1,""],[20372,1,""],[20372,0,"2, cc3"],[20377,1,""],[20376,1,""],[20376,0,"3"],[20378,0," = ()"],[20382,0,"()"],[20383,0,"-1,1"],[20388,0,", ()"],[20391,0,"-1,0.5"],[20398,0," "],[20398,1,""],[20398,0,", ()"],[20401,0,"-1,0"],[20687,0,"    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n"],[20696,1,""],[20696,0,"c"],[20727,1,""],[20727,0,"c"],[20758,1,""],[20758,0,"c"],[21332,0,"    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B4\"$, \"-|>\", label-pos: 1, label-side: left)\n"],[21341,1,""],[21341,0,"c"],[21345,1,""],[21345,0,"c"],[21411,1,""],[21398,65,""],[21408,1,""],[21407,1,""],[21407,0,"c2"],[21412,1,""],[21411,1,""],[21411,0,"c3"],[21473,2,""],[21473,0,"c2"],[21477,2,""],[21477,0,"c3"],[21353,1,""],[21353,0,"C"],[21419,1,""],[21419,0,"C"],[21420,1,""],[21420,0,"2"],[21486,1,""],[21485,1,""],[21485,0,"C3"],[21491,7,""],[21293,7,""],[21371,18,""],[21419,18,""],[21460,18,""],[20687,0,"    node(b3, text(0.1em, $a$))\n"],[20697,1,""],[20697,0,"4"],[21578,0,"\n    edge()"],[21588,0,"a2, c1, \"\""],[21597,0,"-|>"],[21602,0,"\n    edge()"],[21612,0,"c3, a6, \"\""],[21621,0,"-|>"],[20905,0,", label-side: left"],[21115,0,", label-side: left"],[21346,2,""],[21346,0,"(1,-0.1)"],[21507,2,""],[21507,0,"(-1,-0.1)"],[21514,0,"0"],[21352,0,"0"],[21349,1,""],[21511,1,""],[21511,0,"-"],[21349,0,"-"],[21353,1,""],[21353,0,"5"],[21516,1,""],[21516,0,"5"],[21652,0,", bend: -20deg"],[21089,1,""],[21089,0,"5"],[20407,0,"\n    let ()"],[20417,0,"x1, x2, s3"],[20426,1,""],[20425,1,""],[20425,0,"s"],[20425,1,""],[20425,0,"x3, y1, y2, y3, y4"],[20444,0," = ()"],[20448,0,"()"],[20449,0,"3,1.5"],[20455,0,", ()"],[20458,0,"3.5,1.5"],[20466,0,", ()"],[20469,0,"4,1.5"],[20475,0,", ()"],[20478,0,"4.5,1.5"],[20486,0,", ()"],[20489,0,"5,1.5"],[20494,1,""],[20494,0,") "],[20495,1,""],[20494,1,""],[20494,1,""],[20494,0,"), ()"],[20498,0,"5.5,1.5"],[20506,0,", ()"],[20509,0,"6,1.5"],[20514,1,""],[20514,0,"))"],[20920,0,"    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n"],[20930,0,"x"],[20930,1,""],[20929,1,""],[20929,0,"x"],[20960,1,""],[20960,0,"x"],[20991,1,""],[20991,0,"x"],[20452,2,""],[20462,1,""],[20461,1,""],[20469,1,""],[20468,1,""],[20478,1,""],[20477,1,""],[20485,1,""],[20484,1,""],[20494,1,""],[20493,1,""],[20501,1,""],[20500,1,""],[20999,0,"    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n"],[21008,1,""],[21008,0,"y"],[21039,1,""],[21039,0,"y"],[21070,1,""],[21070,0,"y"],[21070,1,""],[21070,0,"y"],[21101,1,""],[21101,0,"y"],[22004,0,"    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n"],[22013,1,""],[22013,0,"x"],[22017,1,""],[22017,0,"x"],[20449,1,""],[20449,0,"4"],[20451,1,""],[20451,0,"2"],[20456,3,""],[20456,0,"4"],[20459,0,".5"],[20473,2,""],[20474,1,""],[20474,0,"0.5"],[20481,1,""],[20481,0,"4"],[20483,1,""],[20483,0,"0"],[20488,3,""],[20488,0,"4"],[20490,1,""],[20490,0,"0"],[20490,1,""],[20490,0,"-0.5"],[20498,1,""],[20498,0,"4"],[20500,0,"-"],[22054,0,"    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n"],[22064,1,""],[22064,0,"2"],[22112,1,""],[22112,0,"3"],[22068,1,""],[22068,0,"3"],[22116,1,""],[22115,1,""],[22115,0,"y1"],[22163,1,""],[22163,0,"y"],[22211,1,""],[22211,0,"y"],[22259,1,""],[22259,0,"y"],[22212,1,""],[22212,0,"3"],[22260,1,""],[22260,0,"4"],[22159,1,""],[22159,0,"y"],[22207,1,""],[22207,0,"y"],[22208,1,""],[22208,0,"2"],[22255,2,""],[22255,0,"y3"],[22076,1,""],[22076,0,"2"],[22124,1,""],[22124,0,"3"],[22171,1,""],[22171,0,"B"],[22219,1,""],[22219,0,"B"],[22267,1,""],[22267,0,"B"],[22220,1,""],[22220,0,"2"],[22268,1,""],[22268,0,"3"],[22294,0,"    edge(y3, y4, $e_\"B3\"$, \"-|>\", label-pos: 0)\n"],[22316,1,""],[22316,0,"4"],[22321,7,""],[22332,1,""],[22332,0,"1"],[20449,1,""],[20449,0,"3"],[20449,1,""],[20449,0,"4"],[20449,1,""],[20449,0,"3.5"],[20458,1,""],[20458,0,"3.5"],[20469,1,""],[20469,0,"3.5"],[20478,1,""],[20478,0,"3.5"],[20489,1,""],[20489,0,"3.5"],[20498,1,""],[20498,0,"3.5"],[20510,1,""],[20510,0,"3.5"],[20518,0,"\n    let ()"],[20528,0,"z1, z2, z3, x3"],[20541,1,""],[20541,0,"4, x5, x6"],[20551,0," = ()"],[20555,0,"()"],[20556,0,"4,2"],[20560,0,", ()"],[20563,0,"4,1.5"],[20569,0,", ()"],[20572,0,"4,1"],[20576,0,", ()"],[20579,0,"4,0.5"],[20585,0,", ()"],[20588,0,"4,0"],[20592,0,", ()"],[20595,0,"4,-0.5"],[22434,0,"    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, y1, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(y1, y2, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(y2, y3, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(y3, y4, $e_\"B3\"$, \"-|>\", label-pos: 0)\n    edge(y3, y4, $e_\"B4\"$, label-pos: 1)\n"],[22443,1,""],[22443,0,"z"],[22447,1,""],[22447,0,"z"],[22491,1,""],[22491,0,"z"],[22495,1,""],[22495,0,"z"],[22539,1,""],[22539,0,"z"],[22543,2,""],[22543,0,"a4"],[22587,0,"a4"],[22590,1,""],[22589,1,""],[22591,2,""],[22591,0,"a5"],[22635,2,""],[22635,0,"a5"],[22641,0,"a6"],[22640,1,""],[22639,1,""],[22674,48,""],[22543,1,""],[22543,0,"x"],[22587,1,""],[22587,0,"x"],[22591,1,""],[22591,0,"x"],[22639,1,""],[22639,0,"x"],[22635,1,""],[22635,0,"x"],[22683,2,""],[22683,0,"x5"],[22687,2,""],[22687,0,"x6"],[22455,1,""],[22455,0,"C"],[22503,1,""],[22503,0,"C"],[22551,1,""],[22551,0,"C"],[22599,2,""],[22599,0,"A4"],[22647,2,""],[22647,0,"A5"],[22695,2,""],[22695,0,"A6"],[22480,0,", label-side: left"],[22546,0,", label-side: left"],[22612,0,", label-side: left"],[22678,0,", label-side: left"],[22744,0,", label-side: left"],[22803,0,", label-side: left"],[20449,3,""],[20449,0,"4"],[20456,3,""],[20456,0,"4"],[20465,3,""],[20465,0,"4"],[20472,3,""],[20472,0,"4"],[20481,3,""],[20481,0,"4"],[20488,3,""],[20488,0,"4"],[20498,3,""],[20498,0,"4"],[20542,1,""],[20542,0,"5"],[20549,1,""],[20549,0,"5"],[20558,1,""],[20558,0,"5"],[20565,1,""],[20565,0,"5"],[20574,1,""],[20574,0,"5"],[20581,1,""],[20581,0,"5"],[21210,0,"    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(y1, text(0.1em, $a$))\n    node(y2, text(0.1em, $a$))\n    node(y3, text(0.1em, $a$))\n"],[21219,1,""],[21219,0,"z"],[21250,1,""],[21250,0,"z"],[21281,1,""],[21281,0,"z"],[21312,1,""],[21312,0,"x"],[21313,1,""],[21313,0,"4"],[21343,2,""],[21343,0,"x5"],[21374,2,""],[21374,0,"x6"],[22605,0,"\n    edge()"],[22615,0,"y4, z2"],[22620,1,""],[22620,0,"1, \"\""],[22624,0,"-|>"],[23065,0," an event graph for "],[23081,4,""],[23081,0,"with a complex branching and merging strutt"],[23123,1,""],[23122,1,""],[23122,0,"cturre;"],[23128,1,""],[23127,1,""],[23126,1,""],[23126,0,"e;"],[23055,0,"Lefft:"],[23060,1,""],[23059,1,""],[23058,1,""],[23058,0,"t: "],[23061,1,""],[23061,0,"e"],[23135,0,"right: one possible "],[23167,1,""],[23166,1,""],[23165,1,""],[23165,0,"l"],[23173,1,""],[23172,1,""],[23171,1,""],[23172,8,""],[23172,0,"off this "],[23180,1,""],[23133,3,""],[23133,0,". R"],[23171,0,"ed order"],[23166,0,"ly"],[23184,1,""],[20429,2,""],[20429,0,"x4"],[20433,2,""],[20433,0,"x5"],[20437,2,""],[20437,0,"x6"],[20441,2,""],[20441,0,"x7"],[20514,2,""],[20514,0,"x8"],[20518,2,""],[20518,0,"x9"],[20522,2,""],[20522,0,"x10"],[20527,2,""],[20527,0,"x11"],[20532,2,""],[20532,0,"x12"],[20537,2,""],[20537,0,"x13"],[21099,2,""],[21099,0,"x4"],[21130,2,""],[21130,0,"x5"],[21161,2,""],[21161,0,"x6"],[21192,2,""],[21192,0,"x7"],[21223,2,""],[21223,0,"x8"],[21254,2,""],[21254,0,"x9"],[21285,2,""],[21285,0,"x10"],[21317,2,""],[21317,0,"x11"],[21349,2,""],[21349,0,"x12"],[21381,2,""],[21381,0,"x13"],[22394,2,""],[22394,0,"x4"],[22438,2,""],[22438,0,"x5"],[22439,1,""],[22439,0,"4"],[22442,2,""],[22442,0,"x5"],[22486,2,""],[22486,0,"x5"],[22490,2,""],[22490,0,"x6"],[22534,2,""],[22534,0,"x6"],[22538,2,""],[22538,0,"x7"],[22582,2,""],[22582,0,"x6"],[22586,2,""],[22586,0,"x7"],[22623,2,""],[22623,0,"x7"],[22627,2,""],[22627,0,"x8"],[22647,2,""],[22647,0,"x8"],[22651,2,""],[22651,0,"x9"],[22713,2,""],[22713,0,"x9"],[22717,2,""],[22717,0,"x10"],[22780,2,""],[22780,0,"x10"],[22785,2,""],[22785,0,"x11"],[22848,2,""],[22848,0,"x11"],[22853,2,""],[22853,0,"x12"],[22916,2,""],[22916,0,"x12"],[22921,2,""],[22921,0,"x13"],[22984,2,""],[22984,0,"x12"],[22989,2,""],[22989,0,"x13"],[22450,2,""],[22450,0,"A4"],[22498,2,""],[22498,0,"B1 "],[22500,1,""],[22547,1,""],[22547,0,"2"],[22595,1,""],[22595,0,"3"],[22659,2,""],[22659,0,"B4"],[22727,1,""],[22727,0,"1"],[22795,1,""],[22795,0,"2"],[22862,2,""],[22862,0,"C3"],[22586,2,""],[22586,0,"(4,-1.05)"],[22996,3,""],[22996,0,"(5,-0.55)"],[23834,0,", as illustrated in @topological-sort"],[24103,74,""],[22501,0,"'"],[26308,0,"\n\nTo update the state to a different version, retreat on ops that are not included in the new state,\nand advance on ops that are included in the new state but weren't in the old one.\n\nApply emits transformed op; revert/replay do not, but only update the prepare state. Revert/replay\nuses ID-based ops, not indexes. Transformed ops are not used internally by the algorithm, only\nemitted to the text editor."],[22496,0,"'"],[22502,1,""],[23086,18,""],[23086,0,"A"],[23100,0," ()"],[23102,0,"e"],[23102,1,""],[23102,0,"left"],[23108,54,""],[23108,0,"and"],[23137,1,""],[23136,1,""],[23141,22,""],[23141,0,"ing (right)"],[22496,1,""],[23143,0," of that graph"],[19583,0,":\n+ Text editors usually use their own exotic internal data structures to store the document's content. These data structures are optimised for fine grained, incremental updates. For example, VS Code uses a \"Piece Tree\" @vscode-buffer in order to efficiently support complex editing features like syntax highlighting and multi-cursor editing. Replacing the entire editing buffer whenever remote editing events are received when would inefficiently force the editor to recompute syntax highlighting information across the whole document.\n"],[19585,0,"\n"],[19586,1,""],[19586,0,"-"],[19603,35,""],[19603,0," s"],[19604,1,""],[19603,1,""],[19603,0,"e specialised"],[19781,15,""],[19632,0," such as piece tables  @vscode-buffer"],[19654,1,""],[19700,0," while supporting "],[19672,0,"maintain a file "],[19683,5,""],[19683,0,"d"],[19672,12,""],[19672,0,"represend "],[19681,1,""],[19680,1,""],[19680,0,"t editint bu"],[19691,1,""],[19690,1,""],[19689,1,""],[19688,1,""],[19688,0,"g buffers, "],[19672,25,""],[19672,0,"maintain the state of a document"],[19672,32,""],[19672,0,"support fast edits on large documents, and these structures are updated with index-based operations"],[19771,123,""],[19715,0,"integrating with "],[19749,16,""],[19749,0,"requires"],[19781,0,"\n"],[19781,0,"\n- "],[19782,2,""],[19781,1,""],[19781,0," These structures also allow "],[19810,105,""],[19782,0,"Incrementaly updatingn "],[19804,1,""],[19803,1,""],[19803,0," "],[19804,1,""],[19804,0,"t"],[19826,5,""],[19826,0,"enables"],[19853,0," without having to repeatedly parse the whole file on every keystroke"],[19922,219,""],[19923,0,"\n- Int"],[19928,1,""],[19927,1,""],[19926,1,""],[19926,0,"Index-based operations "],[19926,23,""],[19926,0,"The user's cursor position in a document can be represented as an index, and if "],[20005,1,""],[20004,1,""],[20003,1,""],[20002,1,""],[20001,1,""],[20000,1,""],[19999,1,""],[19998,1,""],[19997,1,""],[19997,0,"; if another "],[20010,106,""],[20052,1,""],[20051,1,""],[20051,0,", indexe"],[20058,1,""],[20058,0,"-based operations make it easy to update the cursor position so that the "],[20130,1,""],[20129,1,""],[20128,1,""],[20127,1,""],[20127,0,"it remains co"],[20110,9,""],[20129,2,""],[20129,0,"in the same position sur"],[20152,1,""],[20151,1,""],[20150,1,""],[20150,0,"relative to the sou"],[20168,1,""],[20167,1,""],[20167,0,"urrounding text."],[18964,12,""],[18970,0," that is concurrent to it"],[19806,0,"l"],[20150,4,""],[20150,0,"correct"],[20429,0," ()"],[20431,0,"index-based"],[24053,157,""],[24053,0,"Eg-walker"],[24072,1,""],[24071,1,""],[24070,1,""],[24070,0,"s"],[24164,3,""],[24164,0,"s"],[25723,18,""],[25723,0,"Goals of Eg-walker"],[24374,331,""],[25411,0,"\nOur correctness criterion is that the resulting document is consistent with the strong list specification @Attiya2016 (i.e., it converges and it applies operations in the right place), and it is maximally non-interleaving @fugue (i.e., concurrent insertions at the same position are placed one after another, and not interleaved).\n"],[24374,1,""],[24570,0,"\n"],[23674,897,""],[20611,0,"= The Event Graph Walker algorithm\n\nEg-walker is a collaborative text editing algorithm based on the idea of replaying an event graph.\nThe algorithm builds on a replication layer that ensures that all non-crashed replicas eventually receive every event that any replica adds to the graph.\nEach replica stores the event graph on disk alongside the current state of the document.\n\nEg-walker performs a topological sort of the event DAG, as illustrated in @topological-sort, and then transforms each event so that if the transformed insertions and deletions are applied in topologically sorted order, starting with an empty document, the final document correctly represents the set of events processed.\nIn graphs with concurrent operations there are multiple possible topological sort orders, and eg-walker guarantees that the final document is the same, regardless which of these orders is chosen.\n\n"],[24515,0,"ly"],[24524,1,""],[24523,1,""],[24522,1,""],[24522,0,"ed order"],[21376,12,""],[21310,0,"\nThe output of the algorithm is this topologically sorted sequence of transformed operations."],[21314,0," input of the al"],[21329,1,""],[21329,0,"lgorithm is the event graph, and the "],[21365,1,""],[21372,17,""],[25514,5,""],[25514,0,"Characteristics"],[24995,3,""],[24995,0,"; t"],[25038,5,""],[25038,0,".\nHowever,"],[25514,0,"\n"],[25319,0,"s"],[25319,1,""],[25515,0,"This way, the algorithm so"],[25540,1,""],[25540,0,"upports real-time collaboration."],[25607,28,""],[25607,0,"Eg-walker ensures"],[25672,3,""],[25672,0,"Attiya et al.'s"],[25688,0,"_"],[25714,0,"_"],[25729,5,""],[25729,0,"informally,"],[25862,0," sequences of"],[25959,0,"\n\nOne way of achieving this goal would be to translate each "],[26003,0," track "],[26004,7,""],[26019,0,"event in the graph into a corresponding CRDT operation, "],[26074,1,""],[26073,1,""],[26073,0," ()"],[26075,0,"by "],[26073,6,""],[26073,0,", "],[26074,1,""],[26073,1,""],[26073,0," ()"],[26075,0,"based on the document state in which that event was generated"],[26137,0,", "],[26003,0," track the state of the document on each branchy "],[26051,1,""],[26050,1,""],[26050,0," of the event graph, to"],[26095,13,""],[26196,0,"and to apply a CRDT merge "],[26203,19,""],[26203,0,"c"],[26203,1,""],[26203,0,"apply the CRDT events from one branch to the other branch's state when branches in the event graph merge."],[26218,6,""],[26218,0,"operations"],[26199,0," when branches in the event graph merge,"],[26312,39,""],[26313,0,"\nFor "],[26314,4,""],[26314,0,"However, doing this naively leads to poor performance."],[26313,0,"\nEssentially, this approach simulates a network of commun"],[26364,6,""],[26364,0,"communicating peers and their states."],[26455,0,", bec"],[26457,3,""],[26457,0,"because the CRDT overhead is incurred on every operation"],[26514,0,"\n\nEg-walker is able to achieve much better performance by skipping the CRDT entirely during phases of the event graph "],[26599,13,""],[26599,0,"in portions"],[26630,0,"that have no concurrency, and invoking the CRDT only during those portions with concurrency."],[26654,0," ()"],[26656,0,"which, in many editing histories, is the majority of the graph"],[26697,0,"vast "],[26792,0,"\nThis means "],[26378,0,"CRDT "],[26809,0,"that the CRDT state does not contain those parts of the document that were inserted in a non-concurrent way; a key insight of eg-walker is how to l"],[26955,1,""],[26955,0,"nevertheless cor"],[26970,1,""],[26969,1,""],[26968,1,""],[26968,0,"produce the correct transformed operations."],[25729,10,""],[25729,0,"in essence"],[25811,0,"_"],[25838,0,"_"],[27013,0,"\n\n"],[26970,7,""],[26970,0,"compute"],[27015,0,"Compared to CRDT algo"],[27035,1,""],[27034,1,""],[27033,1,""],[27032,1,""],[27031,1,""],[27031,0,"s, eg-walker has several advantages:\n\n- The CRDT state in eg-walker is purely transient; it never needs to be written to disk or sent over the network."],[27026,0," using a"],[27039,1,""],[27039,0," in the traditional way"],[27212,0," "],[27212,1,""],[27100,0," With traditional CRDTs, each replica must persist the CRDT state ()"],[27167,0,"including all "],[27177,4,""],[27177,0,"the unique ID for each character"],[27210,0," to disk and send it over the network. In eg-walker,"],[27263,1,""],[27263,0,"t"],[27014,0,"\n% TOD"],[27019,1,""],[27018,1,""],[27017,1,""],[27016,1,""],[27015,1,""],[27015,0,"// TODO: This somewhat duplicates things we already said in the introduction. Cut it?"],[27333,0,", increasing I/O overheads"],[27374,0," only the event graph is persisted and replicated, and"],[27444,13,""],[27447,7,""],[27456,63,""],[27456,0," and local to a replica"],[27423,5,""],[27423,0,";"],[27476,0,"\n- Many CRDT algorithms accumulate "],[27500,11,""],[27500,0,"retain deleted content as tombstones, which cannot be garbage-collected as long as there is a possibility of a concurrent operation appearin g"],[27641,1,""],[27640,1,""],[27640,0,"g in the future. // Weak argument -- the event graph also c"],[27698,1,""],[27698,0,"retains deleted content indefinitely as long as concurrent ops may appear"],[27013,0,"\n\nA"],[27015,1,""],[27015,0,"Moreover, "],[27030,6,""],[27097,9,""],[27097,0,", "],[27098,1,""],[27097,1,""],[27097,0,". Don't really need to repeate"],[27126,1,""],[27126,0," it."],[27026,0,"\n/*"],[27806,657,""],[27804,1,""],[27026,0,"\n- The CRDT's state needs to be available both when emitting new, local events, and when merging remote events. Generally, this data structure in its entirety needs to be loaded entirely into RAM on each peer before any editing can happen.\n"],[26799,0,"\nWhen eg-walker processes an event that has no concurrent events, "],[26804,10,""],[26813,1,""],[26812,1,""],[26812,0,"ing"],[26856,0," eg-walker"],[26856,1,""],[26865,0," is able to discard all of the accumulated CRDT state so far"],[26896,12,""],[26907,0,"accumulated "],[26925,0,", keeping the data structure small.\n"],[26960,1,""],[26961,121,""],[26961,0,"A"],[26997,13,""],[27040,0," "],[27040,1,""],[27040,0," even though the CRDT state reflects "],[27068,0,"may "],[27079,1,""],[27080,0,"only a small part of the editing history"],[27133,0,"eg-walker requires the event graph only in order to transform an operation in "],[27208,3,""],[27208,0,"to account for concurrent operations.\nGenerating "],[27234,10,""],[27234,0,"events"],[27253,0,"events based on user input and "],[27242,0," "],[27242,0,"The event graph is not needed t"],[27272,1,""],[27272,0,"for"],[27272,3,""],[27272,0,"to"],[27275,1,""],[27275,0,"g"],[27282,3,""],[27282,0,"e"],[27310,5,""],[27310,0,", or to add an event to to "],[27336,1,""],[27335,1,""],[27335,0,"he graph "],[27272,2,""],[27272,0,"when"],[27284,1,""],[27284,0,"ing"],[27319,2,""],[27319,0,"when"],[27327,0,"ing"],[27353,0,"that is not concurrent with any existing event"],[27358,41,""],[27358,0,"happened after all existing events.\nThis means i"],[27405,1,""],[27405,0,"that most of the time, the event graph can remain on disk "],[27462,1,""],[27444,18,""],[27444,0,"does not even need to be loaded into memory, and "],[27444,43,""],[27444,0,"can remain on disk"],[27462,6,""],[27462,0,", and we n"],[27471,1,""],[27471,0,"only need to load it "],[27462,0,"\n"],[27462,0," without using any space in memory or any CPU time to load."],[27522,30,""],[27522,0,"Only when handling concurrency, we have to load the event graph into memory"],[27522,33,""],[27522,0,"W"],[27565,0," when handling concurrency"],[27520,0,"; it is sufficient to load only the current document state, which can be stored in a separate file from the event graph"],[27643,0," only"],[27715,0,", and even then we only have to replay the portion of the graph since the last point where the CRDT state was discarded.\n\n"],[27258,13,""],[27258,0,"does not need to be read"],[27277,5,""],[27274,3,""],[27271,3,""],[27266,5,""],[27262,4,""],[27258,4,""],[27258,0,"is not needed"],[27258,14,""],[27242,0,"We do not examine "],[27260,1,""],[27260,0,"t"],[27252,7,""],[27252,0,"read"],[27295,20,""],[27289,0,"new "],[27822,0,"Eg'"],[27824,1,""],[27824,0,"-walker's approach contrasts with the usual CRDT approach, which requires every replica to persist the CRDT state ()"],[27939,0,"including the unique ID for each character"],[27982,0,", to "],[27982,5,""],[27982,0," to disk and send it over the network, and which requires that state to be loaded into memory in order to both generate and receive operations.\nThat state can be quite large"],[28126,29,""],[28126,0,"This state can consume "],[28126,23,""],[28124,0,", even when there is no concurrency"],[28161,0,"This can use significant amounts of memory, which has been "],[28203,17,""],[28203,0,"."],[28203,0," and can make documents l"],[28227,1,""],[28227,0,"slow to load"],[28240,0,"\n\nEg-walker's app"],[28242,15,""],[28242,0,"OT "],[28242,3,""],[28242,0,"In this way, OT "],[28255,0,"eg-walker is more like an "],[28284,0,"algorithm, which "],[28242,59,""],[28242,0,"OT algorithms also avoid p"],[28267,1,""],[28261,6,""],[28261,0,"only need to persist the "],[28285,1,""],[28255,0," avoid the metadata overhead of CRDTs; like eg-walker,"],[28310,4,""],[28310,0,"they"],[28339,0," latest document state and the history of operations that may be concurrent to "],[28294,4,""],[28294,0,"similarly to"],[28426,0,"an "],[28426,3,""],[28426,0,"operations that might arrive in the future.\nIn both eg-walekr "],[28487,1,""],[28486,1,""],[28485,1,""],[28484,1,""],[28484,0,"ker and OT, the editing history can be discarded if we a certain that no concurrent operations "],[28557,10,""],[28557,0,"future"],[28574,1,""],[28573,1,""],[28573,0," will be concurrent with an "],[28600,1,""],[28600,0,"y existing operation."],[28539,9,""],[28539,0,"know"],[28616,0,"\nIf this occurs, "],[28635,240,""],[28638,955,""],[28615,0,", "],[28616,1,""],[28615,1,""],[28615,0,", leaving only the latest document state with no further metadata"],[28682,16,""],[28682,0,"CRDT"],[28615,65,""],[28606,9,""],[28606,0,"event"],[28559,9,""],[28559,0,"event"],[28552,7,""],[28557,0," we may receive in the future"],[28515,0,"/event graph"],[28643,4,""],[26385,5,""],[26385,0,"replicas"],[27255,4,""],[27255,0,"inspect"],[27245,5,""],[27245,0,"The algorithm does"],[27170,0," and CRDT state"],[27294,12,""],[27294,0,"m"],[27564,7,""],[27564,0,"latest"],[28665,0,"However, OT algorithms have asymptotically worse m"],[28714,1,""],[28714,0,"performance than eg-walker in transforming concurrent operations.\n\n== Algorithm overview"],[28794,8,""],[28794,0,"overview\n\nFor the sake of clarif"],[28825,1,""],[28825,0,"ty we first explain a simplified version of eg-walker that replays the entire event graph and does not discard C"],[28936,1,""],[28936,0,"its CRDT state along the way."],[28914,0,", incurs CRDT overhead eb"],[28938,1,""],[28938,0,"ven for non-concurrent operations,"],[29023,0,"\nWe then show later how to add the optimi"],[29058,6,""],[29058,0,"optimisation that allow "],[29081,1,""],[29081,0,"s us to replay onlty p"],[29102,1,""],[29101,1,""],[29100,1,""],[29099,1,""],[29099,0,"y parts of the event graph.\n\n"],[28971,51,""],[28915,0," , and does not discard its CRDT state along the way, and"],[28916,6,""],[29024,18,""],[29024,0,"In Section TODO we show"],[29133,0,"While p"],[29133,7,""],[29133,0,"First, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sot"],[29288,1,""],[29288,0,"rt we first visit $$"],[29307,0,"e_\"A1\"..."],[29313,0," "],[29317,0," e_\"A4\""],[29325,0,", then $$"],[29333,0,"e_\"B1\" ... \"\""],[29344,2,""],[29344,0,"e_\"B4\""],[29351,0,", etc."],[29356,1,""],[29355,1,""],[29354,1,""],[29353,1,""],[29353,0,"and so on."],[29351,12,""],[29351,0,"; we avoid alternating between different branches, such as $$"],[29411,0,"e_\"A1\""],[29418,0,", $$"],[29421,0,"e_\"B1\""],[29428,0,", $$"],[29431,0,"e_\"A2\""],[29438,0,", \"\""],[29440,2,""],[29440,0,"$$"],[29441,0,"e_\"B2\""],[29417,4,""],[29417,0,", "],[29425,1,""],[29427,1,""],[29433,1,""],[29435,1,""],[29441,0,"..."],[29441,0," "],[29446,0,", even though that would also be a valid topological sort.\nThis is a chie"],[29518,1,""],[29517,1,""],[29516,1,""],[29515,1,""],[29514,1,""],[29514,0,"chieved by a well-known algorithm @CLRS2009: do a depth-first tras"],[29579,1,""],[29579,0,"versal "],[29585,1,""],[29585,0,", and build up the topologically sorted list in reverse order while returning from the traversal ()"],[29683,0,"i.e. after visiting e"],[29703,1,""],[29703,0,"l"],[29703,1,""],[29703,0,"events that happened later"],[29730,0,".\n\nThe so"],[29738,1,""],[29737,1,""],[29737,0,"travr"],[29741,1,""],[29741,0,"ersal "],[29505,19,""],[29505,0,"We use"],[29524,0," textbook"],[29514,10,""],[29514,0,"standard"],[29727,14,""],[29726,0,"When choosing b"],[29740,1,""],[29740,0,"which branch to traverse, we use a greedy heuristic so that branches with fewer events tend to appear before branches with more events in the t"],[29882,1,""],[29882,0,"top"],[29884,1,""],[29883,1,""],[29882,1,""],[29882,0,"sorted order; this can have performance "],[29905,17,""],[29905,0,"improve performance but is not critical."],[29505,2,""],[29505,0,"For this we"],[29382,10,""],[29945,0,"\n"],[14032,10,""],[14032,0,"e"],[14083,10,""],[14083,0,"e"],[14134,10,""],[14134,0,"e"],[14185,10,""],[14185,0,"e"],[14236,10,""],[14236,0,"e"],[14287,10,""],[14287,0,"e"],[14693,10,""],[14693,0,"e"],[14703,10,""],[14703,0,"e"],[14787,10,""],[14787,0,"e"],[14792,10,""],[14792,0,"e"],[14683,9,""],[14767,9,""],[29838,0,"#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\n"],[30026,0,"\"A"],[30029,0,"\""],[30080,0,"\"A"],[30083,0,"\""],[30054,1,""],[30054,0,"h"],[30108,1,""],[30108,0,"i"],[29911,5,""],[29911,0,"a1"],[29915,5,""],[29915,0,"a2"],[29919,4,""],[29919,0,"a"],[29923,4,""],[29923,0,"a"],[29927,5,""],[29927,0,"b1"],[29931,5,""],[29931,0,"b2, b3, b4"],[29950,0,".5"],[29958,3,""],[29958,0,"2"],[29966,0,".5"],[29974,3,""],[29974,0,"1"],[29979,4,""],[29979,0,"1"],[29981,1,""],[29981,0,"1.5"],[29988,3,""],[29988,0,"1"],[29990,1,""],[29990,0,"1"],[29992,0,", ()"],[29995,0,"1,0.5"],[30001,0,", ()"],[30004,0,"1,0"],[30019,4,""],[30019,0,"a"],[30070,4,""],[30070,0,"a"],[30112,204,""],[30112,0,"    node(a2, $e_\"A2\": italic(\"Insert\")(1, \\\"i\\\")$)\n    node(a2, $e_\"A2\": italic(\"Insert\")(1, \\\"i\\\")$)\n"],[30122,1,""],[30122,0,"3"],[30173,1,""],[30173,0,"4"],[30130,1,""],[30130,0,"3"],[30181,1,""],[30181,0,"4"],[30193,6,""],[30193,0,"Delete"],[30151,1,""],[30151,0,"0"],[30156,1,""],[30156,0,"H"],[30203,7,""],[30207,0,"    node(a4, $e_\"A4\": italic(\"Delete\")(1)$)\n"],[30216,2,""],[30216,0,"b1"],[30224,2,""],[30224,0,"B1"],[30251,0,"    node(a2, $e_\"A2\": italic(\"Insert\")(1, \\\"i\\\")$)\n"],[30260,1,""],[30260,0,"b"],[30268,1,""],[30268,0,"B"],[30295,1,""],[30295,0,"e"],[30302,0,"    node(b2, $e_\"B2\": italic(\"Insert\")(1, \\\"e\\\")$)\n    node(b2, $e_\"B2\": italic(\"Insert\")(1, \\\"e\\\")$)\n"],[30312,1,""],[30312,0,"3"],[30363,1,""],[30363,0,"4"],[30320,1,""],[30320,0,"3"],[30371,1,""],[30371,0,"4"],[30346,1,""],[30346,0,"y"],[30397,1,""],[30397,0,"!"],[30341,1,""],[30341,0,"2"],[30393,0,"3"],[30393,1,""],[30392,1,""],[30392,0,"3"],[30413,4,""],[30413,0,"a"],[30417,4,""],[30417,0,"a"],[30437,4,""],[30437,0,"a"],[30441,4,""],[30441,0,"a"],[30461,4,""],[30461,0,"a"],[30465,4,""],[30465,0,"a"],[30485,5,""],[30485,0,"a2"],[30489,5,""],[30489,0,"b1"],[30509,5,""],[30509,0,"b1"],[30513,5,""],[30513,0,"b2"],[30524,0,"    edge(b1, b2, \"-|>\")\n    edge(b1, b2, \"-|>\")\n"],[30534,1,""],[30534,0,"2"],[30538,1,""],[30538,0,"3"],[30562,1,""],[30562,0,"4"],[30558,1,""],[30558,0,"3"],[30572,0,"    edge(b1, b2, \"-|>\")\n"],[30581,2,""],[30581,0,"a34"],[30583,1,""],[30582,1,""],[30582,0,"4"],[30585,2,""],[30585,0,"b4"],[30690,7,""],[30690,0,"hi-hey"],[29948,0,".5"],[29959,0,".5"],[30008,1,""],[30008,0,"0.5"],[30638,46,""],[30638,0,"An event graph involv"],[30653,6,""],[30653,0,"with concurrent insertions and deletions."],[30638,56,""],[30638,0,"Sar"],[30640,1,""],[30639,1,""],[30639,0,"tarting with document `hi`, one user capitalises the `H`, whj"],[30699,1,""],[30699,0,"ile concurrently another useer "],[30729,1,""],[30728,1,""],[30727,1,""],[30727,0,"r changes `"],[30737,1,""],[30736,1,""],[30675,0," changes `hi` to `hey`, while concurrently another user"],[30750,41,""],[30750,0,". After the users merge to the state `Hey`, one of the users appends an expl"],[30825,1,""],[30824,1,""],[30824,0,"clamation mark to produce `Hey!`."],[29911,1,""],[29911,0,"e"],[29915,1,""],[29915,0,"e"],[29919,1,""],[29919,0,"e"],[29923,1,""],[29923,0,"e"],[29927,2,""],[29927,0,"e5"],[29931,2,""],[29931,0,"e6"],[29935,2,""],[29935,0,"e7"],[29939,2,""],[29939,0,"e8"],[30025,1,""],[30025,0,"e"],[30076,1,""],[30076,0,"e"],[30127,1,""],[30127,0,"e"],[30178,1,""],[30178,0,"e"],[30222,2,""],[30222,0,"e5"],[30266,2,""],[30266,0,"e6"],[30317,2,""],[30317,0,"e7"],[30368,2,""],[30368,0,"e8"],[30032,2,""],[30033,1,""],[30080,2,""],[30081,1,""],[30128,2,""],[30129,1,""],[30176,2,""],[30177,1,""],[30217,4,""],[30217,0,"5"],[30258,4,""],[30258,0,"6"],[30306,4,""],[30306,0,"7"],[30354,4,""],[30354,0,"8"],[30395,1,""],[30395,0,"e"],[30399,1,""],[30399,0,"e"],[30423,1,""],[30423,0,"e"],[30419,1,""],[30419,0,"e"],[30443,1,""],[30443,0,"e"],[30447,1,""],[30447,0,"e"],[30467,1,""],[30467,0,"e"],[30471,2,""],[30471,0,"e5"],[30491,2,""],[30491,0,"e5"],[30495,2,""],[30495,0,"e6"],[30515,2,""],[30515,0,"e6"],[30519,2,""],[30519,0,"c7"],[30519,1,""],[30519,0,"e"],[30539,2,""],[30539,0,"e7"],[30543,2,""],[30543,0,"e8"],[30563,1,""],[30563,0,"e"],[30567,2,""],[30567,0,"e8"],[30614,0,"An event graph. "],[30653,1,""],[30653,0,"\""],[30656,1,""],[30656,0,"\""],[30676,1,""],[30676,0,"\""],[30679,1,""],[30679,0,"\""],[30684,1,""],[30684,0,"\""],[30688,1,""],[30688,0,"\""],[30739,1,""],[30739,0,"\""],[30741,1,""],[30741,0,"\""],[30779,1,""],[30779,0,"\""],[30783,1,""],[30783,0,"\""],[30842,1,""],[30842,0,"\""],[30847,1,""],[30847,0,"\""],[30870,0,"#fi"],[30871,2,""],[30871,0,"figure()"],[30878,0,"\n  \n"],[30881,0,"fletcher.di"],[30890,2,""],[30890,0,"diagram()"],[30898,0,"{}"],[30899,0,"\n    \n  "],[30904,0,"node()"],[30909,0,"()"],[30910,0,"0,0"],[30914,0,", \"\""],[30917,0,"id: 0\\n"],[30921,1,""],[30921,0,"2"],[30924,0,"ch: H\\n$s_p$: Ins\\n$s_e$: Ins"],[30898,0,"node-stroke: black, "],[30936,1,""],[30936,0,"$vec("],[30946,2,""],[30946,0,", "],[30953,3,""],[30953,0,", "],[30958,1,""],[30963,3,""],[30963,0,", "],[30968,2,""],[30968,0,":"],[30973,0,")"],[30974,1,""],[30974,0,"$$"],[30975,1,""],[30960,0,"\""],[30964,0,"\""],[30972,0,"\""],[30976,0,"\""],[30941,0,"italic("],[30950,0,")"],[30956,0,"italic("],[30965,0,")"],[30963,0,"\""],[30966,0,"\""],[30916,0,", node-shape: rect"],[31015,0,", shape: rect"],[30918,18,""],[30995,0,", delim: \"\""],[31005,1,""],[31005,0,"\""],[30937,3,""],[30937,0,"#stack"],[30944,0,"$"],[30958,0,"$"],[30961,0,"$"],[30977,0,"$"],[30980,0,"$"],[30991,0,"#$"],[30992,1,""],[30991,1,""],[30991,0,"$"],[30994,0,"$"],[31005,0,"$"],[31006,11,""],[30936,1,""],[31006,1,""],[31006,0,"$"],[30936,0,"$"],[30936,1,""],[30936,0,"text("],[31011,1,""],[31011,0,"_"],[31011,1,""],[31011,0,")"],[31011,1,""],[31011,0,"_"],[31011,1,""],[31011,0,"$"],[30936,5,""],[30936,0,"$"],[30944,0,"spacing: 1em, "],[30953,1,""],[30953,0,"0.5"],[31043,0,",\n  pl"],[31047,2,""],[31047,0,"placement: top,\n  caption: []"],[31075,0,"TODO"],[31082,0," <crdt-state>"],[30988,0,"ar"],[30937,0,"vec("],[31029,0,")"],[30992,2,""],[30937,4,""],[30937,0," "],[31024,1,""],[31024,0," "],[31024,1,""],[30937,1,""],[30937,0,"|"],[30936,2,""],[30936,0,"box["],[31026,1,""],[31026,0,"]"],[30940,0,"#box("],[31031,0,")"],[30945,1,""],[30941,4,""],[31026,1,""],[30936,25,""],[30936,0,"$vec(delim: none"],[30954,1,""],[30967,1,""],[30969,1,""],[30984,1,""],[30986,1,""],[30996,1,""],[30998,1,""],[31008,1,""],[31009,1,""],[31009,0,"$"],[30948,0,"#"],[30941,14,""],[31011,0,",\n    node()"],[31022,0,"()"],[31023,0,"1,0"],[31027,0,", \"\""],[31030,0,"hey"],[31034,0,", shape: rect"],[31011,1,""],[31011,0,","],[31042,5,""],[31035,7,""],[31034,1,""],[31029,5,""],[31028,1,""],[31027,1,""],[31022,5,""],[31021,2,""],[31012,9,""],[31011,1,""],[30941,0,"delim: #none, "],[30948,1,""],[31009,1,""],[31009,0,"]"],[31008,0,"$"],[30998,0,"$"],[30996,0,"$"],[30986,0,"$"],[30984,0,"$"],[30969,0,"$"],[30967,0,"$"],[30954,0,"$"],[30947,5,""],[30936,11,""],[30936,0,"box[#stack(spacing: 0.5em"],[31026,0,")"],[30941,0,"box(#"],[31031,1,""],[30940,5,""],[31026,1,""],[31026,0,"$"],[30936,4,""],[30936,0,"$|"],[30937,1,""],[30937,0," "],[31024,0," "],[31024,1,""],[31024,0,")"],[30937,1,""],[30937,0,"vec("],[30992,0,"ar"],[31029,1,""],[30937,4,""],[30988,2,""],[31082,13,""],[31074,6,""],[31073,1,""],[31073,0," [TODO]"],[31082,0," <crdt-state>"],[30988,0,"ar"],[30937,0,"vec("],[31029,0,")"],[30992,2,""],[30937,4,""],[30937,0," "],[31024,1,""],[31024,0," "],[31024,1,""],[30937,1,""],[30937,0,"|"],[30936,2,""],[30936,0,"box["],[31026,1,""],[31026,0,"]"],[30940,0,"#box("],[31031,0,")"],[30945,1,""],[30941,4,""],[31026,1,""],[30936,25,""],[30936,0,"$vec(delim: none"],[30954,1,""],[30967,1,""],[30969,1,""],[30984,1,""],[30986,1,""],[30996,1,""],[30998,1,""],[31008,1,""],[31009,1,""],[31009,0,"$"],[30948,0,"#"],[30941,14,""],[31011,0,",\n    node()"],[31022,0,"(1,0), \"hey\", shape: rect"],[31011,1,""],[31011,0,","],[31042,5,""],[31035,7,""],[31035,0," shape: rect"],[31011,1,""],[30941,0,"delim: #none, "],[31118,0,"\n\n#fi"],[31121,2,""],[31121,0,"figure()"],[31128,0,"\n  \n"],[31131,0,"fletcher.d"],[31140,1,""],[31140,0,"diagram()"],[31148,0,"node-stroke: black, {}"],[31169,0,"\n    \n  "],[31174,0,"node()"],[31179,0,"()"],[31180,0,"0,0"],[31184,0,", \"\""],[31187,0,"hello"],[31193,0,", shape: rect"],[31011,13,""],[31011,0,", shape: rect"],[31120,95,""],[31024,0,", stroke: black"],[31057,5,""],[31057,0,"align(center)[]"],[31071,0,"italic(id): 2, italic(\"ch\"): H, s_p: \"Ins\", s_e: \"Ins\""],[31071,0,"$"],[31085,0,"$"],[31086,1,""],[31086,0,"\\"],[31088,0,"$"],[31104,0,"$\\"],[31106,1,""],[31107,0,"$"],[31118,1,""],[31118,0,"$$"],[31119,1,""],[31119,0,"\\"],[31121,0,"#$"],[31122,1,""],[31121,1,""],[31121,0,"$"],[31132,0,"$$"],[31133,1,""],[31063,6,""],[31063,0,"left"],[31132,13,""],[31057,11,""],[30911,0,"0.5pt "],[30916,6,""],[30920,121,""],[30930,1,""],[30930,0,"0"],[31002,0,"    node((0,0), [$italic(id): 2$\\ $italic(\"ch\"): H$\\ $s_p: \"Ins\"$\\ $s_e: \"Ins\"$])\n"],[30950,1,""],[30950,0,"3"],[31032,1,""],[31032,0,"1"],[31051,1,""],[31051,0,"h"],[31062,3,""],[31062,0,"Del"],[31066,0,"()"],[31067,0,"1"],[31079,3,""],[31079,0,"Del"],[31012,1,""],[31012,0,"1"],[31063,2,""],[31000,0,", sh"],[31002,2,""],[31002,0,"shape: rect"],[31000,13,""],[31083,0,", shape: rect"],[30937,1,""],[30950,1,""],[30950,0,"$"],[30937,0,"$"],[31019,1,""],[31019,0,"$"],[31083,13,""],[31019,1,""],[31032,1,""],[31034,1,""],[31049,1,""],[31055,0,"$"],[31058,1,""],[31059,1,""],[31062,1,""],[31068,0,"$"],[31071,1,""],[31074,2,""],[31019,7,""],[31019,0,"_"],[31022,1,""],[31022,0,"_"],[31028,8,""],[31028,0,"_"],[31031,2,""],[31031,0,"_"],[31045,3,""],[31045,0,"el"],[31045,2,""],[31055,2,""],[30918,1,""],[30917,1,""],[31058,1,""],[30999,0,","],[31044,0,"(1)"],[31058,0,", sha"],[31060,3,""],[31060,0,"shape: rect, stoke: 0.5pt"],[31075,0,"r"],[31044,1,""],[31045,1,""],[31056,28,""],[31044,1,""],[31043,1,""],[31043,0,"1"],[31053,1,""],[31053,0,"1"],[30935,8,""],[30935,0,"_"],[30938,1,""],[30938,0,"_"],[30942,1,""],[30953,0,"_"],[30944,0,"_"],[30945,10,""],[30947,2,""],[30947,0,"_"],[30951,1,""],[30957,0,"$"],[30960,5,""],[30960,0,"$$"],[30961,0,"-1"],[30963,1,""],[30970,0,"$"],[30960,4,""],[30960,0,"0"],[30970,6,""],[30970,0,"0"],[31030,0,","],[31032,0,"    node((1,0), [_id_: 1\\ _ch_: h\\ $s_p$: 1\\ $s_e$: 1]),\n    node((1,0), [_id_: 1\\ _ch_: h\\ $s_p$: 1\\ $s_e$: 1]),\n    node((1,0), [_id_: 1\\ _ch_: h\\ $s_p$: 1\\ $s_e$: 1]),\n    node((1,0), [_id_: 1\\ _ch_: h\\ $s_p$: 1\\ $s_e$: 1]),\n"],[31258,1,""],[31064,1,""],[31064,0,"e"],[31121,1,""],[31121,0,"y"],[31178,1,""],[31178,0,"!"],[30985,1,""],[30985,0,"0.7"],[31045,0,".4"],[31103,1,""],[31103,0,"2.1"],[31162,1,""],[31162,0,"2.8"],[31221,1,""],[31221,0,"2.5"],[31221,1,""],[31221,0,"3"],[30929,0,".0"],[31061,1,""],[31061,0,"6"],[31120,1,""],[31120,0,"7"],[31179,1,""],[31179,0,"8"],[31247,1,""],[31247,0,"i"],[31238,1,""],[31238,0,"2"],[31080,1,""],[31080,0,"0"],[31139,1,""],[31139,0,"0"],[31198,1,""],[31198,0,"0"],[31090,1,""],[31090,0,"0"],[31149,1,""],[31149,0,"0"],[31208,1,""],[31208,0,"0"],[31325,0,"-2"],[30869,0,"\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt,\n    node((0.0,0), [_id_: 3\\ _ch_: H\\ $s_p$: 0\\ $s_e$: 0]),\n    node((0.7,0), [_id_: 1\\ _ch_: h\\ $s_p$: 1\\ $s_e$: 1]),\n    node((1.4,0), [_id_: 6\\ _ch_: e\\ $s_p$: 0\\ $s_e$: 0]),\n    node((2.1,0), [_id_: 7\\ _ch_: y\\ $s_p$: 0\\ $s_e$: 0]),\n    node((2.8,0), [_id_: 8\\ _ch_: !\\ $s_p$: 0\\ $s_e$: 0]),\n    node((3.5,0), [_id_: 2\\ _ch_: i\\ $s_p$: 1\\ $s_e$: 1])\n  ),\n  placement: top,\n  caption: [TODO]\n) <crdt-state-2>\n"],[31326,1,""],[31326,0,"1"],[31036,177,""],[30962,1,""],[30962,0,"$-1$#"],[30966,1,""],[31024,1,""],[31024,0,"0"],[31083,1,""],[31083,0,"0"],[31049,3,""],[31049,0,"1.4"],[30962,2,""],[30962,0,"-"],[30964,1,""],[31094,0,","],[31096,0,"    node((0.0,0), [_id_: 3\\ _ch_: H\\ $s_p$: -1\\ $s_e$: 0]),\n    node((0.7,0), [_id_: 1\\ _ch_: h\\ $s_p$: 0\\ $s_e$: 1]),\n    node((1.4,0), [_id_: 2\\ _ch_: i\\ $s_p$: 0\\ $s_e$: 1])\n"],[31106,3,""],[31106,0,"2.1"],[31166,3,""],[31166,0,"2.8"],[31225,3,""],[31225,0,"3.5"],[30962,2,""],[30962,0,"0"],[31021,1,""],[31021,0,"1"],[31090,1,""],[31090,0,"0"],[31268,1,""],[31268,0,"0"],[31107,1,""],[31107,0,"8"],[31165,3,""],[31165,0,"3.5"],[31224,3,""],[31224,0,"4.2"],[31271,0,",\n    edge()"],[31282,0,"1.8"],[31282,0,"("],[31286,0,",0"],[31288,1,""],[31288,0,"), ()"],[31292,0,"3.1,0"],[31298,0,", \"\""],[31301,0,"=>"],[31304,0,", stro"],[31306,4,""],[31306,0,"stroke: 1pt)"],[31304,13,""],[31292,3,""],[31292,0,"2.4"],[31285,1,""],[31285,0,"9"],[31294,1,""],[31294,0,"3"],[31300,0,"marks: "],[31311,0,", stroke: 1pt"],[31311,13,""],[30917,0," edge-stroke: 1pt,"],[31329,0,", mark-scale: 1.5"],[30917,18,""],[31313,10,""],[31313,0,"ti"],[31314,1,""],[31314,0,"hickness"],[31327,0,"pt"],[31325,2,""],[31324,1,""],[31324,0,"0.5"],[31326,1,""],[31326,0,"8"],[29827,8,""],[29827,0,"essential"],[29837,0,"\n\nThe algorithm then processes the events one at a time in top"],[29896,3,""],[29896,0,"topologically sorted order.\nFor each event, "],[29939,1,""],[29938,1,""],[29938,0," it updates "],[29924,26,""],[29922,0,", m"],[29924,1,""],[29924,0,"updating a state object and outputting a transformed operation for each event"],[30003,0,"The state object simulta"],[30020,7,""],[30020,0,"simultaneously t"],[30035,1,""],[30020,15,""],[30020,0,"tracks the state of the document at to "],[30058,1,""],[30057,1,""],[30057,0,"wo diff"],[30063,1,""],[30062,1,""],[30061,1,""],[30060,1,""],[30060,0,"versions"],[30020,48,""],[30020,0,"simultaneously tracks "],[30035,7,""],[30035,0,"captures the document at two versions: the version of"],[30087,1,""],[30086,1,""],[30086,0,"in which an event was generated ()"],[30119,0,"which we call the \\emp"],[30140,1,""],[30139,1,""],[30138,1,""],[30137,1,""],[30137,0,"_prepare_ version"],[30155,0,", and the version in which all events seen so far have been applied ()"],[30224,0,"which we call the _effect_ version"],[30259,0,".\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIt is also possible for the prepare version to be an earlier version ()"],[30440,0,"the document resulting from processing a subset of "],[30468,11,""],[30480,0,"the events processed so far"],[30508,0,", but due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe state object can be updated with three actions, each of which takes an event as argument:\n\n- *Apply* an event: assuming that the current prepare state equals the "],[30740,0," "],[30730,9,""],[30732,0,"Updates the prepare state and the effect "],[30752,5,""],[30752,0,"version"],[30775,0,"version to both include the given event,"],[30867,0,"parents of that event.\n- *Retreat*: Updates the prepare version to no longer include the given event, assuming that the prepare version preb"],[31006,1,""],[31006,0,"viously did include that event.\n- *Advance*: "],[30888,0,", and that the event was previously not applied"],[30909,3,""],[30909,0,"has not"],[30928,3,""],[30928,0,"been"],[31103,0,"Updates to prepare version to \n- *Retreat*: Updates the prepare version to no longer include the given event, assuming that the prepare version previously did include that event."],[30942,148,""],[30985,0,"include the given event, assuming that the prepare "],[31036,148,""],[30942,0,"- *Retreat*: Updates the prepare version to no longer include the given event, assuming that the prepare version previously did include that event.\n"],[31184,0,"version previously did not include that event, but the effect version did include it.\n\nThe "],[30723,1,""],[30723,0,"_"],[30729,1,""],[30729,0,"J_"],[30730,1,""],[30729,1,""],[30729,0,"_"],[30944,1,""],[30944,0,"_"],[30952,1,""],[30952,0,"_"],[31092,1,""],[31092,0,"_"],[31092,1,""],[31092,0,"*"],[30952,1,""],[30952,0,"*"],[30944,1,""],[30944,0,"*"],[30729,1,""],[30729,0,"J_"],[30729,2,""],[30729,0,"*"],[30723,1,""],[30723,0,"*"],[31275,0,"effect version only moves forward in time ()"],[31318,0,"through _apply_"],[31334,0," , "],[31336,1,""],[31335,1,""],[31334,1,""],[31334,0,", whereas the prepare version can move both forward and backwards."],[31385,0,"s"],[31308,0,"s"],[31271,133,""],[32303,0,"The effect version only moves forwards in time (through _apply_), whereas the prepare version can move both forwards and backwards.\n\n"],[32434,0,"\nConsider the example event graph in @graph-hi-hey, and assume that the events $$"],[32514,0,"e_1 ... e_8"],[32526,0," are traversed in topolog"],[32544,7,""],[32544,0,"order of their subscripts."],[32568,1,""],[32569,0,"\nThese events can be processed with the following actions:\n\n1. Apply $$"],[32639,0,"e_1 ... e_4"],[32651,0," in turn. "],[32632,0,"Start in teh"],[32643,1,""],[32642,1,""],[32642,0,"he empty state, and then "],[32667,1,""],[32667,0,"a"],[32696,0,"This "],[32687,7,""],[32687,0,"one at a time"],[32658,9,""],[32668,0,"$$"],[32669,1,""],[32669,0,", apply $$"],[32678,0,"e_2"],[32682,0,", apply $$"],[32691,0,"#"],[32691,1,""],[32691,0,"e_3"],[32695,0,", and apply #"],[32707,1,""],[32707,0,"$$"],[32708,6,""],[32712,14,""],[32719,0,"is valid because each event's parent version is the set of all events see"],[32791,1,""],[32790,1,""],[32789,1,""],[32789,0,"processed so far.\n2. In order to "],[32810,12,""],[32810,0,"Before we cn "],[32822,1,""],[32821,1,""],[32821,0,"an apply Re"],[32831,1,""],[32830,1,""],[32830,0,"$$"],[32831,0,"e_45"],[32834,1,""],[32833,1,""],[32833,0,"5"],[32835,0," we must rewind the prepare state to "],[32863,5,""],[32863,0,"version"],[32874,0,"be $$"],[32878,0,"e_2"],[32882,0,", which is the parent of $$"],[32908,0,"e_5"],[32912,0,". We can do this by calling retreat $$"],[32949,0,"e_4"],[32953,0," and retreat $$"],[32967,0,"e_3"],[32971,0,".\n3. Now we can apply $$"],[32994,0,"e_5"],[32998,0,", apply $$"],[33007,0,"e_6"],[33011,0,", and apply $$"],[33024,0,"e_7"],[33028,0,".\n4. Bw"],[33034,1,""],[33034,0,"efore we can apply $$"],[33054,0,"e_8"],[33058,0," we must add $$"],[33072,0,"e_3"],[33076,0," and $$"],[33082,0,"e_4"],[33086,0," back into the prepare state"],[33032,0," The parents of $$"],[33049,0,"e_8"],[33053,0," are $$"],[33059,0,"\\"],[33059,1,""],[33059,0,"{}"],[33060,0,"e_4, e_78"],[33068,1,""],[33070,0,";"],[33072,1,""],[33072,0,"b"],[33153,0," again. We do this by calling advance"],[32665,0,"op(\"apply\"))"],[32676,1,""],[32676,0,"("],[32680,0,")"],[32658,6,""],[32659,2,""],[32659,0,"italic"],[32666,1,""],[32671,1,""],[32671,0,"\""],[32666,0,"\""],[32682,6,""],[32683,0,"italic(\"apply\")("],[32702,0,")"],[32706,6,""],[32707,0,"italic(\"apply\")("],[32726,0,")"],[32734,6,""],[32735,0,"italic(\"apply\")("],[32754,0,")"],[32657,0," and call"],[32662,0,"thebn "],[32667,1,""],[32666,1,""],[32665,1,""],[32665,0,"n "],[32998,8,""],[32999,0,"italic(\"apply\")("],[33007,5,""],[33007,0,"retreat"],[33026,8,""],[33027,0,"italic(\"retreat\")("],[33048,0,")"],[33017,0,"0"],[33017,1,""],[33020,0,")"],[33067,5,""],[33067,0,"call"],[33073,0,"italic(\"apply\")("],[33092,0,")"],[33096,6,""],[33097,0,"italic(\"apply\")("],[33116,0,")"],[33124,6,""],[33125,0,"italic(\"apply\")("],[33144,0,")"],[33301,7,""],[33301,0,"$italic(\"retreat\")(e_3)$"],[33310,7,""],[33310,0,"advance"],[33325,0," and"],[33325,4,""],[33325,0," and $italic(\"advance\")(e_3)$."],[33351,1,""],[33351,0,"4\n"],[33352,1,""],[33355,0,"\n5. Finally, we can call $italic(\"apply\")(e_5)$."],[33399,1,""],[33399,0,"8"],[33224,0,"therefore "],[32359,7,""],[32359,0,"$$"],[32360,0,"italic()"],[32367,0,"\"\""],[32368,0,"apply"],[30440,0,"i.e., "],[30369,0,"\n\n"],[30370,0,"In general, the prepare version is al"],[30406,1,""],[30405,1,""],[30405,0,"the document resulting from a subset of the set of events in the effect version."],[30487,261,""],[30487,0,"It is also possible for the prepare version to be an earlier version (i.e., the document resulting from a subset of the events processed so far), but due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n"],[30487,151,""],[30487,0,"D"],[30487,0,"%"],[30487,1,""],[30487,0,"// "],[30485,1,""],[30644,7,""],[30644,0,"functions"],[32587,26,""],[32587,0,"as follows"],[30644,9,""],[30644,0,"methods"],[30916,0," This method interprets the operation in the event in the context of the prepara"],[30995,1,""],[30995,0,"e version, and output s"],[31017,1,""],[31016,1,""],[31016,0,"s the opear"],[31026,1,""],[31025,1,""],[31025,0,"ration representing its effect on the effect version."],[31045,17,""],[31045,0,"how the"],[31067,0," has been updated"],[30696,1,""],[30696,0,"/"],[30698,1,""],[30703,1,""],[31084,1,""],[31084,0,"/"],[31086,1,""],[31093,1,""],[31230,1,""],[31230,0,"/"],[31232,1,""],[31239,1,""],[30942,17,""],[31232,2,""],[31232,0,"the"],[31109,17,""],[31109,0,"remove"],[31178,4,""],[31185,0,"d"],[31241,7,""],[31241,0,"add"],[31361,11,""],[33500,0,"\n\nIn complex event graphs suchas t"],[33533,1,""],[33532,1,""],[33531,1,""],[33530,1,""],[33530,0," as the one in @topological-sort t"],[33563,1,""],[33563,0,"it can be necessary to retreat and advance on the same event multiple times, but it is possible to process arbitrary DAGs this way.\nThe general rule is: apply the events in topologically sorted order; be"],[33765,1,""],[33764,1,""],[33763,1,""],[33762,1,""],[33762,0,", but before appltying"],[33783,1,""],[33782,1,""],[33781,1,""],[33780,1,""],[33779,1,""],[33779,0,"ying each event, compute $$"],[33805,0,"G_\"\"\""],[33808,2,""],[33808,0,"old\" = sans(\"Events\")(V)"],[33831,0,"_\"prepare\""],[33843,0," where $$"],[33851,0,"V_\"prepare\""],[33863,0," is the current prev"],[33882,1,""],[33882,0,"pare version, and $$"],[33901,0,"G_\"new\" = sans()"],[33916,0,"\"\""],[33917,0,"Events"],[33925,0,"()"],[33926,0,"e.italic()"],[33935,0,"\"\""],[33936,0,"parents"],[33947,0," where $$"],[33955,0,"e"],[33957,0," is the next event to be applied.\nWe then call $$"],[34005,0,"italic()"],[34012,0,"\"\""],[34013,0,"retreat"],[34023,0," on each event in $$"],[34042,0,"G_\"old\" - G_\"new\""],[34060,0," ()"],[34062,0,"in reverse order of their appearance in the topp"],[34109,1,""],[34109,0,"ool"],[34106,6,""],[34106,0,"topologicals"],[34117,1,""],[34117,0," sort"],[34123,0,", and call $$"],[34135,0,"italic()"],[34142,0,"\"\""],[34143,0,"advance"],[34153,0," on each event in $$"],[34172,0,"G_\"new\" - G_\"old\""],[34190,0," ()"],[34192,0,"in topological sort order"],[34218,0," before calling $$"],[34235,0,"italic()"],[34242,0,"\"\""],[34243,0,"apply"],[34250,0,"()"],[34251,0,"e"],[34254,0,"."],[33837,3,""],[33855,3,""],[33832,6,""],[33832,0,"p"],[33845,6,""],[33845,0,"p"],[28676,18,""],[28676,0,"Walking the event graph"],[35227,410,""],[35225,1,""],[34244,0,"\n\n== Representing pa"],[34263,1,""],[34263,0,"repare and effect versions"],[19552,6,""],[19552,0,"trees"],[30406,30,""],[30406,0,"corresponds to"],[30473,0,"\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one."],[30265,109,""],[30364,109,""],[30265,0,"If the prepare and effect versions are the same, the transformed operation is identical to the original one.\n"],[30373,0,"\nThe state object simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version)."],[30007,258,""],[30115,258,""],[30007,0,"The state object simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\n"],[30437,7,""],[30444,2,""],[30444,0,"of"],[30406,14,""],[30406,0,"represents"],[30689,0," both"],[30740,5,""],[30800,5,""],[30800,0,"version"],[34263,0,"\n\nThe state object implements teh"],[34295,1,""],[34294,1,""],[34294,0,"he apply, retreat, and advance methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document ()"],[34463,0,"although runs of h"],[34480,1,""],[34480,0,"charactersw"],[34490,1,""],[34490,0," with consecutive IDs and the same properties can be run-length encoded to save memory"],[34577,0,"."],[34463,9,""],[34569,0,"\ni"],[34570,1,""],[34297,0,"$italic(\""],[34311,0,"\")$"],[34316,0,"$italic(\""],[34332,0,"\")$"],[34341,0,"$italic(\""],[34357,0,"\")$$"],[34360,1,""],[34606,0,"A character is inserted by $italic(\"apply\")$"],[34649,0,"()"],[34650,0,"e"],[34653,0," for an insertion event $$"],[34678,0,"3"],[34678,1,""],[34678,0,"e"],[34680,0," p"],[34681,1,""],[34680,1,""],[34680,0,"; subsequent deletion events and $italic(\"retreat\")$, and $italic(\"advance\")$"],[34732,6,""],[34732,0,"/"],[34752,0," calls may modify "],[34608,9,""],[34608,0,"recro"],[34612,1,""],[34611,1,""],[34611,0,"ord"],[34626,0," into this sequence"],[34786,0,"properties of the record, but records in the sequence are not removed or reordered "],[34868,1,""],[34868,0,".\n\nEach "],[34871,5,""],[34871,0,"When concurrent "],[34876,0,"the event graph contains "],[34912,0,"insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in the same order, regardless of "],[35031,0," in this sequence"],[35031,17,""],[35013,0," in this sequence"],[35064,0,"the order in which they traverse the event graph.\nAny CRDT algorithm could be used for this purpose; the main differences between algorithms are their performance and their interleaving character"],[35250,9,""],[35250,0,"characteri"],[35250,10,""],[35250,0,"characteristics @fu"],[35267,2,""],[35267,0,"fugue.\nEg-walker uses @yjs"],[35274,0,"Our implementation of "],[35296,1,""],[35296,0,"e"],[35310,0," a slightly modifiede "],[35331,1,""],[35330,1,""],[35313,17,""],[35313,0,"variant of th e"],[35327,1,""],[35326,1,""],[35326,0,"e Yjs algorithm"],[35346,0," that we conjecct"],[35362,1,""],[35361,1,""],[35361,0,"tuyre t"],[35367,1,""],[35366,1,""],[35365,1,""],[35364,1,""],[35363,1,""],[35363,0,"re to be maaxima"],[35378,1,""],[35377,1,""],[35376,1,""],[35375,1,""],[35374,1,""],[35374,0,"ximally non-interleaving; we leave a detailed analysis of this algorithm to future work, sine "],[35467,1,""],[35466,1,""],[35466,0,"ce it is not core to this paper."],[35341,0," Nicolaescu2016YATA"],[35342,0,"@"],[35342,19,""],[35341,1,""],[35347,0,"@Nicolaescu2016YATA "],[35518,0,"\n\n"],[35519,1,""],[35519,0,"\nEach "],[34868,0," once inserted"],[34874,0,"they have been "],[35554,0,"recoord "],[35561,1,""],[35560,1,""],[35559,1,""],[35558,1,""],[35558,0,"rd in this sequence contains the ID of the event that inserted the character, and two integer state variables $$"],[35669,0,"s_p"],[35673,0," and $$"],[35679,0,"s_e"],[35683,0,".\nWhen a record is first inserted, it is int"],[35726,1,""],[35726,0,"itialised with $$"],[35742,0,"s_p = s_e = 0"],[35756,0,".\nWhen "],[35758,5,""],[35758,0,"Calling $italic(\"apply\")(e)$ for a deletion event $$"],[35809,0,"e"],[35811,0," increments both $$"],[35829,0,"s_p"],[35833,0," and $$"],[35839,0,"s_e"],[35843,0," for the "],[35844,8,""],[35844,0,"in the record representing the deleted character."],[35683,0," ()"],[35685,0,"plus any other fields required by the CRDT for determining the order of concurrent insertions"],[35636,3,""],[35635,1,""],[35679,6,""],[35679,0,", and"],[35773,1,""],[35774,0,"\nThe "],[35811,0," by $italic(\"apply\")(e)$"],[35833,0,"_i"],[35837,0," for a dele"],[35847,1,""],[35846,1,""],[35845,1,""],[35844,1,""],[35843,1,""],[35843,0,"n insertion event $e_i$"],[34667,0,"_i"],[34697,0,"_i"],[35783,0,"rules for updating $$"],[35803,0,"s_p"],[35807,0," and $$"],[35813,0,"s_e"],[35817,0," are as follows:\n"],[35835,0,"- "],[35964,0,"\n"],[35964,1,""],[35965,0,"- "],[35993,0,"_d"],[36021,0,"_d"],[36106,0,"\n- Calling $italic(\"retreat\")$"],[36135,0,"()"],[36136,0,"e_i"],[35895,3,""],[35895,0,"with"],[35999,3,""],[35999,0,"with"],[36143,0," with an insertion event $$"],[36169,0,"e_i"],[36173,0,", or calling $italic(\"advance\")$"],[36204,0,"()"],[36205,0,"e_d"],[36210,0,"  "],[36211,1,""],[36211,0,"with a deletion event $$"],[36234,0,"e_d"],[36238,0,", increments $$"],[36252,0,"s_p"],[36256,0," in the record affected by the event, and leaves $$"],[36306,0,"s_e"],[36310,0," unchanged.\n"],[36321,1,""],[36322,0,"- Calling $italic(\"retreat\")(e_i)$ with an insertion event $e_i$, or calling $italic(\"advance\")(e_d)$ with a deletion event $e_d$, increments $s_p$ in the record affected by the event, and leaves $s_e$ unchanged.\n"],[36341,7,""],[36341,0,"advance"],[36408,7,""],[36408,0,"retreat"],[36453,10,""],[36453,0,"decrements"],[35821,11,""],[35151,0,"sequence "],[35165,9,""],[35164,1,""],[35151,8,""],[35151,0,"list"],[36519,0,"\n\n"],[36520,0,"The result of these rules is that "],[35773,0,"\n$$"],[35775,0,"s_p"],[35777,1,""],[35777,0,"e"],[35779,0," indicates "],[35780,10,""],[35780,0,"is "],[35777,1,""],[35777,0,"p"],[35780,0,"and $s_e$ "],[35790,3,""],[35790,0,"are zero if the character is visible ()"],[35828,0,"inserted but not deleted"],[35853,0," in the "],[35668,0," ()"],[35670,0,"the character's state in the prepare version"],[35725,0," (its state in the effect version)"],[35942,0,"prepare and effect version respectively; tthey "],[35988,1,""],[35987,1,""],[35986,1,""],[35985,1,""],[35984,1,""],[35983,1,""],[35983,0,"a positive integer indicates how many times that character has been concurre"],[36051,8,""],[36051,0,"deleted by concurrent delete operations."],[36080,10,""],[36080,0,"events"],[36087,0,"\n$$"],[36089,0,"s_p"],[36093,0," can also be -1 if it has not yet been in"],[36112,2,""],[36112,0,"the character"],[36145,0,"serted in the prepare version; "],[36175,1,""],[36174,1,""],[36174,0,", but $$"],[36181,0,"s_p"],[36185,0," cannot be less than -1 and $$"],[36214,0,"s_e"],[36218,0," cannot be negative.\n"],[36986,36,""],[37504,0,"\n\nAn example "],[37482,4,""],[37482,0,"Left: the internal state after applying $$"],[37523,0,"e_1 ... e_4"],[37535,0," from @graph-hi-hey: "],[37555,1,""],[37554,1,""],[37554,0,". Right: after $italic(\"retreat\")(e_4)$ and $italic(\"retreat\")(e_3)$, \"\""],[37625,0,"H"],[37627,0," is marked as \"\""],[37642,0,"not yet inserted"],[37659,0," ()"],[37661,0,"-1"],[37664,0," in the prepare state, and \"\""],[37692,0,"h"],[37690,0," the deletion of"],[37664,21,""],[37689,0,"  in the prepare state."],[37690,0,"is undone"],[37661,0,"$"],[37664,0,"$$"],[37664,2,""],[37664,0,"`"],[37664,1,""],[37664,0,"$$"],[37665,1,""],[37665,0,"$"],[37664,2,""],[37664,0,"`"],[37664,1,""],[37664,0,"$$"],[37664,2,""],[37661,2,""],[37661,0,"–"],[37623,0," the pe"],[37629,1,""],[37629,0,"repare state is updated to mark"],[37665,10,""],[37726,21,""],[37727,0," The effect sttatet "],[37746,1,""],[37745,1,""],[37744,1,""],[37743,1,""],[37742,1,""],[37741,1,""],[37741,0,"ate is unchanged."],[37778,11,""],[37778,0,"For example, @crdt-state-1 shows the s"],[37815,1,""],[37815,0,"internal state after applying the first "],[37815,8,""],[37814,1,""],[37836,10,""],[37836,0,"$e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating on $$"],[37918,0,"e_4"],[37922,0," and $$"],[37928,0,"e_43"],[37931,1,""],[37930,1,""],[37930,0,"3"],[37932,0," before applying $$"],[37950,0,"e_5."],[37953,1,""],[37954,0,".\nIn the effect state, the lowercase \"\""],[37992,0,"h"],[37994,0," is marked as deleted, while the uppercase \"\""],[38038,0,"H"],[38040,0,"a"],[38040,1,""],[38040,0," and the \"\""],[38050,0,"i"],[38052,0," are visible.\nIn the prepare state, retreating "],[37913,3,""],[38096,0," $e_4$ and $e_3$"],[38096,1,""],[38111,0," has the e"],[38112,9,""],[38085,0,"by "],[38115,0,"the \"\""],[38120,0,"H"],[38122,0," is set to "],[38126,7,""],[38126,0,"marked as not yet inserted ()"],[38154,0,"$$"],[38155,0,"s_p = -1"],[38165,0,", and the deletion of \"\""],[38188,0,"h"],[38190,0," is undone ()"],[38202,0,"$$"],[38203,0,"s_p = 0"],[38212,0,"."],[37415,0," \"\""],[37416,2,""],[37416,0,"$$"],[37417,0,"italic(\"retreat\")(e_4)"],[37440,0,","],[37416,0,"text()"],[37421,0,"0.5em,"],[37427,1,""],[37427,0," "],[37452,0,")"],[37105,1,""],[37105,0,"6"],[37164,1,""],[37164,0,"3"],[37401,1,""],[37401,0,"8"],[37423,1,""],[37423,0,"7"],[37451,0," "],[37451,1,""],[37451,0,"\\ italic(\"retreat\")(e_4)"],[37473,1,""],[37473,0,"3"],[37508,0,", label-sep: 0.5em"],[37164,1,""],[37164,0,"25"],[37224,1,""],[37224,0,"9"],[37284,1,""],[37284,0,"6"],[37344,0,"5"],[37412,1,""],[37412,0,"43"],[37413,1,""],[38020,8,""],[38019,1,""],[38025,0," is applied"],[36623,0," moves the affected character from $s_p = 0$ to $s_p = -1$.\n"],[36683,4,""],[36683,0,"-"],[36685,1,""],[36685,0,"C"],[36558,0,"\n"],[36899,114,""],[36559,0,"- calling $italic(\"retreat\")(e_d)$ with a deletion event $e_d$, decrements $s_p$ in the record affected by the event"],[36561,1,""],[36561,0,"C"],[36561,7,""],[36561,0,"If"],[36588,0," is called"],[36627,0," $$"],[36629,0,"s_p "],[36632,1,""],[36633,0," must be positive,"],[36652,10,""],[36652,0,"and"],[36662,35,""],[36650,0," in the record affected by the event"],[36698,0,"is decremented. "],[36841,78,""],[36714,0,"Conversely, Calling $italic(\"advance\")(e_d)$ with a deletion event $e_d$, increments $s_p$"],[36726,7,""],[36725,1,""],[36778,1,""],[36795,0,"."],[36799,7,""],[36799,0,"If"],[36827,4,""],[36827,0,"is called with"],[36866,0,", $$"],[36869,0,"s_p"],[36873,0," must be zero in the record affected by the event, and we"],[36935,1,""],[36989,71,""],[36988,1,""],[36988,0," Conversely, "],[37001,6,""],[37000,1,""],[37055,34,""],[37055,0," moves from $$"],[37068,0,"s_p = -1"],[37077,0," to _"],[37081,1,""],[37081,0,"$$"],[37082,0,"s_p = 0"],[37090,0,".\n- If $italic(\"retreat\")(e_d)$ is called with a deletion event $e_d$, $s_p$ must be positive in the record affected by the event, and $s_p$ is decremented. Conversely, $italic(\"advance\")(e_d)$ with a deletion event $e_d$ increments $s_p$."],[36559,238,""],[35803,3,""],[35803,0,"to"],[35814,3,""],[35814,0,"e"],[36785,30,""],[37013,28,""],[38805,0,"\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hety"],[38886,1,""],[38885,1,""],[38885,0,"y: "],[38782,4,""],[38782,0,"The internal eg-walker state after replaying all of the events in @graph-hi-hey."],[38964,0,"\"\""],[38965,0,"i"],[38966,1,""],[38966,0,"\" is also deleted, the characters \"\""],[39001,0,"e"],[39003,0," and \"\""],[39009,0,"y"],[39011,0," are inserted immediately after the \"\""],[39048,0,"h"],[39050,0,", $e_4$ and $e_3$"],[39055,1,""],[39055,0,"3"],[39065,1,""],[39065,0,"4"],[39067,0," are advanced again, and finally the exclamation mnark"],[39120,1,""],[39119,1,""],[39118,1,""],[39117,1,""],[39117,0,"ark is inserted after the \"\""],[39144,0,"y"],[39146,0,".\n\n== Mapping indexes to character IDs"],[39181,3,""],[39181,0,"IDs\n\nIn the event graaph"],[39204,1,""],[39203,1,""],[39202,1,""],[39202,0,"ph, insertion and deletion operations specifiy "],[39248,1,""],[39247,1,""],[39246,1,""],[39246,0,"y the index at which they apply; in order to update the "],[39298,4,""],[39298,0,"eg-walker's internal state, we need to map these to the correct record in the sequence.\nMoreover, to produce the transformed operations, we need to map these internal recor"],[39465,5,""],[39465,0,"IDs back to indexes again.\n\nA simple but inefficient algorithm is "],[39528,3,""],[39528,0,"would be "],[39536,1,""],[39536,0,": to apply a $italic(\"Delete\")(i)$ operaation"],[39580,1,""],[39579,1,""],[39578,1,""],[39577,1,""],[39576,1,""],[39576,0,"tion we iterate over the sequence of records and pickc the "],[39634,1,""],[39633,1,""],[39632,1,""],[39631,1,""],[39630,1,""],[39629,1,""],[39629,0," the $$"],[39635,0,"i"],[39637,0,"th record with a prepare state of $$"],[39672,0,"sp"],[39673,1,""],[39673,0,"_p = 0"],[39680,0," ()"],[39682,0,"i.e., the $$"],[39693,0,"i"],[39695,0,"the "],[39698,1,""],[39697,1,""],[39697,0," cchara"],[39703,1,""],[39702,1,""],[39701,1,""],[39700,1,""],[39699,1,""],[39699,0,"haracter that "],[39697,0," amnon"],[39702,1,""],[39701,1,""],[39700,1,""],[39700,0,"ong the"],[39717,0,"s"],[39724,0,"are visible in the prepare state, which is the state in w"],[39771,0,"doocume"],[39777,1,""],[39776,1,""],[39775,1,""],[39774,1,""],[39773,1,""],[39773,0,"cument "],[39790,0,"hich the operation should be interpretred"],[39828,1,""],[39831,0,".\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $$"],[39892,0,"i - 1"],[39898,0," records and insert aa"],[39919,1,""],[39919,0,"fter "],[39918,0,"the enw re"],[39927,1,""],[39926,1,""],[39925,1,""],[39924,1,""],[39923,1,""],[39922,1,""],[39922,0,"new record "],[39939,0,"the last skipped recorod "],[39963,1,""],[39962,1,""],[39961,1,""],[39961,0,"d ()"],[39964,0,"if there haave"],[39977,1,""],[39976,1,""],[39975,1,""],[39975,0,"a"],[39975,1,""],[39975,0,"ve been cconc"],[39987,1,""],[39986,1,""],[39985,1,""],[39984,1,""],[39984,0,"oncurrent insertions at the same positioon"],[40025,1,""],[40024,1,""],[40024,0,"n, we may also need to skip over some "],[39906,0," with $s_p = 0$"],[40077,0,"records with $s_p = 0$"],[40097,1,""],[40097,0,"-1"],[40100,0,", as determined by the list CRDT's insertion orderign"],[40152,1,""],[40151,1,""],[40151,0,"ng"],[40154,0,".\n\n"],[40157,1,""],[40156,0,"\nTo reduce the cost of this algorithm from $$"],[40200,0,"O()"],[40202,0,"i"],[40205,0," to $$"],[40210,0,"O()"],[40212,0,"log i"],[40219,0,", order statistic tree~\\cite{CLRS2009}"],[40241,7,""],[40241,0," @"],[40251,1,""],[40220,0," we organise "],[40224,9,""],[40224,0,"construct a B-tree whoose "],[40249,1,""],[40248,1,""],[40247,1,""],[40246,1,""],[40246,0,"se leaves, read left "],[40255,12,""],[40255,0,", from left to right, contain the sequence of records res"],[40311,1,""],[40311,0,"presenting character states.\nWe extend the tree into an"],[40367,0,"_"],[40388,0,"_"],[40399,0," ()"],[40401,0,"also known as _ranked B-T"],[40425,1,""],[40425,0,"tree_"],[40431,0," by adding two integers to each node: the number of records with $$"],[40497,0,"s_p = 0"],[40505,0," contained within tthat "],[40528,1,""],[40527,1,""],[40526,1,""],[40525,1,""],[40524,1,""],[40524,0,"hat subtree, and the number of records with $$"],[40569,0,"e_e = 0"],[40577,0,"."],[40577,0," in that subtree"],[40594,0,"\n"],[40569,1,""],[40569,0,"s"],[40595,0,"Every time the state variaibles"],[40625,1,""],[40624,1,""],[40623,1,""],[40622,1,""],[40621,1,""],[40621,0,"bles are updated"],[40202,1,""],[40202,0,"n"],[40216,1,""],[40216,0,"n"],[40220,0," where $$"],[40228,0,"n"],[40230,0," is the number of characters,"],[40676,0,", we also updae "],[40691,1,""],[40690,1,""],[40690,0,"te ho"],[40694,1,""],[40693,1,""],[40693,0,"those numbers on the path from the updated record to the root.\nAs a "],[40760,1,""],[40759,1,""],[40759,0,"the tree is balanced, this can be done in O"],[40801,1,""],[40801,0,"$$"],[40802,0,"O()"],[40804,0,"log n"],[40811,0," time.\n\nNow i is "],[40827,1,""],[40826,1,""],[40825,1,""],[40824,1,""],[40824,0,"t is easy to find the $$"],[40847,0,"ii"],[40848,1,""],[40849,0,"the "],[40852,1,""],[40851,1,""],[40851,0," record with $$"],[40865,0,"s_p = 0"],[40873,0," in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees tha thav"],[40979,1,""],[40978,1,""],[40977,1,""],[40976,1,""],[40975,1,""],[40975,0,"t have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect staate "],[41103,1,""],[41102,1,""],[41101,1,""],[41100,1,""],[41100,0,"te by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $$"],[41226,0,"e"],[41226,1,""],[41226,0,"s_e = 0"],[41234,0," that lie in subtrees to the left of the sttarting"],[41276,1,""],[41283,0," record.\n\nWe use this process on every $$"],[41323,0,"apply()"],[41329,0,"e"],[41323,0,"italic(\""],[41336,0,"\")"],[41342,0,", and then store o "],[41360,1,""],[41360,0,"n the event $$"],[41373,0,"e"],[41358,0," the ID of the gar"],[41375,1,""],[41374,1,""],[41373,1,""],[41373,0,"target record"],[41403,0," in the event graph.\nWhen we subsequently perform a $italic(\"retreat\")(e_3)$"],[41476,1,""],[41475,1,""],[41477,0," or $italic(\"retreat\")(e)$"],[41490,7,""],[41490,0,"advance"],[41503,0,", that evenrt $$"],[41517,2,""],[41516,1,""],[41515,1,""],[41514,1,""],[41514,0,"t $$"],[41517,0,"e"],[41519,0," must have been applied previously, and therefor "],[41567,1,""],[41567,0,"e we "],[41529,0," already"],[41550,11,""],[41569,0,"must have previously stored the ID of the record itt r"],[41622,1,""],[41622,0,"="],[41622,1,""],[41621,1,""],[41620,1,""],[41620,0," reffers "],[41628,1,""],[41627,1,""],[41626,1,""],[41625,1,""],[41624,1,""],[41624,0,"ers to.\nWe can therefore ignore the operation index when retreating and advancing, and instead look up the record "],[41718,0," use the ID to"],[41752,0,"whose $$"],[41759,0,"s_p"],[41763,0," needs to "],[41752,21,""],[41752,0,"to be updated.\nTo this end we maintain a second B-tree that is keyed by event ID, and whose "],[41838,6,""],[41838,0,"which points at the leaf nodes of the first B-tree.\nThis tree allows us to advance or retreat in loga"],[41935,4,""],[41935,0,"logarithmic time by "],[41951,4,""],[41951,0,"."],[40258,0," in the document"],[41307,0,"\nThis allows us to efficiently transform an operation from the preparre "],[41378,1,""],[41377,1,""],[41376,1,""],[41376,0,"e into the effect version "],[41378,0,"version "],[41409,1,""],[41409,0,"."],[41541,0," (for insertions, the ID is simply the ID of the insertion "],[41590,10,""],[41590,0,"event itself; for deletion events, the ID is "],[41632,3,""],[41632,0,"identifies the "],[41624,23,""],[41624,0," it is the ID of the event that originally inserted the character being deleted)"],[39147,0,"\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state."],[41706,6,""],[41706,0,"this"],[41688,3,""],[41688,0,".\nF"],[41848,1,""],[42378,0,"\n\n== Clearning CRDT state"],[42388,1,""],[42402,0," in the absence of concurrency"],[42402,30,""],[42402,0,"\n\nAs described so far, the algorithm retains every insertion since document creation forever in it "],[42500,1,""],[42500,0,"s internal state, causing the state to become big.\nWe now introduce a further optimisation that allows eg-walker to completely discard its internal state froom ti"],[42661,1,""],[42660,1,""],[42659,1,""],[42658,1,""],[42657,1,""],[42657,0,"m time to time."],[42549,0,", and requiring the entire event graph to be replayed in order to restore the state"],[42754,0,", adn r"],[42760,1,""],[42759,1,""],[42758,1,""],[42757,1,""],[42757,0,"nd replay only a part of the event graph"],[42774,4,""],[42774,0,"subset"],[42800,0,"\n\nF"],[42802,1,""],[42802,0,"We define a _critical version_ to be a version "],[15331,0," <versions>"],[42413,0," <clearing>"],[28934,12,""],[28934,0,"@clearing"],[42868,0,"()"],[42869,0,"as defined in @versions"],[42872,10,""],[42872,0,"per"],[42824,33,""],[42824,0,"say that"],[42861,0," is a _critical version_ if it "],[42843,18,""],[42843,0,"$$"],[42844,0,"V"],[42870,0," in an event graph $$"],[42890,0,"G"],[42899,0,"partitions the graph into two disjoint subsets of events $$"],[42957,0,"G_\"before\" = "],[42959,8,""],[42959,0,"1"],[42963,0,"sans()"],[42968,0,"\"\""],[42969,0,"Events"],[42977,0,"()"],[42978,0,"V"],[42981,0," and $$"],[42987,0,"G_2 = G - G_1"],[43001,0," such that $$"],[43013,0,"\\f"],[43014,1,""],[43013,1,""],[43013,0,"forall"],[43013,6,""],[43012,2,""],[43012,0,"$$"],[43013,0,"forall e_1 in G_1 "],[43030,1,""],[43030,0,": forall e_w"],[43041,1,""],[43041,0,"2 in G_2: e_1 -> e_2"],[43062,0,"."],[43011,0," all events in $$"],[43027,0,"_"],[43027,1,""],[43027,0,"G_1"],[43031,0," happened before all events in $$"],[43063,0,"G_2"],[43067,0,":"],[43067,1,""],[43067,0,", that is:"],[42929,9,""],[43058,9,""],[42845,0," subset.eq G"],[42824,8,""],[42824,0,"define"],[42857,2,""],[42857,0,"to be"],[43072,1,""],[43072,0,"\n"],[43074,0," "],[43123,0," "],[43123,0,"."],[43126,1,""],[43126,0,"\n\nEquivalently, $$"],[43143,0,"V"],[43145,0," is a critical version if every event in the graph is either "],[43196,3,""],[43203,0,"happened-"],[43211,1,""],[43211,0," before "],[43203,0,"is equal to or "],[43234,0,"one of the events in $$"],[43256,0,"V"],[43258,0,", or if it happend af"],[43278,1,""],[43277,1,""],[43276,1,""],[43275,1,""],[43275,0,"ed after _all_ of the events in $$"],[43308,0,"V"],[43310,0,";"],[43310,1,""],[43310,0,":\n$$"],[43313,0," forall e_1 in sans()"],[43333,0,"\"\""],[43334,0,"Events"],[43342,0,"()"],[43343,0,"V"],[43345,0," "],[43345,1,""],[43345,0,": "],[43328,0,"G: "],[43322,2,""],[43329,0,"e in "],[43351,1,""],[43351,0," or"],[43355,0,"forall "],[43322,0,"_1"],[43332,0,"_1"],[43366,0,"e_2 in V: "],[43359,0,"("],[43377,0,")"],[43377,0,"e_2 -> e_1"],[43389,0," "],[43389,1,""],[43388,0,". "],[43313,0," m"],[43314,1,""],[43314,0,"sans()"],[43319,0,"Cr"],[43320,1,""],[43319,1,""],[43319,0,"\"\""],[43320,0,"Critical"],[43330,0,"()"],[43331,0,"V"],[43333,0," <=>"],[43333,4,""],[43330,3,""],[43319,10,""],[43319,0,"Cr"],[43318,4,""],[43314,4,""],[43314,0,"m"],[43314,1,""],[43313,1,""],[43196,0,"is either included in "],[43218,59,""],[43221,1,""],[43225,6,""],[43170,0,"f"],[42908,0,"f"],[41565,0,"\nIf the record "],[41573,7,""],[41573,0,"character was already deleted in the effect version ()"],[41626,0,"$$"],[41627,0,"s_e > 0"],[41636,0," "],[41636,1,""],[41636,0,", the transformed operation is a no-op."],[43459,0,"\n\nNote "],[43461,5,""],[43461,0,"Whether a version is critical or not depends on the current set of events in the graph"],[43460,0,"\nWhether a p"],[43471,1,""],[43471,0,"version "],[43461,18,""],[43461,0,"If a version is critical, that does not guarantee that it will remain critical in the future; it is possible for a critical version to become non-critical "],[43540,13,""],[43540,0,"forever"],[43610,0,"because a concurrent event is added to the graph."],[43660,87,""],[43460,1,""],[43659,0,"\n\n"],[43660,0,"A"],[43660,1,""],[43660,0,"At any point du"],[43660,15,""],[43660,0,"If the version of the event graph processed so far is a critical version, \n\n== Placeholders for partial event graph replay <placeholders>"],[43734,0,"we can discard all of the records contain "],[43775,1,""],[43775,0,"ing IDs"],[43760,22,""],[43760,0,"state and "],[43766,4,""],[43766,0,"()"],[43767,0,"including both B-trees"],[43790,0," and replace it with a placeholder as explained in @placeholders.\nWe only need to persist the event graph"],[43789,0," and all $$"],[43799,0,"s_p"],[43803,0," and $$"],[43809,0,"s_e"],[43813,0," values"],[43821,0,","],[43927,0," and the current state of the document without any CRDT metadata.\nMoreover, if the parents of the next event are equal to this event vers"],[44054,10,""],[44054,0,"critical version, we don't need to do anything "],[44071,0," the trans"],[44072,9,""],[44072,0,"we just output the unmodified operation from the event as the transformed operation, and"],[44190,0,"else: no B-trees t "],[44208,1,""],[44208,0,"o traverse"],[44196,0,"there are "],[44228,0," and no CRDT state to update.\n\n"],[43759,0," internal"],[43897,105,""],[44162,0,"This "],[44162,5,""],[44162,0,"In documents with long "],[44175,10,""],[44175,0,"that are edited "],[44184,0,"mostly "],[44198,0,"sequentially ()"],[44212,0,"e.g., because the authors took turns and did not write concurrently"],[44280,0,", most of the events are ci"],[44306,1,""],[44306,0,"ritical versions and therefore very fast to process."],[44358,1,""],[44358,0,"\n\nIf a replica receives an event that is concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, "],[44299,0," graph is a linear chain of "],[44327,6,""],[44345,13,""],[44345,0,"that are"],[44548,0,"it needs to rebuild that state."],[44568,4,""],[44568,0,"some of that"],[44587,0,"\nU"],[44588,1,""],[44588,0,"If the"],[44588,6,""],[44588,0,"The ep"],[44593,1,""],[44592,1,""],[44592,0,"replica needs to identify the most recent critical version that happened before the new event"],[44399,3,""],[44404,0,"s"],[44411,2,""],[44411,0,"are"],[44587,20,""],[44587,0,"It can do this by"],[44613,0,"ing"],[44684,0,", and then replaying all of the events that happened after that critical version including the new events."],[44716,0,"existig"],[44722,1,""],[44722,0,"ng "],[44773,0,", and finally "],[44787,10,""],[44787,0,"applying"],[44787,8,""],[44787,0," including"],[44787,10,""],[44787,0,"applying"],[44787,8,""],[44787,0," including"],[44786,1,""],[44778,8,""],[44778,0," finally "],[44787,10,""],[44787,0,"applying"],[44811,0,"\nEvents from before that critical version do not need to be replayed."],[43713,2,""],[43722,8,""],[44676,9,""],[44686,7,""],[44747,0," (in topolog"],[44752,7,""],[44752,0,"topologically sorted order)"],[44886,0,"\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph needs to be replayed."],[43896,0," both an event's version and its parent version are critical versions"],[43896,69,""],[44049,0,"\n both an event's version and its parent version are critical versions"],[43659,0,"\nThe concept of a critical version enables several key optimisations:\n"],[43730,0,"- "],[43959,0,"- "],[43961,11,""],[43961,0,"I"],[44007,13,""],[44007,0,"the"],[44018,0," of the event graph processed so far"],[44139,0,"."],[44141,0,"- If"],[44215,0," there is no need to traverse the Be-"],[44251,1,""],[44250,1,""],[44250,0,"-trees and update the CRDT state, since we would immediately discard that state anyway"],[44336,100,""],[44337,0,"\n"],[44521,0,","],[44523,4,""],[44523,0,"which"],[44553,0," since they "],[44521,44,""],[44521,0,"."],[44522,1,""],[44339,0,"These optimisations make it very fast to process "],[44388,3,""],[44505,0,"since "],[44534,0," of such a document"],[43662,1,""],[43662,0,"is"],[43672,22,""],[44315,0,"; we can just skip this work"],[45277,0,"\nEven "],[45278,5,""],[45278,0,"The root version $emptyset$ is always a critical version, so in the worst case this algorithm simply "],[45372,7,""],[45372,0,"replays the entire event graph."],[45466,0,"\n\nAssume that we start traversing the event graph at the most recent critical version that precedes the new event.\nThe only information we have is the latest document state ()"],[45640,0,"incorporating ann "],[45657,1,""],[45656,1,""],[45655,1,""],[45655,0,"ll existing events"],[45674,0," and the event graph; in particular, we do not know "],[45467,0,"\n\n"],[45468,0,"Assume that we want to add event $$"],[45502,0,"e_\"new\""],[45510,0," to the event graph, that $$"],[45537,0,"V_\"curr\""],[45546,0," is the "],[45529,0," $G$"],[45549,0," = sans()"],[45557,0,"\"\""],[45558,0,"Version"],[45567,0,"()"],[45568,0,"G"],[45579,0,"curen"],[45583,1,""],[45582,1,""],[45582,0,"rent document reflecting all events except $$"],[45626,0,"E_"],[45627,1,""],[45626,1,""],[45626,0,"e_\"new\""],[45634,0,", and that $$"],[45646,0,"V_\"crit\""],[45655,0," is the latest critical version that happened before both $$"],[45714,0,"e_\"new\" "],[45721,1,""],[45722,0," and $$"],[45728,0,"V_\"curr\""],[45737,0,".\nIf "],[45686,0," in $$"],[45691,0,"G union {}"],[45700,0,"e_\"new\""],[45762,3,""],[45762,0,"Further assume that we have discarded the internal state, so t"],[45824,116,""],[45824,0,"t"],[45824,1,""],[45881,35,""],[45881,0,"at $$"],[45885,0,"V_\"curr\""],[45946,0,"the document state at $$"],[45969,0,"V_\"crit\""],[45930,0," if $$"],[45935,0,"V_\"crit\" eq.not V_\"curr\""],[45408,18,""],[45408,0,"P"],[45436,12,""],[45436,0,"partial-replay"],[43924,12,""],[43924,0,"partial-replay"],[45930,16,""],[45641,0," eq.not V_\"curr\""],[45934,13,""],[45934,0,"without replaying the entire en"],[45964,1,""],[45964,0,"vent graph"],[46022,0,".\n\nHowever, the key insight of eg-walker is that "],[46034,3,""],[46034,0,"a"],[46069,0,"the full document state at $V_\"crit\"$ is not necessary"],[46114,9,""],[46114,0,"needed; all we need is enough state to transform $$"],[46164,0,"e_\"new\""],[46172,0," t"],[46173,1,""],[46173,0,"to apply to the document at $$"],[46202,0,"V_\"curr\""],[46211,0,"."],[46211,0,", and this state can be obtained by replaying only the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$"],[46331,0,"\nFor example, using the graph in @topological-sort, say the current state is $$"],[46409,0,"G = {}"],[46414,0,"e_\"A1\" ... e_\"A5\", e_\"B1\" ... e_\"B403\"2023"],[46449,2,""],[46450,4,""],[46452,0," and the new event $$"],[46472,0,"e_\"new\" = e_\"C1\""],[46489,0,". "],[46490,1,""],[46490,0,"\nThen $$"],[46497,0,"E_\""],[46499,1,""],[46498,1,""],[46497,1,""],[46497,0,"e_\"A1\""],[46504,0," is the most recent critical version."],[46497,0,"{"],[46504,0,"}"],[46452,0,", so $$"],[46458,0,"V_\"curr\" = {}"],[46470,0,"e_\"A5\", e_\"B4\""],[46486,0,","],[46330,0,", in topologically sorted order"],[46609,0,"\n\nWhen rep"],[46611,8,""],[46611,0,"Before replaying the events, we initialise the internal state with a single record that represents indexes 0 to $$"],[46724,0,"invin"],[46728,1,""],[46727,1,""],[46726,1,""],[46726,0,"finity"],[46733,0," of the document state at $$"],[46760,0,"V_\"crit\""],[46769,0,".\nEven though we do not know that document state ()"],[46819,0,"and we do not even know its length"],[46854,0,", we can still represent all the indexes of the document that exist at that version."],[46769,3,""],[46769,0," (e"],[46818,1,""],[46817,1,""],[46817,0,", "],[46854,83,""],[46792,0," even"],[46802,0," the length oft he "],[46820,1,""],[46819,1,""],[46818,1,""],[46817,1,""],[46816,1,""],[46816,0," the document at that version"],[46845,56,""],[46687,0,"placeholder "],[46857,0,", we can have a placeholder for arbitrarily many indexes"],[46783,12,""],[46846,0," but"],[46857,0," still"],[46913,0,"\nThen we p"],[46922,1,""],[46922,0,"replay "],[46914,15,""],[46914,0,"When replaying a deletion event, "],[46946,1,""],[46945,1,""],[46945,0," at index $$"],[46956,0,"i"],[46958,0,", if $$"],[46964,0,"i"],[46966,0," falls within a placeholder "],[46722,0,"the range of "],[46743,5,""],[46744,0,"[0, "],[46756,0,"]"],[47007,0,"for range $$"],[47018,0,"[]"],[47019,0,"j, k"],[47025,0,", we split the pla"],[47042,1,""],[47041,1,""],[47040,1,""],[47039,1,""],[47038,1,""],[47037,1,""],[47036,1,""],[47036,0,"it into a placeholder for $$"],[47063,0,"[]"],[47064,0,"j, i-1"],[47072,0,", a record "],[46971,0,", we "],[46943,0,"n insertion or"],[46990,0,"first "],[46806,5,""],[46814,0," exact"],[46997,0,"map the index to a record in the sequence using the prepare state as usual;"],[47072,1,""],[47183,0,"for index $$"],[47194,0,"i"],[47196,0,", and a placeholder for $$"],[47221,0,"[]"],[47222,0,"i+1, k"],[47230,0,".\nPlaceholders are counted as the number of characters they represent for order statistic tree purposes"],[47300,3,""],[47300,0,"in the"],[47328,8,""],[47328,0,"construction.\n\nA replayed insertion creates a record with $$"],[47387,0,"s_p = s_e = 0"],[47401,0,", and a replayed deletion of a character that was inserted prior to $$"],[47470,0,"V_\"crit\""],[47479,0," "],[47402,4,""],[47476,0,"creates a record with $$"],[47499,0,"s_p = s_e = 1"],[47513,0,", and a replayed deletion of a character inserted xince "],[47563,1,""],[47563,0,"s"],[47569,0,"$$"],[47570,0,"V_\"crit\""],[47579,0," updates the record"],[47401,0," and the ID of the insertion event"],[47342,0,"\nRecords are constructed as follows:\n"],[47380,0,"- "],[47474,0,".\n- "],[47478,3,""],[47478,0,"A"],[47595,0,"\n-"],[47595,0,"n ID from "],[47595,10,""],[47595,0," placeholder ID ()"],[47612,0,"whoch "],[47617,1,""],[47616,1,""],[47615,1,""],[47614,1,""],[47614,0,"ich only needs to be unique within the local replica, and need not be consistent across replicas"],[47711,0,"."],[47715,0,"A "],[47794,0," created by the insertion."],[47366,0," and updated"],[47395,9,""],[47395,0,"pplying an"],[47492,9,""],[47492,0,"app"],[47494,1,""],[47493,1,""],[47492,1,""],[47492,0,"pplying the"],[47500,3,""],[47500,0,"a"],[47728,10,""],[47728,0,"Applying a"],[47833,0,"\n- Retreating and advancing "],[46927,0,"\n\n"],[47345,48,""],[46928,0,"Records are constructed and updated as follows:\n"],[46928,27,""],[46928,0,"The state is then"],[47407,0," "],[47407,1,""],[47407,0," at index $$"],[47418,0,"i"],[47493,0," we first map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, a record for index $i$, and a placeholder for $[i+1, k]$."],[47494,1,""],[47494,0,"W"],[47496,6,""],[47731,237,""],[47384,0,"- Applying a deletion of a character that was inserted prior to $V_\"crit\"$ creates a record with $s_p = s_e = 1$, and a placeholder ID (which only needs to be unique within the local replica, and need not be consistent across replicas).\n"],[47968,108,""],[47621,0,"- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n"],[48076,0,"\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion."],[47621,108,""],[47968,0,"\n- Applying a deletion of a character that was inserted prior to $V_\"crit\"$ creates a record with $s_p = s_e = 1$, and a placeholder ID (which only needs to be unique within the local replica, and need not be consistent across replicas)."],[47384,237,""],[47724,1,""],[47723,1,""],[47674,0,"followed by the new record"],[47700,22,""],[47702,3,""],[47702,0,"followed by"],[47778,0," at index $$"],[47789,0,"i"],[47778,13,""],[47763,0," at index $i$,"],[47778,4,""],[47778,0,"if the deleted"],[47802,5,""],[47835,0,","],[47776,1,""],[47776,0,":"],[47836,0," that means the index must fall within a placeholder"],[47837,11,""],[47877,0," with range $$"],[47890,0,"[]"],[47891,0,"j, k"],[47897,0,". We split it into a placeholder for $$"],[47935,0,"[]"],[47936,0,"j, i-1"],[47944,0,", followed"],[47955,7,""],[47955,0,"by a new"],[47964,1,""],[47963,1,""],[47993,0,"followed by a placeholder for $[i+1, i"],[48030,1,""],[48030,0,"k]$. The new record has "],[48054,4,""],[48071,6,""],[48071,0,"that"],[48168,1,""],[46966,416,""],[47890,0,"\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction.\n"],[46966,1,""],[47890,110,""],[46928,0,"Placeholders are counted as the number of characters they represent in the order statistic tree construction.\n"],[47036,0,", and they have the same number of characters in the prep"],[47092,1,""],[47092,0,"pare version as in the effect version"],[47527,0," Placeholders for empty ranges can be omitted."],[47558,6,""],[47558,0,"are"],[47712,0,"some "],[48139,0,"works as before. We never need to retreat "],[48156,25,""],[48156,0,"The algorithm never needs to retreat or advance an event that happened before $$"],[48235,0,"V_\"crit\""],[48244,0,", therefore we can rely on every retreated or advanced event to have a record ID that was assigned when we applied the event."],[47061,20,""],[47061,0,"length"],[47070,0," both"],[47087,0," ad"],[47089,1,""],[47089,0,"nd the effect"],[47110,25,""],[47110,0,"s"],[34271,0," <prepare-effectv"],[34287,1,""],[34287,0,"-versions>"],[48377,0,"\n- If there are concurrent insertions at the same position, the CRDT algorithm for insertion ordering "],[48456,23,""],[48456,0,"is invoked to place them in a consistent order as discussed in @prepare-effect-versions. Since all concurrent insert"],[48566,6,""],[48566,0,"events must be after \"\""],[48587,2,""],[48587,0,"$$"],[48588,0,"V_\"crit\""],[48597,0,", they will bein"],[48612,1,""],[48611,1,""],[48611,0," included in the replay."],[48119,0,"\n- "],[47139,25,""],[47139,0,"We then apply events"],[48115,2,""],[48115,0,"\nFor "],[48116,4,""],[48116,0,"For events that already exist "],[48127,19,""],[48127,0,"in $$"],[48131,0,"G"],[48133,0," we do not output a transformed operation, but when we finally "],[48188,8,""],[48188,0,"have completed replaying up to $$"],[48220,0,"V_\"curr\""],[48229,0,", "],[48174,7,""],[48174,0,".\nW"],[48227,0,"we next apply $$"],[48242,0,"E"],[48242,1,""],[48242,0,"e_\"new\""],[48250,0,", but "],[48257,2,""],[48512,0,"\nWhen we have completed replaying up to $V_\"curr\"$, we next apply $e_\"new\"$, but "],[48176,81,""],[48431,0,"\nFor events in $G$ we do not output a transformed operation."],[48116,60,""],[48116,0,"Before applying an event we "],[48144,1,""],[48144,0,"r"],[48153,1,""],[48152,1,""],[48151,1,""],[48164,1,""],[48163,1,""],[48162,1,""],[48162,0,"e"],[48163,6,""],[48174,0,"\n"],[48175,1,""],[48389,0,"\n"],[48531,0,"\n\n"],[48533,2,""],[48390,3,""],[48390,0,"While replaying"],[48436,2,""],[48458,0,"s"],[48535,6,""],[48535,0," and output a transformed operation"],[48519,0," retreat/advance to the parent version of $$"],[48562,0,"s"],[48562,1,""],[48562,0,"e_\"new\""],[48570,0," and"],[48590,0,"."],[48570,4,""],[48570,0,","],[48614,9,""],[48614,0,"version of that event."],[48587,1,""],[48587,0,","],[48637,0,"We do this in the same way as before, by starting i"],[48687,1,""],[48687,0,"at the updated record and then moving up "],[48727,1,""],[48727,0,"wards in the order statistic tree, "],[48740,22,""],[48740,0,"B-tree, adding up the preceding number of characters in the effect version ()"],[48816,0,"including placeholders"],[48839,0,"."],[49006,1,""],[49006,0,"\n"],[48899,0,"we invoke "],[48927,11,""],[49097,0,"Consequently, when we are seeking for the insertion position, we never need to seek past a plache"],[49193,1,""],[49192,1,""],[49192,0,"eholder, since the placeholder represents characters that were inserted before $$"],[49272,0,"V_\"C"],[49275,1,""],[49275,0,"crit\""],[49281,0,".\n\n== Algorithm complexity"],[49297,10,""],[49297,0,"complexity\n\n"],[48840,0,"\nWe then keep the state until the next critical version"],[48841,54,""],[48841,0,"Events subsequent to $$"],[48863,0,"e_\"new\""],[48871,0," can now be processed using the state we constructed, without having to repeate"],[48949,1,""],[48949,0," the replay."],[49186,7,""],[49186,0,"are"],[49214,15,""],[49214,0,"W"],[49412,0,"Say we have two users who have been working offline, e"],[49465,1,""],[49465,0,"producing $$"],[49476,0,"k"],[49478,0," and $$"],[49484,0,"m"],[49486,0," operations respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately "],[49465,9,""],[49465,0,"generating"],[49488,10,""],[49488,0,"events"],[49604,0,"prior to the ba"],[49618,1,""],[49618,0,"ranching point.\nDepending on theor"],[49651,1,""],[49650,1,""],[49650,0," order in which "],[49634,32,""],[49634,0,"If the $$"],[49642,0,"k"],[49644,0," branch "],[49640,0," branch of"],[49655,7,""],[49655,0,"events is "],[49662,3,""],[49662,0,"comes first in the topological sort, the replay algorithm first applies $$"],[49735,0,"k"],[49737,0," events, then retreats $$"],[49761,0,"k"],[49763,0," events, applies $$"],[49781,0,"m"],[49783,0," events, and finally advances $$"],[49814,0,"k"],[49816,0," events again."],[49829,0," ()"],[49831,0,"otherwise $$"],[49842,0,"k"],[49844,0," and $$"],[49850,0,"m"],[49852,0," are swapped"],[49866,0,"\nOverall "],[49874,1,""],[49874,0,", $$"],[49877,0,"O()"],[49879,0,"k+m"],[49884,0," calls to apply/retreat/advance are required.\n\nThe cost of each apply/retreat/advance is "],[49970,3,""],[49970,0,"corresponds to the depth "],[49931,13,""],[49931,0,"E"],[49958,25,""],[49958,0,"requires a traveras"],[49976,1,""],[49975,1,""],[49975,0,"sal of either or both B-"],[49982,17,""],[49982,0,"the ind"],[49988,1,""],[49987,1,""],[49986,1,""],[49986,0,"order statistic tree, and in most cases also a traversal of the ID-ind"],[50055,1,""],[50054,1,""],[50053,1,""],[50053,0,"keyed "],[50049,0," second,"],[50067,0,"B-tree.\nThe number of entries in each tree is proportional "],[50109,0," ()"],[50111,0,"including placeholders"],[50151,0,"to $$"],[50155,0,"k+m"],[50159,0,", since "],[49867,7,""],[49867,0,"Thus"],[50075,0," upper bound on the"],[50154,16,""],[50155,0,"2("],[50160,0,")+1"],[50172,0,"each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is O"],[50303,1,""],[50303,0,"$$"],[50304,0,"O()"],[50306,0,"log()"],[50310,0,"k+m"],[50316,0,".\nOverall, the cost of merging branches with $$"],[50362,0,"k"],[50364,0," and $$"],[50370,0,"m"],[50372,0," events is therefore $$"],[50394,0,"O()"],[50396,0,"()"],[50397,0,"k+m"],[50401,0," log "],[50405,1,""],[50405,0,"()"],[50406,0,"k+m"],[50401,1,""],[50401,0," "],[50412,0,".\n\nTo determine the word"],[50435,1,""],[50435,0,"st-case complexity of replaying an event graph with $$"],[50488,0,"n"],[50490,0," events, note that each event is applied exactly once, and before each event we can at most ad"],[50583,1,""],[50582,1,""],[50582,0,"retreat or advance each prior event once.\nThe overall worst-case complexity ov"],[50659,1,""],[50659,0,"f the algorithm is therefore $$"],[50689,0,"O()"],[50691,0,"n^2 log n"],[50702,0,", but this case is u"],[50702,20,""],[50702,0,"."],[49964,1,""],[49964,0,"one or two"],[49984,0,"s"],[50019,20,""],[50019,0,"at most one"],[50047,9,""],[50047,0," "],[50695,0,"; however, this case is unlikely to occur in realistic collaboar"],[50758,1,""],[50757,1,""],[50757,0,"rative text editing scenarios"],[49410,0," <complexity>"],[49842,36,""],[49844,4,""],[49844,0,"Asymp"],[49844,5,""],[49844,0,"asymptotically"],[49844,1,""],[49844,0,"A"],[49912,0,", althoug"],[49912,9,""],[49912,0," regardless of tr"],[49928,1,""],[49927,1,""],[49927,0,"the tr"],[49932,1,""],[49931,1,""],[49931,0,"order in which the branches are traversed, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visis"],[50093,1,""],[50093,0,"ted last"],[25034,12,""],[25034,0,"@complexity"],[51402,0,"\n\nTODO: more related work"],[25642,2,""],[25642,0,"replicas"],[25659,0," to the same state"],[25677,1,""],[25681,3,""],[25688,1,""],[25687,1,""],[25686,1,""],[25686,0,"y"],[27720,40,""],[27720,0,"ancestor that the concurrent operations had in common"],[138169,0,")]"],[137342,0,"\", \"sequential\"),\n    ..stats_for(\"egwalker"],[136643,0,"// TODO: This is a bit ugly in column format.\n#text(6pt, [\n"],[871,14,""],[871,0,"  "],[871,2,""],[871,0,"me@josephg.com"],[526,1,""],[526,0,"1"],[484,0,"  set text(font: \"Linux Libertine\", size: 10pt)\n  let spacing = 0.55em"],[484,2,""],[483,1,""],[483,0,"\n#$"],[485,1,""],[531,2,""],[531,0,"#"],[552,0,"\n"],[553,15,""],[581,0,".1."],[587,0,"  show: columns.with(2, gutter: 8mm)\n\n  // 12pt leading, i.e. 1.2x font-size (rule 3)\n  set par(justify: true, first-line-indent: 1em, leading: spacing)\n  show par: set block(spacing: spacing)\n  "],[780,2,""],[587,2,""],[587,0,"#"],[587,0,"// "],[742,2,""],[675,2,""],[627,2,""],[673,0,"#"],[739,0,"#"],[673,105,""],[553,0,"#set par(justify: true, first-line-indent: 1em, leading: spacing)\n#show par: set block(spacing: spacing)\n\n"],[733,46,""],[484,0,"\n// 12pt leading, i.e. 1.2x font-size (rule 3)\n"],[487,0," 10pt text with"],[536,9,""],[515,21,""],[721,1,""],[727,35,""],[726,1,""],[725,1,""],[724,1,""],[723,1,""],[722,1,""],[722,0,")\n"],[724,1,""],[1252,0,"#show: columns.with(2, gutter: 8mm)"],[1239,0,"//"],[165461,0,"//"],[165461,3,""],[1239,15,""],[1275,0,"\n"],[471,9,""],[471,0,"(x: (8.5 - 7) / 2 * 1in, y: (11 - 9) / 2 * 1in)"],[476,3,""],[476,0,"210"],[482,1,""],[482,0,"178"],[494,2,""],[494,0,"mm"],[502,2,""],[502,0,"297"],[508,1,""],[508,0,"229"],[520,2,""],[520,0,"mm"],[462,0,"\n// 178 x 229 mm text blodfk "],[490,1,""],[489,1,""],[488,1,""],[487,1,""],[487,0,"ck on an A4 page ()"],[505,0,"210 mm × 297 mm"],[510,1,""],[509,1,""],[508,1,""],[470,1,""],[470,0,"×"],[661,0,"\n#show math.equation: set text(font: \"Fira Math\")"],[699,9,""],[699,0,"Linux Libertine"],[662,55,""],[789,0,"#show math.equation: set text(font: \"Linux Libertine\")\n"],[826,15,""],[826,0,"Libertinus Math"],[789,0,"//"],[1079,2,""],[1079,0,"20"],[1331,0,"\n\nAnonymous Author(s) 59\n5 Submission Id: PAPER ID"],[1356,2,""],[1371,8,""],[1371,0,"TODO"],[1368,1,""],[1368,0,"D"],[1354,1,""],[1353,1,""],[1352,1,""],[1352,0,"\\ "],[1353,1,""],[1352,0," "],[1332,0,"\n#$$"],[1335,0,"a"],[1335,1,""],[1334,2,""],[1334,0,"align()"],[1340,0,"center"],[1346,1,""],[1346,0,","],[1346,1,""],[1346,0,")[]"],[1348,0,"\n  \n"],[1354,42,""],[1349,2,""],[1349,0,"Anonymous Author(s) \\\nSubmission ID: TODO\n"],[1390,1,""],[1346,0,", text()"],[1353,0,"12pt"],[1358,1,""],[1403,0,")"],[1360,0,"  "],[1384,0,"  "],[1181,0,", text()"],[1188,0,"12pt"],[1271,0,", text()"],[1278,0,"12pt"],[1193,1,""],[1253,0,")"],[1283,1,""],[1352,0,")"],[1307,0,"\n    University of Cambridge, UK\\ "],[1340,1,""],[1339,1,""],[1339,0," \\"],[1391,0,"%"],[1391,1,""],[1391,0,"/*"],[1468,0,"*/"],[1472,61,""],[1471,1,""],[1393,0," "],[1469,0," "],[790,1,""],[789,1,""],[826,10,""],[826,0,"Fira"],[826,4,""],[826,0,"Libertinus"],[789,0,"//"],[1511,26,""],[1511,0,"#align(center)[*Abstract*]"],[1511,26,""],[1511,0,"heading()"],[1519,0,"[]"],[1520,0,"Abstract"],[1511,0,"$"],[1511,1,""],[1511,0,"#"],[1520,0,"numb"],[1520,4,""],[1520,0,"numbering()"],[1529,2,""],[1528,1,""],[1528,0,"g: none, "],[880,0,"#show heading.where(\n  level: 1\n): it => block(width: 100%)[\n  #set align(center)\n  #set text(12pt, weight: \"regular\")\n  #smallcaps(it.body)\n]"],[941,21,""],[957,19,""],[959,22,""],[959,0,"  #smallcaps(it.body)\n"],[961,11,""],[968,1,""],[961,0,"#"],[961,1,""],[959,2,""],[958,1,""],[957,1,""],[957,0,", "],[966,0,")"],[921,27,""],[941,1,""],[940,1,""],[901,2,""],[900,1,""],[908,1,""],[908,0,"\n"],[900,0,"\n  "],[940,0,"\n]"],[921,0,"block(width: 100%)[\n  #set "],[966,1,""],[958,1,""],[957,1,""],[957,0,")\n"],[957,2,""],[957,0,", "],[966,0,")"],[921,27,""],[921,0,"block(width: 100%)[\n  #set "],[959,0,"#"],[959,1,""],[927,21,""],[932,0,"size: "],[943,0," {}"],[945,0,"\n  \n"],[948,0,"it.body"],[945,0,"\n  numbering(it.numbering)"],[983,8,""],[985,1,""],[984,1,""],[984,0,")"],[948,0,"#"],[948,1,""],[948,0,"//"],[921,0,"#"],[921,1,""],[880,0,"/*"],[989,0,"&"],[989,1,""],[989,0,"()"],[990,0,"/"],[990,1,""],[989,2,""],[989,0,"*/"],[992,0,"\n  show heading: it => locate(loc => {\n    // Find out the final number of the heading counter.\n    let levels = counter(heading).at(loc)\n    let deepest = if levels != () { levels.last() } else { 1 }\n    v(2 * spacing, weak: true)\n    if it.level == 1 {\n      let no-numbering = it.body in ([Abstract], [Acknowledgments], [Acknowledgment])\n      block(text(size: 11pt, {\n        if it.numbering != none and not no-numbering{ \n          numbering(it.numbering, ..levels)\n          h(spacing, weak: true)\n        }\n        it.body\n        v(1.5 * spacing, weak: true)\n      }))\n    } else if it.level == 2 {\n      block(text(size: 10pt,{\n        if it.numbering != none { \n          numbering(it.numbering, ..levels)\n          h(spacing, weak: true)\n        }\n        it.body\n        v(1.5 * spacing, weak: true)\n      }))\n    } else {\n      if it.numbering != none { \n        h(-1em)\n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body + [.]\n    }\n  })\n  "],[1988,2,""],[995,0,"#"],[1984,2,""],[1978,4,""],[1978,0,"  "],[1958,6,""],[1958,0,"    "],[1950,6,""],[1950,0,"    "],[1919,8,""],[1919,0,"      "],[1877,8,""],[1877,0,"      "],[1861,8,""],[1861,0,"      "],[1828,6,""],[1828,0,"    "],[1815,4,""],[1815,0,"  "],[1805,6,""],[1805,0,"    "],[1768,8,""],[1768,0,"      "],[1752,8,""],[1752,0,"      "],[1742,8,""],[1742,0,"      "],[1709,10,""],[1709,0,"        "],[1665,10,""],[1665,0,"        "],[1630,8,""],[1630,0,"      "],[1600,6,""],[1600,0,"    "],[1570,4,""],[1570,0,"  "],[1560,6,""],[1560,0,"    "],[1523,8,""],[1523,0,"      "],[1507,8,""],[1507,0,"      "],[1497,8,""],[1497,0,"      "],[1464,10,""],[1464,0,"        "],[1420,10,""],[1420,0,"        "],[1365,8,""],[1365,0,"      "],[1334,6,""],[1334,0,"    "],[1248,6,""],[1248,0,"    "],[1225,4,""],[1225,0,"  "],[1194,4,""],[1194,0,"  "],[1131,4,""],[1131,0,"  "],[1089,4,""],[1089,0,"  "],[1032,4,""],[1032,0,"  "],[993,2,""],[1342,1,""],[1342,0,"2"],[2553,37,""],[2553,0,"= Abstract"],[2554,9,""],[2553,1,""],[2553,0,"#heading(numbering: none, [Abstract])"],[992,0,"\n// Heading formatting from https://gist.github.com/vtta/d6268ba81ebfdd1dc573db4b72df8436"],[880,113,""],[880,0,"\n"],[519,0,"  "],[463,0,"  "],[447,0,"  "],[434,0,"  "],[1908,0,"\nset enum(indent: 10pt, body-indent: 9pt)\n  set list(indent: 10pt, body-indent: 9pt)\n  "],[1993,2,""],[1950,2,""],[1950,0,"#"],[1909,0,"#"],[166691,114,""],[166690,1,""],[158145,0,"\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n"],[158261,121,""],[158315,1,""],[158377,1,""],[158145,0,"show bibliography: set text(8pt)"],[158145,0,"#"],[149820,0,"if "],[149822,1,""],[149821,1,""],[149820,1,""],[149820,0,"#if !anonymous []"],[149836,0,"\n  \n"],[149842,278,""],[149837,2,""],[149837,0,"= Acknowledgements\n\nThis work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n"],[149857,0,"  "],[149837,0,"  "],[150118,1,""],[422,0,"\n#let anonymous = false\n"],[149848,1,""],[149848,0,"not "],[2272,0,"\n#if anonymous {}"],[2288,0,"\n  \n"],[2293,1,""],[2289,2,""],[2290,8,""],[2290,0,"}#grid(\n"],[2290,1,""],[2289,1,""],[2289,1,""],[2618,0,"  "],[2596,2,""],[2596,0,"    "],[2572,2,""],[2572,0,"    "],[2542,0,"  "],[2539,0,"  "],[2534,2,""],[2534,0,"    "],[2493,4,""],[2493,0,"      "],[2459,4,""],[2459,0,"      "],[2436,4,""],[2436,0,"      "],[2408,2,""],[2408,0,"    "],[2401,2,""],[2401,0,"    "],[2366,4,""],[2366,0,"      "],[2346,4,""],[2346,0,"      "],[2318,2,""],[2318,0,"    "],[2295,2,""],[2295,0,"    "],[2289,0,"  "],[2655,0,"\n  "],[2656,2,""],[2656,0,"}"],[2566,90,""],[2565,1,""],[2289,0,"  /* #align(center, text(12pt)[\n    Anonymous Author(s) \\\n    Submission ID: TODO\n  ]) */\n"],[2378,0,"\n  "],[2379,2,""],[2379,0,"}else {}"],[2386,1,""],[2380,0," "],[2377,1,""],[2376,1,""],[2375,1,""],[2294,1,""],[2293,1,""],[2292,1,""],[2291,1,""],[149934,0,"\n  #heading(numbering: none, [Abstract])\n"],[149974,1,""],[149918,16,""],[149948,8,""],[149948,0,"Acknowledgements"],[149914,5,""],[440,5,""],[440,0,"true"],[440,4,""],[440,0,"false"],[2017,0,"\n#show figure.where(\n  kind: table\n): set figure.caption(position: top)\n"],[2051,1,""],[2038,2,""],[2037,1,""],[2084,0,"\n\n#show figure: it => text()"],[2111,0,"it.body"],[2018,0,"//"],[2100,0,".caption"],[2116,13,""],[2116,0,"[]"],[2117,0,"\n  \n"],[2120,0,"#bold()"],[2126,0,"it.body"],[2134,0," |\n  #it.supplement\n  #context it.counter.display()"],[2184,0,"it.numbering"],[2123,0,"te"],[2123,2,""],[2183,14,""],[2164,19,""],[2153,11,""],[2153,0,"\n  #context it.counter.display(it.numbering)"],[2123,0,"te"],[2121,6,""],[2121,0,"text"],[2126,0,"weight: bold, "],[2134,0,"#"],[2134,1,""],[2134,0,"\""],[2139,0,"\""],[2172,9,""],[2172,0,"#"],[2172,33,""],[2117,0,"\n  #it.counter.display(it.numbering)"],[2156,22,""],[2120,0,"#text(weight: \"bold\", "],[2175,0,")"],[2186,3,""],[2142,1,""],[2175,0,"."],[2204,3,""],[2179,0,"#"],[2191,13,""],[2142,0,"it.supplement "],[2142,0,"["],[2189,0,"]"],[2191,1,""],[2189,0,"."],[2204,4,""],[2143,0,"#"],[2158,0,"#"],[2018,2,""],[2114,0,"#align(left, "],[2218,0,")"],[2114,6,""],[2114,0,"par"],[2118,4,""],[2118,0,"justify: true, fir"],[2133,3,""],[2133,0,"first-line-indent: 0pt,"],[2155,1,""],[2114,0,"align(left, "],[2261,0,")"],[2130,15,""],[11123,172,""],[53142,0,"\n\ntime-machines"],[53144,0,"@"],[53144,0," "],[53144,0,"Micah"],[53148,1,""],[53147,1,""],[53147,0,"hael Toomim's _time machines_ approach"],[53200,0," shares a conceptual foundation with eg-walker: both are based on an event graph ()"],[53282,0,"containing operations as originally generated"],[53304,2,""],[53304,0,"in their"],[53333,0," form"],[53144,8,""],[53331,0," that is traversed in topologically sorted order, with operations "],[53257,0," traversing"],[53342,48,""],[53360,0,"being trasnfo"],[53372,1,""],[53371,1,""],[53370,1,""],[53369,1,""],[53369,0,"nsformed "],[53283,59,""],[53319,0,"from the form in which they were originally gne"],[53365,1,""],[53364,1,""],[53364,0,"enerated into the "],[53378,4,""],[53378,0,"a form that can be applied in topologically sorted order.\nTom"],[53438,1,""],[53438,0,"omim also points out that CRDTs can be used to perof"],[53489,1,""],[53488,1,""],[53488,0,"form this transformation.\nThe controbution "],[53523,1,""],[53523,0,"i"],[53531,0,"of eg-walker lies in "],[53514,21,""],[53514,0,"E"],[53524,8,""],[53524,0,"is a concrete, optimised implementation of this general approach; the approach of retreating adn a"],[53621,1,""],[53620,1,""],[53619,1,""],[53618,1,""],[53618,0,"nd advancing to update the prepare version, as well as the mechanisms of partial event graph replay and "],[53590,15,""],[53590,0,"updating the prepare version by"],[53646,30,""],[53648,25,""],[53648,0,"and the details "],[53663,1,""],[53694,4,""],[53694,0,"are novel contributions of eg-walker."],[53693,0,","],[53648,3,""],[53648,0,"as well as"],[52820,0,"\n\nEg-walker is an example of a _pure operation-based CRDTs"],[52877,1,""],[52877,0,"_ @po"],[52880,2,""],[52880,0,"polog, which is a family of algorithms that capture a DAG of operations"],[52951,43,""],[52983,110,""],[52983,0,", and define the current state as a query over that event graph"],[53161,21,""],[53161,0,"and eg-walker adds a list/text datatype to this family"],[52937,0," ()"],[52939,0,"or partially ordered log"],[53062,11,""],[53062,0,"log"],[53127,0," @Almeida2023 @Bauwens2023"],[53186,0,"maps, "],[53196,0,","],[53211,5,""],[53211,0,";"],[53556,0," to obtain the current document state"],[53728,10,""],[53728,0,"e time machien"],[53741,1,""],[53740,1,""],[53740,0,"ne"],[4040,0," K"],[4041,1,""],[4041,0,"<introduction>"],[53918,0,"\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n"],[53918,0,"\nOur work traces back to a long lineage of research onc"],[53972,1,""],[53972,0," collaborative text editing."],[53918,0,"\nSinc "],[53923,1,""],[53923,0,"e eg-walker transforms "],[53919,27,""],[53919,0,"Eg-walker can also be regarded as an _operational transformation_ algorithm"],[53985,0,"(OT_ "],[53989,1,""],[53988,1,""],[53988,0,") "],[54147,11,""],[53999,0,"  @Ellis1989≤ "],[54012,1,""],[54011,1,""],[54011,0,", "],[54000,1,""],[54012,0,"since it takes insert"],[54027,6,""],[54027,0,"operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state in order to have the equi"],[54186,8,""],[54186,0,"an effect equivalent to the original operation in the state in which it was generated.\nThere is a long lineage of research on OT algorithms"],[54273,52,""],[54273,0,"To our knowledge, all existing OT "],[54273,0,"However, "],[54282,1,""],[54282,0,"t"],[54316,0,"follow a pattern of splitting the algorithm into two components"],[54273,10,""],[54273,0,"T"],[54370,0,": a set of _transformation functions_ that transform one operation with regard to an"],[54453,1,""],[54452,1,""],[54452,0,"one other, concurrent operation, and a _control agl"],[54502,1,""],[54501,1,""],[54501,0,"lgorithm_ that invokes the transformation functions "],[54515,0," traverses an editing history and"],[54560,0," necessary"],[54595,1,""],[54595,0,".\n"],[54596,0,"\nP "],[54598,1,""],[54598,0,"A"],[54598,1,""],[54597,1,""],[54597,0,"A problem with this architecture iw "],[54632,1,""],[54631,1,""],[54631,0,"s that "],[54306,0," algorithms"],[54338,29,""],[54342,10,""],[54342,0,"sub-algorithms"],[54624,0,"when two replicas have diverged and each pefr"],[54668,1,""],[54667,1,""],[54667,0,"f"],[54667,1,""],[54667,0,"rformed $$"],[54676,0,"n"],[54678,0," operations, merging their states has a cost of $$"],[54727,0,"O()"],[54729,0,"n^2"],[54734,0," in the best case, as each operation from one branch needs to be transofo"],[54806,1,""],[54805,1,""],[54804,1,""],[54804,0,"formed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or event"],[54917,1,""],[54917,0," worse."],[54923,0," @Li2006 @Roh2011RGA @Sun2020OT"],[54272,0,"\nThe lineage of OT traces back to several seminal papers in the 1990s @Nichols1995 @Sun1998"],[54354,0," @Ressel1996"],[54375,0,"."],[54273,15,""],[54275,0," has a long lineage of research,"],[54313,1,""],[54312,1,""],[54312,0,"ing"],[55077,0,"\nEg-walker departs from the transformation function/control algorithm architecture and insteqa"],[55170,1,""],[55169,1,""],[55169,0,"ad performs transformations uins g"],[55202,1,""],[55201,1,""],[55200,1,""],[55199,1,""],[55198,1,""],[55198,0,"sing "],[54833,0," unavoidably"],[54868,17,""],[54859,0," at least"],[55207,0,"an internal CRDT state, which reduces the c"],[55249,1,""],[55249,0,"merging cost to $$"],[55266,0,"O()"],[55268,0,"n log n"],[55277,0," "],[55261,0," from $$"],[55268,0,"O()"],[55261,11,""],[55278,0,"in most common cases; the theoretical upper bound of $$"],[55332,0,"O()"],[55334,0,"n^2 log n"],[55345,0," is unlikely to occur in practical editing hs"],[55389,1,""],[55389,0,"istories.\n\nMoreover, "],[56159,368,""],[55411,0,"Most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server, such algorithms are challenging to reason about, as evidenced by the fact that many published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF.\n"],[55411,1,""],[55410,1,""],[55410,0,"m"],[55601,83,""],[55601,0,"several"],[55700,0,", leaving OT with a reputation of being very difficult to reason about"],[55286,7,""],[55602,0,"early "],[55592,0," @Sun2020OT"],[55781,0,"\nW"],[55782,1,""],[55782,0,"Although we have "],[55782,17,""],[55782,0,"We have not formally evaluated the ease of understanding eg-walker, but we believe that "],[55782,0," "],[55873,266,""],[55782,1,""],[55870,0,"it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\n_Conflict-free replicated data types_ ()"],[56007,0,"CRDTs"],[56013,0," are the other prominent family "],[55968,0,"Other prominent collaborative text editing algorithms belong to the "],[56037,1,""],[56037,0,"c"],[56082,31,""],[56082,0,"family, including RGA @ro"],[56105,2,""],[56105,0,"Roh2011RGA, Treedoc, and Logoot."],[56090,0,"with early examples "],[56156,0,", and Fugue @fugue being more recent"],[56144,0," @Preguica2009"],[56170,0," @Weiss2010"],[54169,9,""],[56079,0," @Shapiro2011"],[56223,0,"To our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persistend"],[56432,1,""],[56431,1,""],[56431,0,"d and replicated, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead."],[56432,0," for the lifetime of the document"],[56470,10,""],[56470,0,"sent to all replicas"],[56606,0,"\nIn contrast, eg-walker uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\nEg-walker does need to store the event graph, but this takes less space than CRDT metadata, and it does not need to be resident in memory "],[56898,39,""],[56898,0,"only needs to be memory-resident while "],[56931,6,""],[56931,0,"when re"],[56931,7,""],[56931,0,"to replay history; most of the time the event graph can remain on disk."],[57004,24,""],[57461,1289,""],[57462,299,""],[57456,9,""],[57003,0,"\nGu et al.'s mark \\& retrace method @Gu2005 is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n"],[57021,1,""],[57016,0,"_"],[57031,0,"_"],[57304,0,"\nDifferential synchronization @Fraser2009"],[53279,0,"\n// MRDTs?"],[57315,0," "],[57315,0,"The merging support in version control systems suchas G"],[57369,1,""],[57368,1,""],[57367,1,""],[57366,1,""],[57366,0," as Git, as well as"],[57386,1,""],[57386,0,"d"],[57426,0,", rely on fuzzy application of patches: "],[57428,38,""],[57428,0,"apply path"],[57437,1,""],[57437,0,"ches by searching "],[57315,24,""],[57315,0,"V"],[57404,0," perform merges by diffing the old and new states on one branch, and applying the diff to the other branch."],[57511,28,""],[57511,0,"\nApplying patches relies on searching for some amount of context before and after the modified text passage, which can end up applying the patch in the wrong place if the context exists in multiple "],[57682,0,"same "],[57630,7,""],[57637,1,""],[57636,1,""],[57635,1,""],[57704,0,"locations, "],[57538,0," ehru"],[57542,1,""],[57541,1,""],[57540,1,""],[57539,1,""],[57539,0,"eh"],[57540,1,""],[57539,1,""],[57539,0,"heuristics such as"],[57734,0,"and which can fail if the context has b"],[57772,1,""],[57772,0,"concurrently been modified.\nThese approaches therefore don't generally "],[57827,6,""],[57837,0,"require manual merge conflict resolution and don't ensure automatic replica convergence."],[57549,0,","],[57928,294,""],[56853,0," as long as concurrent operations may arrive"],[57002,3,""],[57002,0,".\nM"],[57055,0,", and "],[57060,1,""],[57056,4,""],[57055,1,""],[57003,2,""],[57002,1,""],[57002,0,"; m"],[57002,3,""],[57002,0,".\nM"],[57055,0,", and "],[57060,1,""],[57056,4,""],[57055,1,""],[57003,2,""],[57002,1,""],[57002,0,"; m"],[56988,14,""],[56988,0,"handle concurrent operations"],[55782,0," "],[55782,1,""],[55781,0," @Levien2016"],[55751,5,""],[57993,157,""],[53288,1,""],[53280,3,""],[53285,0," are "],[53286,0,"@Soundarapandian2022 "],[53311,0,"similarly based on a DAG, and use a three-way merge function that merg"],[53280,0,"MRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function that merg\n"],[53280,102,""],[53372,9,""],[53372,0,"to combine two branches since their lowest common ancestor"],[53280,0,"\n"],[54036,32,""],[53920,0,"novel contributions of eg-walker include "],[54071,6,""],[53431,0," ()"],[53432,2,""],[53431,1,""],[53431,0,"; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far there is "],[53544,9,""],[53544,0,"non "],[53547,1,""],[53547,0,"e s"],[53549,1,""],[53549,0,"offers text with arbitrary insertion and deletion."],[6142,14,""],[6189,14,""],[6135,6,""],[6135,0,"dotted"],[6182,6,""],[6182,0,"dotted"],[6182,6,""],[6182,0,"dashed"],[6135,6,""],[6135,0,"dashed"],[5183,8,""],[5183,0,"as-is"],[5196,8,""],[5196,0,"that"],[7549,0,"a "],[7559,0," algorithm"],[7550,0,"n"],[7551,9,""],[7561,0," of complexity  $O(k m)$"],[7576,1,""],[7562,2,""],[7562,0,"with"],[11133,808,""],[11132,1,""],[11554,2,""],[12903,9,""],[12903,0,"the underlying broadcast protocol ensures"],[13080,128,""],[13266,0," ()"],[13268,0,"insert or delete"],[13285,4,""],[13285,0,","],[13298,0,", and a set of _parents_"],[13313,0,"IDS"],[13315,1,""],[13315,0,"s "],[13317,9,""],[13317,0,"of its _parent nodes_"],[13344,0," event $$"],[13352,0,"b"],[13345,0,"the parents of "],[13369,0," contain the eventt"],[13510,0,"\nWhen the parents of event $b$ contain the eventt the graph contains an edge from event $a$ to event $b$ we say that $a$ is a _parent_ of $b$, and $b$ is a _child_ of $a$."],[13510,171,""],[13382,6,""],[13382,0,"ID of event $$"],[13395,0,"a"],[13397,0,", we say"],[13438,6,""],[13444,6,""],[13448,12,""],[13448,0,","],[13405,44,""],[13432,4,""],[13455,0,", and  the graph contains an edge from $a$ to $b$"],[13460,1,""],[13505,0,"We construct events such that "],[13535,1,""],[13535,0,"t"],[13284,0," acha"],[13288,1,""],[13287,1,""],[13286,1,""],[13286,0," character"],[14640,15,""],[14640,0,"events"],[15563,32,""],[15563,0,"corresponding to"],[14631,0,"ir"],[16059,112,""],[16057,0,", with each event havein"],[16080,1,""],[16079,1,""],[16078,1,""],[16078,0,"ing one parent and one child"],[12845,0," ()"],[12847,0,"i.e. "],[12851,1,""],[12851,0,", the same sequence of characters"],[12853,0," "],[12853,1,""],[12853,0,"a text consisting of "],[12675,10,""],[12675,0,"A key"],[12690,1,""],[12689,1,""],[12688,1,""],[12688,0,"y"],[12952,0," at each replica"],[18009,71,""],[16274,0,"\n\n"],[16275,0,"Let $$"],[16280,0,"G"],[16281,1,""],[16281,0,"$ be an event graph, represented as a set of events."],[16511,204,""],[16334,0,"Due to convergence, any two replicas that have the same set of events must be in the same state; hence, the state of the document must be a deterministic function of the set of events that have occurred.\n"],[16429,0,".\n"],[16430,0,"\nTherefore, we could say that the document sttate"],[16478,1,""],[16477,1,""],[16476,1,""],[16475,1,""],[16475,0,"ate ()"],[16480,0,"sequence of characters"],[16503,0," "],[16442,18,""],[16486,0,"resulting from $$"],[16502,0,"G"],[16503,1,""],[16503,0,"$ must be s"],[16513,1,""],[16513,0,"some function $$"],[16528,0,"italic()"],[16535,0,"\"\""],[16536,0,"replay"],[16544,0,"()"],[16545,0,"G"],[16548,0,"; as long as $$"],[16562,0,"italic()"],[16569,0,"\"\""],[16570,0,"replay"],[16579,0," is a pure ()"],[16591,0,"deterministic and non-mutating"],[16622,0," function."],[16548,12,""],[16548,0,", where"],[16513,14,""],[16564,1,""],[16564,0,"some"],[26614,0," <characteristics>"],[16616,0,"\nIn principle, any pure function of the set of events reul"],[16673,1,""],[16672,1,""],[16672,0,"sults in convergence, although a $$"],[16706,0,"italic()"],[16713,0,"\"\""],[16714,0,"replay"],[16723,0," function that is useful for text editing must satisfy additional critier"],[16795,1,""],[16794,1,""],[16793,1,""],[16793,0,"eria ()"],[16799,0,"see @characteristics"],[16820,0,"."],[16822,109,""],[16998,0,"\nIf $$"],[17003,0,"G"],[17004,1,""],[17004,0,"$ "],[16999,7,""],[16999,0,"A"],[16999,1,""],[16999,0,"L"],[16999,1,""],[16999,0,"Let $$"],[17004,0,"e_i"],[17008,0," be an event; the st"],[17027,1,""],[17026,1,""],[17026,0,"document state when $$"],[17047,0,"e_i"],[17051,0," was generated must be $$"],[17075,0,"#"],[17075,1,""],[17075,0,"italic()"],[17082,0,"\"\""],[17083,0,"replay"],[17091,0,"()"],[17092,0,"G_i"],[17097,0,", where $$"],[17106,0,"G_i"],[17110,0," is the set of events "],[17132,19,""],[17132,0,"\n"],[17132,1,""],[17191,14,""],[17193,0,"_i"],[17211,0,"\n"],[17211,0,"()"],[17212,0,"not included"],[17223,1,""],[17222,1,""],[17222,0,"ing $$"],[17227,0,"e_i"],[17231,0," itself"],[17239,0,".\nBy construction, the parents oof $$"],[17274,2,""],[17273,1,""],[17272,1,""],[17271,1,""],[17271,0,"f $$"],[17274,0,"e_i"],[17278,0," are the frontier of $$"],[17300,0,"G_i"],[17304,0,"."],[17304,0,", and thus $G_i$ is the "],[17328,23,""],[17328,0,"set"],[17365,0,"_i"],[17378,0,"_i"],[17448,0,"_i"],[17503,0,"_i"],[17244,12,""],[17244,0,"definition"],[17332,0," all"],[17531,0,"To formalise this, "],[17550,1,""],[17550,0,"e"],[17550,1,""],[17550,0,"g"],[17570,0," ()"],[17572,0,"set of events"],[17590,33,""],[18844,13,""],[18844,0,"pure"],[18858,0,"$italic(\"replay\")(G)$ "],[18880,10,""],[18880,0,"of"],[18897,0," $$"],[18899,0,"G"],[18901,93,""],[19246,1,""],[19142,1,""],[19399,0," $$"],[19401,0,"G"],[19422,0," $italic(\"replay\")(G)$"],[19424,0,"italic(\"doc\") = "],[19361,6,""],[19361,0,".\nSay"],[19465,17,""],[19465,0,"an"],[19473,1,""],[19473,0," $$"],[19475,0,"E"],[19475,1,""],[19475,0,"e"],[19522,0,".\n"],[19524,3,""],[19524,0,"W"],[19526,0," now"],[19523,0,"\nIn principle, we could re-process "],[19549,9,""],[19549,0,"run the function to obtain $italic(\"doc\") = italic(\"replay\")(G)$"],[19590,0,"'"],[19612,0," union {}"],[19620,0,"e"],[19500,3,""],[19500,0,"is"],[19523,15,""],[19523,0,"W"],[19609,0,", but it would be inefficne"],[19635,1,""],[19634,1,""],[19634,0,"ient to re-process the entire graph.\nInsttead"],[19678,1,""],[19677,1,""],[19676,1,""],[19675,1,""],[19675,0,"ead, we need to "],[19691,16,""],[19716,0," minimal op"],[19717,10,""],[19717,0,"operation "],[19846,0,"\nWe could rerun the function to obtain $italic(\"doc\")' = italic(\"replay\")(G union {e})$, but it would be inefficient to re-process the entire graph."],[19523,148,""],[19698,148,""],[19523,0,"We could rerun the function to obtain $italic(\"doc\")' = italic(\"replay\")(G union {e})$, but it would be inefficient to re-process the entire graph.\n"],[19703,9,""],[19703,0,"compute"],[19725,0,"that we need to apply to $italic(\"doc\")$$"],[19765,1,""],[19765,0," in order to obtain $italic(\"doc\")$"],[19799,0,"'"],[19801,0,"."],[19802,119,""],[19825,1,""],[19825,0,"is"],[19867,0," an"],[19880,1,""],[19881,3,""],[19881,0,"or"],[19892,1,""],[19895,0," a"],[19915,1,""],[19914,1,""],[19935,1,""],[19934,1,""],[19951,5,""],[19951,0,"that"],[19977,1,""],[20021,0,", and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation"],[20132,33,""],[20132,0,"B"],[20168,0," this incremental update"],[20577,62,""],[21106,12,""],[21106,0,"efficiently"],[21122,4,""],[18956,7,""],[18956,0,"to or"],[18960,1,""],[18959,1,""],[18959,0,"partially order"],[19653,3,""],[19677,0," again"],[19739,13,""],[20198,12,""],[20198,0,"none of the events in $$"],[20221,0,"G"],[20223,0," are"],[20239,6,""],[20239,0,"with $e$"],[20328,18,""],[20328,0,"$e$"],[22320,0,"\nThe state of each replica consists of three parts:\n\n"],[22372,0,"\n/ Event graph: "],[22388,2,""],[22408,0,"a copy of "],[22441,45,""],[22441,0,", in a format described in Section TODO.\n/ Document state: The current sequence of characters in the document with no further metadata. On disk this is simply a po"],[22603,1,""],[22603,0,"lain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n/ Internal state: A CRDT structure that is used "],[22788,0," "],[22788,1,""],[22789,0,"temporary "],[22827,0,"to merge concurrent edits."],[22826,0," by eg-walker"],[22866,0," It is not persisted or replicated, and it is discarded when the algorithm finishes running."],[22373,1,""],[22373,0,"1."],[22376,0,"**"],[22390,0,"**"],[22487,1,""],[22487,0,"2."],[22490,0,"**"],[22507,0,"**"],[22779,1,""],[22779,0,"3."],[22782,0,"**"],[22799,0,"**"],[22800,1,""],[22782,1,""],[22490,1,""],[22376,1,""],[22390,1,""],[22505,1,""],[22828,11,""],[22838,0,"uses "],[22973,0,"can replay an entire event graph by "],[23016,1,""],[23016,0,"ing"],[23038,17,""],[23095,1,""],[23095,0,"ing"],[22976,0," reconstruct the document sa"],[23003,1,""],[23003,0,"tate by"],[23017,3,""],[23017,0,"ing the "],[23024,1,""],[23043,0,".\n"],[23045,3,""],[23045,0,"It first"],[23063,1,""],[23062,1,""],[23061,1,""],[23061,0,"s"],[23138,3,""],[23138,0,"s"],[23323,23,""],[23323,0,"event graph"],[23159,3,""],[23200,3,""],[23200,0,"ca "],[23202,1,""],[23202,0,"n be"],[23279,9,""],[23279,0,"to obtain the"],[23302,36,""],[23302,0,"state"],[23308,0,"\nUsing "],[23309,6,""],[23309,0,"In Git parlance, this process \"\""],[23340,0,"rebases"],[23348,0," a DAG of operations into a linear operation history with the same effect."],[23676,0," state"],[27134,0,"state "],[26917,11,""],[27047,11,""],[26892,4,""],[26891,1,""],[26911,0,"s"],[27015,0,"s"],[27343,55,""],[27345,16,""],[27345,0,"it"],[27549,27,""],[27549,0,"enables"],[27548,0," approach"],[27272,8,""],[27272,0,"easily"],[27301,0," for real-time collaboration"],[27570,47,""],[27272,6,""],[27271,1,""],[27264,0,"easily "],[27667,0," state"],[28938,4,""],[28938,0,"internal"],[29103,4,""],[29103,0,"internal"],[29155,15,""],[29155,0,"event graph"],[29218,4,""],[29218,0,"the internal"],[29571,8,""],[29330,16,""],[29330,0,"requires the event graph and the internal state"],[29330,8,""],[29330,0,"not need"],[29189,136,""],[29468,19,""],[29468,0,"we only need to"],[29488,5,""],[29493,6,""],[29493,0,"current"],[29578,22,""],[29578,0,"TT"],[29579,1,""],[29594,11,""],[29594,0,"is only required"],[29523,16,""],[29523,0,"is a plain text file"],[29543,2,""],[29552,5,""],[29804,9,""],[29804,0,"existing"],[29817,9,""],[29817,0,"s"],[29833,1,""],[29974,1,""],[29919,7,""],[29918,1,""],[29863,4,""],[29863,0,"internal"],[30336,6,""],[30336,0,"are"],[30370,5,""],[30370,0,"may"],[30197,26,""],[30196,1,""],[30195,1,""],[30195,0,"is internal state"],[30671,0," (see @com"],[30678,3,""],[30678,0,"complexity)"],[30832,8,""],[30832,0,"without"],[30847,0,"ing"],[30855,4,""],[30855,0,"internal"],[30950,8,""],[30950,0,"pa"],[30950,2,""],[30950,0,"partial-replay"],[12833,0,"document "],[11818,3,""],[11818,0,"its"],[11842,16,""],[28772,8,""],[28772,0,"using"],[28792,21,""],[28792,0,"for events"],[28796,0,"concurrent "],[28813,17,""],[28982,11,""],[28982,0,"novel aspect"],[29445,44,""],[29440,63,""],[29356,0,"only need to load the current document state; "],[29356,0,"we "],[29368,8,""],[29322,17,""],[29322,0,"M"],[28980,14,""],[28980,0,"One key contribution"],[29017,6,""],[29017,0,"that it can"],[28980,3,""],[28980,0,"A"],[30590,0,", and some OT algorithms are ony"],[30621,1,""],[30621,0,"ly able to handle restricted forms of event graphs"],[30590,5,""],[30590,0,";"],[30590,1,""],[30590,0,".\n"],[30592,2,""],[30592,0,"S"],[30667,0,", whereas eg-l"],[30680,1,""],[30680,0,"walker handles arbitrary DAGs"],[30985,90,""],[30985,0,"we show how the algorithm can be optimised to replay only part of the event graph"],[30909,0,"which "],[30909,5,""],[30909,0,"that"],[31052,0,"s"],[31052,1,""],[31048,0,"a "],[30850,1,""],[27111,8,""],[27111,0,"\"\""],[27112,0,"Hello!"],[34347,6,""],[34347,0,"m"],[34304,6,""],[34304,0,"y"],[34301,5,""],[34305,1,""],[34305,0,"ing"],[31494,2,""],[31494,0,"perform"],[31525,0," startting "],[31535,1,""],[31534,1,""],[31533,1,""],[31532,1,""],[31531,1,""],[31531,0,"ing from the oldest event"],[31652,49,""],[31653,0,"\nWhen a node has multiple children, we want to visit small branches before large branches. We do this by measuring the total distance from each event to the graph's frontier. Events with the smallest total distance to the frontier are visited first."],[31692,0,"\n\n"],[31692,0,"choose their order based on a heuristic"],[31943,221,""],[31733,0,"When choosing which branch to traverse, we use a greedy heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\n"],[31731,67,""],[31887,52,""],[31901,28,""],[31901,0,"counting the number of edges"],[31970,75,""],[32066,14,""],[32066,0,"the internal sttate"],[32080,1,""],[32144,12,""],[32144,0,"internal state"],[32717,12,""],[32717,0,"internal stae"],[32730,1,""],[32729,1,""],[32729,0,"tet "],[32731,1,""],[32810,1,""],[32810,0,"-"],[32812,6,""],[32812,0,"$italic(\"apply\")(e_1)$"],[32831,1,""],[32830,1,""],[32833,1,""],[32833,0,"u"],[32900,15,""],[32900,0,"#"],[32900,1,""],[32900,0,"$e$"],[32954,25,""],[32954,0,"$e.italic(\"parents\")$"],[32986,9,""],[32986,0,"$$"],[32987,0,"e"],[32988,1,""],[32988,0,"$"],[33046,9,""],[33046,0,"$$"],[33047,0,"e"],[33169,1,""],[33169,0,"-"],[33171,0,"$italic(\"apply\")(e)$"],[33180,5,""],[33180,0,"retreat"],[33193,10,""],[33193,0," u"],[33232,15,""],[33232,0,"$e$"],[33291,10,""],[33291,0,"$e$"],[33296,0,"- $italic(\"apply\")(e)$"],[33307,5,""],[33307,0,"advance"],[33320,12,""],[33320,0," u"],[33356,15,""],[33356,0,"$e$"],[33422,10,""],[33422,0,"$e$"],[33246,4,""],[33245,1,""],[31890,7,""],[31890,0,"estimate the size of a branch"],[32863,4,""],[32862,1,""],[33015,10,""],[33015,0,"yet"],[34643,12,""],[35635,46,""],[35649,0," may have to be retreated and advanced"],[35759,20,""],[35759,0,"We"],[35842,0,"we conceptually "],[35857,1,""],[35844,13,""],[35842,2,""],[35759,2,""],[35759,0,"The general rule is: we"],[35780,3,""],[35796,30,""],[35780,22,""],[35806,0," in topologically sorted order"],[35759,20,""],[35759,0,"G"],[35759,1,""],[35759,0,"In general,"],[35708,17,""],[35708,0,"we can"],[35688,8,""],[35688,0,"several"],[35775,4,""],[35775,0,"the next"],[35789,0," $$"],[35791,0,"e"],[35960,42,""],[36043,33,""],[36060,0," order"],[36199,0,"\n\nTo efficiently compute the events to retreat and advance, "],[36258,1,""],[36257,1,""],[36257,0," when "],[36257,6,""],[36257,0,", we traverse the event graph "],[36262,25,""],[36262,0,"initialise a priority queue with "],[36290,5,""],[36290,0,"to contain the "],[36203,0," move the prepare version from $$"],[36235,0,"V_p"],[36239,0," to $$"],[36244,0,"V_p'"],[36249,0," we need to"],[36314,0,".\n"],[36316,3,""],[36316,0,"W"],[36316,46,""],[36316,0,"For each event in $V_p$ to $V_p'$"],[36340,2,""],[36340,0,"and"],[36350,0," we insert the index of that eventt in "],[36388,1,""],[36387,1,""],[36386,1,""],[36385,1,""],[36384,1,""],[36384,0," in the topological sort order, along witht a "],[36429,1,""],[36428,1,""],[36427,1,""],[36426,1,""],[36426,0," a ttag "],[36433,1,""],[36432,1,""],[36431,1,""],[36430,1,""],[36430,0,"ag indicating whether the event is in the old or the new prepare version."],[36414,0," into a priority queue"],[36525,0,"\nWe then pop the event with the greatest index off the priority queue, and euqueue"],[36601,1,""],[36601,0,"n"],[36607,0," the indexes of its parents along with the same tag.\nWe stop the traversal when both "],[36687,5,""],[36687,0,"all entries in the priority queue have been reached by traversing from both $V_p$ to $V_p'$."],[36769,2,""],[36769,0,"and"],[36780,0,"\nAny events tha "],[36795,1,""],[36795,0,"t were traversed from only one of the versions need to be retreated or advanced respectively."],[36245,0,"'"],[36248,1,""],[36346,0,"'"],[36349,1,""],[36775,0,"'"],[36778,1,""],[36201,0,"The following algorithm efficiently computes "],[36325,34,""],[36245,0," the events to retreat and advance"],[36280,2,""],[36280,0,"when"],[36288,1,""],[36288,0,"ing"],[36332,31,""],[36551,0," repeatedly"],[36994,12,""],[36994,0,"internal state"],[114618,12,""],[114618,0,"internal state"],[37224,0,", including tt"],[37237,1,""],[37236,1,""],[37236,0,"tombstones for deleted characters."],[37270,3,""],[37270,0,"\nR"],[37375,1,""],[37224,0,"3§s"],[37226,1,""],[37225,1,""],[37224,1,""],[36750,36,""],[36750,0,"are common ancestors of"],[16507,6,""],[16507,0,"sans"],[16534,6,""],[16534,0,"sans"],[16695,6,""],[16695,0,"sans"],[19437,6,""],[19437,0,"sans"],[19575,6,""],[19575,0,"sans"],[32825,6,""],[32825,0,"sans"],[33170,6,""],[33170,0,"sans"],[33290,6,""],[33290,0,"sans"],[34521,6,""],[34521,0,"sans"],[34814,6,""],[34814,0,"sans"],[34836,6,""],[34836,0,"sans"],[34858,6,""],[34858,0,"sans"],[34884,6,""],[34884,0,"sans"],[35132,6,""],[35132,0,"sans"],[35159,6,""],[35159,0,"sans"],[35202,6,""],[35202,0,"sans"],[35224,6,""],[35224,0,"sans"],[35250,6,""],[35250,0,"sans"],[35435,6,""],[35435,0,"sans"],[35462,6,""],[35462,0,"sans"],[35510,6,""],[35510,0,"sans"],[35934,6,""],[35934,0,"sans"],[36035,6,""],[36035,0,"sans"],[36133,6,""],[36133,0,"sans"],[36964,6,""],[36964,0,"sans"],[36981,6,""],[36981,0,"sans"],[37004,6,""],[37004,0,"sans"],[37354,6,""],[37354,0,"sans"],[37436,6,""],[37436,0,"sans"],[37454,6,""],[37454,0,"sans"],[39018,6,""],[39018,0,"sans"],[39120,6,""],[39120,0,"sans"],[39256,6,""],[39256,0,"sans"],[39453,6,""],[39453,0,"sans"],[39517,6,""],[39517,0,"sans"],[39677,6,""],[39677,0,"sans"],[40163,6,""],[40163,0,"sans"],[40185,6,""],[40185,0,"sans"],[40381,6,""],[40381,0,"sans"],[40408,6,""],[40408,0,"sans"],[44377,6,""],[44377,0,"sans"],[44668,6,""],[44668,0,"sans"],[44692,6,""],[44692,0,"sans"],[17062,6,""],[17062,0,"sans"],[18844,6,""],[18844,0,"sans"],[38333,7,""],[38332,1,""],[38279,0,":\n\n-"],[38284,1,""],[38284,0,"T"],[38284,1,""],[38284,0,"t"],[38331,2,""],[38331,0,";\n- "],[38335,20,""],[38340,2,""],[38340,0,", "],[38386,5,""],[38386,0,";\n-"],[38395,2,""],[38395,0,", "],[38397,3,""],[38397,0,"the character's"],[38440,7,""],[38440,0,"\n- "],[38440,0,"; and"],[38534,0,"\n"],[38280,1,""],[94373,1542,""],[39703,0,"#sp is updated on the corresponding node as follows:\n\n- If an insert event is added, #sp moves from `NotInsertedYet` to `Ins`\n- If a delete event is added, #sp on the delete event's target moves from `Ins` to `Del(1)` or `Del(n)` to `Del(n+1)`.\n- If an insert event is removed, #sp moves from `Ins` to `NotInsertedYet`\n- If a delete event is removed, #sp on the delete event's target moves from `Del(1)` to `Ins` or `Del(n)` to `Del(n-1)`.\n\n#figure(\n  fletcher.diagram(\n    // cell-size: 3mm,\n    spacing: (4mm, 4mm),\n    node-stroke: 0.5pt,\n    node-inset: 5mm,\n    // node-shape: \"circle\",\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, \"NYI\") //, shape: \"circle\")\n    node(ins, \"Ins\", stroke: 1.1pt) //, shape: \"circle\")\n    node(del1, \"Del(1)\") //, shape: \"circle\")\n    node(del2, \"Del(2)\") //, shape: \"circle\")\n    node(deln, $dots.c$, shape: \"rect\") //, shape: \"circle\")\n\n    edge(nyi, ins, bend: 50deg, label: [\\+ Ins], \"->\")\n    edge(ins, del1, bend: 50deg, label: [\\+ Del], \"->\")\n    edge(del1, del2, bend: 50deg, label: [\\+ Del], \"->\")\n    edge(del2, deln, bend: 50deg, label: [\\+ Del], \"-->\")\n\n    edge(ins, nyi, bend: 50deg, label: [\\- Ins], \"->\")\n    edge(del1, ins, bend: 50deg, label: [\\- Del], \"->\")\n    edge(del2, del1, bend: 50deg, label: [\\- Del], \"->\")\n    edge(deln, del2, bend: 50deg, label: [\\- Del], \"-->\")\n\n    // edge(start, a, \"-\")\n    // edge(a, b, \"-\")\n    // edge(b, d, \"-\")\n    // edge(a, c, \"-\")\n  }),\n  caption: [State machine diagram for #sp]\n) <spv-state>\n\n"],[39703,3,""],[39703,0,"$s_p$"],[39790,3,""],[39790,0,"$s_p$"],[39863,3,""],[39863,0,"$s_p$"],[39987,3,""],[39987,0,"$s_p$"],[40062,3,""],[40062,0,"$s_p$"],[41236,3,""],[41236,0,"$s_p$"],[41197,0,"\n  pla"],[41200,3,""],[41200,0,"placement: top,"],[41242,7,""],[41241,1,""],[41245,0," internal state variable"],[41275,0,"."],[40403,1,""],[40403,0,"`"],[40407,1,""],[40407,0,"`"],[40408,4,""],[40408,0,") //"],[40407,1,""],[40407,0,"\""],[40403,1,""],[40403,0,"\""],[40403,1,""],[40403,0,"z"],[40403,1,""],[40403,0,"`"],[40407,1,""],[40407,0,"`"],[40445,1,""],[40445,0,"`"],[40449,1,""],[40449,0,"`"],[40450,15,""],[40488,1,""],[40488,0,"`"],[40495,1,""],[40495,0,"`"],[40541,1,""],[40541,0,"`"],[40534,1,""],[40534,0,"`"],[40492,1,""],[40492,0," "],[40538,1,""],[40538,0," "],[40540,1,""],[40494,1,""],[40666,1,""],[40665,1,""],[40665,0,"$$"],[40666,0,"sans()"],[40671,0,"\"\""],[40672,0,"advance"],[40681,0,"()"],[40682,0,"italic()"],[40689,0,"\"\""],[40690,0,"Ins"],[40697,4,""],[40665,1,""],[40680,0,"\\ "],[40682,1,""],[40695,2,""],[40665,0,"#"],[40665,1,""],[40665,0,"$"],[40696,0,"$$"],[40697,1,""],[40624,0,"\n    node ()"],[40634,2,""],[40633,1,""],[40633,0,"()"],[40634,0,"()"],[40635,0,"-0.5, -0.5"],[40646,0,", []"],[40649,0,"$$"],[40650,0,"sans()"],[40655,0,"\"\""],[40656,0,"advance"],[40667,0," "],[40667,1,""],[40667,0,", stro"],[40669,4,""],[40669,0,"stroke: 0pt"],[40723,17,""],[40734,0,"ert"],[40641,1,""],[40643,1,""],[40643,0,"7"],[40744,0,"|"],[40801,0,"|"],[40859,0,"|"],[40918,0,"|"],[40644,0,"1"],[40791,6,""],[40791,0,"$italic(\"Insert\")$"],[40800,6,""],[40800,0,"Delete"],[40861,6,""],[40861,0,"$italic(\"Delete\")$"],[40931,6,""],[40931,0,"$italic(\"Delete\")$"],[40681,0,"\n    node "],[40690,1,""],[40690,0,"()"],[40691,0,"()"],[40692,0,"0.5, "],[40644,1,""],[40696,0,"0.7"],[40741,20,""],[40700,0,", [$italic(\"Insert\")$], stroke: 0pt"],[40767,9,""],[40737,0,"    node((0.5, 0.7), [$italic(\"Insert\")$], stroke: 0pt)\n"],[40747,1,""],[40747,0,"1"],[40768,6,""],[40768,0,"Delete"],[40865,29,""],[40793,0,"    node((1.5, 0.7), [$italic(\"Delete\")$], stroke: 0pt)\n    node((1.5, 0.7), [$italic(\"Delete\")$], stroke: 0pt)\n"],[40803,1,""],[40803,0,"2"],[40859,1,""],[40859,0,"3"],[41016,29,""],[41057,29,""],[40643,1,""],[40643,0,"8"],[40698,1,""],[40698,0,"8"],[40754,1,""],[40754,0,"8"],[40810,1,""],[40810,0,"8"],[40866,1,""],[40866,0,"8"],[40664,0,":"],[41069,0,"    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n"],[41085,0,"-"],[41142,0,"-"],[41199,0,"-"],[41256,0,"-"],[41313,0,"-"],[41100,7,""],[41100,0,"retreat"],[41385,17,""],[41389,0,"|"],[41427,16,""],[41426,1,""],[41429,0,"|"],[41468,17,""],[41470,0,"|"],[41509,17,""],[41512,0,"|"],[41517,97,""],[40409,21,""],[40430,21,""],[40454,21,""],[40478,21,""],[40518,21,""],[38338,0,"in { mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del(1)\"), mono(\"Del(2)\"), ... }"],[38338,0," "],[38473,0," in "],[38343,1,""],[38415,1,""],[38475,0,"{}"],[38476,0,"mono()"],[38481,0,"\"\""],[38482,0,"Ins"],[38487,0,", mono()"],[38494,0,"\"\""],[38495,0,"Del"],[38508,12,""],[38536,4,""],[38539,0,"and "],[40501,0,"I"],[40503,1,""],[38389,1,""],[38389,0," "],[38391,1,""],[38404,1,""],[38404,0," "],[38406,1,""],[39059,129,""],[38628,0,"\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = 0$.\n"],[38629,2,""],[38752,1,""],[38752,0,"mono()"],[38757,0,"\"\""],[38758,0,"Ins"],[38767,385,""],[38766,1,""],[38766,0,"\n\n"],[38767,0,"$s_p$ and $s_e$ are zero if the character is visible (inserted but not deleted) in the prepare and effect version respectively; a positive integer indicates how many times that character has been deleted by concurrent delete events.\n$s_p$ can also be -1 if the character has not yet been inserted in the prepare version, but $s_p$ cannot be less than -1 and $s_e$ cannot be negative.\n"],[38757,5,""],[38756,2,""],[38752,4,""],[38752,0,"0"],[38629,0,"- "],[38629,129,""],[38628,1,""],[39059,0,"- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = 0$.\n"],[38629,385,""],[39411,0,"\n$s_p$ and $s_e$ are zero if the character is visible (inserted but not deleted) in the prepare and effect version respectively; a positive integer indicates how many times that character has been deleted by concurrent delete events.\n$s_p$ can also be -1 if the character has not yet been inserted in the prepare version, but $s_p$ cannot be less than -1 and $s_e$ cannot be negative.\n\n"],[38799,1,""],[38799,0,"mono()"],[38804,0,"\"\""],[38805,0,"Ins"],[38872,25,""],[38872,0,"sets"],[38881,0," = mono{}"],[38888,2,""],[38888,0,"()"],[38889,0,"\"\""],[38890,0,"Del"],[38946,0," In the same record, if $$"],[38971,0,"s_p = mono()"],[38982,0,"\"\""],[38983,0,"Ins"],[38989,0," it mv"],[38994,1,""],[38994,0,"oves to $s_p = mono(\"Ins\")$"],[39015,3,""],[39015,0,"Del"],[39021,0,", and "],[39018,0," 1"],[39029,0,"if $s_p = mono(\"Ins\")$"],[39045,3,""],[39045,0,"Del"],[39050,0," n"],[39053,0," it advances to "],[39003,6,""],[39063,0,"$$"],[39064,0,"mono()"],[39069,0,"\"\""],[39070,0,"Del"],[39075,0," n+1"],[39080,0,"."],[38815,7,""],[38815,0,"If"],[38838,0," is called"],[38876,0,", we "],[38880,1,""],[38884,1,""],[39088,0,", as shown in @spv-state"],[39084,0,"("],[39088,0,")"],[39185,0,"we must have "],[39202,0," = mono()"],[39210,0,"\"\""],[39211,0,"Ins"],[39218,13,""],[39262,32,""],[39262,0,"update the record to have"],[39295,1,""],[39295,0,"mono()"],[39300,0,"\"\""],[39301,0,"NotInsertedYet"],[39318,14,""],[39367,8,""],[39367,0,"s_p = mono(\"NotInsertedYet\")"],[39407,1,""],[39407,0,"mono()"],[39412,0,"\"\""],[39413,0,"Ins"],[39159,2,""],[39158,1,""],[39266,10,""],[39266,0,"it"],[39272,4,""],[39271,1,""],[39345,0,"$s_p$ "],[39357,6,""],[39385,6,""],[39465,0," we must have"],[39483,0," = n"],[39486,1,""],[39486,0,"mono()"],[39491,0,"\"\""],[39492,0,"Del"],[39497,0," n"],[39501,17,""],[39541,0," we update it to"],[39562,0," = mono()"],[39570,0,"\"\""],[39571,0,"Del"],[39576,0," ()"],[39578,0,"n-1"],[39583,0," if $$"],[39588,0,"n>1"],[39592,0,", or to $$"],[39601,0,"mono()"],[39606,0,"\"\""],[39607,0,"Ins"],[39613,0," if #$$"],[39618,2,""],[39617,1,""],[39617,0,"$$"],[39618,0,"n=1"],[39622,15,""],[39624,11,""],[39624,0,"Calling"],[39655,16,""],[39655,0,"performs the oppso"],[39672,1,""],[39671,1,""],[39671,0,"osite"],[39508,0,"affected "],[39523,22,""],[39546,6,""],[40046,450,""],[40045,1,""],[39660,0,"As a result, "],[39693,4,""],[39693,0,"$$"],[39694,0,"mo"],[39695,1,""],[39694,1,""],[39693,2,""],[39693,0,"`Ins`"],[40089,23,""],[40159,29,""],[40089,4,""],[40088,1,""],[40109,4,""],[40108,1,""],[40108,0," "],[40129,4,""],[40128,1,""],[40128,0," "],[39660,398,""],[39659,1,""],[39658,1,""],[40954,0,"As a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; a positive integer indicates how many times that character has been deleted by concurrent delete events.\n$s_p$ can also be -1 if the character has not yet been inserted in the prepare version, but $s_p$ cannot be less than -1 and $s_e$ cannot be negative.\n\n"],[41095,0," $s_p$"],[41100,0," = mono()"],[41108,0,"\"\""],[41109,0,"Del"],[41114,0," n"],[41118,19,""],[41128,15,""],[41132,0," the"],[41166,0," $$"],[41168,0,"n"],[41195,0," in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version"],[41343,0,"\n$$"],[41345,0,"s_e"],[41349,0," does not count the number of deletions since a deletion is never undone in the effect version."],[41445,151,""],[41388,0," and does not have a $$"],[41410,0,"mono(\"NotInsertedYet\")"],[41434,0,"state "],[41446,13,""],[41446,0,"operations are"],[41446,0,"we never undo "],[41471,17,""],[41503,0,"node-inset;"],[41513,1,""],[41513,0,": 3pt,"],[41503,16,""],[41542,0," node-inset: 3pt,"],[41564,0,"node((0.0, 1), ``"],[41580,1,""],[41579,1,""],[41579,0,"\"\\\"H\\\"\"), "],[41613,9,""],[41617,0,": mono()"],[41624,0,"\"\""],[41625,0,"Ins"],[41631,3,""],[41637,0,": mono()"],[41644,0,"\"\""],[41645,0,"Ins"],[41651,3,""],[41604,0,"#"],[41604,1,""],[41604,0,"$"],[41605,1,""],[41605,0,"italic(\""],[41615,1,""],[41615,0,"\")"],[41620,0,"$"],[41662,0,", shape: rect"],[41586,0,", n"],[41588,1,""],[41588,0,"stroke: 0pt"],[41601,0,"\n    "],[41606,1,""],[41574,2,""],[41574,0,"0.5"],[41638,1,""],[41640,1,""],[41656,1,""],[41658,1,""],[41621,1,""],[41621,0,"text()"],[41626,0,"0.9em,"],[41632,1,""],[41632,0," "],[41686,1,""],[41686,0,")"],[41687,13,""],[41634,0,"upright(\"\\\"H\\\"\")\\ "],[41564,0,"//"],[41707,0,", shape: rect, stroke: 0.5pt"],[41560,45,""],[41675,15,""],[41559,0," node-shape: rect,"],[41689,0,"\""],[41694,0,"\""],[41559,18,""],[41559,0," node-shape: \"\""],[41573,0,"rect"],[41578,0,","],[41682,15,""],[41682,0,", shape: \"rect\""],[41578,1,""],[41572,6,""],[41571,1,""],[41559,12,""],[41555,1,""],[41555,0,"5"],[41585,1,""],[41585,0,"8"],[41680,0,"    node((0.0,0), text(0.8em, $upright(\"\\\"H\\\"\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$), shape: \"rect\"),\n"],[41680,120,""],[41590,0,"[]"],[41591,0,"\"\""],[41592,0,"H"],[41593,1,""],[41593,0,"\"\\"],[41595,1,""],[41595,0," "],[41667,0,"]"],[41597,18,""],[41578,0,"[\"H\", "],[41596,6,""],[41649,1,""],[41650,0,"]"],[41582,1,""],[41582,0,"\\"],[41584,0,"#"],[41584,1,""],[41582,1,""],[41582,0,","],[41650,1,""],[41649,0,"]"],[41596,0,"[\"H\"\\ "],[41583,1,""],[41578,5,""],[41597,0,"upright(\"\\\"H\\\"\")\\ "],[41597,18,""],[41597,0,"text(\"\\\"H\\\")\\ "],[41590,6,""],[41657,1,""],[41591,4,""],[41591,0,"upright"],[41590,0,"[]"],[41591,1,""],[41661,0,"]"],[41606,0,"\"\""],[41606,2,""],[41606,0,"\"\""],[41607,1,""],[41592,7,""],[41592,0,"text"],[41591,0,"v()"],[41593,0,"5pt"],[41597,0,", "],[41591,0,"#"],[41598,2,""],[41686,0,"    node((0.0,0), text(0.8em, [#v(5pt)$text(\"\\\"H\\\"\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0.0,0), text(0.8em, [#v(5pt)$text(\"\\\"H\\\"\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n"],[41733,1,""],[41733,0,"h"],[41859,1,""],[41859,0,"i"],[41698,1,""],[41698,0,"6"],[41822,3,""],[41822,0,"1.25"],[41754,1,""],[41754,0,"1"],[41881,1,""],[41881,0,"2"],[41768,3,""],[41768,0,"Del 1"],[41788,3,""],[41788,0,"Del"],[41941,119,""],[41941,0,"    node((0.0,0), text(0.8em, [#v(5pt)$text(\"\\\"H\\\"\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0.6,0), text(0.8em, [#v(5pt)$text(\"\\\"h\\\"\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((1.25,0), text(0.8em, [#v(5pt)$text(\"\\\"i\\\"\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n"],[41951,3,""],[41951,0,"2.9"],[42077,1,""],[42077,0,"3"],[42205,1,""],[42205,0,"4"],[42023,3,""],[42023,0,"NIY"],[42149,5,""],[42149,0,"Ins"],[42320,179,""],[42690,5,""],[42672,18,""],[42672,0,"`𝙽𝚘𝚝𝙸𝚗𝚜𝚎𝚛𝚝𝚎𝚍𝚈𝚎𝚝`"],[42687,1,""],[42673,14,""],[42673,0,"NotInsertedYet`"],[42332,1,""],[42332,0,"7"],[42341,1,""],[42341,0,"2"],[42079,1,""],[42079,0,"4"],[42205,2,""],[42205,0,"0"],[41953,1,""],[41953,0,"7"],[42340,1,""],[42340,0,"3"],[42203,3,""],[42203,0,"3.9"],[42203,3,""],[42203,0,"4.0"],[41954,0,"5"],[41954,1,""],[41954,0,"7"],[42204,3,""],[42204,0,"3.95"],[42207,1,""],[42207,0,"8"],[41953,2,""],[41953,0,"8"],[42206,1,""],[42206,0,"5"],[41571,0,"\n    "],[41576,2,""],[41576,0,".0"],[41571,5,""],[41570,3,""],[41570,0,"0"],[41694,3,""],[41694,0,"1"],[41947,3,""],[41947,0,"2"],[41820,4,""],[41820,0,"2"],[41944,1,""],[41944,0,"4"],[42068,3,""],[42068,0,"5"],[42192,4,""],[42192,0,"6"],[42316,3,""],[42316,0,"2.5"],[42325,3,""],[42325,0,"3.5"],[41559,0," spacing: 0, debug: 1,"],[41570,0,"pt"],[41957,0,"\n    node "],[41966,1,""],[41966,0,"()"],[41967,0,"()"],[41968,0,"3,0"],[41972,0,", box()"],[41978,0,"width: 5mm, height: 0mm"],[42003,0,","],[41985,1,""],[41985,0,"10"],[42003,0,", stroke: 0pt"],[41986,1,""],[41986,0,"2"],[42403,1,""],[42403,0,"7"],[42412,1,""],[42412,0,"3"],[41986,1,""],[41986,0,"4"],[41573,10,""],[42393,1,""],[42393,0,"6"],[42402,1,""],[42402,0,"4"],[41617,2,""],[41617,0,"”"],[41617,1,""],[41617,0,"“"],[41619,2,""],[41619,0,"”"],[41739,2,""],[41739,0,"“"],[41741,2,""],[41741,0,"”"],[41863,2,""],[41863,0,"“"],[41865,2,""],[41865,0,"”"],[42046,2,""],[42046,0,"“"],[42048,2,""],[42048,0,"”"],[42168,2,""],[42168,0,"“"],[42170,2,""],[42170,0,"”"],[42290,2,""],[42290,0,"“"],[42292,2,""],[42292,0,"”"],[38998,8,""],[38998,0,"we update it"],[41459,4,""],[41459,0,"remove the effect of an "],[41482,1,""],[41492,1,""],[41493,2,""],[41493,0,"from"],[43335,0,"    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n"],[43334,0," node-inset: 5pt, spacing: 0pt,"],[43488,0,"    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n"],[43498,1,""],[43498,0,"1"],[43620,1,""],[43620,0,"2"],[43742,1,""],[43742,0,"3"],[43864,1,""],[43864,0,"4"],[43986,1,""],[43986,0,"5"],[43532,1,""],[43532,0,"h"],[43654,1,""],[43654,0,"e"],[43776,1,""],[43776,0,"y"],[43898,1,""],[43898,0,"!"],[44020,1,""],[44020,0,"i"],[43552,1,""],[43552,0,"1"],[43674,1,""],[43674,0,"6"],[43796,1,""],[43796,0,"7"],[43918,1,""],[43918,0,"8"],[44040,1,""],[44040,0,"2"],[43566,3,""],[43566,0,"Del 1"],[43586,3,""],[43586,0,"Del"],[44056,3,""],[44056,0,"Del 1"],[44076,3,""],[44076,0,"Del"],[44100,1,""],[44101,353,""],[43778,1,""],[43778,0,"x"],[43778,1,""],[43778,0,"y"],[43766,1,""],[43766,0,"2"],[43766,1,""],[43766,0,"3.5"],[43208,29,""],[43208,0,"`NotInsertedYet`"],[43268,1,""],[43268,0,"mono()"],[43273,0,"\"\""],[43274,0,"Ins"],[45178,1,""],[45178,0,"mono()"],[45183,0,"\"\""],[45184,0,"Ins"],[45429,1,""],[45429,0,"mono()"],[45434,0,"\"\""],[45435,0,"Ins"],[45617,2,""],[45617,0,"n"],[45617,1,""],[45617,0,"mono()"],[45622,0,"\"\""],[45623,0,"NIY"],[45625,1,""],[45624,1,""],[45624,0,"otInsertedyet"],[45636,1,""],[45635,1,""],[45634,1,""],[45634,0,"Yet"],[46098,1,""],[46098,0,"mono(\"Ins\")"],[46180,1,""],[46180,0,"mono(\"Ins\")"],[46447,1,""],[46447,0,"mono(\"Ins\")"],[46818,1,""],[46818,0,"mono(\"Ins\")"],[47056,3,""],[47056,0,"= mono()"],[47063,0,"\"\""],[47064,0,"Del"],[46221,19,""],[46221,0,"$$"],[46222,0,"s_p"],[46226,0," or $$"],[46231,0,"s_e"],[47105,0,"\n\nDuring traversal, we store a second data structure mapping from each visited event to the ID of the event's target. For\ninsertions, this is simply the ID of the event itself; for deletion events, it is the ID of the event that originally inserted the character being deleted."],[47106,0,"\nWhenever we "],[47116,3,""],[47116,0,"$sans(\"apply\")(e)$"],[47107,8,""],[47107,0,"On every"],[47134,0," we use this process to map the opepration "],[47169,1,""],[47176,0,"index to a record in th "],[47199,1,""],[47199,0,"e sequence.\nBesides the sequence, the internal state also includes a mapping from event ID to the ID of \nOn every $sans(\"apply\")(e)$ we use this process to map the operation index to a record in the sequence."],[47107,104,""],[47127,0," of records"],[47210,0,"a record in the sequence."],[47275,0,"="],[47275,1,""],[47275,0,"=e"],[47276,1,""],[47275,1,""],[47274,1,""],[47273,1,""],[47273,0,"e above"],[47292,3,""],[47292,0,"translate"],[47292,9,""],[47292,0,"map"],[47292,26,""],[47292,0,"identify"],[47302,0," target"],[47332,0,", and we stor"],[47344,1,""],[47343,1,""],[47342,1,""],[47341,1,""],[47341,0,"store the mapping from $e.italic(\"id\")$ to the target record ID "],[47404,1,""],[47338,0,"then "],[47411,566,""],[47539,74,""],[47539,0,"hence $e.italic(\"id\")#$"],[47561,1,""],[47560,1,""],[47560,0,"$ must apppear "],[47569,1,""],[47574,0,"in this mappping"],[47585,1,""],[47686,0,"event "],[46922,0," the index of"],[47802,5,""],[47802,0,"record"],[48191,0,"internal "],[48090,9,""],[48090,0,"it"],[48082,24,""],[48082,0,"consuming a lot of memory"],[49949,0,", or because there is only a single author"],[50764,4,""],[50764,0,"empty"],[50778,10,""],[50778,0,"()"],[50779,0,"representing the em"],[50760,74,""],[50760,0,"I"],[50777,0,","],[50082,0,"\nMoreover, the internal staet ca"],[50113,1,""],[50112,1,""],[50111,1,""],[50110,1,""],[50109,1,""],[50109,0,"te can be discarded once replay is complete."],[47945,4,""],[47945,0,"the internal"],[44950,0,"the positions of "],[44982,3,""],[44982,0,"records"],[45948,6,""],[45947,1,""],[45947,0,"s"],[46372,14,""],[46372,0,"update takes"],[46395,5,""],[47225,7,""],[47225,0,"affected"],[47225,9,""],[47225,0,"affected "],[47225,8,""],[47224,1,""],[47247,0," affected by that event"],[47337,1,""],[47337,0,"the"],[49129,1,""],[51105,0," version"],[51578,0," in the design"],[51618,4,""],[51618,0,"exact"],[51618,5,""],[51618,0,"full"],[51618,4,""],[51618,0,"exact"],[51624,8,""],[51624,0,"internal"],[51767,0," internal"],[51719,8,""],[51719,0,"and rebase it onto"],[51738,3,""],[51819,4,""],[51818,1,""],[51764,7,""],[51764,0,"\n"],[51764,0,"."],[51766,0,"T"],[52116,0,"V_\"crit\" = "],[52173,0,"\n\nInitialize a new state corresponding to the document at version V_crit. The document state is initialized with a single placeholder record representing the (unknown) document content with indexes 0 to infinity.\nUpdate the state by running the algorithm as presented above, from V_crit to V_curr. Transformed items are not emitted during this stage.\nRun the algorithm as presented in the previous section, visiting added items (e_new). Transformed items are emitted.\n"],[52173,0,"\n\nThe algorithm then works as follows:"],[52213,0,"1. We "],[52219,1,""],[52219,0,"i"],[52235,0," internal"],[52292,0,"$"],[52295,0,"\""],[52300,0,"\"$"],[52303,0," Since we do not know the the document state at this version,"],[52365,21,""],[52365,0,"we in"],[52369,1,""],[52368,1,""],[52367,1,""],[52227,1,""],[52227,0,"s"],[52376,1,""],[52376,0,"s"],[52378,1,""],[52378,0," the internal state"],[52456,1,""],[52448,1,""],[52472,27,""],[52448,0,"entire "],[52448,7,""],[52474,0,"2. We "],[52480,1,""],[52480,0,"u"],[52490,0," internal"],[52508,0," replaying "],[52519,42,""],[52519,0,"events"],[52531,0,"$"],[52534,0,"\""],[52539,0,"\"$$"],[52541,1,""],[52545,0,"$"],[52548,0,"\""],[52553,0,"\"$, but we do not output transformed operations"],[52600,35,""],[52620,0,"3. Finally, we replay he "],[52644,1,""],[52643,1,""],[52642,1,""],[52642,0,"the new event $e_\"new\"$ and outtputt"],[52677,1,""],[52676,1,""],[52675,1,""],[52674,1,""],[52673,1,""],[52673,0,"put tthe tr"],[52683,1,""],[52682,1,""],[52681,1,""],[52680,1,""],[52679,1,""],[52678,1,""],[52678,0,"he transformed operation. "],[52704,116,""],[52704,0,"IO"],[52705,1,""],[52705,0,"f we received a batch of new events, we can replay all of them in topol"],[52771,5,""],[52771,0,"topologically sorted order."],[52368,29,""],[52368,0,"start"],[52776,76,""],[52776,0,"The"],[52799,4,""],[52799,0,"we start with in step 1"],[52926,6,""],[52268,16,""],[52716,7,""],[52705,3,""],[52704,1,""],[53298,1,""],[53298,0,"mono()"],[53303,0,"\"\""],[53304,0,"Ins"],[53883,0,"mono(\"Del 1\")$ and $"],[53909,1,""],[53909,0,"mono()"],[53914,0,"\"\""],[53915,0,"Del"],[54260,6,""],[54260,0,"usual"],[54415,0," ID being mapped"],[54434,5,""],[54366,15,""],[54403,0," must exist in the "],[54422,7,""],[54427,1,""],[54426,1,""],[54426,0,"ing from event ID"],[54447,1,""],[54447,0,"internal stae"],[54459,0,"t"],[54468,47,""],[54471,573,""],[55445,25,""],[55445,0,"of"],[55456,1,""],[55455,1,""],[55455,0,"al"],[56448,0,"\n\n== Storing the event graph <storage>"],[16220,12,""],[16220,0,"@storage"],[22446,12,""],[22446,0,"@storage"],[56478,0,"\n\nFinally, we explain how to efficiently store the event graph on disk."],[56480,69,""],[56480,0,"The event graph can be stored on disk in a avery "],[56528,1,""],[56527,1,""],[56526,1,""],[56525,1,""],[56524,1,""],[56523,1,""],[56523,0,"very compact way by using a few compression tricks that take advantage of tthe "],[56601,1,""],[56600,1,""],[56599,1,""],[56598,1,""],[56598,0,"he ways that humans typically edit text documents: namely, tthey "],[56657,1,""],[56662,0,"tend to insert or delete consecutive sequences of characters, and only occasionally hit backspace or move the cursor to a new location."],[56611,6,""],[56611,0,"people"],[56628,4,""],[56628,0,"write"],[56798,0,"\nTT"],[56800,1,""],[56800,0,"he "],[56799,4,""],[56799,0,"Eg-walker's event graph storage format is inspired by Autotmerge"],[56857,1,""],[56853,0,"the "],[56866,0," CCRDT"],[56871,1,""],[56870,1,""],[56869,1,""],[56868,1,""],[56868,0,"RDT library @automerge-columnar, which is in turn "],[56907,3,""],[56915,0,"uses ideas from column-orientted "],[56944,1,""],[56947,0,"databases @Abadi2013.\n\n"],[56967,0," @Stonebraker2005"],[56987,0,"We store the events in the graph in some lexicographically sorted order"],[57028,17,""],[57028,0,"topo"],[57028,4,""],[57028,0,"topologically"],[57054,0,", and we store different properties of events in separate byte sequences that are then combined into one file."],[57126,0," called _columns_,"],[57145,4,""],[57145,0,"which"],[57183,0,"\nFor example, "],[57184,13,""],[57184,0,"The columns are:\n\n- Event type, start position, and run length. For example, this column may say \"\""],[57282,0,"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,"],[57442,0," and so on. This information can be packed into a small number of bits using a variable-length encoding of integers."],[57454,58,""],[57454,0,"We encode this"],[57476,0," binary"],[57477,6,""],[57476,1,""],[57493,0,"binary "],[57520,0,", which encodes small numbers as one byte"],[57550,2,""],[57550,0,"in"],[57561,0,", larger numbers in two bytes, etc"],[57246,3,""],[57246,0,", f"],[57259,21,""],[57259,0,":"],[57204,0,"_"],[57247,0,"._"],[57249,1,""],[57250,1,""],[57250,0,"F"],[57261,1,""],[57261,0,","],[57510,7,""],[57510,0,"represents"],[57581,0,"\n- _Inserted content._ An insertion event contains exactly one character ()"],[57655,0,"technically "],[57666,1,""],[57666,0,", a Unicode scalar value"],[57182,0," with a simple header"],[57676,13,""],[57699,0," "],[57699,1,""],[57699,0,", and a deletion does not. We can simply concatenate the UTF-8 encoding if "],[57773,1,""],[57772,1,""],[57771,1,""],[57771,0,"of the insertion events in the same order as they appear in the first column."],[57784,3,""],[57784,0,"ed characters "],[57778,9,""],[57778,0,"inserted "],[57778,9,""],[57789,0,"on insertion"],[56990,5,""],[56990,0,"place"],[57054,7,""],[57054,0,".\nW"],[56990,5,""],[56990,0,"topologically sort"],[57032,35,""],[57034,0,"Then "],[57039,1,""],[57039,0,"w"],[57841,0,"\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the top"],[57947,3,""],[57947,0,"topological sort. Any events for th"],[57981,1,""],[57980,1,""],[57980,0,"which this is not true are listed explc"],[58018,1,""],[58018,0,"icitly, for example: \"\""],[58040,0,"the first event has zerop"],[58064,1,""],[58064,0," parents, and the 153rd "],[58072,5,""],[58072,0,";"],[58084,0,"event has two parents, namely events numbers 2"],[58129,1,""],[58129,0,"31 and 59;"],[58140,0," and so on."],[58136,2,""],[58136,0,"152"],[57768,2,""],[57768,0,"for"],[58153,0,"\n- _Event IDs._ "],[57032,0,"; different replicas may sort the set differently, but locally to one replica we can then identify events by their index in this sorted order"],[58310,0,"\n\nWhen replicating the event graph, parents need to be "],[57117,4,""],[57116,1,""],[57125,0," an"],[57134,1,""],[57138,5,""],[57138,0,"its"],[56729,17,""],[56729,0,"less frequently"],[58303,0,"Each event is identified by a pair of a replica ID and a per-replica sequence number."],[58387,0," "],[58387,1,""],[58388,0," This coolumn "],[58395,1,""],[58401,0,"storoes "],[58408,1,""],[58407,1,""],[58406,1,""],[58405,1,""],[58405,0,"es runs of event IDs, for example: \"\""],[58441,0,"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;"],[58593,0," and so on."],[58640,0,"references to "],[58673,0,"encoded using the ()"],[58692,0,"replicaID, seqNo"],[58709,0," event IDs"],[58691,0,"#"],[58691,1,""],[58691,0,"$"],[58693,0,"italic(\""],[58710,0,"\")"],[58714,0,"italic(\""],[58727,0,"\")"],[58730,0,"$$"],[58731,1,""],[58485,0,"numbered sequentially "],[58506,1,""],[58493,13,""],[58485,8,""],[58316,0," uniquely"],[58635,0," entire"],[58655,0," the same encoding can be used.\nWhen r"],[58692,1,""],[58692,0,"sending a subset of events "],[58615,0,"We use the same encoding "],[58640,1,""],[58640,0,"w"],[58679,31,""],[58713,0,"over the network ()"],[58731,0,"perhaps a single keystroke"],[58748,9,""],[58748,0,"event during real-time collaboration"],[58785,0,","],[58888,0," since "],[58888,7,""],[58888,0,", but otherwise a similar encoding can be used."],[58631,8,""],[58631,0,"data format"],[58643,0,"over the network "],[58618,3,""],[58618,0,"send"],[58828,0," event"],[58835,0," outside of that subset"],[58752,7,""],[58752,0,"e.g.,"],[50176,0,", although it is also possible to retain the internal state for transforming future events if desired"],[50107,0,"Moreover, the internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events if desired.\nMoreover, the internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events if desired.\n"],[50279,172,""],[50107,172,""],[50266,11,""],[50186,0," if desired"],[50186,11,""],[56967,0," @automerge-storage"],[64682,38844,""],[64682,0,"// A working typescript implementation of eg-walker is provided in our _reference-reg_ repository @reference-reg. This library is fully featured, but missing many optimisations in order to keep the code simple and easy to understand. We also provide a much more fully featured implementation of eg-walker in our _diamond types_ repository @dt. This is the implementation benchmarked in @benchmarking."],[65084,16908,""],[65085,0,"/*"],[66142,0,"\n*/"],[66147,1375,""],[68096,456,""],[47948,0,"\nWhen nodes in the first B-tree are split, the pointers in the second B-tree are updated accordingly."],[31924,5,""],[31924,0,"events that happened after"],[31966,24,""],[31951,5,""],[68190,15442,""],[68189,1,""],[85313,809,""],[85314,7234,""],[85313,1,""],[85312,1,""],[85696,35,""],[77633,14,""],[77633,0,"TODO"],[68190,29,""],[66240,0,"= Evaluation <benchmarking>\n\n"],[66268,1,""],[47983,0,"we update "],[48026,12,""],[66267,711,""],[64773,401,""],[64772,1,""],[64771,1,""],[64770,1,""],[65863,0,"// A working typescript implementation of eg-walker is provided in our _reference-reg_ repository @reference-reg. This library is fully featured, but missing many optimisations in order to keep the code simple and easy to understand. We also provide a much more fully featured implementation of eg-walker in our _diamond types_ repository @dt. This is the implementation benchmarked in @benchmarking.\n"],[65863,0,"We have implemented two versions of eg-walker: one in TypeScript that is optimised for code readability"],[65955,11,""],[65955,0,"simplicity, and one in Rust that is optimised for performance.\n"],[66115,15,""],[65965,0," @reference-reg"],[66356,4,""],[66031,0," @dt"],[66031,0," as part of the _Diamnon"],[66054,1,""],[66053,1,""],[66052,1,""],[66052,0,"ond Types_ library"],[65862,0,"\n// TODO: anonymise these "],[65887,1,""],[65886,1,""],[65885,1,""],[65885,0," references to t"],[65900,1,""],[65900,0,"repos for the conference submission"],[66148,0," T"],[66149,1,""],[66148,1,""],[66148,0,"\nTThe "],[66153,1,""],[66152,1,""],[66151,1,""],[66150,1,""],[66150,0,"he TypeScript implementation omits the B-trees, run-length encoding, and other optimisations, but it is e"],[66254,1,""],[66253,1,""],[66252,1,""],[66251,1,""],[66250,1,""],[66250,0,"s behavi"],[66252,6,""],[66252,0,"behaviouri"],[66261,1,""],[66261,0," is equi"],[66265,4,""],[66265,0,"equivalent to the Rust impl"],[66288,4,""],[66288,0,"implementation.\nThe benchmarks in this secction "],[66329,1,""],[66335,0,"use the Rust implementation."],[66364,382,""],[67595,3,""],[67588,3,""],[67261,3,""],[67245,3,""],[67233,3,""],[67202,3,""],[67194,3,""],[67168,3,""],[67118,3,""],[67069,3,""],[67019,3,""],[66953,3,""],[66911,3,""],[66899,3,""],[66887,3,""],[66823,732,""],[66822,1,""],[66823,374,""],[66822,1,""],[68422,971,""],[66365,2057,""],[66364,1,""],[70214,0,"@speed-ff shows the performance difference this optimisation makes in our various test cases. The _git-makefile_ editing trace does not contain any critical events - so performance is unchanged. In comparison, the fully sequential editing traces are processed approximately 15x faster as a result.\n\n#figure(\n  charts.speed_ff,\n  caption: [\n    Performance of dt-egwalker algorithm with and without\n    // Smaller is better.\n  ],\n  kind: image,\n) <speed-ff>\n\nEg-walker is particularly fast for linear or mostly-linear data sets where CRDT data structure does not need to be generated at all. But we suspect the algorithm scales worse than CRDTs when datasets have extremely high concurrency (eg 20+ concurrent replicas all making changes while offline). Luckily, editing scenarios like that seem extremely rare in practice.\n\nContemporary CRDT libraries vary wildly in performance. As @chart-one-local shows, we see a 500x difference in performance between the best performing and worst performing library we tested. In order to fairly evaluate dt-egwalker, we ended up writing our own optimised CRDT implementation in the _dt-crdt_ library@dt-crdt. This library shares its language, code style, data structures and optimisations with _dt-egwalker_ in order to achieve (as much as possible) a like-for-like comparison with diamond types. The optimisations are documented here @crdts-go-brrr.\n\n#figure(\n  text(8pt, charts.one_local),\n  caption: [\n    Speed locally applying the 'seph-blog1' trace to a CRDT object using various contemporary CRDTs libraries. Yjs@yjs is 500x slower than Cola@cola in this test. (2056ms vs 4ms). Cola is faster than dt-crdt due to its GTree@cola-gtree implementation using local cursor caching. When this is disabled (_cola-nocursor_), performance is remarkably similar to dt-crdt. Yjs performs much better when processing remote events.\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-one-local>\n\n"],[66382,0,"\n\nIn or d"],[66390,1,""],[66389,1,""],[66389,0,"der to ensuyre a "],[66405,1,""],[66404,1,""],[66403,1,""],[66402,1,""],[66401,1,""],[66400,1,""],[66400,0,"re a meaningful evaluation "],[66426,1,""],[66426,0,", we ccolle"],[66432,1,""],[66436,0,"cted a dataset of real text editing traces."],[66383,0,"\n// TODO: anonymse "],[66401,1,""],[66400,1,""],[66399,1,""],[66399,0,"ise the editing-traces repo"],[66383,0,"\n// TODO: add node_nodecc and git-makefile to editing-traces repo"],[66491,0," for the conference submission"],[66616,0,", which we are making freely available "],[66627,10,""],[66627,0,"have made"],[66654,0,"on GitHub @editing-traces"],[66541,1,""],[66541,0,"our benchmarks are"],[66570,11,""],[66598,4,""],[66597,1,""],[66617,0," from real users"],[66698,793,""],[69105,0,"  placement: top,\n"],[69750,0," <traces-table>"],[68149,13,""],[68158,0,"#text(6pt, [\n"],[68158,0,"  "],[68160,1,""],[68172,2,""],[68171,1,""],[68170,1,""],[68170,0,"[\n"],[68171,1,""],[69101,0,"])"],[69766,1,""],[69765,1,""],[68160,0,"#"],[68160,1,""],[68160,0,"["],[69104,0,"]"],[68161,0,"#"],[68161,1,""],[68160,1,""],[68170,1,""],[69102,1,""],[69100,1,""],[68103,46,""],[68238,0,"\n    ttab"],[68246,1,""],[68245,1,""],[68244,1,""],[68244,0,"able.header(),"],[68256,0,"[]"],[68257,0,"Datal"],[68261,1,""],[68261,0,"set"],[68265,0,", []"],[68268,0,"Type"],[68273,0,", []"],[68276,0,"\\# Events ()"],[68287,0,"k"],[68290,0,", []"],[68293,0,"Concurrency"],[68305,0,", []"],[68308,0,"RLE count"],[68318,0,", []"],[68321,0,"Agemtns"],[68327,1,""],[68326,1,""],[68325,1,""],[68324,1,""],[68324,0,"nts"],[68278,1,""],[68277,1,""],[68276,1,""],[68332,0,"// "],[68243,6,""],[68243,0,"#"],[68243,1,""],[68102,0,"\n#import table: cell, header"],[68118,6,""],[68103,22,""],[68243,0,"ttable."],[68243,1,""],[68119,1,""],[68119,0,"8"],[68238,0,"\n    stroke: none,"],[68345,0,"\n    habele."],[68356,1,""],[68355,1,""],[68354,1,""],[68353,1,""],[68352,1,""],[68351,1,""],[68350,1,""],[68350,0,"table.hline()"],[68362,0,"stroke: 0.5pt"],[68376,0,","],[68275,0,"*"],[68283,0,"*"],[68288,0,"*"],[68293,0,"*"],[68298,0,"*"],[68309,0,"*"],[68314,0,"*"],[68326,0,"*"],[68331,0,"*"],[68341,0,"*"],[68346,0,"*"],[68353,0,"*"],[68390,499,""],[68706,0,"    table.hline(stroke: 0.5pt),\n"],[68257,0,"    table.hline(stroke: 0.5pt),\n"],[68281,3,""],[68281,0,"1"],[68760,3,""],[68760,0,"1"],[68760,1,""],[68760,0,"0.8"],[68281,1,""],[68281,0,"0.8"],[68416,1,""],[68416,0,"4"],[68461,7,""],[68499,7,""],[68535,7,""],[68578,6,""],[68618,6,""],[68119,1,""],[68119,0,"9"],[68308,7,""],[68308,0,"Trace"],[68308,5,""],[68308,0,"Name"],[68361,9,""],[68361,0,"Runs"],[68344,11,""],[68344,0,"Avg. widtth"],[68354,1,""],[68353,1,""],[68353,0,"h"],[68769,53,""],[68769,0,"The text editing traces used in our evaluation"],[68817,3,""],[68817,0,"_"],[68824,0,"_:"],[68827,7,""],[68852,1,""],[68852,0,"and"],[68875,12,""],[68875,0,"(in thousands)"],[68891,0,"_Average width_: "],[68908,92,""],[68927,5,""],[68927,0,"concurrent"],[68959,29,""],[68959,0,"event"],[68938,10,""],[68938,0,"events"],[68927,11,""],[68933,0," concurrent"],[68908,4,""],[68971,0,"_Runs_: "],[68979,20,""],[69019,1,""],[69019,0,"sequential "],[69034,18,""],[69036,0,"events "],[69048,1,""],[69048,0,"one"],[69063,1,""],[69063,0,"one"],[69078,15,""],[69078,0,"combined"],[69019,11,""],[69025,0,"sequences of "],[69037,1,""],[69034,3,""],[69025,9,""],[69019,0,"sequential "],[68988,30,""],[69006,0,"sequence of "],[69055,13,""],[68370,6,""],[68370,0,"Replicas"],[69059,9,""],[69059,0,"_Replicas_"],[69087,1,""],[69091,8,""],[69091,0,"s"],[69093,5,""],[69093,0,"who"],[69109,13,""],[69109,0,"(f"],[69153,6,""],[69153,0,"distinct"],[69169,28,""],[69169,0,")"],[69069,7,""],[69069,0,":"],[69102,62,""],[65939,4,""],[65938,1,""],[66100,42,""],[66099,1,""],[66065,0," ()"],[66067,0,"as part of the _Diamond Types_ library @dt"],[66345,14,""],[66345,0,"version"],[66687,0,"\n\n"],[66688,0,"Our trac"],[66688,8,""],[66688,0,"They are listed in @traces-table, and they fall into three categories:"],[66760,124,""],[66781,0,"(\"seq\" in @traces-table): Keysttrok"],[66815,1,""],[66814,1,""],[66813,1,""],[66812,1,""],[66812,0,"roke-granularity e"],[66829,1,""],[66829,0,"history of "],[66840,1,""],[66840,0,"a"],[66854,7,""],[66854,0,"writing"],[66872,0,", collected using an instrumentetd "],[66906,1,""],[66905,1,""],[66904,1,""],[66904,0,"d text editor"],[66919,0,"These traces contain no concurrency. U"],[66956,1,""],[66956,0,"We use the LaTeX source of a research paper @automerge-perf @Kleppmann2017 "],[67030,104,""],[67035,72,""],[67035,0,"a blog post @crdts-go-brrr"],[67036,0,"n 8,800 "],[67043,1,""],[67043,0,"-word"],[66985,8,""],[66985,0,"journal"],[67095,0,"()"],[67096,0,"\"\""],[67097,0,"conc"],[67102,0," in @traces-table"],[67120,0,": Keystroke-granularity "],[67122,22,""],[67187,0,", recorded with keystroke granularity"],[67225,75,""],[67225,0," We add 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations."],[67232,0,"ed"],[67377,0,"\n\n"],[67377,0,"()"],[67378,0,"\"\""],[67379,0,"async"],[67385,0," in @traces-table"],[67403,0,": We reconstruct an editing trace for one file in a Git repository, with concurrency mirroring the branching and merging of "],[67441,3,""],[67441,0,"a"],[67525,0,"the Git commits. Since Git does not record keystrokes, we simulate the minimal keystrokes "],[67583,32,""],[67583,0,"perform the minimal operations required to reflect each commit's diff. "],[67583,7,""],[67583,0,"generate"],[67604,0,"editing "],[67663,275,""],[67663,0,"We use the"],[67694,1,""],[67694,0,"G"],[67713,1,""],[67713,0,"G"],[67752,1,""],[67752,0,"G"],[67723,0," @git-makefile"],[67785,1,""],[67785,0,"N"],[67789,0,"."],[67793,5,""],[67793,0,"@node-src-nodecc"],[67873,3,""],[67872,1,""],[67885,34,""],[67885,0,", with"],[67891,10,""],[67912,12,""],[67912,0," containing"],[67941,5,""],[67941,0,"branches"],[67951,1,""],[66787,17,""],[67085,17,""],[67351,17,""],[66982,16,""],[66997,0,"@automerge-perf "],[67458,5,""],[67458,0,"/"],[66760,1137,""],[68074,0,"/ Sequential Traces: (\"seq\"): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf and an 8,800-word blog post @crdts-go-brrr.\n/ Concurrent Traces: (\"conc\"): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (\"async\"): We reconstruct an editing trace for a file in a Git repository, with concurrency mirroring the branching/merging of the Git commits. Since Git does not record keystrokes, we generate the minimal editing operations required to reflect each commit's diff. We use the `Makefile` from the Git repository for Git itself @git-makefile, and `src/node.cc` from the Git repository for Node.js @node-src-nodecc. These are some of the most edited files from their respective repositories, with complex event graphs containing merges of 6 more branches.\n\n"],[66588,13,""],[66605,5,""],[66605,0,"writins"],[66611,1,""],[66611,0,"g session"],[66612,8,""],[66611,1,""],[66611,0,"s"],[66605,7,""],[66605,0,"users"],[66588,0,"text editing "],[66618,5,""],[66618,0,"documents"],[66692,4,""],[66692,0,"The traces we use"],[66737,7,""],[66737,0,".\nTT"],[66740,1,""],[66739,31,""],[66739,0,"There are three types"],[68334,0,"the text of "],[68884,1,""],[68883,1,""],[68882,1,""],[68903,10,""],[68903,0,"for"],[68934,3,""],[68933,1,""],[69097,1,""],[69097,0,"-"],[69111,4,""],[69111,0,"in"],[69210,0,"In @ff-memory we see the effect this has on memory size while processing one of our real-world editing traces. The editing trace contains many critical events as the document goes in and out of sync. With fast forward optimisations enabled, the eg-walker state size stays extremely small.\n\n#figure(\n  charts.ff_chart,\n  caption: [\n    A comparison of the eg-walker state size while processing the _\"friendsforever\"_ data set, with and without fast forward optimisations enabled. //When the state is never cleared, the state grows linearly throughout the test. When the state is cleared at critical versions, it stays very small throughout this test.\n\n    // Smaller is better.\n  ],\n  kind: image,\n) <ff-memory>\n\n"],[69208,0,"\n\n== Eg-walker compared to CRDTs\n\n"],[69241,1,""],[69240,1,""],[69240,0,"\n\n"],[69241,1,""],[69240,1,""],[69240,0,"\n\nThe main performance advantage of Eg-walker over CRDTs lies in the fact that we can skip "],[69326,5,""],[69326,0,"clear the internal state and skip all of the internal state manipulation on critical versions, as discussed in @clearing.\nTo quantify this effect, we compare "],[69276,1,""],[69276,0,"e"],[69484,0,"eg-walker's performance with a version of the algorithm that has these optimisations disabled."],[69578,1,""],[69579,3,""],[69577,0," while replaying an event graph"],[69621,29,""],[69621,0,"shows the"],[69638,0,"usage over the course of replaying"],[69672,237,""],[69672,0," one trace, and @speed-ff shows the ration"],[69713,1,""],[69713,0," of runtimes between the unoptimised and the optimised versions for several traces."],[70220,298,""],[70219,1,""],[70365,0,"\n"],[70365,1,""],[70378,0,"\nThe _git-makefile_ editing trace does not contain any critical events - so performance is unchanged. In comparison, the fully sequential editing traces are processed approximately 15x faster as a result.\n"],[70205,0,"  placement: top,\n"],[70383,0,"  placement: top,\n"],[69951,26,""],[69951,0,"interl"],[69956,1,""],[69956,0,"nal state clearing"],[70481,2,""],[70481,0,","],[70510,15,""],[70511,0," whereas"],[70595,11,""],[70595,0,"with this optimisation"],[70475,6,""],[70475,0,"versions"],[70475,8,""],[70475,0,"events"],[70618,0,"\nThe concurrent trace used in @ff-memory has frequent t"],[70672,1,""],[70671,1,""],[70671,0,"ly occurring cu"],[70685,1,""],[70685,0,"ritical versions, allowing the optimisation to keep the internal state small."],[69983,198,""],[70135,0," the optimisations from @clearing."],[70170,26,""],[70574,365,""],[70573,1,""],[70888,0," "],[69797,0,"\n// TODO: what is the unit of the y axis of this graph?"],[69846,5,""],[69846,0,"chart"],[69823,0," ()"],[69825,0,"\"\""],[69826,0,"state size"],[59272,6562,""],[73525,0,"= Related Work <related-work>\n\nEg-walker is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 consider only datatypes such as maps, sets, and registers; eg-walker adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with eg-walker: both are based on traversing an event graph, with operations being transformed from the form in which they were originally generated into a form that can be applied in topologically sorted order to obtain the current document state.\nToomim also points out that CRDTs can be used to perform this transformation.\nEg-walker is a concrete, optimised implementation of the time machine approach; novel contributions of eg-walker include updating the prepare version by retreating and advancing, as well as the details of partial event graph replay.\n\nEg-walker can also be regarded as an _operational transformation_ (OT) algorithm @Ellis1989, since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research, tracing back to several seminal papers in the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms follow a pattern of two sub-algorithms: a set of _transformation functions_ that transform one operation with regard to one other, concurrent operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformation functions.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$, as each operation from one branch needs to be transformed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\nEg-walker departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the theoretical upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding eg-walker, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\nOther prominent collaborative text editing algorithms belong to the _conflict-free replicated data types_ (CRDTs) family @Shapiro2011, with early examples including RGA @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue being more recent.\nTo our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persisted for the lifetime of the document and sent to all replicas, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead.\nIn contrast, eg-walker uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\nEg-walker does need to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT metadata, and it only needs to be memory-resident to handle concurrent operations; most of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n\nVersion control systems such as Git, as well as differential synchronization @Fraser2009, perform merges by diffing the old and new states on one branch, and applying the diff to the other branch.\nApplying patches relies on heuristics, such as searching for some amount of context before and after the modified text passage, which can apply the patch in the wrong place if the same context exists in multiple locations, and which can fail if the context has concurrently been modified.\nThese approaches therefore generally require manual merge conflict resolution and don't ensure automatic replica convergence.\n\n/*\n#import \"@preview/algorithmic:0.1.0\"\n#import algorithmic: algorithm\n\n#algorithm({\n  import algorithmic: *\n  Function(\"ResetState\", args: (\"state\",), {\n    Assign[state][dummy data]\n  })\n\n  Function(\"TransformPartial\", args: ($G$, $V_0$, $V_m$), {\n    Assign[$s$][(dummy data)]\n    Assign[$C$][$\"greatestCommonVersion\"(G)$]\n\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" C, \"to:\" V_0)$], {\n      // Cmt[As above]\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      Fn[effect][$s$, $m$]\n    })\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" V_0, \"to:\" V_0 union V_m)$], {\n      If(cond: [$\"isCriticalVersion\"(P_i)$], {\n        Assign[$s$][(dummy data)]\n        If(cond: [$\"isCriticalVersion\"({i})$], {\n          State[#smallcaps(\"yield\") $e_i$]\n          State(smallcaps(\"Continue\"))\n        })\n      })\n\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      State[#smallcaps(\"yield\") #FnI[effect][$s$, $m$]]\n    })\n  })\n})\n*/\n\n"],[79025,1062,""],[84544,0,"\n/*\n#import \"@preview/algorithmic:0.1.0\"\n#import algorithmic: algorithm\n\n#algorithm({\n  import algorithmic: *\n  Function(\"ResetState\", args: (\"state\",), {\n    Assign[state][dummy data]\n  })\n\n  Function(\"TransformPartial\", args: ($G$, $V_0$, $V_m$), {\n    Assign[$s$][(dummy data)]\n    Assign[$C$][$\"greatestCommonVersion\"(G)$]\n\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" C, \"to:\" V_0)$], {\n      // Cmt[As above]\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      Fn[effect][$s$, $m$]\n    })\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" V_0, \"to:\" V_0 union V_m)$], {\n      If(cond: [$\"isCriticalVersion\"(P_i)$], {\n        Assign[$s$][(dummy data)]\n        If(cond: [$\"isCriticalVersion\"({i})$], {\n          State[#smallcaps(\"yield\") $e_i$]\n          State(smallcaps(\"Continue\"))\n        })\n      })\n\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      State[#smallcaps(\"yield\") #FnI[effect][$s$, $m$]]\n    })\n  })\n})\n*/\n\n"],[85606,1,""],[59185,87,""],[59214,0,"// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n\n"],[59812,389,""],[61126,0,"// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n"],[61126,389,""],[59812,0,"// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n"],[60508,1,""],[60508,0,"8"],[62280,0,"individual "],[62642,0,"o"],[62642,1,""],[62642,0," or"],[62641,9,""],[62641,0,"six"],[61314,7,""],[61324,0," branches"],[61334,9,""],[61334,0,"per"],[61401,0,"s"],[61477,11,""],[61477,0,"made at least one event"],[61393,0,"linear "],[61508,4,""],[61156,0,"  ]\n"],[61512,0,"\n  ]"],[61156,4,""],[61400,0,"event "],[61415,10,""],[61420,25,""],[61420,0,"out branching/merging"],[61476,4,""],[61476,0,"added"],[62663,0,"\n\nSince the traces vary significantly "],[62687,14,""],[62687,0,"in size by more than an order of magnitude, "],[62665,7,""],[62665,0,"T"],[62724,1,""],[62723,1,""],[62723,0,".\nTo allow comparisons across traces, instead of reporting the runtime \n\n// TODO: include some details on the hardware used to run teh "],[62857,1,""],[62856,1,""],[62855,1,""],[62855,0,"he experiments, number of runs "],[62885,1,""],[62885,0,", any warm-ups etc."],[83838,0," <benchmark-setup>"],[59791,0,"\nDetails of the hardware and software setup of our experiments are given in @benchmark-setup."],[62887,0,"to replay an event graph, we report the replay throughput in units of millions of events per second."],[62986,0,")"],[62945,0,"("],[62990,110,""],[63358,31,""],[63467,8,""],[63467,0,"replay throughput"],[63473,11,""],[63467,6,""],[63467,0,"runtimes"],[63467,8,""],[63467,0,"replay throughput"],[63497,2,""],[63515,0,"un"],[64241,1,""],[64241,0,"e"],[64243,0,"e"],[64257,0,"s"],[63926,3,""],[63928,0,"-"],[63935,10,""],[63734,1,""],[63750,1,""],[64447,27,""],[64391,0,"As @chart-one-local shows, "],[64418,12,""],[64417,1,""],[64459,1,""],[64459,0,":"],[64464,3,""],[64464,0,"observed"],[64494,11,""],[64494,0,"throughput"],[64490,15,""],[64490,0," "],[64507,11,""],[64390,0,"\nWe also replayed editing traces using several existing CRDT libraries: Automerge @automerge, Yjs@yjs"],[64487,0," "],[64492,0,", Cola@cola"],[64498,0," "],[64504,0,", and json-joy @jsonjoy."],[65061,1,""],[64529,0,"\n"],[65062,0,"\n"],[64529,1,""],[64556,14,""],[64556,0,"they"],[64408,0,"the "],[64679,1,""],[64679,0,"\n"],[64708,3,""],[64710,0,"-"],[64691,7,""],[64701,0,"the algorithmic differences between "],[64746,0," and CRDTs, rather than the implementation differences"],[64805,16,""],[64805,0,"wroote"],[64810,1,""],[64809,1,""],[64808,1,""],[64808,0,"te"],[64849,25,""],[64857,14,""],[64857,0,", which"],[64872,3,""],[64872,0,"the"],[64937,4,""],[64939,0,"-"],[64946,89,""],[64865,10,""],[64865,0,"uses the same"],[64935,4,""],[64935,0,"as"],[64948,0,"\n"],[64949,1,""],[64982,4,""],[64982,0,"in a blog post"],[64390,0,"\n// TODO: anonymisation of this paragraph"],[65700,0,"  placement: top,\n"],[65112,28,""],[65112,0,"Replay throughput for the "],[65148,1,""],[65154,17,""],[65168,13,""],[65186,68,""],[64720,0,"\n// Yjs@yjs is 500x slower than Cola@cola in this test. (2056ms vs 4ms)."],[64727,4,""],[64752,5,""],[64765,1,""],[65293,0," "],[65116,0,"\n// TODO: rather than removing the cursor caching optimisation from Cola, would it make sense to add it to eg-"],[65225,1,""],[65224,1,""],[65223,1,""],[65223,0,"dt-egwalker?"],[62989,0,"\n// TODO: is it millionso "],[63014,1,""],[63013,1,""],[63013,0," of run-length encoded event sequences, of "],[63055,1,""],[63054,1,""],[63054,0,"r millions of individual events ()"],[63087,0,"as reported in @traces-table"],[63116,0,"?"],[65652,10,""],[65651,1,""],[65728,150,""],[65089,0," labelled dt-crdt in @chart-one-local,"],[64923,0,"fairly "],[65106,0,"_"],[65114,0,"_"],[65774,0," Testedcc "],[65783,1,""],[65782,1,""],[65781,1,""],[65781,0," version numbers are given in @benchmark-setup."],[65797,10,""],[65291,0,"\n// TODO: what exactly does this graph actually measure? only preparing "],[65362,1,""],[65361,1,""],[65360,1,""],[65359,1,""],[65359,0,"e"],[65359,1,""],[65359,0,"ing ops, or also effect? Maybe it would be better to measure only effect ()"],[65433,0,"remote tops"],[65443,1,""],[65442,1,""],[65441,1,""],[65440,1,""],[65440,0,"ops"],[65433,0,"applying "],[65453,0," for a "],[65459,1,""],[65459,0,"ll libraries"],[65453,0," by expanding <chart-all-remote>"],[65486,3,""],[65486,0,"to show"],[65498,0,"CRDT "],[65512,0,"?"],[65165,0," (Rust)"],[65137,5,""],[65136,1,""],[65140,1,""],[65139,1,""],[65139,0,"ing"],[66101,0,"\nReplaying an editing trace using a CRDT is not a very meaningful benchmarkl"],[66176,1,""],[66102,0,"However, "],[66111,1,""],[66111,0,"r"],[66185,0,", since CRDT implementations store their internal state on disk "],[66101,0,"\nWhile eg-walker needs to replay the event graph in order to restore internal state it has discarded, CRDTs do not generally need to replay edits, since they store their internal state do"],[66287,1,""],[66286,1,""],[66286,0,"persistently."],[66170,0,"the "],[66303,0,"\nFor CCRD"],[66311,1,""],[66311,0,"="],[66311,1,""],[66310,1,""],[66309,1,""],[66309,0,"RDTs, the most important metric is the performance of merging "],[66303,0,"\n\n"],[66304,0,"However, when a user of a CRDT has been working offline and sends their accumulated batch of operations "],[66370,5,""],[66370,0,"an"],[66405,0,"to their collaborators, the other replicas need to integrate that batch of remote operations into their internal state. "],[66524,1,""],[66524,0,"\nDoing this "],[66525,11,""],[66525,0,"Doing this \n\n// TODO: another performance-critical operation "],[66576,10,""],[66576,0,"aspect of CRDTs is loading the internal state from disk into memory, which is required to view the current document state or to make any changes."],[66698,2,""],[66698,0,"and"],[66541,7,""],[66541,0,"A"],[66538,3,""],[66713,0,"\n"],[66654,2,""],[66654,0,"for"],[66662,0,"ing"],[66697,3,""],[66700,1,""],[66700,0,"ing"],[66717,0,"This can take a significant amount of CPU time and memory ()"],[66776,0,"*TODO: quantify*"],[66793,0," "],[66793,1,""],[66793,0,", even on highly optimised implementations.\nO"],[66837,1,""],[66837,0,"With eg-walker, loading a document is essentially \"\""],[66888,0,"free"],[66893,0,", since we only need to load the current document state ()"],[66950,0,"a plain text file"],[66968,0,", b"],[66970,1,""],[66970,0,"not the event graph"],[66968,21,""],[66968,0,"; viewing the docuemnt "],[66990,1,""],[66989,1,""],[66988,1,""],[66987,1,""],[66986,1,""],[66986,0,"ment and making changes does not erquire "],[67019,8,""],[67019,0,"require loading or replaying the event graph."],[67066,216,""],[66538,528,""],[63151,0,"Another performance-critical aspect of CRDTs is loading the internal state from disk into memory, which is required for viewing the current document state and making any changes.\nThis can take a significant amount of CPU time and memory (*TODO: quantify*), even on highly optimised implementations.\nWith eg-walker, loading a document is essentially \"free\", since we only need to load the current document state (a plain text file); viewing the document and making changes does not require loading or replaying the event graph.\n\n"],[63151,7,""],[63151,0,"One"],[66626,436,""],[63674,0,"\nWhile eg-walker needs to replay the event graph in order to restore the internal state it has discarded, CRDTs do not generally need to replay edits, since they store their internal state persistently.\nHowever, when a user of a CRDT has been working offline and sends an accumulated batch of operations to their collaborators, the other replicas need to integrate that batch of remote operations into their internal state.\nDoing this \n\n"],[63675,7,""],[63675,0,"E"],[63684,0," only"],[63698,0," load and"],[63636,21,""],[63721,0," merge events from remote replicas that are concurrent with events that already exist locally.\n//"],[63819,45,""],[63815,0,"\nThe equivalent operation "],[63831,10,""],[63831,0,"action in a CRDT s"],[63848,1,""],[63848,0,"is to integrate remote operations into the local stae"],[63900,1,""],[63900,0,"te.\n"],[63903,0,"\nIn the case of real-time collaboration, this is typically a small number of operations "],[63904,14,""],[63904,0,"During"],[63983,0,"that are based on a version that is only slightly behind the local document version; merging these operations is very fast on both CRDTs and eg-walker, since eg-walker only has to replay a small subset of the event graph.\n\nA more demanding situation arises "],[64240,111,""],[64251,10,""],[64345,0," and"],[64430,8,""],[64430,0,"local"],[64443,11,""],[65814,775,""],[63150,0,"\n// TODO: anonymisation of this paragraph\nWe also replayed the editing traces using several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy.\nAs @chart-one-local shows, they vary wildly in performance: we observed a 500x difference between the best and worst performing library we tested.\n// Yjs is 500x slower than Cola in this test (2056ms vs 4ms).\nIn order to fairly evaluate the algorithmic differences between eg-walker and CRDTs, rather than the implementation differences, we wrote our own optimised CRDT implementation @dt-crdt, labelled _dt-crdt_ in @chart-one-local, using the same language (Rust), code style, data structures and optimisations as eg-walker.\nThe optimisations are documented in a blog post @crdts-go-brrr.\n\n"],[63925,1,""],[63192,41,""],[63192,0,"We compare eg-walker to"],[63316,26,""],[63316,0,"However,"],[66553,808,""],[63890,0,"// TODO: what exactly does this graph actually measure? only preparing ops, or also effect? Maybe it would be better to measure only effect (applying remote ops) by expanding <chart-all-remote> to show all CRDT libraries?\n// TODO: rather than removing the cursor caching optimisation from Cola, would it make sense to add it to dt-egwalker?\n#figure(\n  text(8pt, charts.one_local),\n  caption: [\n    Replay throughput for the seph-blog1 trace using various CRDTs libraries.  Cola is faster than dt-crdt due to its GTree @cola-gtree implementation using local cursor caching. When this is disabled (_cola-nocursor_), performance is similar to dt-crdt. Yjs performs much better when processing remote events. Tested version numbers in @benchmark-setup.\n  ],\n  kind: image,\n  placement: top,\n) <chart-one-local>\n\n"],[63888,0,"\n"],[63702,9,""],[63682,0,", _dt-crdt_"],[63704,29,""],[63703,1,""],[63702,1,""],[63860,0,"@chart-one-local shows the performance of replaying "],[63882,0," that"],[63903,0," of dt-crdt is competitive with the best existing CRDT libraries"],[63968,2,""],[63968,0,"when"],[63983,0,"one of our edittin"],[64000,1,""],[63999,1,""],[63998,1,""],[63998,0,"ing traces."],[64482,1,""],[66110,0,"To simulate an extreme version of this scenario using our editing traces, we compare the performance of replaying an entire edit trace using eg-walek"],[66258,1,""],[66257,1,""],[66257,0,"ker to integrating the equivalent set of remote operations "],[66187,0,"\n\n"],[66187,0,"imagine that this work done offline is one of our entire "],[66157,25,""],[66219,0,"edit traces, and we measure the time taken to integrate that work into another replica: in the case of "],[66177,2,""],[66177,0,"e"],[66306,15,""],[66306,0,"eg-walker needs to replay the entire edit trace an"],[66355,1,""],[66354,1,""],[66353,1,""],[66353,0,", and a CRDT needs to apply all of the CRDT operations from the remote replica.\nIn this experi"],[66433,14,""],[66433,0,"We do not include the time it took to generate tthe "],[66484,1,""],[66483,1,""],[66482,1,""],[66481,1,""],[66481,0,"he CRDT operations on the source replica."],[66524,130,""],[66381,3,""],[66381,0,"the equivalent set"],[66402,4,""],[66532,0,", since that computation happens gr"],[66566,1,""],[66565,1,""],[66565,0,"gradually as the user is typing"],[66565,9,""],[66565,0,"in the background"],[67988,1748,""],[67977,11,""],[67978,2275,""],[66607,0,"Nevertheless, as we can see in @chart-remote, eg-walker is extremely fast. In absolute terms, our slowest test case (_git-makefile_) took just 15ms to process. Eg-walker is capable of processing over 1M events per second in all the test cases we have.\n\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-remote>\n\nEg-walker performance is much more varied than that of a CRDT. The reason is that the performance of a CRDT's _effect_ function is largely insensitive to the data. Eg-walker, on the other hand, is much faster than CRDTs when the event graph is largely sequential (or mostly sequential, as is the case in `node_nodecc`). This is due to the optimisations described in TODO. When part of an editing trace is sequential, the transform function resembles the identity function.\n\nWe have found that when processing datasets with very high concurrency (like _git-makefile_), the performance of eg-walker is highly dependant on the order in which events are traversed. A poorly chosen traversal order can make this test as much as 8x slower. To avoid this, we preprocess the event graph to find an ideal traversal order. However, this preprocessing itself can slow things down. In the _friendsforever_ and _clownschool_ tests, the causal graph is very \"busy\", as there are thousands of tiny merge and fork points as the replicas went in and out of sync. While our traversal order optimisation code dramatically improves the performance in the asynchronous tests, it makes our concurrent tests slower. About 40% of the time spent replaying _friendsforever_ and _clownschool_ is simply spent preprocessing the graph looking for an ideal traversal order.\n\n"],[69818,259,""],[67100,0,"\n#figure(\n  text(8pt, charts.all_speed_remote),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n) <chart-all-remote>\n"],[66607,31,""],[66620,1,""],[66620,0," shows that in this scenario,"],[66677,0,": on sequential traces it is around 5x faster to replay the event graph than to integrate the equivalent remote operations into our optimised d"],[66819,1,""],[66819,0,"CRDRT"],[66823,1,""],[66822,1,""],[66822,0,"T, dt-crdt"],[66833,0,"\n"],[66834,1,""],[67235,0,"  placement: top,\n"],[67509,0,"  placement: top,\n"],[66832,0,", and in he"],[66842,1,""],[66841,1,""],[66841,0,"the worst case eg-walker has about half the throughput of dt-crdt"],[66992,1,""],[66992,0,"\n"],[67084,0,"\n\n@chart-all-remote compares the same workload on other CRDT libraries, Automerge on "],[67168,1,""],[67167,1,""],[67166,1,""],[67166,0,"and Yjs. "],[67003,14,""],[67012,1,""],[67011,1,""],[67010,1,""],[67010,0,"es"],[67050,10,""],[67050,0,"traces"],[67155,1,""],[67155,0,"\nEg-walker "],[67135,19,""],[67135,0,"; eg-walker outperforms both Yjs and Automerge on almost all traces"],[67204,11,""],[67065,1,""],[63763,0,","],[65499,6,""],[65499,0,"process"],[65719,8,""],[65718,1,""],[65756,4,""],[65755,1,""],[66595,597,""],[66854,0,"@chart-remote shows that in this scenario, eg-walker is extremely fast: on sequential traces it is around 5x faster to replay the event graph than to integrate the equivalent remote operations into our optimised CRDT, dt-crdt, and in the worst case eg-walker has about half the throughput of dt-crdt.\nIn absolute terms, our slowest test case (_git-makefile_) took just 15ms to process.\nEg-walker processes over 1M events per second in all the traces we have.\n@chart-all-remote compares the same workload on other CRDT libraries; eg-walker outperforms both Yjs and Automerge on almost all traces.\n\n"],[66655,142,""],[66655,0,"Comparing the throughptu "],[66679,1,""],[66678,1,""],[66677,1,""],[66677,0,"ut "],[66669,11,""],[66669,0,"speed of eg-walker graph replay to "],[66688,0,"event "],[66710,0,"applying the equivalent set of remote operations "],[66655,11,""],[66655,0,"T"],[66696,0,", compared"],[66759,0,"in a CRDT."],[66710,8,""],[66710,0,"merging"],[66739,7,""],[66739,0," CRDT"],[66755,10,""],[66919,2,""],[66919,0,"%"],[66919,1,""],[66919,0,"$$"],[66920,0,"5 times"],[66869,9,""],[66869,0,"very"],[67013,20,""],[67391,0,"\n// TODO: aed"],[67403,1,""],[67402,1,""],[67402,0,"dd eg-walker to this chart ()"],[67430,0,"with the y axis fixed to 1-3 "],[67458,1,""],[67457,1,""],[67456,1,""],[67455,1,""],[67455,0,"0-3 Mevents/sec"],[67536,153,""],[67536,0,"The speed of merging remote operations into a replica's local state in "],[67606,1,""],[67605,1,""],[67605,0,"n s"],[67607,1,""],[67606,1,""],[67605,1,""],[67604,1,""],[67603,1,""],[67603,0,"."],[67603,0," in several CRDT implementations"],[67697,1345,""],[67696,1,""],[67695,1,""],[69065,0,"Eg-walker performance is much more varied than that of a CRDT. The reason is that the performance of a CRDT's _effect_ function is largely insensitive to the data. Eg-walker, on the other hand, is much faster than CRDTs when the event graph is largely sequential (or mostly sequential, as is the case in `node_nodecc`). This is due to the optimisations described in TODO. When part of an editing trace is sequential, the transform function resembles the identity function.\n\nWe have found that when processing datasets with very high concurrency (like _git-makefile_), the performance of eg-walker is highly dependant on the order in which events are traversed. A poorly chosen traversal order can make this test as much as 8x slower. To avoid this, we preprocess the event graph to find an ideal traversal order. However, this preprocessing itself can slow things down. In the _friendsforever_ and _clownschool_ tests, the causal graph is very \"busy\", as there are thousands of tiny merge and fork points as the replicas went in and out of sync. While our traversal order optimisation code dramatically improves the performance in the asynchronous tests, it makes our concurrent tests slower. About 40% of the time spent replaying _friendsforever_ and _clownschool_ is simply spent preprocessing the graph looking for an ideal traversal order.\n\n"],[67696,0,"\nEg'wal"],[67702,1,""],[67701,1,""],[67700,1,""],[67699,1,""],[67699,0,"-walker's "],[67697,12,""],[67697,0,"The biggest factor affecting eg-walker's performance is "],[67697,56,""],[67697,0,"Eg-walker is espeically fast on traces that are entirely sequential or have "],[67744,0," mostly ()"],[67753,0,"e.g., `node_nbo"],[67767,1,""],[67766,1,""],[67766,0,"odecc`"],[67773,0," or"],[67796,9,""],[67796,0,"."],[67798,76,""],[67798,0,"This is because"],[67914,18,""],[67914,0," ("],[67925,0,")"],[67695,0,"\n\n== When eg-walker is fast"],[68852,9,""],[68852,0,"the same in the "],[68861,7,""],[68861,0,"as if the opti"],[68871,4,""],[68871,0,"optimisations are disabled"],[68971,0,"$"],[68974,1,""],[68974,0," times$$"],[68981,1,""],[69160,494,""],[69160,0,"W"],[69176,8,""],[69176,0,"an event graph"],[69286,1,""],[69286,0,"e"],[69333,1,""],[69333,0,"\n"],[69396,0,"$"],[69398,1,""],[69398,0,"t"],[69398,1,""],[69398,0," times$$"],[69405,1,""],[69413,1,""],[69413,0,"\n"],[69492,1,""],[69492,0,"\n"],[69549,0,"\n"],[69550,1,""],[69725,1,""],[69725,0,"\n"],[69872,1,""],[69872,0,"\n"],[70025,3,""],[70025,0,"/*"],[70285,0,"*/"],[67700,4,""],[67700,0,"How"],[67714,7,""],[67714,0,"performance depends on graph structure"],[67700,5,""],[67700,0,"E"],[67722,26,""],[67722,0,"and concurrency"],[68989,1,""],[68988,1,""],[68987,1,""],[68986,0,"14"],[68987,1,""],[68987,0,"5"],[69410,0,"8"],[69412,2,""],[66916,1,""],[66915,1,""],[66914,0,"5"],[30716,0," <graph-walk>"],[69437,1,""],[69437,0,", and our topological sort algorithm ()"],[69475,0,"@graph-walk"],[69487,0," tries to avoid such pathological cases."],[69528,79,""],[69539,45,""],[69539,0,"t"],[69539,1,""],[69539,0,"e topological sort itself also takes time: "],[69582,2,""],[69582,0,"i"],[69624,5,""],[69624,0,"tracce"],[69629,1,""],[69628,1,""],[69628,0,"es"],[69631,0,", "],[69632,1,""],[69631,1,""],[69631,0," about 40% of the runtime is the toplo"],[69668,1,""],[69667,1,""],[69664,3,""],[69664,0,"topological sort"],[69680,32,""],[69712,0," branch and"],[69729,9,""],[69737,337,""],[69737,0,"due to the fine-grained concurrency"],[67769,1,""],[67768,1,""],[67768,0,"ci"],[68487,1,""],[68487,0,"_"],[68502,1,""],[68502,0,"_"],[68391,0,"text(8pt, "],[68416,0,")"],[68416,1,""],[68416,0,")"],[68639,0,"text(8pt, "],[68664,0,")"],[58188,0,", and then LZ4-compress"],[58055,3,""],[58054,1,""],[58207,0," this string"],[70107,0,"\n\nFinally, we show that our event"],[70135,0,"binary encoding of "],[70159,0," graphs ()"],[70168,0,"storage"],[70168,0,"@"],[70177,0," results in small file sizes"],[70194,0,"er"],[70207,0," "],[70109,23,""],[70109,0,"O"],[70186,0,"\n\n// TODO: maybe a be"],[70197,10,""],[70197,0,"instead of disabling comprpession"],[70223,1,""],[70229,0," in Atuomer"],[70239,1,""],[70238,1,""],[70237,1,""],[70236,1,""],[70235,1,""],[70234,1,""],[70234,0,"utomerge and DT, maybe a"],[70257,1,""],[70257,0,"it would be better to add an add"],[70279,10,""],[70279,0,"gzip the "],[70284,4,""],[70284,0,"all of the files "],[70279,22,""],[70279,0,"report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison."],[70186,0,"than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabaled"],[70310,1,""],[70309,1,""],[70308,1,""],[70307,1,""],[70307,0,"led eg-walker's built-in LZ4 and Auttomer"],[70347,1,""],[70346,1,""],[70345,1,""],[70344,1,""],[70344,0,"o"],[70344,1,""],[70343,1,""],[70343,0,"omerge's built-in gzip comprpessi"],[70366,10,""],[70366,0,"compression; enabling these further reduces the file sizes."],[70394,7,""],[70394,0,"significantly"],[70377,53,""],[70377,0,", and set the timestamps of all events to zero in Automerge"],[70377,59,""],[70378,1,""],[70637,1247,""],[70068,0,"  placement: top,\n"],[72322,0,"  placement: top,\n"],[73041,0,"  placement: top,\n"],[71568,0,"\n// TODO: why is git-makefile not included? "],[71611,1,""],[71610,0," in this and the following figure"],[70654,0,"\n\n"],[70655,0,"@chart-dt-vs-automerge shows "],[70655,0,"Automerge also stores the fuklk "],[70686,1,""],[70685,1,""],[70684,1,""],[70683,1,""],[70683,0,"ll editing history of a document, and "],[70750,0,"the resulting file sizes.\nIn all of our tracesm "],[70797,1,""],[70796,1,""],[70796,0,", the "],[70798,4,""],[70798,0,"eg-walker has a significantly sa"],[70829,1,""],[70829,0,"maller file"],[70395,0,"; enabling this compression further reduces the file sizes"],[70201,1,""],[70200,1,""],[70199,1,""],[70198,1,""],[70197,1,""],[70827,0," relative to the raw concatenated text content of all insertions"],[70957,0," size.\nIn contrast, Yjs removes the "],[70962,0,", and the graph structure adds only modest overhead to the raw text"],[71048,12,""],[71048,0,"does not store "],[71030,0,"\n"],[71064,0,"any deleted characters, which results in a smaller file size, but "],[71124,6,""],[71124,0," at"],[71126,1,""],[71125,1,""],[71124,1,""],[71124,0,", at the cost of not being able to reconstruct past version"],[71176,7,""],[71176,0,"document states.\nT"],[71193,1,""],[71193,0,"To make the coma"],[71208,1,""],[71208,0,"parison fair, @chart-dt-vs-yjs compares eg-walker"],[71248,9,""],[71248,0,"our event graph encoding"],[71248,0,"Yjs to a variant of "],[71292,0," in which the text content of deleted characters is omitted.\nAgain our encoding is"],[71371,3,""],[71371,0," is"],[71353,7,""],[71353,0,"O"],[71368,0," smaller than Yjs on all traces "],[71399,1,""],[71399,0,", and the overhead of storing the event graph is between 20% and 3$$"],[71466,0,"times"],[71472,0," the final tt"],[71484,1,""],[71484,0,"p"],[71484,1,""],[71483,1,""],[71483,0,"plain text file size."],[71506,913,""],[71505,1,""],[71689,2,""],[71689,0,"eg-walker's event graph encoding"],[71670,12,""],[71670,0,"edit traces"],[71735,608,""],[71639,4,""],[71638,1,""],[71731,2,""],[71730,1,""],[71792,1,""],[71849,0,"\n    File size of our event graph encoding in which deleted text content has been omitted, compared to the equivaalent "],[71967,1,""],[71966,1,""],[71965,1,""],[71964,1,""],[71963,1,""],[71962,1,""],[71961,1,""],[71961,0,"alent Yjs file size."],[71850,4,""],[71849,1,""],[71976,599,""],[72033,0,"\n"],[77547,0,"\n\nEg-walker is a new approach to collaborative ttex"],[77597,1,""],[77596,1,""],[77595,1,""],[77595,0,"ext editing that has significant performance advantages over existing OT and CRDT algorithms.\nCompared to CRDTs, it uses less memory "],[77727,1,""],[77727,0,", files are faster to load ()"],[77754,2,""],[77753,1,""],[77753,0,", and in files with largely sequential editing "],[77799,1,""],[77762,5,""],[77762,0,"documents"],[77758,0," c"],[77759,1,""],[77759,0,"edits from other users are merged faster"],[77844,0,".\nCompared to OT, large merges ()"],[77876,0,"e.g., from users who did a significant amoutn o"],[77922,1,""],[77921,1,""],[77920,1,""],[77919,1,""],[77919,0,"nt of work while offline"],[77944,0," are much faster boo"],[77963,1,""],[77962,1,""],[77961,1,""],[77960,1,""],[77960,0,", both asymptoot"],[77975,1,""],[77974,1,""],[77974,0,"tically and in practice.\nThe "],[77997,0,", and peer-to-peer collaboration is robustly supported"],[78052,0,"\nMoreover, since eg-walker "],[78053,0,"\n"],[78080,0,"stores the full editing history "],[78095,0," keystroke-granularity"],[78134,0,"of a document, it allows applications to show that history to ot"],[78197,1,""],[78196,1,""],[78196,0,"the user."],[78204,0,", and to restoreo a"],[78222,1,""],[78221,1,""],[78220,1,""],[78220,0," arbitrary past versions of a document"],[78264,0,"only downside "],[78277,1,""],[78277,0,"s we have found with eg-l"],[78301,1,""],[78301,0,"walker is that it is sligh"],[78322,5,""],[78322,0,"somewhat slower than CRDTs ()"],[78349,2,""],[78348,1,""],[78321,0," more complex to implement, and"],[78379,0," on editing that have a high degree of concurrent"],[78427,1,""],[78427,0,"ccy "],[78430,1,""],[78429,1,""],[78428,1,""],[78428,0,"y ()"],[77738,0," smaller and"],[77766,0," network messages are smaller,"],[77766,30,""],[78365,0,"it is "],[78449,0,"although "],[78449,2,""],[78456,0,"easily fast enough for "],[78408,0," "],[78401,18,""],[78401,0,"event graphs with"],[78479,0,"practical use"],[78493,0,"."],[78496,1153,""],[78492,0,", with merging throughput of over 1 million events "],[78542,1,""],[78542,0,"/sec"],[77805,0,"much "],[78555,366,""],[78396,0," an optimised"],[78414,1,""],[78567,0,"An "],[78567,3,""],[78567,0,"The underlying model f "],[78589,1,""],[78588,1,""],[78588,0,"of an event graph is a stri"],[78614,1,""],[78614,0,"aigh"],[78611,7,""],[78611,0,"straightforward representation of the edits tha t"],[78659,1,""],[78658,1,""],[78658,0,"t have occurred, with "],[78592,1,""],[78592,0," repplic"],[78599,1,""],[78598,1,""],[78597,1,""],[78596,1,""],[78596,0,"licated"],[78592,1,""],[78591,1,""],[78600,1,""],[78599,1,""],[78599,0,"ing an"],[78588,17,""],[78581,7,""],[78663,5,""],[78663,0,"which is straightforward to replicate and "],[78672,15,""],[78672,0,"easy"],[78690,4,""],[78690,0,"oov"],[78692,1,""],[78691,1,""],[78691,0,"ver the network and "],[78710,1,""],[78709,1,""],[78708,1,""],[78707,1,""],[78706,1,""],[78706,0,", and which is not specific to the eg-walker algorithm.\nWe therefore expect that the same data foramt "],[78807,1,""],[78806,1,""],[78805,1,""],[78804,1,""],[78804,0,"mat will be able to support future collaborative editing algorithms as well, without requiring the data format tto be "],[78921,1,""],[78920,1,""],[78919,1,""],[78918,1,""],[78917,1,""],[78916,1,""],[78916,0,"o be changed."],[78695,3,""],[78695,0,"any"],[78929,0,"\nWe also believe that eg-walker can readily be extended tto ot"],[78990,1,""],[78989,1,""],[78988,1,""],[78987,1,""],[78986,1,""],[78986,0,"o other d"],[78994,1,""],[78994,0,"file types sucha s"],[79011,1,""],[79010,1,""],[79009,1,""],[79009,0," as rich text, s"],[79024,1,""],[79024,0,"grap"],[79027,1,""],[79026,1,""],[79025,1,""],[79025,0,"raphics, or spreadsheets."],[78965,7,""],[78964,1,""],[79041,1,""],[79041,0,", and we hope that others will build on this work."],[79050,81,""],[79050,0,"we"],[79051,1,""],[79050,1,""],[79050,0,"believe that this is a promising"],[79115,13,""],[79124,14,""],[79133,95,""],[9850,1,""],[9850,0,"a"],[9873,1,""],[9873,0," "],[9970,1,""],[9970,0," "],[10163,1,""],[10163,0," "],[10253,1,""],[10253,0," "],[9874,15,""],[9874,0,"Because"],[9874,8,""],[9884,0,"also "],[9915,0," so"],[9917,1,""],[9916,1,""],[9915,1,""],[9914,1,""],[9914,0,". A"],[9916,1,""],[9915,1,""],[9914,1,""],[9914,0,", so"],[10671,0,"\n"],[10718,0,"\n"],[10718,1,""],[10725,0,"\n- We introduce the eg-walker "],[10745,0,"novel "],[10761,0,"algorithm"],[10761,9,""],[10761,0,"algorithm- "],[10771,1,""],[10770,1,""],[10770,0,"\n- We present detailed "],[10771,22,""],[10770,1,""],[10969,0," often"],[10969,6,""],[10969,0," usually"],[11073,27,""],[11086,0,"ca"],[11087,1,""],[11086,1,""],[11076,0,"cases of extreme "],[11076,0,"our testing we have found eg-walker to still b"],[11115,7,""],[11102,13,""],[11102,0,"modern "],[11102,7,""],[11064,10,""],[11064,0,"I"],[11064,0,"However, CRDTs still outperform eg-walker in "],[11073,0,"in ou"],[11073,5,""],[11073,0,"in our testing we "],[11073,18,""],[11109,46,""],[11109,0,"casese "],[11115,1,""],[11114,1,""],[11113,1,""],[11113,0," of "],[11117,9,""],[11117,0,"extreme"],[11134,1,""],[11133,1,""],[11132,1,""],[11132,0,"ency"],[11136,13,""],[11073,0,"in our testing we have found moer"],[11105,1,""],[11104,1,""],[11104,0,"dern "],[11115,6,""],[11168,0,"for example,"],[11180,2,""],[10745,6,""],[10764,0,"."],[14794,2,""],[14794,0,"Eacj"],[14797,1,""],[14797,0,"h"],[14797,1,""],[14797,0,"j"],[14794,4,""],[14794,0,"An"],[14793,0,"\n\nEach even ti"],[14806,1,""],[14805,1,""],[14804,1,""],[14804,0,"t in the graph is immutable. They always "],[14833,12,""],[14833,0,"Events repre"],[14840,5,""],[14840,0,"represent the operation "],[14850,3,""],[14850,0,"an"],[14863,0,"as it was origina"],[14873,7,""],[14873,0,"originally generated. "],[14894,1,""],[14893,1,""],[14893,0,", n"],[14895,1,""],[14894,1,""],[14894,0," no "],[14897,1,""],[14897,0,"t in some tran"],[14902,9,""],[14795,107,""],[14795,0,"Each event in the graph is immutable. Events represent an operation as it was originally generated, not in"],[10245,1,""],[10245,0,"\n"],[10155,1,""],[10155,0,"\n"],[9962,1,""],[9962,0,"\n"],[9873,1,""],[9873,0,"\n"],[14795,36,""],[14795,0,"Events in teh grap"],[14812,1,""],[14811,1,""],[14810,1,""],[14809,1,""],[14808,1,""],[14807,1,""],[14806,1,""],[14806,0,"he graph are immutable"],[14830,6,""],[14830,0,"Each event"],[14850,0,"s"],[14903,0," "],[14897,7,""],[14897,0,"with an editing"],[14905,7,""],[14905,0,"original editing position - not a position "],[14902,11,""],[14902,0,"an"],[14921,0," relative to the origin "],[14944,1,""],[14944,0,"al document. The position is not "],[14977,18,""],[14977,0,"relea"],[14981,1,""],[14980,1,""],[14980,0,"ative "],[14957,29,""],[14956,1,""],[14956,0," The editing position is not stored in a transformed state."],[14794,221,""],[14793,1,""],[14794,4,""],[14794,0,"S"],[14794,1,""],[14794,0,"E"],[14799,0,"s"],[14814,2,""],[14814,0,"are"],[14829,2,""],[14828,1,""],[14827,1,""],[14827,0,". They"],[14902,4,""],[14902,0,"as a result o"],[14902,35,""],[14902,0,"as a result o transformed operation"],[14913,2,""],[14906,7,""],[14906,0," result o"],[14898,0,"and "],[14917,2,""],[14917,0," of a"],[14933,1,""],[14932,1,""],[14932,0,"ation"],[14921,1,""],[14921,0,"some"],[14921,4,""],[14921,0,"any"],[14939,10,""],[14939,0," operation"],[14828,1,""],[14828,0,"\n"],[16168,5,""],[16168,0,"."],[16170,1,""],[16170,0,"M"],[16169,1,""],[16169,0,"\n"],[18647,0,"\n"],[18647,0,"\nRetyur"],[18653,1,""],[18652,1,""],[18651,1,""],[18651,0,"yu"],[18652,1,""],[18651,1,""],[18651,0,"urning to the example, "],[18648,26,""],[18648,0,"Returning to the example, $italic(\"Delete\")(i)$"],[18648,25,""],[18648,0,"Thus, "],[18653,1,""],[18652,1,""],[18652,0," in our example, the eve"],[18668,8,""],[18690,0," event must "],[18697,5,""],[18697,0,"represents a deletion of character $i$ in the document immediatel"],[18752,10,""],[18752,0,"immediately before the event took place - which can be expressed as "],[18648,172,""],[18648,0,"Thus in our example, $italic(\"Delete\")(i)$ event represents a deletion of character $i$ in the document immediately before the event took place - which can be expressed as $sans(\"replay\")(G_i)$."],[18799,20,""],[18799,0," is"],[18801,1,""],[18800,1,""],[18800,0,"can be computed by "],[18800,19,""],[18800,0,"is expressed as"],[18669,0,"the "],[18648,6,""],[18648,0,"I"],[18696,24,""],[18696,0,"deletes the"],[18717,0," at position"],[18704,0,"whichever character"],[18723,13,""],[18723,0," is"],[18724,2,""],[18724,0,"was"],[18702,1,""],[18701,1,""],[18701,0,"ed"],[18648,0,"// "],[16904,0,"\nAn "],[16905,3,""],[16905,0,"Aneven "],[16905,7,""],[16905,0,"Aneven"],[16910,1,""],[16910,0,"t"],[16905,6,""],[16905,0,"In "],[16905,3,""],[16905,0,"Inordasdfasdkfjalskfjd; "],[16905,24,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe "],[16905,27,""],[16905,0,"Inordasdfasdkfjalskfjd;awe"],[16905,0,"In order to correctly "],[16927,26,""],[16905,22,""],[16905,0,"In order to correctly "],[16905,22,""],[16905,0,"In order to correctly\n"],[16926,0," "],[16905,22,""],[16905,0,"In order to correctly "],[16905,22,""],[16905,0,"In order to correctlyx"],[16926,0," "],[17822,0," "],[17753,70,""],[17753,0,"$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $ "],[17753,70,""],[17753,0,"$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $"],[17912,0," "],[17824,89,""],[17824,0,"Given some version $V$, the corresponding set of events can be reconstructed as follows:"],[17982,0," "],[17914,69,""],[17914,0,"$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $"],[18874,0," "],[18673,202,""],[18673,0,"// In our example, the $italic(\"Delete\")(i)$ event deleted whichever character was at position $i$ in the document immediately before the event took place - which is expressed as $sans(\"replay\")(G_i)$. "],[18874,1,""],[16927,1,""],[16927,0,"interpret an event such a s"],[16953,1,""],[16952,1,""],[16952,0,"s "],[16905,49,""],[16905,0,"In order to correctly interpret an event such as $italic(\"Delete\")(i)$"],[16905,33,""],[16905,0,"A"],[16943,0," expresses an intent i"],[16964,1,""],[16964,0,"to "],[16957,10,""],[16944,13,""],[16944,0,"deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was "],[16905,179,""],[16905,0,"An event such as $italic(\"Delete\")(i)$ deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character wasat index $i$ at the time when the operation was generated."],[17083,0," "],[17118,9,""],[17118,0,"evebt"],[17122,1,""],[17121,1,""],[17121,0,"nt"],[16905,16,""],[16905,0,"A delete e"],[16905,10,""],[16905,0,"An "],[16907,1,""],[16906,1,""],[16905,1,""],[16905,0,"The event"],[16905,9,""],[16905,0,"Events express "],[16912,8,""],[16912,0,"describe"],[16904,0,"\n\n"],[16905,0,"Consider an eent"],[16920,1,""],[16919,1,""],[16918,1,""],[16918,0,"vent - "],[16924,1,""],[16923,1,""],[16922,1,""],[16922,0,", li"],[16925,1,""],[16924,1,""],[16924,0,"such as "],[16924,8,""],[16924,0,"like "],[16905,24,""],[16905,0,"Consider an event, like $italic(\"Delete\")(i)$. This event deletes ch"],[16972,1,""],[16971,1,""],[16971,0,"the character at position #"],[16997,1,""],[16997,0,"$i$ in the document. UI"],[17019,1,""],[17018,1,""],[17018,0,"In order to correctly interpret this event, "],[16905,157,""],[16905,0,"Consider an event, like $italic(\"Delete\")(i)$. This event deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated."],[17163,234,""],[17162,1,""],[17162,0,"// "],[17354,2,""],[17354,0,"the"],[17354,3,""],[17354,0,"some"],[17364,1,""],[17364,0,"."],[17365,2,""],[17365,0," T"],[16905,0,"// "],[17165,3,""],[17164,0,"\n"],[17200,10,""],[17200,0," event"],[17206,30,""],[17307,0," For example,  such as $italic(\"Delete\")(i)$"],[17321,30,""],[17166,155,""],[17166,0,"In order to correctly interpret an event, we need to determine which character was at index $i$ at the time when the operation was generated. For example,$italic(\"Delete\")(i)$"],[17320,0," the event "],[17352,0," deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated."],[17527,9,""],[17527,0,"event happ"],[17533,4,""],[17533,0,"happened"],[17541,14,""],[16905,3,""],[17163,377,""],[17163,0,"More generall,y "],[17178,1,""],[17177,1,""],[17176,1,""],[17176,0,"y, "],[17179,1,""],[17179,0,"l"],[18747,203,""],[17137,9,""],[17137,0,"event"],[17137,5,""],[17137,0,"operation"],[19592,3,""],[19591,1,""],[19591,0,", corresponding"],[19593,0,"the "],[19591,6,""],[19591,0," and "],[19660,5,""],[19660,0,". Then"],[21214,0,"\n// Seph: We"],[21225,1,""],[21224,1,""],[21224,0,"I think "],[21224,8,""],[21224,0,"If we want to cut down on the length of t"],[21264,1,""],[21263,1,""],[21262,1,""],[21261,1,""],[21261,0,"of the paper, we could probably remove this.\n"],[21222,0,")"],[21218,0,"("],[21223,1,""],[21218,1,""],[21640,0,"// "],[21307,0,"// "],[21212,1,""],[21212,0,", such as updating "],[21212,19,""],[21212,0,"."],[21212,1,""],[21212,0," - such as updating cursor positions"],[21213,35,""],[21212,1,""],[21212,0,"."],[21212,1,""],[21212,0," - such as updating the"],[21232,3,""],[21232,0,"spe"],[21234,1,""],[21233,1,""],[21233,0,"pecialis"],[21240,1,""],[21240,0,"zed buffers "],[21240,1,""],[21240,0,"s"],[21252,0,"inside text editors, and updating cursor positions."],[21286,0,"user "],[21212,0," //"],[21212,0,"."],[22416,0,"\n\n// (seph): Th"],[22430,1,""],[22429,1,""],[22429,0,"^-- this is a very bold statement."],[23647,0,"the "],[23677,1,""],[23677,0,". When"],[23679,6,""],[23679,0,"S"],[23712,0,"this list of transformed operations can be "],[23679,34,""],[23679,0,"The resulting "],[23693,4,""],[23730,0," applied in sequence to an empty document "],[23771,1,""],[23775,0,"produce "],[23775,8,""],[23786,0,"resulting "],[23678,1,""],[23678,0,"\n"],[23643,0," "],[23643,1,""],[23643,0," in o"],[23647,1,""],[23646,1,""],[23645,1,""],[23644,1,""],[23643,1,""],[23643,0," to an "],[23644,6,""],[23644,0,"in sequence to an empty todocum"],[23668,7,""],[23668,0,"document stateo"],[23682,1,""],[23682,0,"e"],[23682,1,""],[23717,133,""],[23547,5,""],[23547,0,". "],[23549,2,""],[23549,0,"T"],[23553,12,""],[23553,0," "],[23564,0," in the graph is transformed"],[23565,13,""],[23587,1,""],[23587,0,", when applied "],[23602,129,""],[23602,0,"in order, the transformed operations will produce the des"],[23656,3,""],[23656,0,"desired"],[23656,7,""],[23656,0,"resulting"],[23656,9,""],[23656,0,"resulting document state."],[23548,1,""],[23548,0,"\n"],[23604,0," this"],[23605,4,""],[23604,1,""],[23391,0,"\n\n"],[23391,1,""],[23390,1,""],[23473,0,"\n\n\n"],[23475,0,"It first performs a topological sort, as illustrated in @topological-sort.\nThen each event is transformed so that, when applied in order, the transformed operations will produce the resulting document state.\nIt first performs a topological sort, as illustrated in @topological-sort, and then transforms each event so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\n"],[0,89959,""],[0,0,"// #import \"@preview/cetz:0.1.2\": canvas, plot, draw\n// #import \"@preview/fletcher:0.2.0\" as fletcher: node, edge\n#import \"@preview/fletcher:0.3.0\" as fletcher: node, edge\n#import \"@preview/ctheorems:1.1.0\": *\n#import \"@preview/algo:0.3.3\": algo, i, d, comment, code\n// #import \"@preview/lovelace:0.1.0\": *\n#import \"@preview/algorithmic:0.1.0\": algorithm\n#import \"@preview/cetz:0.1.2\"\n#import \"charts.typ\"\n#show: thmrules\n\n#let anonymous = false\n\n#set page(\n  paper: \"a4\",\n  numbering: \"1\",\n  // 178 × 229 mm text block on an A4 page (210 × 297 mm)\n  margin: (x: (210 - 178) / 2 * 1mm, y: (297 - 229) / 2 * 1mm),\n)\n\n// 10pt text with 12pt leading\n#set text(font: \"Linux Libertine\", size: 10pt)\n#let spacing = 0.55em\n#set par(justify: true, first-line-indent: 1em, leading: spacing)\n#show par: set block(spacing: spacing)\n//#show math.equation: set text(font: \"Libertinus Math\")\n\n#set heading(numbering: \"1.1.1\")\n\n// Heading formatting from https://gist.github.com/vtta/d6268ba81ebfdd1dc573db4b72df8436\n#show heading: it => locate(loc => {\n  // Find out the final number of the heading counter.\n  let levels = counter(heading).at(loc)\n  let deepest = if levels != () { levels.last() } else { 1 }\n  v(2 * spacing, weak: true)\n  if it.level == 1 {\n    let no-numbering = it.body in ([Abstract], [Acknowledgments], [Acknowledgment])\n    block(text(size: 12pt, {\n      if it.numbering != none and not no-numbering{ \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else if it.level == 2 {\n    block(text(size: 10pt,{\n      if it.numbering != none { \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else {\n    if it.numbering != none { \n      h(-1em)\n      numbering(it.numbering, ..levels)\n      h(spacing, weak: true)\n    }\n    it.body + [.]\n  }\n})\n\n#set enum(indent: 10pt, body-indent: 9pt)\n#set list(indent: 10pt, body-indent: 9pt)\n\n#show figure.where(kind: table): set figure.caption(position: top)\n\n#show figure.caption: it => align(left, par(first-line-indent: 0pt, [\n  #text(weight: \"bold\", [#it.supplement #it.counter.display(it.numbering).])\n  #it.body\n]))\n\n#let definition = thmbox(\"definition\", \"Definition\",\n  base_level: 0,\n  fill: rgb(\"#f8e8e8\")\n)\n\n#let claim = thmbox(\"claim\", \"Claim\",\n  base_level: 0,\n  fill: rgb(\"#e8e8f8\")\n)\n\n#align(center, text(20pt)[\n  *Eg-walker: Text editing on the Event Graph*\n])\n\n#if anonymous {\n  align(center, text(12pt)[\n    Anonymous Author(s) \\\n    Submission ID: TODO\n  ])\n} else {\n  grid(\n    columns: (1fr, 1fr),\n    align(center, text(12pt)[\n      Joseph Gentle \\\n      #link(\"mailto:me@josephg.com\")\n    ]),\n\n    align(center, text(12pt)[\n      Martin Kleppmann \\\n      University of Cambridge, UK \\\n      #link(\"mailto:martin@kleppmann.com\")\n    ])\n  )\n}\n\n#show: columns.with(2, gutter: 8mm)\n\n#heading(numbering: none, [Abstract])\n\nCollaborative text editing algorithms allow several users to concurrently modify a text file, and automatically merge concurrent edits into a consistent state.\nExisting collaboration algorithms are either slow to merge files that have diverged substantially due to offline editing (in the case of Operational Transformation/OT), or incur overheads due to giving a unique ID to every character (in the case of CRDTs).\nWe introduce Eg-walker, a collaboration algorithm for text that achieves the best of both the OT and the CRDT worlds: it avoids the overheads of CRDTs while simultaneously offering fast merges.\nOur implementation of Eg-walker outperforms existing CRDT and OT algorithms in most editing scenarios, while also using less memory, having smaller file sizes, and supporting peer-to-peer collaboration without a central server.\n*(TODO: quantify the performance improvement?)*\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software.\n\n\n= Introduction <introduction>\n\nReal-time collaborative editing has become an essential feature for many types of software, including document editors such as Google Docs, Microsoft Word, or Overleaf, and graphics software such as Figma.\nIn such software, each user's device locally maintains a copy of the shared file (e.g. in a tab of their web browser).\nA user's edits to the file are immediately applied to their own local copy, without waiting for a network round-trip, in order to ensure that the user interface is responsive regardless of network latency.\nDifferent users may therefore make edits concurrently, and the software must merge such concurrent edits in a way that preserves the users' intentions, and ensuring that all devices converge towards the same state.\n\nFor example, in @two-inserts, two users initially have the same document \"Helo\".\nUser 1 inserts a second letter \"l\" at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $italic(\"Insert\")(3, \\\"l\\\")$ it can apply it to obtain \"Hello!\", but when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ it cannot apply that operation as-is, since that would result in the state \"Hell!o\", which would be inconsistent with the other user's state and the intended insertion position.\nDue to the concurrent insertion at an earlier index, user 1 must insert the exclamation mark at index 5.\n\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\")\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\")\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\nOT is simple and fast in the case of @two-inserts, where each user performed only one operation since the last version they had in common.\nIn general, if user 1 performed $k$ operations and user 2 performed $m$ operations since their last common version, merging their states using OT has a cost of at least $O(k m)$, since each of the $k$ operations must be transformed with respect to each of the $m$ operations and vice versa.\nSome OT algorithms have a complexity that is quadratic or even cubic in the number of operations performed by each user @Li2006 @Roh2011RGA @Sun2020OT.\nThis is acceptable for online collaboration where $k$ and $m$ are typically small, but if users may edit a document offline or if the software supports explicit branching and merging workflows @Upwelling, an algorithm with complexity $O(k m)$ can become impracticably slow.\n\n_Conflict-free Replicated Data Types_ (CRDTs) have been proposed as an alternative to OT.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006WOOT, and over a dozen text CRDTs have been published since @crdt-papers.\nThese algorithms work by giving each character a unique identifier, and using those IDs instead of integer indexes to identify the position of insertions and deletions in the document.\nThis avoids having to transform operations (since IDs are not affected by concurrent operations), but storing and transmitting those IDs introduces overhead.\nMoreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead.\n\nIn this paper we propose _Event Graph Walker_ (Eg-walker), an approach to collaborative editing that combines the strengths of OT and CRDT in a single algorithm.\nLike OT, Eg-walker uses integer indexes to identify insertion and deletion positions, and it avoids the overheads of CRDTs at times when there is no concurrency.\nOn the other hand, when two users concurrently perform $k$ and $m$ operations respectively, Eg-walker can merge them at a cost of $O((k+m) log (k+m))$, which is much faster than the cost of $O(k m)$ or worse incurred by OT algorithms.\n\nTo merge concurrent operations, Eg-walker must also transform the indexes of insertions and deletions like in @two-inserts.\nInstead of transforming one operation with respect to one other operation, as in OT, Eg-walker transforms sets of concurrent operations by first building a temporary data structure that reflects all of the operations that have occurred since the last version they had in common, and then using that structure to transform each operation.\nIn fact, we use a CRDT to implement this data structure.\nHowever, unlike existing algorithms, we only invoke the CRDT to perform merges, and we avoid the CRDT overhead whenever operations are not concurrent (which is the common case in most editing workflows).\nMoreover, we use the CRDT only temporarily for merges; we never write CRDT data to disk and never send it over the network.\n\nThe fact that both sequential operations and large merges are fast makes Eg-walker suitable for both real-time collaboration and offline work.\nEg-walker also assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, Eg-walker's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nIn this paper we focus on collaborative editing of plain text files, although we believe that our approach could be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, etc.\n\nThis paper makes the following contributions:\n\n- TODO\n- We introduce the eg-walker algorithm.\n- In @benchmarking we evaluate the performance of eg-walker, comparing it to equivalent CRDT based approaches on file size, CPU time and memory usage in real world editing environments. Eg-walker is usually faster and smaller than equivalent CRDT based approaches in our real world data sets. However, in our testing we have found modern CRDTs outperform eg-walker in case of extreme concurrency (for example, very complex git editing histories).\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs\n\nWe represent the editing history of a document as an _event graph_, which is a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert or delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen the parents of event $b$ contain the ID of event $a$, we say $a$ is a _parent_ of $b$, $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, but neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by simply taking the union of their sets of events.\nEvents in the graph are immutable.\nThey always represents the operation as it was originally generated, and not as a result of any transformation operation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider an event, like $italic(\"Delete\")(i)$. This event deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nHence, for all valid event graphs $G$, we have $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence also be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, a version rarely consists of more than two events in practice.\n\n== Replaying editing history\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nThus, regardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n= The Event Graph Walker algorithm\n\nEg-walker is a collaborative text editing algorithm based on the idea of replaying an event graph.\nThe algorithm builds on a replication layer that ensures that all non-crashed replicas eventually receive every event that any replica adds to the graph.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that eg-walker uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\nEg-walker can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort, and then transforms each event so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\n\n\nIt first performs a topological sort, as illustrated in @topological-sort.\nThen each event is transformed so that, when applied in order, the transformed operations will produce the resulting document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\nIn graphs with concurrent operations there are multiple possible sort orders, and eg-walker guarantees that the final document state is the same, regardless which of these orders is chosen.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; eg-walker either first inserts \"l\" at index 3 and then the exclamation mark at index 5 (like User 1 in @two-inserts), or first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts); the final document state is \"Hello!\" either way.\nHowever, the choice of sort order affects the performance of the algorithm, as discussed in @complexity.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of Eg-walker <characteristics>\n\nEg-walker ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of the document on each branch of the event graph, to translate each event into a corresponding CRDT operation (based on the document state in which that event was generated), and when branches in the event graph merge, to apply the CRDT operations from one branch to the other branch's state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nHowever, doing this naively leads to poor performance, because the CRDT overhead is incurred on every operation.\n\nEg-walker is able to achieve much better performance by skipping the CRDT entirely in portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of the graph), and using the CRDT only for concurrent events.\nWhen processing an event that has no concurrent events, eg-walker is able to discard all of the internal state accumulated so far, keeping the data structure small.\nA key contribution of eg-walker is that it can compute the correct transformed operations even though the internal state may reflect only a small part of the event graph.\n\nMoreover, eg-walker does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state; the event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\nEg-walker's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis can use significant amounts of memory and can make documents slow to load.\n\nOT algorithms avoid this internal state; similarly to eg-walker, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both eg-walker and OT, the editing history/event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms have asymptotically worse performance than eg-walker in transforming concurrent operations (see @complexity).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas eg-walker handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of eg-walker that replays the entire event graph without discarding its internal state along the way, and that incurs CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$; we avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in reverse order while returning from the traversal.\nWhen a node has multiple children, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be $e_2$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ back into the prepare state again. We do this by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$; subsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which they traverse the event graph.\nAny list CRDT could be used for this purpose; the main differences between algorithms are their performance and their interleaving characteristics @fugue.\nOur implementation of eg-walker uses a variant of the Yjs algorithm @yjs @Nicolaescu2016YATA that we conjecture to be maximally non-interleaving; we leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal eg-walker state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally the exclamation mark is inserted after the \"y\".\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply; in order to update eg-walker's internal state, we need to map these to the correct record in the sequence.\nMoreover, to produce the transformed operations, we need to map the positions of these internal records back to indexes again.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow it is easy to find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nBesides the sequence of records, the internal state also includes a mapping from event ID to the record in the sequence affected by that event.\nOn every $sans(\"apply\")(e)$ we use the above process to identify the target record in the sequence, and then we store the mapping from $e.italic(\"id\")$ to the target record ID.\nWhen we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nWe can therefore ignore the operation index when retreating and advancing, and instead use the event ID to look up the record to be updated.\nTo this end we maintain a second B-tree that is keyed by record ID, and which points at the leaf nodes of the first B-tree.\nThis tree allows us to advance or retreat in logarithmic time.\nWhen nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows eg-walker to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either included in $V$ or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nIf a version is critical, that does not guarantee that it will remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\nThis concept enables several key optimisations:\n\n- If the version of the event graph processed so far is critical, we can discard all of the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If the parents of the next event are equal to the version of the event graph processed so far, we just output the unmodified operation from the event as the transformed operation.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway; we can just skip this work.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\nMoreover, the internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\n\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new event, replaying the existing events that happened after that critical version (in topologically sorted order), and finally applying the new events.\nEvents from before that critical version do not need to be replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph needs to be replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nHowever, a key insight in the design of eg-walker is that the exact internal state at $V_\"crit\"$ is not needed; all we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order.\nFor example, using the graph in @topological-sort, say the current state is $G = {e_\"A1\" ... e_\"A5\", e_\"B1\" ... e_\"B4\"}$, so $V_\"curr\" = {e_\"A5\", e_\"B4\"}$, and the new event $e_\"new\" = e_\"C1\"$.\nThen $V_\"crit\" = {e_\"A1\"}$ is the most recent critical version.\n\nThe algorithm then works as follows:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we replay the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we replay them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in the mapping from event ID to internal state record.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of the order statistic tree, and at most one traversal of the ID-keyed B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nTo determine the worst-case complexity of replaying an event graph with $n$ events, note that each event is applied exactly once, and before each event we can at most retreat or advance each prior event once.\nThe overall worst-case complexity of the algorithm is therefore $O(n^2 log n)$; however, this case is unlikely to occur in realistic collaborative text editing scenarios.\n\n== Storing the event graph <storage>\n\nThe event graph can be stored on disk in a very compact way by using a few compression tricks that take advantage of the ways that people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\nEg-walker's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005.\n\nWe topologically sort the events in the graph; different replicas may sort the set differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nThe columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We simply concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and then LZ4-compress this string.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using the $(italic(\"replicaID\"), italic(\"seqNo\"))$ event IDs, but otherwise a similar encoding can be used.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n\n// TODO: anonymise the references to repos for the conference submission\nWe implemented two versions of eg-walker: one in TypeScript that is optimised for code simplicity @reference-reg, and one in Rust (as part of the _Diamond Types_ library @dt) that is optimised for performance.\nThe TypeScript implementation omits the B-trees, run-length encoding, and other optimisations, but its behaviour is equivalent to the Rust implementation.\nThe benchmarks in this section use the Rust version.\nDetails of the hardware and software setup of our experiments are given in @benchmark-setup.\n\n== Editing traces\n\n// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n#let stats_for(name, type) = {\n  let data = json(\"results/stats_\" + name + \".json\")\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Avg. width*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n    ..stats_for(\"automerge-paper\", \"seq\"),\n    ..stats_for(\"seph-blog1\", \"seq\"),\n    ..stats_for(\"egwalker\", \"seq\"),\n    ..stats_for(\"friendsforever\", \"conc\"),\n    ..stats_for(\"clownschool\", \"conc\"),\n    ..stats_for(\"node_nodecc\", \"async\"),\n    ..stats_for(\"git-makefile\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of inserted and deleted characters (in thousands). _Average width_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n/ Sequential Traces: (\"seq\"): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf and the text of an 8,800-word blog post @crdts-go-brrr.\n/ Concurrent Traces: (\"conc\"): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (\"async\"): We reconstruct an editing trace for a file in a Git repository, with concurrency mirroring the branching/merging of the Git commits. Since Git does not record individual keystrokes, we generate the minimal edit operations required for each commit's diff. We use `Makefile` from the Git repository for Git itself @git-makefile, and `src/node.cc` from the Git repository for Node.js @node-src-nodecc. These are some of the most-edited files in their respective repositories, with complex event graphs containing merges of six branches.\n\nThe traces vary in size by more than an order of magnitude.\nTo allow comparisons across traces, instead of reporting the runtime to replay an event graph, we report the replay throughput (in units of millions of events per second).\n// TODO: is it millions of run-length encoded event sequences, or millions of individual events (as reported in @traces-table)?\n\n== Eg-walker compared to CRDTs\n\n// TODO: anonymisation of this paragraph\nWe compare eg-walker to several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy.\nHowever, they vary wildly in performance: we observed a 500x difference between the best and worst performing library we tested.\n// Yjs is 500x slower than Cola in this test (2056ms vs 4ms).\nIn order to fairly evaluate the algorithmic differences between eg-walker and CRDTs, rather than the implementation differences, we wrote our own optimised CRDT implementation, _dt-crdt_ @dt-crdt, using the same language (Rust), code style, data structures, and optimisations as eg-walker.\nThe optimisations are documented in a blog post @crdts-go-brrr.\n@chart-one-local shows that the performance of dt-crdt is competitive with the best existing CRDT libraries when replaying one of our editing traces.\n\n// TODO: what exactly does this graph actually measure? only preparing ops, or also effect? Maybe it would be better to measure only effect (applying remote ops) by expanding <chart-all-remote> to show all CRDT libraries?\n// TODO: rather than removing the cursor caching optimisation from Cola, would it make sense to add it to dt-egwalker?\n#figure(\n  text(8pt, charts.one_local),\n  caption: [\n    Replay throughput for the seph-blog1 trace using various CRDTs libraries. Cola is faster than dt-crdt due to its GTree @cola-gtree implementation using local cursor caching. When this is disabled (_cola-nocursor_), performance is similar to dt-crdt. Yjs performs much better when processing remote events. Tested version numbers in @benchmark-setup.\n  ],\n  kind: image,\n  placement: top,\n) <chart-one-local>\n\nOne performance-critical aspect of CRDTs is loading the internal state from disk into memory, which is required for viewing the current document state and making any changes.\nThis can take a significant amount of CPU time and memory (*TODO: quantify*), even on highly optimised implementations.\nWith eg-walker, loading a document is essentially \"free\", since we only need to load the current document state (a plain text file); viewing the document and making changes does not require the event graph.\n\nEg-walker only needs to load and replay the event graph in order to merge events from remote replicas that are concurrent with events that already exist locally.\nThe equivalent process in a CRDT is to integrate remote operations into the local state.\nDuring real-time collaboration, this is typically a small number of operations that are based on a version that is only slightly behind the local version; merging these operations is fast on both CRDTs and eg-walker, since eg-walker only has to replay a small subset of the event graph.\n\nA more demanding situation arises when a user has been working offline and sends an accumulated batch of operations to their collaborators, and the other replicas need to integrate that batch of remote operations into their local state.\nTo simulate an extreme version of this scenario, we imagine that the work done offline is one of our entire edit traces, and we measure the time taken to integrate that work into another replica: eg-walker needs to replay the entire edit trace, and a CRDT needs to apply the equivalent set of CRDT operations from the remote replica.\nWe do not include the time it took to generate the CRDT operations on the source replica, since that computation happens in the background as the user is typing.\n\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    The speed of eg-walker event graph replay, compared to merging the equivalent set of CRDT operations.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\n@chart-remote shows that in this scenario, eg-walker is very fast: on sequential traces it is around 5$times$ faster to replay the event graph than to integrate the equivalent remote operations into dt-crdt, and in the worst case eg-walker has about half the throughput of dt-crdt.\nIn absolute terms, our slowest test case (_git-makefile_) took just 15ms to process.\nEg-walker processes over 1M events per second in all the traces we have.\n@chart-all-remote compares the same workload on other CRDT libraries; eg-walker outperforms both Yjs and Automerge on almost all traces.\n\n// TODO: add eg-walker to this chart (with the y axis fixed to 0-3 Mevents/sec)\n#figure(\n  text(8pt, charts.all_speed_remote),\n  caption: [\n    The speed of merging remote operations into a replica's local state in several CRDT implementations.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-remote>\n\n== Eg-walker performance and concurrency\n\nEg-walker is especially fast on traces that are mostly (e.g., `node_nodecc`) or entirely sequential.\nThis is because we can clear the internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare eg-walker's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the ratio of replay throughput between the optimised and the unoptimised versions for several traces.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the eg-walker state size while processing the _friendsforever_ data set, with and without internal state clearing enabled.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Performance of eg-walker with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _git-makefile_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of eg-walker is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled eg-walker's built-in LZ4 and Automerge's built-in gzip compression; enabling this compression further reduces the file sizes.\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, eg-walker has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\nIn contrast, Yjs does not store any deleted characters, which results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using eg-walker's event graph encoding and Automerge.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>\n\n\n= Related Work <related-work>\n\nEg-walker is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 consider only datatypes such as maps, sets, and registers; eg-walker adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with eg-walker: both are based on traversing an event graph, with operations being transformed from the form in which they were originally generated into a form that can be applied in topologically sorted order to obtain the current document state.\nToomim also points out that CRDTs can be used to perform this transformation.\nEg-walker is a concrete, optimised implementation of the time machine approach; novel contributions of eg-walker include updating the prepare version by retreating and advancing, as well as the details of partial event graph replay.\n\nEg-walker can also be regarded as an _operational transformation_ (OT) algorithm @Ellis1989, since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research, tracing back to several seminal papers in the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms follow a pattern of two sub-algorithms: a set of _transformation functions_ that transform one operation with regard to one other, concurrent operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformation functions.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$, as each operation from one branch needs to be transformed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\nEg-walker departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the theoretical upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding eg-walker, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\nOther prominent collaborative text editing algorithms belong to the _conflict-free replicated data types_ (CRDTs) family @Shapiro2011, with early examples including RGA @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue being more recent.\nTo our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persisted for the lifetime of the document and sent to all replicas, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead.\nIn contrast, eg-walker uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\nEg-walker does need to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT metadata, and it only needs to be memory-resident to handle concurrent operations; most of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n\nVersion control systems such as Git, as well as differential synchronization @Fraser2009, perform merges by diffing the old and new states on one branch, and applying the diff to the other branch.\nApplying patches relies on heuristics, such as searching for some amount of context before and after the modified text passage, which can apply the patch in the wrong place if the same context exists in multiple locations, and which can fail if the context has concurrently been modified.\nThese approaches therefore generally require manual merge conflict resolution and don't ensure automatic replica convergence.\n\n\n= Conclusion\n\nEg-walker is a new approach to collaborative text editing that has significant performance advantages over existing OT and CRDT algorithms.\nCompared to CRDTs, it uses less memory, files are smaller and faster to load, and edits from other users are merged much faster in documents with largely sequential editing.\nCompared to OT, large merges (e.g., from users who did a significant amount of work while offline) are much faster, both asymptotically and in practice, and peer-to-peer collaboration is robustly supported.\n\nMoreover, since eg-walker stores the full keystroke-granularity editing history of a document, it allows applications to show that history to the user, and to restore arbitrary past versions of a document.\nThe only downsides we have found with eg-walker is that it is more complex to implement, and it is somewhat slower than an optimised CRDT on event graphs with a high degree of concurrency (though easily fast enough for practical use, with merging throughput of over 1 million events/sec).\n\nThe underlying event graph is a straightforward representation of the edits that have occurred, which is easy to replicate over any network, and which is not specific to the eg-walker algorithm.\nWe therefore expect that the same data format will be able to support future collaborative editing algorithms as well, without requiring the data format to be changed.\nWe also believe that eg-walker can be extended to other file types such as rich text, graphics, or spreadsheets, and we believe that this is a promising direction for future research in realtime editing.\n\n#if not anonymous [\n  #heading(numbering: none, [Acknowledgements])\n\n  This work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n]\n\n#show bibliography: set text(8pt)\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n\n#counter(heading).update(0)\n#set heading(numbering: \"A\", supplement: \"Appendix\")\n\n= Generic CRDT to replay algorithm <generic-crdt-replay>\n\nIn this section, we present a generic replay function which matches the behaviour of any CRDT.\n\nThis algorithm is presented in Haskell. In other programming languages, this algorithm would need to actively memoize some function return values to prevent exponential time complexity. In @am-converter we present an equivalent algorithm in Rust, presented using Automerge@automerge to replay sequence editing events - though the algorithm could easily be adapted to use any event source and compatible CRDT.\n\nGiven the CRDT is defined by the following set of methods:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n  ```haskell\n  initialState :: CRDT\n  query :: CRDT -> Doc\n\n  -- Modify a CRDT by applying a local update.\n  update :: (CRDT, (Id, Event)) -> CRDT\n\n  -- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\n  merge :: (CRDT, CRDT) -> CRDT\n\n  mergeAll :: [CRDT] -> CRDT\n  mergeAll crdts = foldl initialState crdts\n  ```\n]\n\nThe replay function then can be defined recursively like this:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n]\n\n// CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n\n\n= Benchmark Setup <benchmark-setup>\n\nAll benchmarks were run on a Ryzen 7950x CPU running Linux 6.2.0-39.\n\nRust code was compiled with `rustc v1.74.1` and compiled in release mode with `-C target-cpu=native`. Code is run on a single, pinned core for consistency.\n\nJavascript was run using `nodejs v21.5.0`.\n\nAll time based measurements are based on the mean of at least 100 test iterations. All benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n#table(\n  columns: (auto, auto, auto),\n  align: (left, left, right, right, right, right),\n  [*Library*], [*Language*], [*Version / Git Hash*],\n  [Diamond Types (DT / DT-CRDT)], [Rust], [`7adf4bafeccb`],\n  [Automerge], [Rust], [v 0.5.5],\n  [Yjs], [Javascript], [v 13.6.10],\n  [JSON-Joy], [Javascript], [`38392b30228a`],\n  [Cola], [Rust], [v 0.1.1],\n)\n\nCola with cursor optimisation removed is available at `https://github.com/josephg/cola-nocursors/`. //#link(https://github.com/josephg/cola-nocursors/).\n\n/*\n#import \"@preview/algorithmic:0.1.0\"\n#import algorithmic: algorithm\n\n#algorithm({\n  import algorithmic: *\n  Function(\"ResetState\", args: (\"state\",), {\n    Assign[state][dummy data]\n  })\n\n  Function(\"TransformPartial\", args: ($G$, $V_0$, $V_m$), {\n    Assign[$s$][(dummy data)]\n    Assign[$C$][$\"greatestCommonVersion\"(G)$]\n\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" C, \"to:\" V_0)$], {\n      // Cmt[As above]\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      Fn[effect][$s$, $m$]\n    })\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" V_0, \"to:\" V_0 union V_m)$], {\n      If(cond: [$\"isCriticalVersion\"(P_i)$], {\n        Assign[$s$][(dummy data)]\n        If(cond: [$\"isCriticalVersion\"({i})$], {\n          State[#smallcaps(\"yield\") $e_i$]\n          State(smallcaps(\"Continue\"))\n        })\n      })\n\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      State[#smallcaps(\"yield\") #FnI[effect][$s$, $m$]]\n    })\n  })\n})\n*/\n\n/*\n== Example optimised version_contains_ID function <example-localid-algorithm>\n\n> Blah that section title.\n\nThis is an optimised function for checking if a version contains some local ID. Ie, this function checks if $i in ceil(V)$ for some event $i$ and some version $V$.\n\nThe algorithm does a bounded breadth first search within the event graph, checking events where:\n\n- The event is within $ceil(V)$\n- The local ID of the event is $>=$ the local ID of the search target.\n\nFor simplicity, the algorithm given below does not take advantage of run-length encoding. In our implementation, we also run-length encode all items in the event graph. This optimisation yields another large performance gain at the cost of some implementation complexity.\n\nWe have implemented a family of similar algorithms for querying the event graph, including functions to find the set difference, set union and set intersection between versions. See XXXX github.com/josephg/causal-graphs / diamond-types/src/cg/graph/tools.rs . TODO\n\n```typescript\nfunction versionContainsLocalId(graph: EventGraph, version: LocalID[], target: LocalId): boolean => {\n  // Max heap. The highest local ID is removed first.\n  let queue = new PriorityQueue<LocalID>()\n\n  // Any ID < target is not relevant due to the ordering constraint.\n  for (let id of version) {\n    if (id == target) return true\n    else if (id > target) queue.enq(id)\n  }\n\n  while (queue.length > 0) {\n    let id = queue.deq()\n    if (id === target) return true\n\n    // Clear any other queue items pointing to this entry.\n    while (queue.peek() == id) queue.deq()\n\n    for (let p of graph.getParents(id)) {\n      if (p === target) return true\n      else if (p > target) queue.enq(p)\n    }\n  }\n\n  return false\n}\n\n```\n\n*/\n\n/*\n== Optimised diff function using local IDs <diff>\n\nThis is an optimised graph diff function. It computes the difference between the graphs $ceil(V_1)$ and $ceil(V_2)$, and returns the sets of event IDs that are only in $V_1$ and only in $V_2$.\n\nThis algorithm takes advantage of local IDs to compute the set difference efficiently.\n\nFor simplicity, the algorithm given here does not take advantage of run-length encoding. In our implementation, we also run-length encode all items in the event graph. This optimisation yields another large performance gain at the cost of some implementation complexity. See XXXX github.com/josephg/causal-graphs . TODO\n\n```typescript\ntype LocalId = number // Local IDs are just integers.\nenum Flag { V1Only, V2Only, Shared }\n\nfunction diff(graph: EventGraph, v1: LocalId[], v2: LocalId[]) {\n  // Max heap. The highest local ID is removed first.\n  let queue = new PriorityQueue<(LocalId, Flag)>()\n\n  // Number of items in the queue in both transitive histories (state Shared).\n  let numShared = 0\n\n  for (let id of v1) queue.push((id, Flag.V1Only))\n  for (let id of v2) queue.push((id, Flag.V2Only))\n\n  let v1Only = [], v2Only = []\n\n  // Loop until everything is shared.\n  while (queue.size() > numShared) {\n    let (id, flag) = queue.pop()\n    if (flag === Flag.Shared) numShared--\n\n    // If the next item in the queue\n    while (!queue.isEmpty() && queue.peek().0 == id) {\n      let (_, flag2) = queue.pop() // Remove the item\n      if (flag2 === Flag.Shared) numShared--;\n      if (flag2 !== flag) flag = Flag.Shared\n    }\n\n    if (flag == Flag.V1Only) v1Only.push(id)\n    if (flag == Flag.V2Only) v2Only.push(id)\n\n    for (let p of graph.getParents(id)) queue.push((p, flag))\n    if (flag == Flag.Shared) numShared += cg.getParents(id).length\n  }\n\n  return {v1Only, v2Only}\n}\n\n```\n\n*/\n\n/*\n== The List formulation of FugueMax <list-fuguemax-code>\n\nThe function below is a reimplementation of the logic of FugueMax, expressed as a list insertion. See @fugue-list above for commentary.\n\n```typescript\nfunction integrate(ctx: EditContext, cg: causalGraph.CausalGraph, newItem: Item, cursor: DocCursor) {\n  if (cursor.idx >= ctx.items.length || ctx.items[cursor.idx].curState !== ItemState.NotYetInserted) return\n\n  let scanning = false\n  let scanIdx = cursor.idx\n  let scanEndPos = cursor.endPos\n\n  let leftIdx = cursor.idx - 1\n  let rightIdx = newItem.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, newItem.rightParent)\n\n  while (scanIdx < ctx.items.length) {\n    let other = ctx.items[scanIdx]\n\n    if (other.opId === newItem.rightParent) throw Error('invalid state')\n\n    // The index of the origin left / right for the other item.\n    let oleftIdx = other.originLeft === -1 ? -1 : findItemIdx(ctx, other.originLeft)\n    if (oleftIdx < leftIdx) break\n    else if (oleftIdx === leftIdx) {\n      let orightIdx = other.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, other.rightParent)\n\n      if (orightIdx === rightIdx && causalGraph.lvCmp(cg, newItem.opId, other.opId) < 0) break\n      else scanning = orightIdx < rightIdx\n    }\n\n    scanEndPos += itemWidth(other.endState)\n    scanIdx++\n\n    if (!scanning) {\n      cursor.idx = scanIdx\n      cursor.endPos = scanEndPos\n    }\n  }\n\n  // We've found the position. Insert where the cursor points.\n  ctx.insert(newItem, cursor)\n}\n```\n*/\n"],[0,89750,""],[0,0,"// #import \"@preview/cetz:0.1.2\": canvas, plot, draw\n// #import \"@preview/fletcher:0.2.0\" as fletcher: node, edge\n#import \"@preview/fletcher:0.3.0\" as fletcher: node, edge\n#import \"@preview/ctheorems:1.1.0\": *\n#import \"@preview/algo:0.3.3\": algo, i, d, comment, code\n// #import \"@preview/lovelace:0.1.0\": *\n#import \"@preview/algorithmic:0.1.0\": algorithm\n#import \"@preview/cetz:0.1.2\"\n#import \"charts.typ\"\n#show: thmrules\n\n#let anonymous = false\n\n#set page(\n  paper: \"a4\",\n  numbering: \"1\",\n  // 178 × 229 mm text block on an A4 page (210 × 297 mm)\n  margin: (x: (210 - 178) / 2 * 1mm, y: (297 - 229) / 2 * 1mm),\n)\n\n// 10pt text with 12pt leading\n#set text(font: \"Linux Libertine\", size: 10pt)\n#let spacing = 0.55em\n#set par(justify: true, first-line-indent: 1em, leading: spacing)\n#show par: set block(spacing: spacing)\n//#show math.equation: set text(font: \"Libertinus Math\")\n\n#set heading(numbering: \"1.1.1\")\n\n// Heading formatting from https://gist.github.com/vtta/d6268ba81ebfdd1dc573db4b72df8436\n#show heading: it => locate(loc => {\n  // Find out the final number of the heading counter.\n  let levels = counter(heading).at(loc)\n  let deepest = if levels != () { levels.last() } else { 1 }\n  v(2 * spacing, weak: true)\n  if it.level == 1 {\n    let no-numbering = it.body in ([Abstract], [Acknowledgments], [Acknowledgment])\n    block(text(size: 12pt, {\n      if it.numbering != none and not no-numbering{ \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else if it.level == 2 {\n    block(text(size: 10pt,{\n      if it.numbering != none { \n        numbering(it.numbering, ..levels)\n        h(spacing, weak: true)\n      }\n      it.body\n      v(1.5 * spacing, weak: true)\n    }))\n  } else {\n    if it.numbering != none { \n      h(-1em)\n      numbering(it.numbering, ..levels)\n      h(spacing, weak: true)\n    }\n    it.body + [.]\n  }\n})\n\n#set enum(indent: 10pt, body-indent: 9pt)\n#set list(indent: 10pt, body-indent: 9pt)\n\n#show figure.where(kind: table): set figure.caption(position: top)\n\n#show figure.caption: it => align(left, par(first-line-indent: 0pt, [\n  #text(weight: \"bold\", [#it.supplement #it.counter.display(it.numbering).])\n  #it.body\n]))\n\n#let definition = thmbox(\"definition\", \"Definition\",\n  base_level: 0,\n  fill: rgb(\"#f8e8e8\")\n)\n\n#let claim = thmbox(\"claim\", \"Claim\",\n  base_level: 0,\n  fill: rgb(\"#e8e8f8\")\n)\n\n#align(center, text(20pt)[\n  *Eg-walker: Text editing on the Event Graph*\n])\n\n#if anonymous {\n  align(center, text(12pt)[\n    Anonymous Author(s) \\\n    Submission ID: TODO\n  ])\n} else {\n  grid(\n    columns: (1fr, 1fr),\n    align(center, text(12pt)[\n      Joseph Gentle \\\n      #link(\"mailto:me@josephg.com\")\n    ]),\n\n    align(center, text(12pt)[\n      Martin Kleppmann \\\n      University of Cambridge, UK \\\n      #link(\"mailto:martin@kleppmann.com\")\n    ])\n  )\n}\n\n#show: columns.with(2, gutter: 8mm)\n\n#heading(numbering: none, [Abstract])\n\nCollaborative text editing algorithms allow several users to concurrently modify a text file, and automatically merge concurrent edits into a consistent state.\nExisting collaboration algorithms are either slow to merge files that have diverged substantially due to offline editing (in the case of Operational Transformation/OT), or incur overheads due to giving a unique ID to every character (in the case of CRDTs).\nWe introduce Eg-walker, a collaboration algorithm for text that achieves the best of both the OT and the CRDT worlds: it avoids the overheads of CRDTs while simultaneously offering fast merges.\nOur implementation of Eg-walker outperforms existing CRDT and OT algorithms in most editing scenarios, while also using less memory, having smaller file sizes, and supporting peer-to-peer collaboration without a central server.\n*(TODO: quantify the performance improvement?)*\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software.\n\n\n= Introduction <introduction>\n\nReal-time collaborative editing has become an essential feature for many types of software, including document editors such as Google Docs, Microsoft Word, or Overleaf, and graphics software such as Figma.\nIn such software, each user's device locally maintains a copy of the shared file (e.g. in a tab of their web browser).\nA user's edits to the file are immediately applied to their own local copy, without waiting for a network round-trip, in order to ensure that the user interface is responsive regardless of network latency.\nDifferent users may therefore make edits concurrently, and the software must merge such concurrent edits in a way that preserves the users' intentions, and ensuring that all devices converge towards the same state.\n\nFor example, in @two-inserts, two users initially have the same document \"Helo\".\nUser 1 inserts a second letter \"l\" at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $italic(\"Insert\")(3, \\\"l\\\")$ it can apply it to obtain \"Hello!\", but when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ it cannot apply that operation as-is, since that would result in the state \"Hell!o\", which would be inconsistent with the other user's state and the intended insertion position.\nDue to the concurrent insertion at an earlier index, user 1 must insert the exclamation mark at index 5.\n\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\")\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\")\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\nOT is simple and fast in the case of @two-inserts, where each user performed only one operation since the last version they had in common.\nIn general, if user 1 performed $k$ operations and user 2 performed $m$ operations since their last common version, merging their states using OT has a cost of at least $O(k m)$, since each of the $k$ operations must be transformed with respect to each of the $m$ operations and vice versa.\nSome OT algorithms have a complexity that is quadratic or even cubic in the number of operations performed by each user @Li2006 @Roh2011RGA @Sun2020OT.\nThis is acceptable for online collaboration where $k$ and $m$ are typically small, but if users may edit a document offline or if the software supports explicit branching and merging workflows @Upwelling, an algorithm with complexity $O(k m)$ can become impracticably slow.\n\n_Conflict-free Replicated Data Types_ (CRDTs) have been proposed as an alternative to OT.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006WOOT, and over a dozen text CRDTs have been published since @crdt-papers.\nThese algorithms work by giving each character a unique identifier, and using those IDs instead of integer indexes to identify the position of insertions and deletions in the document.\nThis avoids having to transform operations (since IDs are not affected by concurrent operations), but storing and transmitting those IDs introduces overhead.\nMoreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead.\n\nIn this paper we propose _Event Graph Walker_ (Eg-walker), an approach to collaborative editing that combines the strengths of OT and CRDT in a single algorithm.\nLike OT, Eg-walker uses integer indexes to identify insertion and deletion positions, and it avoids the overheads of CRDTs at times when there is no concurrency.\nOn the other hand, when two users concurrently perform $k$ and $m$ operations respectively, Eg-walker can merge them at a cost of $O((k+m) log (k+m))$, which is much faster than the cost of $O(k m)$ or worse incurred by OT algorithms.\n\nTo merge concurrent operations, Eg-walker must also transform the indexes of insertions and deletions like in @two-inserts.\nInstead of transforming one operation with respect to one other operation, as in OT, Eg-walker transforms sets of concurrent operations by first building a temporary data structure that reflects all of the operations that have occurred since the last version they had in common, and then using that structure to transform each operation.\nIn fact, we use a CRDT to implement this data structure.\nHowever, unlike existing algorithms, we only invoke the CRDT to perform merges, and we avoid the CRDT overhead whenever operations are not concurrent (which is the common case in most editing workflows).\nMoreover, we use the CRDT only temporarily for merges; we never write CRDT data to disk and never send it over the network.\n\nThe fact that both sequential operations and large merges are fast makes Eg-walker suitable for both real-time collaboration and offline work.\nEg-walker also assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, Eg-walker's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nIn this paper we focus on collaborative editing of plain text files, although we believe that our approach could be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, etc.\n\nThis paper makes the following contributions:\n\n- TODO\n- We introduce the eg-walker algorithm.\n- In @benchmarking we evaluate the performance of eg-walker, comparing it to equivalent CRDT based approaches on file size, CPU time and memory usage in real world editing environments. Eg-walker is usually faster and smaller than equivalent CRDT based approaches in our real world data sets. However, in our testing we have found modern CRDTs outperform eg-walker in case of extreme concurrency (for example, very complex git editing histories).\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs\n\nWe represent the editing history of a document as an _event graph_, which is a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert or delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen the parents of event $b$ contain the ID of event $a$, we say $a$ is a _parent_ of $b$, $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, but neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by simply taking the union of their sets of events.\nEvents in the graph are immutable.\nThey always represents the operation as it was originally generated, and not as a result of any transformation operation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider an event, like $italic(\"Delete\")(i)$. This event deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nHence, for all valid event graphs $G$, we have $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence also be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, a version rarely consists of more than two events in practice.\n\n== Replaying editing history\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nThus, regardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n= The Event Graph Walker algorithm\n\nEg-walker is a collaborative text editing algorithm based on the idea of replaying an event graph.\nThe algorithm builds on a replication layer that ensures that all non-crashed replicas eventually receive every event that any replica adds to the graph.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that eg-walker uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\nEg-walker can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort, and then transforms each event so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\nIn graphs with concurrent operations there are multiple possible sort orders, and eg-walker guarantees that the final document state is the same, regardless which of these orders is chosen.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; eg-walker either first inserts \"l\" at index 3 and then the exclamation mark at index 5 (like User 1 in @two-inserts), or first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts); the final document state is \"Hello!\" either way.\nHowever, the choice of sort order affects the performance of the algorithm, as discussed in @complexity.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of Eg-walker <characteristics>\n\nEg-walker ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of the document on each branch of the event graph, to translate each event into a corresponding CRDT operation (based on the document state in which that event was generated), and when branches in the event graph merge, to apply the CRDT operations from one branch to the other branch's state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nHowever, doing this naively leads to poor performance, because the CRDT overhead is incurred on every operation.\n\nEg-walker is able to achieve much better performance by skipping the CRDT entirely in portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of the graph), and using the CRDT only for concurrent events.\nWhen processing an event that has no concurrent events, eg-walker is able to discard all of the internal state accumulated so far, keeping the data structure small.\nA key contribution of eg-walker is that it can compute the correct transformed operations even though the internal state may reflect only a small part of the event graph.\n\nMoreover, eg-walker does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state; the event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\nEg-walker's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis can use significant amounts of memory and can make documents slow to load.\n\nOT algorithms avoid this internal state; similarly to eg-walker, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both eg-walker and OT, the editing history/event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms have asymptotically worse performance than eg-walker in transforming concurrent operations (see @complexity).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas eg-walker handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of eg-walker that replays the entire event graph without discarding its internal state along the way, and that incurs CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$; we avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in reverse order while returning from the traversal.\nWhen a node has multiple children, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be $e_2$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ back into the prepare state again. We do this by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$; subsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which they traverse the event graph.\nAny list CRDT could be used for this purpose; the main differences between algorithms are their performance and their interleaving characteristics @fugue.\nOur implementation of eg-walker uses a variant of the Yjs algorithm @yjs @Nicolaescu2016YATA that we conjecture to be maximally non-interleaving; we leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal eg-walker state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally the exclamation mark is inserted after the \"y\".\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply; in order to update eg-walker's internal state, we need to map these to the correct record in the sequence.\nMoreover, to produce the transformed operations, we need to map the positions of these internal records back to indexes again.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow it is easy to find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nBesides the sequence of records, the internal state also includes a mapping from event ID to the record in the sequence affected by that event.\nOn every $sans(\"apply\")(e)$ we use the above process to identify the target record in the sequence, and then we store the mapping from $e.italic(\"id\")$ to the target record ID.\nWhen we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nWe can therefore ignore the operation index when retreating and advancing, and instead use the event ID to look up the record to be updated.\nTo this end we maintain a second B-tree that is keyed by record ID, and which points at the leaf nodes of the first B-tree.\nThis tree allows us to advance or retreat in logarithmic time.\nWhen nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows eg-walker to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either included in $V$ or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nIf a version is critical, that does not guarantee that it will remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\nThis concept enables several key optimisations:\n\n- If the version of the event graph processed so far is critical, we can discard all of the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If the parents of the next event are equal to the version of the event graph processed so far, we just output the unmodified operation from the event as the transformed operation.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway; we can just skip this work.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\nMoreover, the internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\n\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new event, replaying the existing events that happened after that critical version (in topologically sorted order), and finally applying the new events.\nEvents from before that critical version do not need to be replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph needs to be replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nHowever, a key insight in the design of eg-walker is that the exact internal state at $V_\"crit\"$ is not needed; all we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order.\nFor example, using the graph in @topological-sort, say the current state is $G = {e_\"A1\" ... e_\"A5\", e_\"B1\" ... e_\"B4\"}$, so $V_\"curr\" = {e_\"A5\", e_\"B4\"}$, and the new event $e_\"new\" = e_\"C1\"$.\nThen $V_\"crit\" = {e_\"A1\"}$ is the most recent critical version.\n\nThe algorithm then works as follows:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we replay the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we replay them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in the mapping from event ID to internal state record.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of the order statistic tree, and at most one traversal of the ID-keyed B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nTo determine the worst-case complexity of replaying an event graph with $n$ events, note that each event is applied exactly once, and before each event we can at most retreat or advance each prior event once.\nThe overall worst-case complexity of the algorithm is therefore $O(n^2 log n)$; however, this case is unlikely to occur in realistic collaborative text editing scenarios.\n\n== Storing the event graph <storage>\n\nThe event graph can be stored on disk in a very compact way by using a few compression tricks that take advantage of the ways that people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\nEg-walker's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005.\n\nWe topologically sort the events in the graph; different replicas may sort the set differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nThe columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We simply concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and then LZ4-compress this string.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using the $(italic(\"replicaID\"), italic(\"seqNo\"))$ event IDs, but otherwise a similar encoding can be used.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n\n// TODO: anonymise the references to repos for the conference submission\nWe implemented two versions of eg-walker: one in TypeScript that is optimised for code simplicity @reference-reg, and one in Rust (as part of the _Diamond Types_ library @dt) that is optimised for performance.\nThe TypeScript implementation omits the B-trees, run-length encoding, and other optimisations, but its behaviour is equivalent to the Rust implementation.\nThe benchmarks in this section use the Rust version.\nDetails of the hardware and software setup of our experiments are given in @benchmark-setup.\n\n== Editing traces\n\n// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n#let stats_for(name, type) = {\n  let data = json(\"results/stats_\" + name + \".json\")\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Avg. width*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n    ..stats_for(\"automerge-paper\", \"seq\"),\n    ..stats_for(\"seph-blog1\", \"seq\"),\n    ..stats_for(\"egwalker\", \"seq\"),\n    ..stats_for(\"friendsforever\", \"conc\"),\n    ..stats_for(\"clownschool\", \"conc\"),\n    ..stats_for(\"node_nodecc\", \"async\"),\n    ..stats_for(\"git-makefile\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of inserted and deleted characters (in thousands). _Average width_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n/ Sequential Traces: (\"seq\"): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf and the text of an 8,800-word blog post @crdts-go-brrr.\n/ Concurrent Traces: (\"conc\"): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (\"async\"): We reconstruct an editing trace for a file in a Git repository, with concurrency mirroring the branching/merging of the Git commits. Since Git does not record individual keystrokes, we generate the minimal edit operations required for each commit's diff. We use `Makefile` from the Git repository for Git itself @git-makefile, and `src/node.cc` from the Git repository for Node.js @node-src-nodecc. These are some of the most-edited files in their respective repositories, with complex event graphs containing merges of six branches.\n\nThe traces vary in size by more than an order of magnitude.\nTo allow comparisons across traces, instead of reporting the runtime to replay an event graph, we report the replay throughput (in units of millions of events per second).\n// TODO: is it millions of run-length encoded event sequences, or millions of individual events (as reported in @traces-table)?\n\n== Eg-walker compared to CRDTs\n\n// TODO: anonymisation of this paragraph\nWe compare eg-walker to several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy.\nHowever, they vary wildly in performance: we observed a 500x difference between the best and worst performing library we tested.\n// Yjs is 500x slower than Cola in this test (2056ms vs 4ms).\nIn order to fairly evaluate the algorithmic differences between eg-walker and CRDTs, rather than the implementation differences, we wrote our own optimised CRDT implementation, _dt-crdt_ @dt-crdt, using the same language (Rust), code style, data structures, and optimisations as eg-walker.\nThe optimisations are documented in a blog post @crdts-go-brrr.\n@chart-one-local shows that the performance of dt-crdt is competitive with the best existing CRDT libraries when replaying one of our editing traces.\n\n// TODO: what exactly does this graph actually measure? only preparing ops, or also effect? Maybe it would be better to measure only effect (applying remote ops) by expanding <chart-all-remote> to show all CRDT libraries?\n// TODO: rather than removing the cursor caching optimisation from Cola, would it make sense to add it to dt-egwalker?\n#figure(\n  text(8pt, charts.one_local),\n  caption: [\n    Replay throughput for the seph-blog1 trace using various CRDTs libraries. Cola is faster than dt-crdt due to its GTree @cola-gtree implementation using local cursor caching. When this is disabled (_cola-nocursor_), performance is similar to dt-crdt. Yjs performs much better when processing remote events. Tested version numbers in @benchmark-setup.\n  ],\n  kind: image,\n  placement: top,\n) <chart-one-local>\n\nOne performance-critical aspect of CRDTs is loading the internal state from disk into memory, which is required for viewing the current document state and making any changes.\nThis can take a significant amount of CPU time and memory (*TODO: quantify*), even on highly optimised implementations.\nWith eg-walker, loading a document is essentially \"free\", since we only need to load the current document state (a plain text file); viewing the document and making changes does not require the event graph.\n\nEg-walker only needs to load and replay the event graph in order to merge events from remote replicas that are concurrent with events that already exist locally.\nThe equivalent process in a CRDT is to integrate remote operations into the local state.\nDuring real-time collaboration, this is typically a small number of operations that are based on a version that is only slightly behind the local version; merging these operations is fast on both CRDTs and eg-walker, since eg-walker only has to replay a small subset of the event graph.\n\nA more demanding situation arises when a user has been working offline and sends an accumulated batch of operations to their collaborators, and the other replicas need to integrate that batch of remote operations into their local state.\nTo simulate an extreme version of this scenario, we imagine that the work done offline is one of our entire edit traces, and we measure the time taken to integrate that work into another replica: eg-walker needs to replay the entire edit trace, and a CRDT needs to apply the equivalent set of CRDT operations from the remote replica.\nWe do not include the time it took to generate the CRDT operations on the source replica, since that computation happens in the background as the user is typing.\n\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    The speed of eg-walker event graph replay, compared to merging the equivalent set of CRDT operations.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\n@chart-remote shows that in this scenario, eg-walker is very fast: on sequential traces it is around 5$times$ faster to replay the event graph than to integrate the equivalent remote operations into dt-crdt, and in the worst case eg-walker has about half the throughput of dt-crdt.\nIn absolute terms, our slowest test case (_git-makefile_) took just 15ms to process.\nEg-walker processes over 1M events per second in all the traces we have.\n@chart-all-remote compares the same workload on other CRDT libraries; eg-walker outperforms both Yjs and Automerge on almost all traces.\n\n// TODO: add eg-walker to this chart (with the y axis fixed to 0-3 Mevents/sec)\n#figure(\n  text(8pt, charts.all_speed_remote),\n  caption: [\n    The speed of merging remote operations into a replica's local state in several CRDT implementations.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-remote>\n\n== Eg-walker performance and concurrency\n\nEg-walker is especially fast on traces that are mostly (e.g., `node_nodecc`) or entirely sequential.\nThis is because we can clear the internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare eg-walker's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the ratio of replay throughput between the optimised and the unoptimised versions for several traces.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the eg-walker state size while processing the _friendsforever_ data set, with and without internal state clearing enabled.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Performance of eg-walker with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _git-makefile_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of eg-walker is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled eg-walker's built-in LZ4 and Automerge's built-in gzip compression; enabling this compression further reduces the file sizes.\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, eg-walker has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\nIn contrast, Yjs does not store any deleted characters, which results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using eg-walker's event graph encoding and Automerge.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>\n\n\n= Related Work <related-work>\n\nEg-walker is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 consider only datatypes such as maps, sets, and registers; eg-walker adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with eg-walker: both are based on traversing an event graph, with operations being transformed from the form in which they were originally generated into a form that can be applied in topologically sorted order to obtain the current document state.\nToomim also points out that CRDTs can be used to perform this transformation.\nEg-walker is a concrete, optimised implementation of the time machine approach; novel contributions of eg-walker include updating the prepare version by retreating and advancing, as well as the details of partial event graph replay.\n\nEg-walker can also be regarded as an _operational transformation_ (OT) algorithm @Ellis1989, since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research, tracing back to several seminal papers in the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms follow a pattern of two sub-algorithms: a set of _transformation functions_ that transform one operation with regard to one other, concurrent operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformation functions.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$, as each operation from one branch needs to be transformed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\nEg-walker departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the theoretical upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding eg-walker, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\nOther prominent collaborative text editing algorithms belong to the _conflict-free replicated data types_ (CRDTs) family @Shapiro2011, with early examples including RGA @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue being more recent.\nTo our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persisted for the lifetime of the document and sent to all replicas, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead.\nIn contrast, eg-walker uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\nEg-walker does need to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT metadata, and it only needs to be memory-resident to handle concurrent operations; most of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 is superficially similar to eg-walker, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n\nVersion control systems such as Git, as well as differential synchronization @Fraser2009, perform merges by diffing the old and new states on one branch, and applying the diff to the other branch.\nApplying patches relies on heuristics, such as searching for some amount of context before and after the modified text passage, which can apply the patch in the wrong place if the same context exists in multiple locations, and which can fail if the context has concurrently been modified.\nThese approaches therefore generally require manual merge conflict resolution and don't ensure automatic replica convergence.\n\n\n= Conclusion\n\nEg-walker is a new approach to collaborative text editing that has significant performance advantages over existing OT and CRDT algorithms.\nCompared to CRDTs, it uses less memory, files are smaller and faster to load, and edits from other users are merged much faster in documents with largely sequential editing.\nCompared to OT, large merges (e.g., from users who did a significant amount of work while offline) are much faster, both asymptotically and in practice, and peer-to-peer collaboration is robustly supported.\n\nMoreover, since eg-walker stores the full keystroke-granularity editing history of a document, it allows applications to show that history to the user, and to restore arbitrary past versions of a document.\nThe only downsides we have found with eg-walker is that it is more complex to implement, and it is somewhat slower than an optimised CRDT on event graphs with a high degree of concurrency (though easily fast enough for practical use, with merging throughput of over 1 million events/sec).\n\nThe underlying event graph is a straightforward representation of the edits that have occurred, which is easy to replicate over any network, and which is not specific to the eg-walker algorithm.\nWe therefore expect that the same data format will be able to support future collaborative editing algorithms as well, without requiring the data format to be changed.\nWe also believe that eg-walker can be extended to other file types such as rich text, graphics, or spreadsheets, and we believe that this is a promising direction for future research in realtime editing.\n\n#if not anonymous [\n  #heading(numbering: none, [Acknowledgements])\n\n  This work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n]\n\n#show bibliography: set text(8pt)\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n\n#counter(heading).update(0)\n#set heading(numbering: \"A\", supplement: \"Appendix\")\n\n= Generic CRDT to replay algorithm <generic-crdt-replay>\n\nIn this section, we present a generic replay function which matches the behaviour of any CRDT.\n\nThis algorithm is presented in Haskell. In other programming languages, this algorithm would need to actively memoize some function return values to prevent exponential time complexity. In @am-converter we present an equivalent algorithm in Rust, presented using Automerge@automerge to replay sequence editing events - though the algorithm could easily be adapted to use any event source and compatible CRDT.\n\nGiven the CRDT is defined by the following set of methods:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n  ```haskell\n  initialState :: CRDT\n  query :: CRDT -> Doc\n\n  -- Modify a CRDT by applying a local update.\n  update :: (CRDT, (Id, Event)) -> CRDT\n\n  -- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\n  merge :: (CRDT, CRDT) -> CRDT\n\n  mergeAll :: [CRDT] -> CRDT\n  mergeAll crdts = foldl initialState crdts\n  ```\n]\n\nThe replay function then can be defined recursively like this:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n]\n\n// CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n\n\n= Benchmark Setup <benchmark-setup>\n\nAll benchmarks were run on a Ryzen 7950x CPU running Linux 6.2.0-39.\n\nRust code was compiled with `rustc v1.74.1` and compiled in release mode with `-C target-cpu=native`. Code is run on a single, pinned core for consistency.\n\nJavascript was run using `nodejs v21.5.0`.\n\nAll time based measurements are based on the mean of at least 100 test iterations. All benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n#table(\n  columns: (auto, auto, auto),\n  align: (left, left, right, right, right, right),\n  [*Library*], [*Language*], [*Version / Git Hash*],\n  [Diamond Types (DT / DT-CRDT)], [Rust], [`7adf4bafeccb`],\n  [Automerge], [Rust], [v 0.5.5],\n  [Yjs], [Javascript], [v 13.6.10],\n  [JSON-Joy], [Javascript], [`38392b30228a`],\n  [Cola], [Rust], [v 0.1.1],\n)\n\nCola with cursor optimisation removed is available at `https://github.com/josephg/cola-nocursors/`. //#link(https://github.com/josephg/cola-nocursors/).\n\n/*\n#import \"@preview/algorithmic:0.1.0\"\n#import algorithmic: algorithm\n\n#algorithm({\n  import algorithmic: *\n  Function(\"ResetState\", args: (\"state\",), {\n    Assign[state][dummy data]\n  })\n\n  Function(\"TransformPartial\", args: ($G$, $V_0$, $V_m$), {\n    Assign[$s$][(dummy data)]\n    Assign[$C$][$\"greatestCommonVersion\"(G)$]\n\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" C, \"to:\" V_0)$], {\n      // Cmt[As above]\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      Fn[effect][$s$, $m$]\n    })\n    For(cond: [Event $(i, e_i, P_i) in \"inOrderTraversal\"(G, \"from:\" V_0, \"to:\" V_0 union V_m)$], {\n      If(cond: [$\"isCriticalVersion\"(P_i)$], {\n        Assign[$s$][(dummy data)]\n        If(cond: [$\"isCriticalVersion\"({i})$], {\n          State[#smallcaps(\"yield\") $e_i$]\n          State(smallcaps(\"Continue\"))\n        })\n      })\n\n      Fn[setPrepareVersion][$s$, $P_i$]\n      Assign([$m$], FnI[prepare][$s$, $i$, $e_i$])\n      State[#smallcaps(\"yield\") #FnI[effect][$s$, $m$]]\n    })\n  })\n})\n*/\n\n/*\n== Example optimised version_contains_ID function <example-localid-algorithm>\n\n> Blah that section title.\n\nThis is an optimised function for checking if a version contains some local ID. Ie, this function checks if $i in ceil(V)$ for some event $i$ and some version $V$.\n\nThe algorithm does a bounded breadth first search within the event graph, checking events where:\n\n- The event is within $ceil(V)$\n- The local ID of the event is $>=$ the local ID of the search target.\n\nFor simplicity, the algorithm given below does not take advantage of run-length encoding. In our implementation, we also run-length encode all items in the event graph. This optimisation yields another large performance gain at the cost of some implementation complexity.\n\nWe have implemented a family of similar algorithms for querying the event graph, including functions to find the set difference, set union and set intersection between versions. See XXXX github.com/josephg/causal-graphs / diamond-types/src/cg/graph/tools.rs . TODO\n\n```typescript\nfunction versionContainsLocalId(graph: EventGraph, version: LocalID[], target: LocalId): boolean => {\n  // Max heap. The highest local ID is removed first.\n  let queue = new PriorityQueue<LocalID>()\n\n  // Any ID < target is not relevant due to the ordering constraint.\n  for (let id of version) {\n    if (id == target) return true\n    else if (id > target) queue.enq(id)\n  }\n\n  while (queue.length > 0) {\n    let id = queue.deq()\n    if (id === target) return true\n\n    // Clear any other queue items pointing to this entry.\n    while (queue.peek() == id) queue.deq()\n\n    for (let p of graph.getParents(id)) {\n      if (p === target) return true\n      else if (p > target) queue.enq(p)\n    }\n  }\n\n  return false\n}\n\n```\n\n*/\n\n/*\n== Optimised diff function using local IDs <diff>\n\nThis is an optimised graph diff function. It computes the difference between the graphs $ceil(V_1)$ and $ceil(V_2)$, and returns the sets of event IDs that are only in $V_1$ and only in $V_2$.\n\nThis algorithm takes advantage of local IDs to compute the set difference efficiently.\n\nFor simplicity, the algorithm given here does not take advantage of run-length encoding. In our implementation, we also run-length encode all items in the event graph. This optimisation yields another large performance gain at the cost of some implementation complexity. See XXXX github.com/josephg/causal-graphs . TODO\n\n```typescript\ntype LocalId = number // Local IDs are just integers.\nenum Flag { V1Only, V2Only, Shared }\n\nfunction diff(graph: EventGraph, v1: LocalId[], v2: LocalId[]) {\n  // Max heap. The highest local ID is removed first.\n  let queue = new PriorityQueue<(LocalId, Flag)>()\n\n  // Number of items in the queue in both transitive histories (state Shared).\n  let numShared = 0\n\n  for (let id of v1) queue.push((id, Flag.V1Only))\n  for (let id of v2) queue.push((id, Flag.V2Only))\n\n  let v1Only = [], v2Only = []\n\n  // Loop until everything is shared.\n  while (queue.size() > numShared) {\n    let (id, flag) = queue.pop()\n    if (flag === Flag.Shared) numShared--\n\n    // If the next item in the queue\n    while (!queue.isEmpty() && queue.peek().0 == id) {\n      let (_, flag2) = queue.pop() // Remove the item\n      if (flag2 === Flag.Shared) numShared--;\n      if (flag2 !== flag) flag = Flag.Shared\n    }\n\n    if (flag == Flag.V1Only) v1Only.push(id)\n    if (flag == Flag.V2Only) v2Only.push(id)\n\n    for (let p of graph.getParents(id)) queue.push((p, flag))\n    if (flag == Flag.Shared) numShared += cg.getParents(id).length\n  }\n\n  return {v1Only, v2Only}\n}\n\n```\n\n*/\n\n/*\n== The List formulation of FugueMax <list-fuguemax-code>\n\nThe function below is a reimplementation of the logic of FugueMax, expressed as a list insertion. See @fugue-list above for commentary.\n\n```typescript\nfunction integrate(ctx: EditContext, cg: causalGraph.CausalGraph, newItem: Item, cursor: DocCursor) {\n  if (cursor.idx >= ctx.items.length || ctx.items[cursor.idx].curState !== ItemState.NotYetInserted) return\n\n  let scanning = false\n  let scanIdx = cursor.idx\n  let scanEndPos = cursor.endPos\n\n  let leftIdx = cursor.idx - 1\n  let rightIdx = newItem.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, newItem.rightParent)\n\n  while (scanIdx < ctx.items.length) {\n    let other = ctx.items[scanIdx]\n\n    if (other.opId === newItem.rightParent) throw Error('invalid state')\n\n    // The index of the origin left / right for the other item.\n    let oleftIdx = other.originLeft === -1 ? -1 : findItemIdx(ctx, other.originLeft)\n    if (oleftIdx < leftIdx) break\n    else if (oleftIdx === leftIdx) {\n      let orightIdx = other.rightParent === -1 ? ctx.items.length : findItemIdx(ctx, other.rightParent)\n\n      if (orightIdx === rightIdx && causalGraph.lvCmp(cg, newItem.opId, other.opId) < 0) break\n      else scanning = orightIdx < rightIdx\n    }\n\n    scanEndPos += itemWidth(other.endState)\n    scanIdx++\n\n    if (!scanning) {\n      cursor.idx = scanIdx\n      cursor.endPos = scanEndPos\n    }\n  }\n\n  // We've found the position. Insert where the cursor points.\n  ctx.insert(newItem, cursor)\n}\n```\n*/\n"],[23549,4,""],[23548,1,""],[23548,0,"."],[23548,1,""],[23547,1,""],[23547,0,". T"],[23550,1,""],[23554,11,""],[23564,0," is transforf"],[23576,1,""],[23576,0,"rmed"],[23579,1,""],[23578,1,""],[23577,1,""],[23576,1,""],[23575,1,""],[23574,1,""],[23574,0,"ormed"],[27568,104,""],[27567,1,""],[24168,0," However, the choice of sort order affects the performance of the algorithm, as discussed in @complexity."],[24202,0," may"],[24213,1,""],[23978,0,"\n"],[24058,3,""],[24057,1,""],[24056,1,""],[24056,0,"."],[24057,2,""],[24057,0,"E"],[24057,0," "],[27204,0,"// "],[27204,3,""],[28541,3,""],[28539,1,""],[28539,0," and"],[28664,1,""],[28664,0,"."],[28665,5,""],[28665,0," "],[28666,1,""],[28666,0,"W"],[28666,4,""],[28666,0,"Then when"],[28711,3,""],[28809,0,"would "],[28823,1,""],[28946,0,"each concurrent branch in the graph would need a copy of the CRDT state "],[28995,0,"complete "],[29026,0," to generate "],[29030,9,""],[29030,0,"generate "],[29027,0,"in order "],[29038,10,""],[29038,0," convert events into CRDT messages."],[29073,50,""],[29026,0," in memory"],[28430,0,"\n"],[28430,0,"\n\n"],[28431,0,"One way of achieving this goal would be to track the "],[28474,10,""],[28474,0,"track the "],[28431,53,""],[28431,0,"One way of achieving this goal would be to track the state of the document on each branch of the event graph via a CRDT"],[28546,0,"separate "],[28559,0," object. The co"],[28573,1,""],[28572,1,""],[28568,4,""],[28567,1,""],[28567,0," The CRDT object would be able to translate "],[28584,0,"for a given branch "],[28630,0,"each "],[28630,5,""],[28630,0,"events into the "],[28645,1,""],[28645,0,"ir corresponding CRDT obj"],[28669,1,""],[28668,1,""],[28668,0,"peration"],[28646,1,""],[28645,1,""],[28674,0,". Then when ran"],[28688,1,""],[28687,1,""],[28686,1,""],[28686,0,"branches mere, "],[28700,1,""],[28699,1,""],[28698,1,""],[28698,0,"ge, the CRDT operations could"],[28722,5,""],[28722,0,"from one branch could be applied to the other branch's CRDT state."],[28546,8,""],[28546,0,"corresonding"],[28546,12,""],[28546,0,"corresopnding"],[28546,13,""],[28546,0,"corresponding"],[28546,0,"spe"],[28548,1,""],[28547,1,""],[28547,0,"eparate "],[28546,9,""],[28492,0," each branch of the docuemnt"],[28512,8,""],[28512,0,"document"],[28520,47,""],[28562,7,""],[28621,3,""],[28621,0,"a"],[28621,1,""],[28621,0,"the"],[28655,6,""],[28655,0,"W"],[28655,1,""],[28655,0,"Then w"],[28655,6,""],[28655,0,"W"],[28764,352,""],[28763,1,""],[28615,0," grom the "],[28616,9,""],[28616,0,"from the event graph"],[28665,9,""],[28665,0,"message"],[28582,5,""],[28582,0,"could be u"],[28582,10,""],[28582,0,"would be"],[28582,8,""],[28582,0,"could be used"],[28595,8,""],[28672,0,"s"],[28696,4,""],[28972,0," event"],[28943,0,"for every"],[28952,4,""],[28989,0," we"],[29003,0," to"],[29006,2,""],[29015,0,"ly"],[29018,4,""],[29018,0,"clone"],[29024,3,""],[29032,0,"'s"],[29050,47,""],[29050,0,"."],[29007,0,"a "],[29018,1,""],[29017,1,""],[29027,0," "],[29024,0,"of "],[29030,1,""],[28674,1,""],[28674,0,"\n"],[28553,1,""],[28553,0,"\n"],[29054,0,"\n\n// I "],[29059,2,""],[29059,0,"We have benchmark data fo rthi"],[29088,1,""],[29087,1,""],[29086,1,""],[29085,1,""],[29084,1,""],[29084,0,"r this approach btw."],[28527,0,"separate \n"],[28431,105,""],[28431,0,"One way of achieving this goal would be to track the state of each branch of the document via a separate"],[28431,104,""],[28431,0,"One way of achieving this goal would be to track the state of each branch of the document via a separate "],[28431,105,""],[28431,0,"One way of achieving this goal would be to track the state of each branch of the document via a separate"],[28431,104,""],[28431,0,"One way of achieving this goal would be to track the state of each branch of the document via a separate "],[28536,1,""],[28430,0,"\n"],[28430,0,"\nOne "],[28431,4,""],[28432,1,""],[28431,1,""],[28431,0,"The most naive way "],[28431,19,""],[29064,0,"\n"],[29064,0,"\nEg-walker improves on the performance of this"],[29065,0,"Rather than using separate objects "],[29092,0,"CRDT "],[29104,0," for each branch,"],[29122,1,""],[29122,0,"e"],[29122,1,""],[29122,0,"E"],[29131,36,""],[29131,0," uses a single "],[29132,0,"c"],[29132,1,""],[29132,0,"creates and "],[29132,12,""],[29146,0,"b"],[29146,1,""],[29146,0,"iobj"],[29149,1,""],[29148,1,""],[29147,1,""],[29146,1,""],[29146,0,"o"],[29146,1,""],[29146,0,"object which "],[29146,13,""],[29146,0,"state object "],[29076,6,""],[29076,0," crea"],[29080,1,""],[29079,1,""],[29078,1,""],[29077,1,""],[29077,0,"generating"],[29164,0,"which is capable of being "],[29184,6,""],[29184,0,"translating e"],[29196,1,""],[29196,0,"events into the corresponding CRDT's messag"],[29233,6,""],[29233,0,"messages."],[29231,1,""],[29230,1,""],[29230,10,""],[29230,0," operations."],[29202,0," (generated "],[29202,12,""],[29242,0," A"],[29243,1,""],[29243,0,"These CRDT operations are immediately applied "],[29288,1,""],[29288,0,", and translated"],[29294,10,""],[29294,0,"tras"],[29294,4,""],[29294,0,"transformed in th eproc"],[29316,1,""],[29315,1,""],[29314,1,""],[29313,1,""],[29312,1,""],[29311,1,""],[29311,0,"e process."],[28697,0," fork, the CRDT object would be cloned in memory. When branches "],[28760,1,""],[28746,1,""],[28746,0,"\n"],[29005,1,""],[29005,0," and large memory u"],[29023,1,""],[29010,0,"a "],[29025,0,"footprint,"],[29034,1,""],[29034,0," -"],[29108,11,""],[29108,0," completely"],[29126,2,""],[29125,1,""],[29142,11,""],[29142,0,"."],[29106,3,""],[29106,0,"a "],[29117,1,""],[29116,1,""],[29122,0," of"],[29282,0," for"],[29285,1,""],[29284,1,""],[29284,0,"rom anywhere in the event graph"],[29217,0,"visits events in the graph using "],[29250,5,""],[29217,32,""],[29217,0,"uses"],[29243,0," during "],[29244,7,""],[29244,0,"that is used while visiting the even"],[29272,8,""],[29272,0,"all the events in the graph. The state object"],[29317,6,""],[29350,33,""],[29303,1,""],[29303,0,"is"],[29413,0," then"],[29442,33,""],[29442,0,", and the transformed"],[29452,0,"resulting "],[29473,0," operations are emitted."],[29498,49,""],[29498,0,"\n// We have benchmark data for this approach btw."],[29498,49,""],[29144,0,"\n// We have benchmark data for this approach btw.\n"],[29547,1,""],[29147,0," (seph):"],[29149,1,""],[29149,0,"S"],[29557,84,""],[29557,0,"I"],[29557,1,""],[29557,0,"Eg-walker is able to achieve much better performance by skipping the CRDT entirely i"],[29557,84,""],[29557,0,"/g"],[29558,1,""],[29557,1,""],[29557,0,"However, this process is not always needed at all"],[29600,6,""],[29599,1,""],[29599,0,". I"],[29727,0," th"],[29729,1,""],[29728,1,""],[29728,0,"events "],[29728,7,""],[29728,0,"translating "],[29728,12,""],[29728,0,"events do not need to be trasformed at "],[29753,14,""],[29753,0,"transformed at all. In these cases, the "],[29789,4,""],[29789,0,"we can skip generat"],[29801,7,""],[29801,0,"the translation "],[28820,3,""],[28820,0,"abitger"],[28826,1,""],[28825,1,""],[28824,1,""],[28823,1,""],[28822,1,""],[28821,1,""],[28821,0,"note"],[28824,1,""],[28824,0,"her"],[28827,6,""],[28827,0," other"],[28824,3,""],[28824,0,"e"],[28821,4,""],[28821,0,"bitger"],[28820,7,""],[28820,0,"the"],[29144,0,"One way of achieving this goal would be to track the state of the document on each branch of the event graph, to translate each event into a corresponding CRDT operation (based on the document state in which that event was generated), and when branches in the event graph merge, to apply the CRDT operations from one branch to the other branch's state."],[29144,352,""],[28430,0,"\n"],[28430,0,"\nOne way of achieving this goal would be to track the state of the document on each branch of the event graph, to translate each event into a corresponding CRDT operation (based on the document state in which that event was generated), and when branches in the event graph merge, to apply the CRDT operations from one branch to the other branch's state."],[28539,4,""],[28539,0,", then"],[28541,4,""],[28541,0,"and"],[28665,1,""],[28665,0,"."],[28667,5,""],[28667,0,"W"],[28707,3,""],[29300,0,"// "],[29199,0,"// "],[29095,0,"// "],[29032,0,"// "],[28911,0,"// "],[28779,0,"// "],[29569,0,"// "],[30061,33,""],[30060,1,""],[30059,1,""],[30034,7,""],[30034,0,"is the vast majority of the graph"],[30058,9,""],[30058,0,"many"],[30032,1,""],[29925,0,"\n"],[29925,0,"\n\n\n\n"],[29928,0,"Eg-walker achieves this goal by generating a CRDT no "],[29980,1,""],[29979,1,""],[29978,1,""],[29978,0,"on the fly containing all "],[30000,4,""],[30000,0,"all the relevant "],[29937,0," can"],[29949,1,""],[29980,0," obejct"],[29986,1,""],[29985,1,""],[29984,1,""],[29983,1,""],[29983,0,"ject"],[29999,0,"which "],[30005,1,""],[30005,0,"c"],[30014,1,""],[30013,1,""],[30012,1,""],[30012,0,"es"],[30013,1,""],[30012,1,""],[30012,0,"s"],[30022,9,""],[30022,0,"CRDT "],[30022,5,""],[30022,0,"events processes"],[30037,1,""],[30037,0,"d so far. "],[30029,9,""],[30029,0,"visitd"],[30034,1,""],[30034,0,"ed"],[30044,1,""],[30043,1,""],[30043,0," in the traversal. As each event is visited, the"],[30090,1,""],[30089,1,""],[30088,1,""],[30088,0,"we generate teh co"],[30105,1,""],[30104,1,""],[30103,1,""],[30102,1,""],[30101,1,""],[30101,0,"he equivalent"],[30104,10,""],[30104,0,"corresponding CRD "],[30121,1,""],[30121,0,"T message and then immediately use that CRDT message to modify the CRDT object. CRDT "],[30205,1,""],[30205,0," messages are generated "],[30201,0,"T"],[30201,1,""],[30199,0,", and "],[30201,4,""],[30200,1,""],[30199,1,""],[30199,0,". "],[30200,1,""],[30199,1,""],[30199,0," and transform th"],[30203,0,", in the process,"],[30221,12,""],[30221,0,"emitt h"],[30227,1,""],[30226,1,""],[30225,1,""],[30225,0," the transformed operation"],[30281,0,"relative to the parent versions of the event. "],[30326,1,""],[30267,0,"must be"],[30274,3,""],[30267,63,""],[29998,0,". This CRDT "],[30009,1,""],[29976,0,"modie"],[29980,1,""],[29979,1,""],[29978,1,""],[29977,1,""],[29976,1,""],[29976,0,"special "],[29976,8,""],[29976,0,"modified "],[29976,9,""],[29976,0,"special "],[29976,8,""],[29976,0,"modified "],[29963,11,""],[29963,0,"creating "],[30005,0," as events are traversed"],[30016,0,"in the event graph "],[30059,6,""],[30143,15,""],[30143,0,"the event is converted to the"],[30199,0,". Then this CRDT message is"],[30226,9,""],[30242,0,"d to"],[30246,21,""],[30269,0,". In the process,"],[30286,21,""],[30286,0," the"],[30290,9,""],[30312,0," is emitted"],[30169,3,""],[30169,0,"a"],[30190,7,""],[30190,0,"operation"],[30190,9,""],[30190,0,"message"],[30199,6,""],[30199,0,"T"],[30201,2,""],[30201,0,"e"],[30218,0," then"],[29928,408,""],[29928,0,"Eg-walker can achieve this goal by creating a modified CRDT object on the fly as events in the event graph are traversed. This CRDT contains all the events visited so far in the traversal. As each event is visited, the event is converted to a corresponding CRDT message. The CRDT message is then immediately used to modify the CRDT object. In the process, the transformed operation is emitted. CRDT messages"],[29973,9,""],[29978,0," state"],[30281,4,""],[30281,0,"we can emit teh "],[30296,1,""],[30295,1,""],[30294,1,""],[30294,0,"he "],[30318,11,""],[30320,13,""],[30319,1,""],[30284,4,""],[30292,0," equivalent"],[30293,11,""],[30315,0," The CRDt "],[30324,1,""],[30323,1,""],[30323,0,"T state object sis"],[30340,1,""],[30339,1,""],[30338,1,""],[30338,0,"is a bit special - "],[29928,429,""],[29928,0,"Eg-walker can achieve this goal by creating a CRDT state object on the fly as events in the event graph are traversed. This CRDT contains all the events visited so far in the traversal. As each event is visited, the event is converted to a corresponding CRDT message. The CRDT message is then immediately used to modify the CRDT object. In the process, we emit the transformed operation. The CRDT state object is a bit special -"],[28778,0,"One way of achieving this goal would be to track the state of the document on each branch of the event graph, to translate each event into a corresponding CRDT operation (based on the document state in which that event was generated), and when branches in the event graph merge, to apply the CRDT operations from one branch to the other branch's state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nHowever, doing this naively leads to poor performance, because the CRDT overhead is incurred on every operation.\n\nEg-walker is able to achieve much better performance by skipping the CRDT entirely in portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of the graph), and using the CRDT only for concurrent events.\n"],[28778,353,""],[29381,3,""],[29246,3,""],[29565,3,""],[29669,3,""],[29770,3,""],[30020,0,"\n"],[30020,0,"\nEg-walker improves on this approach"],[30021,0,"This approach is correct"],[30021,24,""],[30056,0," in two ways: First, rather tahn "],[30088,1,""],[30087,1,""],[30086,1,""],[30085,1,""],[30085,0,"hat cloning "],[30021,76,""],[30021,0,"Eg-walker improves on this approach in two ways: First, rather that cloning"],[29499,3,""],[30093,0," the CRDT object"],[30086,0,"k"],[30086,1,""],[30086,0,"storing a clone of"],[30104,11,""],[30104,0," the"],[30120,0," for each branch in the graph, eg-walker uses a single data structure which can trabska"],[30206,1,""],[30205,1,""],[30204,1,""],[30203,1,""],[30202,1,""],[30201,1,""],[30200,1,""],[30200,0,"translate any i"],[30214,1,""],[30214,0,"evei"],[30217,1,""],[30216,1,""],[30215,1,""],[30214,1,""],[30214,0,"vitied "],[30214,7,""],[30214,0,"visited event into the corresponding CRDT operation. "],[30266,792,""],[30266,0,"\n"],[28988,0,"// "],[28874,0,"// "],[28778,0,"// "],[28431,0,"// "],[30078,1,""],[30078,0,"\n\n- "],[30082,8,""],[30082,0,"R"],[30275,1,""],[30275,0,"- "],[30277,44,""],[30277,0,"We can "],[30277,7,""],[30389,0,"we note that "],[30389,7,""],[30388,6,""],[30478,47,""],[30478,0,"process entirely."],[30660,0,"\n"],[30208,37,""],[30208,0,"generate the "],[30249,0," for any visited event"],[29779,0,"Thius "],[29784,1,""],[29783,1,""],[29782,1,""],[29782,0,"s approach leads to th"],[29803,1,""],[29802,1,""],[29802,0,"cro"],[29793,12,""],[29793,0,"m"],[29793,1,""],[29793,0,"g"],[29793,1,""],[29793,0,"give "],[29797,1,""],[29797,0,"s us "],[29793,9,""],[29793,0,"will correctly "],[29793,15,""],[29793,0,"can merge correctly. "],[29823,27,""],[29823,0,"it has terrible"],[29838,5,""],[29851,29,""],[29910,7,""],[29910,0," "],[29915,0," to"],[29918,2,""],[29927,0,"ly"],[29936,3,""],[30063,1,""],[30063,0,"1."],[30257,1,""],[30257,0,"2."],[30076,1,""],[30076,0,"n"],[30078,22,""],[30078,0,"cloning the"],[30094,7,""],[30094,0," state"],[30141,6,""],[30141,0,"cr"],[30142,1,""],[30141,1,""],[30141,0,"maintains a"],[30141,10,""],[30141,0,"uses "],[30141,5,""],[30141,0,"maintains and uses "],[30480,55,""],[30479,1,""],[30479,0," (since the transformed event is identical to the ori"],[30531,1,""],[30530,1,""],[30529,1,""],[30529,0,"stored event)"],[30487,0,"in these cases "],[30557,1,""],[30557,0,". "],[30559,2,""],[30559,0,"When this happens, e"],[30590,0," also"],[28430,827,""],[29239,66,""],[29239,0,"Eg"],[29240,1,""],[29249,0,"does not need to clone and mar"],[29278,1,""],[29277,1,""],[29277,0,"erge CRDT sta"],[29289,1,""],[29288,1,""],[29287,1,""],[29287,0,"objects. Inea"],[29299,1,""],[29299,0,"sta"],[29301,1,""],[29300,1,""],[29299,1,""],[29298,1,""],[29298,0,"stead, we "],[29305,3,""],[29305,0,"the algort"],[29314,1,""],[29314,0,"ithm "],[29328,9,""],[29337,0," specially crafter"],[29354,1,""],[29354,0,"d"],[29294,0," "],[29294,1,""],[29294,0," to "],[29297,1,""],[29296,1,""],[29295,1,""],[29294,1,""],[29535,0," "],[29535,1,""],[29535,0," events in"],[29756,132,""],[29755,1,""],[29755,0," When this happens, eg-walker is also able to discard all of the internal state accumulated so far, keeping the data structure small."],[29853,34,""],[28725,0," need to b"],[28734,1,""],[28733,1,""],[28974,19,""],[28974,0,"would be correct"],[28974,8,""],[28974,0,"works"],[28980,7,""],[28980,0,"as ep"],[28984,1,""],[28984,0,"xpected"],[28991,1,""],[28991,0,","],[28991,1,""],[28991,0," -"],[28994,1,""],[28994,0,"h"],[29030,0,"."],[29032,11,""],[29032,0,"F"],[29090,0,"store a "],[29107,1,""],[29106,1,""],[29112,0," of"],[29289,0,"multiple "],[29255,0," avoids the need"],[29271,14,""],[29356,9,""],[29356,0,"carefully"],[29652,4,""],[29690,124,""],[29690,0," ad"],[29692,1,""],[29692,0,"nd"],[30158,1,""],[30158,0,"."],[30160,1,""],[30160,0,"T"],[30159,1,""],[30159,0,"\n"],[29694,0,", remarkably,"],[29662,11,""],[29662,0,"transformation"],[31701,1,""],[31701,0,". This simpli"],[31708,6,""],[31708,0,"aprpoach"],[31708,8,""],[31708,0,"approach"],[31716,9,""],[31723,0," some"],[31733,0,"-related"],[31734,7,""],[31734,0,"like"],[31733,5,""],[32102,1,""],[32102,0,"."],[32104,1,""],[32104,0,"W"],[32413,49,""],[32413,0,"the order that events are visited."],[32481,0," in the graph"],[38211,1,""],[38211,0,"."],[38213,1,""],[38213,0,"S"],[38212,1,""],[38212,0,"\n"],[38623,29,""],[38623,0,"the event graph is traversed"],[45589,1,""],[45589,0,"."],[45591,1,""],[45591,0,"I"],[45658,0," indexes"],[45590,1,""],[45590,0,"\n"],[45704,0," -0 "],[45707,1,""],[45706,1,""],[45706,0," based on sth"],[45718,1,""],[45717,1,""],[45716,1,""],[45716,0,"the statet "],[45726,1,""],[45725,1,""],[45725,0," at $e_p#$"],[45734,1,""],[45733,1,""],[45733,0,"4"],[45733,1,""],[45733,0,"$"],[45861,0," - based on the state at #"],[45886,1,""],[45886,0,"$e_s"],[45889,1,""],[45888,1,""],[45887,1,""],[45887,0,"s_e$"],[45730,1,""],[45730,0,"s"],[45863,0," this time"],[48018,0,"Similarly"],[48018,9,""],[48018,0,"Similarly\n\n"],[48027,0,", "],[48018,11,""],[48018,0,"This allows efficient $sans(\"retreat\")(e_i)$"],[48047,7,""],[48047,0,"apply"],[48029,10,""],[48050,0," to"],[48052,1,""],[48051,1,""],[48051,0,"operations to be performed efi"],[48080,1,""],[48080,0,"ficie"],[48078,7,""],[48078,0,"efficient."],[48087,1,""],[48087,0,",y"],[48088,1,""],[48087,1,""],[48087,0,"ly"],[48051,10,""],[48051,0,"proces"],[48051,6,""],[48050,1,""],[48078,0,". However, we also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"retreat\")(e_i)$"],[48159,7,""],[48159,0,"advac"],[48163,1,""],[48163,0,"nce"],[48174,0," operations. In each of these cases, the data"],[48215,4,""],[48211,4,""],[48211,0,"we mui"],[48216,1,""],[48216,0,"st modify the i"],[48230,1,""],[48230,0,"item "],[48230,5,""],[48230,0,"state of the item with id_"],[48253,0,"_"],[48257,0," of $i$."],[48264,0,", or "],[48268,1,""],[48267,1,""],[48266,1,""],[48265,1,""],[48264,1,""],[48210,0," the event must have already been applied. "],[48186,67,""],[48186,0," These operations "],[48212,1,""],[48205,7,""],[48204,1,""],[48224,4,""],[48224,0,"an item. For insert events, it will be the "],[48263,4,""],[48263,0,"an "],[48288,0," For delete events, we modify the "],[48215,0,"prepare "],[48228,0," $s_p$"],[48245,0," - either the item with"],[48268,44,""],[48268,0," an"],[48283,1,""],[48283,0,", or"],[48248,10,""],[48247,1,""],[48246,1,""],[48245,1,""],[48245,0,". For insert events, "],[48245,0," in the eg-walker state"],[48289,0,"we modify the staet"],[48307,1,""],[48306,1,""],[48306,0,"te of the"],[48340,1,""],[48340,0,". For"],[48345,7,""],[48374,1,""],[48374,0," state of the item deleted by "],[48393,0,"_"],[48404,1,""],[48404,0,"_ event #e_"],[48414,1,""],[48413,1,""],[48412,1,""],[48412,0,"$e_i$.\n\n"],[48419,1,""],[48418,1,""],[48418,0," To this end, the internal state also includes a mapping from event IDs to the record in the q"],[48511,1,""],[48511,0,"sequence affected by that event. "],[48018,526,""],[48018,0,"This allows $sans(\"apply\")(e_i)$ to be performed efficiently. However, we also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"advance\")(e_i)$ operations. These operations modify the prepare state $s_p$ of an item in the eg-walker state. For insert events, we modify the state of the item with an _id_ of $i$. For delete events, we modify the state of the item _deleted by_ event $e_i$. To this end, the internal state also includes a mapping from event IDs to the record in the sequence affected by that event."],[48017,0,"\nOn every $sans(\"apply\")(e)$ we use the above process to identify the target record in the sequence\n"],[48074,42,""],[48074,0,"process events,"],[48088,1,""],[48088,0," "],[48074,15,""],[48074,0,"modif "],[48079,1,""],[48079,0,"y the sequence by "],[48074,0,"fin"],[48076,1,""],[48075,1,""],[48074,1,""],[48074,0,"find the co"],[48084,1,""],[48083,1,""],[48083,0,"correct location in the sequence, "],[48074,43,""],[48097,0,"process"],[48018,86,""],[48017,1,""],[48016,1,""],[48253,15,""],[48253,0,"sequence"],[48238,2,""],[48238,0,"a"],[48239,5,""],[48239,0," record"],[48268,6,""],[48268,0,"$italic(\"Insert\")(i, c)$"],[48358,6,""],[48358,0,"$italic(\"Insert\")(i, c)$"],[48367,6,""],[48367,0,"Delete"],[48377,3,""],[48327,5,""],[48327,0," record"],[48378,1,""],[48378,0,"p"],[48268,24,""],[48268,0,"insert"],[48309,0," inserted"],[48325,0," - that is, the record"],[48373,21,""],[48373,0,"delete"],[48446,11,""],[48446,0,"To do this efficiently"],[48581,0," We maintain "],[48582,12,""],[48582,0,"Specifically, we maintain a b"],[48610,1,""],[48609,1,""],[48609,0," second b-"],[48618,1,""],[48617,1,""],[48617,0,"B-tree m"],[48624,1,""],[48623,1,""],[48623,0," which maps from record ID to the leaf node in the first B-tree which contains that leaf node"],[48707,9,""],[48707,0,"record.\nThis tree allows us to advance or retreat in logarithmic time.\nWhen nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly."],[48018,0,"This "],[48022,1,""],[48021,1,""],[48020,1,""],[48020,0,"e above process "],[48036,5,""],[48092,1,""],[48092,0,"\n"],[49720,0,"// "],[49657,0,"// "],[49533,0,"// "],[49392,0,"// "],[49212,0,"// "],[49035,0,"// "],[48891,0,"// "],[48890,0,"\n// M"],[48894,1,""],[48894,0,"(Seph): This was the original text.\n"],[48929,1,""],[48928,1,""],[48928,0,":"],[48928,1,""],[48928,0,". Delete / mer"],[48929,13,""],[48901,0," I rewrote the above paragra"],[48922,7,""],[48922,0,"paragraph."],[48959,1,""],[48959,0," if you want to "],[48960,15,""],[48959,1,""],[48959,0,":"],[48942,0,"your"],[48946,3,""],[48458,1,""],[48458,0,"\n"],[48531,0,"insert "],[48531,7,""],[48531,0,"the "],[48543,1,""],[48543,0," of s"],[48547,1,""],[48547,0,"in"],[48515,0," two additional mappings:"],[48540,1,""],[48540,0,"\n\n- "],[48544,1,""],[48544,0,"A"],[48577,0,"sert "],[48581,1,""],[48544,0,"For inserts, "],[48554,1,""],[48554,0," event"],[48544,18,""],[48581,0," events"],[48618,23,""],[48618,0," "],[48618,1,""],[48618,0," with th"],[48619,7,""],[48618,1,""],[48596,0,"corresponding "],[48662,7,""],[48759,0,"\n- A mappin"],[48760,10,""],[48544,0,"For inser t"],[48554,1,""],[48553,1,""],[48553,0,"t events "],[48516,3,""],[48516,0,"an"],[48538,32,""],[48544,4,""],[48553,17,""],[48555,0," either"],[48566,37,""],[48566,0," "],[48537,1,""],[48537,0,". This mapping"],[48544,7,""],[48544,0,"map"],[48544,3,""],[48543,1,""],[48542,1,""],[48541,1,""],[48540,1,""],[48539,1,""],[48538,1,""],[48537,1,""],[48566,0,"record in the sequence which toan"],[48598,1,""],[48597,1,""],[48596,1,""],[48595,1,""],[48595,0,"contains that "],[48551,58,""],[48551,0,". Fo"],[48554,1,""],[48553,1,""],[48553,0,"The value "],[48553,10,""],[48537,16,""],[48537,0,". For insert events, this h"],[48563,1,""],[48563,0,"maps from eve"],[48575,1,""],[48574,1,""],[48573,1,""],[48573,0,"the insert's event ID to the sequence item which contains "],[48616,15,""],[48743,0,"\nTo do this efficiently, the internal state also includes an additional mapping. For insert events, this maps from the insert's event ID to the sequence item . Specifically, we maintain a B-tree which maps from record ID to the leaf node in the first B-tree which contains that record."],[48516,2,""],[48516,0,"two"],[48538,0,"s:"],[48540,2,""],[48540,0,"\n\n- "],[48563,4,""],[48563,0,"we map"],[48570,5,""],[48618,0,"containing that event"],[48629,10,""],[48629,0,"the inserted event"],[48642,5,""],[48642,0,"item"],[48647,126,""],[48647,0,"\n- For delete events, we map from the the"],[48687,1,""],[48686,1,""],[48685,1,""],[48685,0,"event ID to the corresponding ID of the deleted "],[48648,85,""],[48648,0,"- For delete events, we map from the event ID to the corresponding ID of the deleted item."],[48725,8,""],[48729,0," deleted by this event"],[48725,26,""],[48725,0,"deleted ti"],[48734,1,""],[48733,1,""],[48733,0,"item"],[48738,0,"\n"],[48539,1,""],[48539,0,", both implemented by additional "],[48539,33,""],[48539,0,":"],[48586,1,""],[48585,1,""],[48591,0,"'s"],[48604,43,""],[48604,0,"corresponding sequence"],[48618,8,""],[48618,0,"record in the sequence."],[48678,0," delete"],[48691,0,"'s"],[48700,41,""],[48700,0,"ID of the if"],[48711,1,""],[48711,0,"tem which was deleted."],[48710,0,"deleted "],[48722,19,""],[48722,0," in th "],[48728,1,""],[48728,0,"e e"],[48730,1,""],[48730,0,"sequence."],[48741,159,""],[48641,0," (Sep"],[48645,1,""],[48644,1,""],[48644,0,"pecifically, "],[48542,115,""],[48542,0,"- For insert events, we map from the insert event's ID to the corresponding record in the sequence. (Specifically,"],[48754,0,"\n- For insert events, we map from the insert event's ID to the corresponding record in the sequence. (Specifically,"],[48542,115,""],[48296,57,""],[48296,0,"we modify the"],[48310,0,"insert "],[48323,0,", which will have"],[48340,5,""],[48390,5,""],[48390,0,"record"],[48438,7,""],[48438,0,"allow this"],[48438,10,""],[48438,0,"do this"],[48438,19,""],[48438,0,"alo"],[48440,1,""],[48440,0,"low this to b"],[48452,1,""],[48452,0,"happen efficiently"],[48743,0," the leaf node in the first -"],[48771,1,""],[48771,0,"B-tree which contains that record)"],[48744,0,"we store a pointer to "],[48826,0,". When nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly."],[48926,1,""],[48729,1,""],[48276,0," t"],[48277,1,""],[48277,0,"To allow this "],[48280,11,""],[48280,0,"m"],[48280,1,""],[48280,0,"make this"],[48288,1,""],[48287,1,""],[48286,1,""],[48285,1,""],[48280,5,""],[48280,0,"th"],[48281,1,""],[48280,1,""],[48280,0,"enable these operations to be efficient, we maintain 2 additional B-tre e"],[48352,1,""],[48351,1,""],[48351,0,"e maps."],[48380,0," need to"],[48413,1,""],[48444,0,". So, we maintain a bt"],[48465,1,""],[48464,1,""],[48464,0,"B-t"],[48466,1,""],[48466,0,"tree map from "],[48199,1,""],[48199,0,"\n"],[48200,5,""],[48200,0,"Each of these"],[48230,1,""],[48229,1,""],[48229,0,"di"],[48230,1,""],[48229,1,""],[48229,0,"fies"],[48260,2,""],[48260,0," one of the"],[48278,0,"s"],[48296,83,""],[48296,0," "],[48319,8,""],[48330,0,"corresponding "],[48357,19,""],[48357,0," (which will have an"],[48389,0,")"],[48389,0,", matching the event"],[48412,35,""],[48412,0,"And"],[48415,2,""],[48415,0," f"],[48481,0,"the "],[48490,6,""],[48491,0," "],[48491,2,""],[48491,0," "],[48492,35,""],[48492,0,"To make this efficient"],[48514,59,""],[48514,0," we store two "],[48524,4,""],[48524,0,"another mapping"],[48518,21,""],[48518,0,"maintain another internal"],[48527,16,""],[48527,0,"a second B-tree - this time mapping from even t"],[48573,1,""],[48572,1,""],[48572,0,"t ID. "],[48555,0,"a simple BT"],[48565,1,""],[48565,0,"-Tree map. The key is "],[48587,13,""],[48587,0," an"],[48589,1,""],[48588,1,""],[48587,1,""],[48587,0,"an "],[48595,0,"'s"],[48601,1,""],[48600,1,""],[48600,0,", adn the "],[48602,8,""],[48602,0,"and the value ei"],[48617,1,""],[48616,1,""],[48616,0,"is "],[48600,19,""],[48600,0,". For "],[48605,1,""],[48604,1,""],[48603,1,""],[48602,1,""],[48602,0,"The value depends on the type of the event:"],[48666,38,""],[48666,0," "],[48666,1,""],[48666,0,", we store"],[48700,16,""],[48699,1,""],[48677,0,"the "],[48703,0,"."],[48691,8,""],[48691,0,"t"],[48691,1,""],[48691,0,"t"],[48691,1,""],[48691,0,"deleted "],[48699,4,""],[48699,0,"character"],[48709,0,"\n- For insert events, we "],[48710,24,""],[48710,0,"- For insert events, we"],[48733,62,""],[48733,0," store the"],[48780,0," with the self"],[48740,0,"a reference to "],[48809,0,"same ID"],[48903,4,""],[48903,0,"the"],[48742,9,""],[48742,0,"pointer"],[48742,7,""],[48742,0,"reference"],[49015,127,""],[49056,0," to also happen"],[49057,0,"operations "],[49014,0,"\n"],[49014,0,"\n"],[49014,1,""],[49013,1,""],[48601,1,""],[48601,0,"\n"],[48575,1,""],[48575,0,"\n"],[48491,1,""],[48491,0,"\n"],[48411,1,""],[48411,0,"\n"],[48296,1,""],[48296,0,"\n"],[48358,1,""],[48358,0," - "],[48360,1,""],[48359,1,""],[48358,1,""],[48358,0,"- "],[48410,1,""],[48542,28,""],[48542,0,", "],[48544,5,""],[48544,0,"mapping from "],[48492,91,""],[48492,0,"To make this efficient we maintain a second B-tree, mapping from The key is an event's ID."],[48557,13,""],[48557,0,"an "],[48559,1,""],[48571,1,""],[48571,0," "],[48557,3,""],[48567,0," to infor"],[48571,5,""],[48568,3,""],[48567,1,""],[48557,0,"each "],[48659,12,""],[48668,0," deleted by this event"],[49001,5,""],[49081,99,""],[49080,0," I"],[49081,1,""],[49080,1,""],[49080,0," In the worst case, an "],[48997,106,""],[48997,0,"This allows us to advance or retreat operations to also happen in logarithmic time. In the worst case, an"],[49100,2,""],[49100,0,"this requires 3 b-tree lookups:"],[49123,7,""],[49123,0,"rtea"],[49126,1,""],[49125,1,""],[49124,1,""],[49123,1,""],[49123,0,"traversale"],[49132,1,""],[49132,0,"s"],[49134,0,"\n\n"],[49135,1,""],[49134,1,""],[49133,1,""],[49133,0,": A "],[49136,1,""],[49135,1,""],[49100,0,"an advance or retreat of a delete event "],[49140,5,""],[49170,0,"fri"],[49172,1,""],[49171,1,""],[49170,1,""],[49170,0,"First to find the target of the event, then to find t"],[49081,142,""],[49080,1,""],[49079,1,""],[49079,0,", though in the worst case this may take 3 traversals"],[49122,0,"b-tree "],[49139,0,"."],[49079,10,""],[49079,0,". I"],[49132,1,""],[49132,0," - though t"],[49142,1,""],[49142,0,"it is still quite fast."],[49153,12,""],[49153,0," "],[49132,22,""],[49132,0,"."],[48996,0,"\n"],[48996,0,"\nBecause "],[48997,8,""],[48997,0,"Because $sans(\"apply\")(e)$ will always pro"],[49038,1,""],[49038,0,"ecee"],[49036,6,""],[49036,0,"happen before "],[48997,53,""],[48997,0,"Because $sans(\"apply\")(e)$ will always happen before $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$ for any given event, the "],[49116,4,""],[49116,0,"this b-tree will alwatys "],[49140,1,""],[49139,1,""],[49138,1,""],[49137,1,""],[49137,0,"ys be populated correctly when we retreat or advance."],[48358,1,""],[48357,1,""],[48357,0,";"],[48357,1,""],[48357,0,","],[48358,17,""],[48358,0," o"],[48359,1,""],[48359,0,"wtoj"],[48362,1,""],[48361,1,""],[48360,1,""],[48360,0,"ith "],[48357,1,""],[48357,0,";"],[48357,1,""],[48357,0,","],[48357,1,""],[48479,0,"\n"],[48985,0,"// "],[49285,4,""],[49285,0,"these operations"],[48984,198,""],[48280,0,"already added"],[48293,2,""],[48293,0," to"],[48492,2,""],[48492,0," "],[48684,1,""],[48683,1,""],[48683,0,"e"],[48310,0," The "],[48311,4,""],[48311,0,"When these operations"],[48311,21,""],[48310,1,""],[48310,0,"\nWeh"],[48313,1,""],[48312,1,""],[48312,0,"hen re"],[48317,1,""],[48316,1,""],[48311,5,""],[48310,1,""],[48492,0," The even"],[48497,4,""],[48497,0,"position"],[48497,0,"event's "],[48505,8,""],[48505,0,"index cannot be used to locate these "],[48526,16,""],[48526,0,"here, b"],[48532,1,""],[48532,0,"as "],[48526,4,""],[48526,0,"to locate the target item, as "],[48556,5,""],[48556,0,"th"],[48557,1,""],[48556,1,""],[48556,0,"t"],[48556,1,""],[48556,0,"the event's position"],[48560,16,""],[48559,1,""],[48559,0,"re is n"],[48551,15,""],[48551,0," here, as "],[48560,1,""],[48559,1,""],[48558,1,""],[48557,1,""],[48556,1,""],[48556,0,"."],[48552,4,""],[48552,0,"as "],[48554,1,""],[48553,1,""],[48552,1,""],[48551,1,""],[48551,0,", as #"],[48556,1,""],[48556,0,"@"],[48556,1,""],[48556,0,"$"],[48556,1,""],[48556,0,"neither $"],[48564,1,""],[48563,1,""],[48562,1,""],[48561,1,""],[48560,1,""],[48559,1,""],[48558,1,""],[48557,1,""],[48556,1,""],[48555,1,""],[48554,1,""],[48553,1,""],[48552,1,""],[48551,1,""],[48551,0," "],[48551,1,""],[48492,60,""],[48310,0,"\nThe record is looked up by ID"],[48339,1,""],[48338,1,""],[48338,0,"ID - as "],[48322,0,"must be "],[48330,3,""],[48311,40,""],[48310,1,""],[48492,1,""],[48492,0,"\n\n"],[48493,0," The event's index cannot be used to locate the target item."],[48493,0,"Note that "],[48503,2,""],[48503,0,"e"],[48503,1,""],[48503,0,"t"],[48520,42,""],[48520,0," is use"],[48521,6,""],[48521,0,"can't h"],[48527,1,""],[48527,0,"be used here, "],[48540,1,""],[48539,1,""],[48535,4,""],[48535,0,"to locate the item, as the item's position"],[48569,8,""],[48569,0,"absolute position will not match"],[48587,5,""],[48587,0,"may "],[48600,0," the event's index"],[48587,0,"in the sequence "],[48634,0," at "],[48637,1,""],[48636,1,""],[48635,1,""],[48634,1,""],[48634,0,"."],[48493,142,""],[48492,1,""],[48492,0,"\nNote that the event's index can't be used to locate the item, as the item's absolute position in the sequence may not match the event's index."],[48493,0,"// "],[48725,5,""],[48725,0,"mapping stores a diff"],[48742,4,""],[48742,0,"value"],[48754,1,""],[48754,0,"ing"],[49162,17,""],[49162,0,"As a result,"],[49183,2,""],[49183,0,"and"],[49206,3,""],[49282,0," up to"],[49308,1,""],[49308,0,": One to l"],[49317,1,""],[49317,0,"m"],[49310,8,""],[49310,0,"First to map from a delete to the delete's st"],[49354,1,""],[49353,1,""],[49353,0,"target, then to find the record in the first b-tree, and a third traversal to update the numbers of "],[49452,1,""],[49451,1,""],[49442,9,""],[49442,0,"p"],[49442,1,""],[49431,11,""],[49431,0,"recursively update the parents of that item."],[49460,1,""],[49460,0," sizes"],[49460,0,"s"],[49461,6,""],[49238,1,""],[49238,0,"\n// "],[49237,1,""],[49237,0," -"],[49238,1,""],[49237,1,""],[49237,0,"."],[49161,0,"\n\n// On every $sans(\"apply\")(e)$ we use the above process to identify the target record in the sequence, and then we store the mapping from $e.italic(\"id\")$ to the target record ID.\n// When we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\n// We can therefore ignore the operation index when retreating and advancing, and instead use the event ID to look up the record to be updated.\n"],[49163,3,""],[49161,1,""],[49192,81,""],[49192,0," update this b"],[49205,1,""],[49205,0,"mapping for the even"],[49224,1,""],[49223,1,""],[49222,1,""],[49221,1,""],[49220,1,""],[49219,1,""],[49218,1,""],[49217,1,""],[49216,1,""],[49215,1,""],[49214,1,""],[49213,1,""],[49213,0,"based on the event."],[49232,65,""],[49233,3,""],[49413,3,""],[49631,0,"\n"],[49189,0,", after performing th"],[49197,13,""],[49197,0,"update"],[49202,1,""],[49202,0,"ing the sequence as above,"],[48258,51,""],[48258,0,"the record inserted or delte"],[48285,1,""],[48284,1,""],[48284,0,"eted by #"],[48292,1,""],[48292,0,"$e_i$"],[48401,0,"// "],[48299,0,"// "],[48258,0,"of "],[48635,0,"\nThe target record cannot be looked up by "],[48654,23,""],[48654,0,"can't be f"],[48663,1,""],[48663,0,"looked up by its index. Instead, "],[48687,9,""],[48687,0,"Instead, to find the item "],[48636,77,""],[48636,0,"The target record can't be looked up by its index. Instead, to find the item"],[48712,24,""],[48712,0," "],[48770,0," "],[48770,1,""],[48770,0," to the target record"],[48917,0,"_"],[48907,0,"_"],[49526,141,""],[49527,0,"// This tree allows us to advance or retreat in logarithmic time.\n"],[49527,3,""],[49590,77,""],[49532,4,""],[49532,0,"map"],[49022,15,""],[49022,0,"the in"],[49016,12,""],[49016,0," containing the inserted item"],[49597,241,""],[49597,0,"\n"],[49597,1,""],[51148,0,"\\"],[51148,1,""],[51151,0,"$"],[51148,0,"$"],[51149,3,""],[51149,0,"if"],[51149,2,""],[51149,0,"iff"],[51152,1,""],[51148,1,""],[51790,0,"\n\n"],[51791,0,"\nCritical versions provide a \"firewall\" of sorts. "],[51840,1,""],[51839,1,""],[51839,0," for information. It is impossible for the events which happened before a critical versions "],[51930,1,""],[51929,1,""],[51929,0," to affect the "],[51895,0,"at"],[51896,1,""],[51895,1,""],[51903,0," at or"],[51946,4,""],[51946,0,"how any event after the critical version is transformed."],[51844,0,"ordering "],[51864,0," within the docuemnt"],[51883,1,""],[51882,1,""],[51881,1,""],[51880,1,""],[51880,0,"ment"],[51829,1,""],[51820,1,""],[51842,40,""],[51842,0,"how inserted items are ordered in the document"],[51865,0,"ultimately "],[51883,16,""],[51883,0," within the document"],[52103,2,""],[52103,0,"Any tyim"],[52110,1,""],[52109,1,""],[52108,1,""],[52108,0,"ime"],[52715,1,""],[52715,0,"."],[52717,1,""],[52717,0,"W"],[52358,4,""],[52358,0,"a visited "],[52368,5,""],[52338,0,"// "],[52748,0," The event does not need to be transformed. It is emitted as-is."],[52759,0,"also "],[52795,1,""],[52795,0,", and it can be"],[52810,6,""],[52337,0,"\n/"],[52338,1,""],[52338,0,"- If an events' parent version is critical, "],[52340,0,"An t"],[52343,1,""],[52342,1,""],[52342,0,"y time "],[52349,3,""],[52375,13,""],[52375,0,"is equial "],[52384,1,""],[52383,1,""],[52382,1,""],[52381,1,""],[52381,0,"al to the version fo the"],[52404,1,""],[52399,5,""],[52338,61,""],[52338,0,"- Any time an events' parent version is equal to the version of the event graph processed so far (ie, #"],[52440,1,""],[52440,0,"$e"],[52441,1,""],[52441,0,"s_p$ = "],[52447,1,""],[52446,1,""],[52445,1,""],[52444,1,""],[52444,0," = $"],[52447,1,""],[52447,0,"s_e$ for all nodes"],[52460,5,""],[52460,0,"th"],[52456,6,""],[52456,0,"the entire "],[52455,12,""],[52455,0," "],[52455,1,""],[52454,1,""],[52453,1,""],[52452,1,""],[52451,1,""],[52451,0," for "],[52455,1,""],[52454,1,""],[52453,1,""],[52452,1,""],[52452,0,"in all records), w"],[52469,1,""],[52469,0,"the transform fun"],[52473,13,""],[52473,0,"op"],[52474,1,""],[52473,1,""],[52473,0,"even to "],[52480,1,""],[52479,1,""],[52478,1,""],[52477,1,""],[52477,0,"t does not need to be transformed. It can be "],[52512,10,""],[52511,1,""],[52512,186,""],[52073,7,""],[52073,0,"twp"],[52075,1,""],[52075,0,"o"],[52333,0," "],[52333,1,""],[52809,0,"\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway. We can just skip this work. The event also does not need to be transformed, and it can be emitted as-is."],[52809,302,""],[52809,0,"\n- Any time an events' parent version is equal to the version of the event graph processed so far (ie, $s_p = s_e$ in all records), the event does not need to be transformed."],[52334,174,""],[52557,1,""],[52557,0,".\n\n\n"],[52557,1,""],[52557,0," and emit the event as-is."],[52530,0," In this case we also know that the "],[52547,19,""],[52547,0,"are also guaranteed that the event's parent version is equal to the version of "],[52627,52,""],[52530,0," We can just skip this work and emit the event as-is."],[52583,97,""],[52584,254,""],[52530,0," The tranbs"],[52540,1,""],[52539,1,""],[52538,1,""],[52538,0,"n"],[52531,8,""],[52531,0,"In this case, the transformed version of the event qi"],[52583,1,""],[52582,1,""],[52582,0,"will be identical to the origianl"],[52607,8,""],[52607,0,"original event, so "],[52626,31,""],[52626,0,"we can"],[52952,0," In "],[52955,1,""],[52954,1,""],[52953,1,""],[52952,1,""],[52952,0,"\nIn documents that are "],[52953,22,""],[52952,1,""],[52953,8,""],[52953,0,"Because "],[52953,11,""],[52953,0,"We can s"],[52960,1,""],[52960,0,"also "],[52953,12,""],[52953,0,"T"],[52953,0,"Moreover, "],[52963,1,""],[52963,0,"t"],[52626,12,""],[52636,0,"can be emitted "],[52656,0," with no fur"],[52656,12,""],[52640,0,"simply "],[52963,0,"\n"],[53125,1,""],[54494,10,""],[54494,0,"A"],[54553,8,""],[54553,0,"document"],[54595,1,""],[54595,0,"."],[54597,1,""],[54597,0,"A"],[54597,1,""],[54597,0,"a"],[54595,1,""],[54595,0,";"],[54553,8,""],[54553,0,"internal"],[51791,0,"\nA key insight in the design of eg-walker is that "],[51841,2,""],[51841,0,"c"],[54543,50,""],[54543,0,"T"],[54595,1,""],[54595,0,"."],[54597,1,""],[54597,0,"A"],[54543,0,"Luckily, "],[54552,1,""],[54552,0,"t"],[52099,0," #footn"],[52101,5,""],[52101,0,"footnote()"],[52110,1,""],[52109,1,""],[52109,0,"[]"],[52110,0,"Note this is not true for all"],[52127,12,""],[52127,0,"generally true"],[52120,21,""],[52120,0,"property is true for most, but not all CRDTs. no"],[52167,1,""],[52166,1,""],[52166,0,"Notably, this is not true "],[52158,0," text based"],[52203,0,"for Peritext @perite"],[52217,6,""],[52216,1,""],[52207,9,""],[52207,0,"Peritext CRDT @e"],[52222,1,""],[52222,0,"peritexrt"],[52230,1,""],[52229,1,""],[52229,0,"t"],[52220,0," due to the way "],[52221,15,""],[52220,1,""],[52207,0,"the "],[52224,0," due to the way annotations"],[52225,26,""],[52224,1,""],[52224,0," co"],[52226,1,""],[52225,1,""],[52225,0,"for Rich Text editing"],[52238,1,""],[52238,0,"-"],[52238,1,""],[52238,0," "],[52233,1,""],[52233,0,"-"],[52239,7,""],[52238,1,""],[52233,1,""],[52233,0," "],[52234,1,""],[52234,0,"t"],[52229,1,""],[52229,0,"r"],[52229,1,""],[52229,0,"R"],[52229,1,""],[52229,0,"r"],[52229,9,""],[52228,1,""],[52220,0,"rich text "],[52234,4,""],[52220,10,""],[52224,0," for rich text ed"],[52240,1,""],[52239,1,""],[52238,1,""],[52229,0,"collaborative "],[52252,0," editing"],[52110,6,""],[52110,0,"T"],[52135,0," the text CRDT "],[52136,14,""],[52136,0,"our modified Yjs CRDT, but it is not "],[52124,49,""],[52124,0,"holds for our"],[52137,29,""],[52134,9,""],[52134,0,"most text CRDTs, but "],[52154,1,""],[52150,4,""],[52143,7,""],[52138,5,""],[52134,4,""],[52134,0,"our CRDTs"],[52137,0," most, but not all text based"],[52188,19,""],[52188,0,"property does nto "],[52205,1,""],[52204,1,""],[52203,1,""],[52203,0,"ot hold for the "],[52218,1,""],[52268,0," "],[52268,1,""],[52268,0," due to how peritext han"],[52289,3,""],[52289,0,"processes annotation"],[52289,10,""],[52289,0,"ext"],[52289,3,""],[52289,0,"processes "],[52309,0,"."],[52309,0,"s"],[52298,0," concurrent"],[52321,1,""],[52322,9,""],[52321,1,""],[52269,0,"@peritext "],[52278,0,")"],[52269,0,"("],[52333,0,"."],[60020,0," heavily"],[60764,1,""],[60764,0,"th"],[60765,1,""],[60764,1,""],[60758,6,""],[60758,0,"the previous inserted"],[60771,8,""],[60771,0,"location - "],[60781,1,""],[60780,1,""],[60779,1,""],[60757,0," 6 "],[60759,1,""],[60758,1,""],[60758,0,"6"],[60758,1,""],[60758,0,"7 characters before"],[60790,0," event's "],[60798,1,""],[60798,0," cursor"],[60798,16,""],[60798,0," insert lot"],[60808,1,""],[60808,0,"cation"],[60973,0," To keep posit"],[60986,1,""],[60985,1,""],[60985,0,"itions small, each "],[60982,22,""],[60982,0,"insert posi"],[60974,19,""],[60974,0,"Insert positions are described relative to the "],[60686,1,""],[60686,0,"."],[60688,1,""],[60688,0,"T"],[60607,1,""],[60607,0,"T"],[60799,7,""],[60967,47,""],[60966,1,""],[60821,0,"Insert positions are described relative to the  "],[60868,0," "],[60868,1,""],[60868,0,"implied cursor position after the previous insert has happened."],[60911,20,""],[60911,0,"event has happened."],[60820,110,""],[60966,0,"  Insert positions are described relative to the implied cursor position after the previous event has happened."],[60967,1,""],[61076,0," As"],[61078,1,""],[61077,1,""],[61076,1,""],[61075,1,""],[61075,0,". (So these "],[61076,11,""],[61075,1,""],[61075,0," - so th"],[61082,1,""],[61081,1,""],[61081,0,"curs"],[61075,10,""],[61075,0,"."],[61075,1,""],[61075,0,", so even when editing "],[61075,1,""],[61075,0,"."],[61075,1,""],[61075,0,", because"],[61084,3,""],[61103,0,"very large documents, cursor p"],[61132,1,""],[61132,0,"movements are usually sm"],[61155,1,""],[61154,1,""],[61075,79,""],[61075,0,"."],[60967,16,""],[60967,0,"Editing indexes"],[60975,0,"position "],[61797,0," All replicas are assigned an "],[61814,13,""],[61814,0," written out in some "],[61830,5,""],[61830,0,"order"],[61798,37,""],[61797,1,""],[60192,0," Sopm"],[60196,1,""],[60195,1,""],[60195,0,"me aditional "],[60200,0,"d"],[60209,0,"tricks "],[60209,7,""],[60209,0,"bit packing trick"],[60198,28,""],[60197,1,""],[60196,1,""],[60195,1,""],[60194,1,""],[60193,1,""],[60192,1,""],[60192,0," Some additional bit packing tricks were copied from "],[60233,12,""],[60233,0,"inspi"],[60233,5,""],[60233,0,"copied from #"],[60245,1,""],[60245,0,"@yjs"],[60246,3,""],[60246,0,"yjs."],[60245,0,"Y"],[60245,1,""],[60245,0,"the Yjs CRDT library "],[60275,0," first"],[60324,1,""],[60324,0,"."],[60326,1,""],[60326,0,"D"],[61882,0," The list of all replicas s"],[61908,1,""],[61908,0,"are stored in th efil"],[61928,1,""],[61927,1,""],[61926,1,""],[61925,1,""],[61924,1,""],[61924,0,"e file"],[61882,48,""],[61974,3,""],[61974,0,"0$"],[61974,0,"$"],[61976,1,""],[61974,1,""],[62047,3,""],[62047,0,"0"],[62047,1,""],[62047,0,"2"],[62094,0," The "],[62095,4,""],[62095,0,"This column is combined with a lookup table, with the full GUID for each replica. ("],[62177,1,""],[62177,0,"For example, \"Replica "],[62124,14,""],[62124,0,"an i"],[62127,1,""],[62126,1,""],[62125,1,""],[62125,0," list of replica GUIDs"],[62147,39,""],[62147,0,". "],[62047,1,""],[62047,0,"1"],[62047,1,""],[62047,0,"2"],[62126,45,""],[62126,0,"mapping from integer to replica GUID. Eg, "],[62167,1,""],[62166,1,""],[62165,1,""],[62164,1,""],[62164,0,"For example, \"Replica 0 is 'abcde123123'"],[62163,41,""],[62106,56,""],[62102,3,""],[62100,1,""],[62092,7,""],[62089,2,""],[62047,1,""],[62047,0,"$B$"],[61974,1,""],[61974,0,"$A$"],[62099,0,"\n"],[62099,0,"\nThere are a few more bit packking "],[62133,1,""],[62132,1,""],[62131,1,""],[62130,1,""],[62129,1,""],[62129,0,"ing tricks - for example, to optimi"],[62142,22,""],[62141,1,""],[62140,1,""],[62139,1,""],[61116,52,""],[61096,19,""],[61083,12,""],[61081,1,""],[61046,34,""],[60884,8,""],[60884,0,"7"],[60880,3,""],[60880,0,"dex"],[60872,7,""],[60843,28,""],[60773,1,""],[60773,0,"t"],[60771,1,""],[60771,0,","],[60692,1,""],[60692,0,"t"],[61951,1,""],[61950,1,""],[61950,0,"several "],[61958,27,""],[61958,0,"careful bitp"],[61969,1,""],[61969,0," packing techni"],[61978,6,""],[61978,0,"techniques"],[61940,48,""],[61940,0,"The file format layers many c"],[61968,1,""],[61963,5,""],[61963,0,"a"],[61963,1,""],[61956,7,""],[61956,0,"uses a lot of creative pb"],[61980,1,""],[61979,1,""],[61979,0,"bit packing tehcn"],[61995,1,""],[61994,1,""],[61993,1,""],[61993,0,"hc"],[61994,1,""],[61993,1,""],[61993,0,"chniques. For examopl"],[62013,1,""],[62012,1,""],[62011,1,""],[62011,0,"ple, runs of backspaces are encoded specially (to avoid "],[61960,18,""],[61960,0," several"],[61961,7,""],[61956,5,""],[61956,0,"uses many careful"],[61961,5,""],[61961,0,"a lot of "],[61956,21,""],[61956,0,"layers many"],[61963,4,""],[61963,0,"a lot of carefully written"],[62069,9,""],[62068,1,""],[62068,0,"(to allow them to be run-length encode"],[62067,39,""],[62067,0,". "],[62068,1,""],[62067,1,""],[62067,0,", to allow them to be run-length encoded. In"],[62110,1,""],[62109,1,""],[62109,0,"Event indexes are expressed relative to the end of th ep"],[62164,1,""],[62163,1,""],[62162,1,""],[62162,0,"e previous event."],[62115,0,"position "],[62123,1,""],[62123,0,"s ("],[62133,0,")"],[62191,0," Replica IDs are deduplicated. "],[62221,1,""],[62220,1,""],[62220,0,", and so on."],[62220,0," in the file"],[61963,26,""],[61963,0,"several more carefully written"],[61986,7,""],[61985,1,""],[61985,0," written"],[63477,0,"\n"],[63135,0,"otherwise "],[63055,37,""],[63055,0,"several optimisations, including "],[63087,1,""],[63077,10,""],[63062,15,""],[63055,7,""],[63055,0,"the B-trees, run-length encoding, and"],[63055,37,""],[63055,0,"several optimisations, including the u"],[63092,1,""],[63091,1,""],[63090,1,""],[63089,1,""],[63088,1,""],[63088,0,"run-length encodign "],[63107,1,""],[63106,1,""],[63105,1,""],[63105,0,"ng "],[63088,0,"inten"],[63092,1,""],[63091,1,""],[63091,0,"ernal "],[63116,1,""],[63116,0,", b-trees "],[63125,1,""],[63118,7,""],[63118,0,"B-Trees"],[63124,1,""],[63123,1,""],[63122,1,""],[63121,1,""],[63120,1,""],[63120,0,"tres"],[63123,1,""],[63123,0,"es and "],[63130,20,""],[63125,5,""],[63117,1,""],[63116,1,""],[63116,0," and "],[63128,1,""],[63128,0,"."],[63130,1,""],[63130,0,"B"],[65332,4,""],[65331,1,""],[65331,0,", "],[65383,1,""],[65383,0," and the typst source of this article."],[65404,0,"code"],[65407,1,""],[65406,1,""],[65405,1,""],[65404,1,""],[65404,0," co"],[65406,1,""],[65405,1,""],[65404,1,""],[65404,0,"code for"],[65412,3,""],[65392,6,""],[65401,1,""],[65400,1,""],[65399,1,""],[65398,1,""],[66233,0," as amn"],[66239,1,""],[66238,1,""],[66237,1,""],[66237,0,"many as"],[66491,0," "],[66491,1,""],[66491,0," Eg"],[66493,1,""],[66492,1,""],[66491,1,""],[66491,0,"E"],[66491,1,""],[66491,0," Eg-walker "],[66472,0,"editing "],[66500,10,""],[66499,1,""],[66499,0," In absou"],[66507,1,""],[66507,0,"lute performance, "],[66512,13,""],[66512,0,"numbers, "],[66500,21,""],[66500,0,"All opf th"],[66509,1,""],[66508,1,""],[66507,1,""],[66506,1,""],[66505,1,""],[66505,0,"f the measured "],[66519,1,""],[66447,1,""],[66446,1,""],[66446,0,", "],[66497,1,""],[66498,1,""],[66498,0,"\n"],[64789,31,""],[64789,0,"editing events, couting "],[64805,8,""],[64805,0,"counting inserted and deleted characters"],[64871,5,""],[64871,0,"concurrency"],[64977,0," "],[64977,1,""],[64293,5,""],[64293,0,"concu"],[64297,1,""],[66516,0," (keystrokes)"],[66516,13,""],[66528,0," One editing "],[66528,13,""],[66548,0," systems are objectiv"],[66529,40,""],[66528,0," Note that the system "],[66529,21,""],[66528,1,""],[66476,1,""],[66527,0," This is very fast  "],[66546,1,""],[66545,1,""],[66527,18,""],[66855,13,""],[66855,0,"The libraries tested"],[66979,10,""],[66855,0,"Als"],[66857,1,""],[66857,0,"though all libraries are objectively f"],[66894,1,""],[66894,0,"very fast, "],[66905,1,""],[66905,0,"t"],[66918,0," we"],[66877,0," in ou"],[66878,5,""],[66878,0,"we tested"],[66915,23,""],[66915,0,"they still"],[66952,1,""],[66952,0,"."],[66952,1,""],[66952,0,":"],[66941,0,"absolute "],[68393,0,"// "],[68375,0,"// "],[68360,0,"// "],[68355,0,"// "],[68001,0,"// "],[67988,0,"// "],[67957,0,"// "],[67948,0,"// "],[67456,0,"// "],[67455,0,"\n"],[70434,0,"\n\n<cha"],[70437,3,""],[70437,0,"chart-all-remote>>"],[70454,1,""],[70453,1,""],[70436,1,""],[70436,0,"@"],[70436,17,""],[70435,1,""],[70434,1,""],[67455,0,"\n\n@chart-all-remote"],[67457,17,""],[67456,1,""],[67455,1,""],[67610,830,""],[67456,154,""],[66661,0,"Performance "],[66672,0,":"],[66661,13,""],[66683,0,"existing "],[66698,0,"\n"],[66698,0,"\nThe ob"],[66704,1,""],[66703,1,""],[66702,1,""],[66701,1,""],[66700,1,""],[66699,1,""],[66699,0,"There's"],[66705,1,""],[66704,1,""],[66704,0," are doze"],[66709,4,""],[66709,0,"dozens of "],[66699,20,""],[66699,0,"There are dozens of"],[64293,1,""],[64293,0,"C"],[64297,0,"c"],[64297,1,""],[64297,0,"."],[64297,1,""],[64288,5,""],[64292,0,"."],[64292,1,""],[66704,9,""],[66704,0,"a lot of way "],[66694,23,""],[66694,0,"There a "],[66701,1,""],[66701,0,"re a lot of ways we could compare"],[66694,40,""],[66693,1,""],[66692,1,""],[66692,0,"\n\nThere are a lot of ways we could compare "],[66694,41,""],[66694,0,"I"],[66694,1,""],[66694,0,"Benchm"],[66694,6,""],[66694,0,"We "],[66694,3,""],[66694,0,"Fairly evaluating eg-walker is "],[66694,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries"],[66783,31,""],[66783,0,"; but "],[66694,95,""],[66694,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries; but"],[66693,0,"\n\n"],[66694,0,"Its a bit of a tricky thing comparing a library"],[66734,7,""],[66733,1,""],[66733,0,"n algorithm like eg-walker against trad"],[66768,4,""],[66768,0,"existing c"],[66777,1,""],[66777,0,"CRDTs. There "],[66694,98,""],[66785,3,""],[66784,1,""],[66783,1,""],[66783,0,":"],[66826,0,"\n"],[66785,1,""],[66825,0,"\nWe've benchmarked our implementation of eg-walker against several existing CRDT libraries:"],[66694,91,""],[66735,91,""],[66735,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries:"],[66735,214,""],[66735,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries: We compare eg-walker to several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy."],[66826,55,""],[66825,1,""],[66824,1,""],[66892,0," Unfortuantel"],[66893,12,""],[66893,0,"Unfortunately, its a bit tricky "],[66912,13,""],[66912,0,"quite difficult to "],[66908,23,""],[66908,0,"the libraries"],[66911,0," performance of the"],[66940,0," we tested"],[66912,19,""],[66931,0," vary "],[66735,202,""],[66735,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy. Unfortunately, the libraries we tested vary"],[66936,77,""],[66936,0," "],[66969,41,""],[66969,0,"the be"],[66974,1,""],[66973,1,""],[66972,1,""],[66977,0," performing librari"],[66995,1,""],[66995,0,"y performs about 500x faster than the "],[67033,30,""],[67033,0,"worst."],[66969,0,"on some tests "],[67053,0," "],[67053,1,""],[67053,0," This "],[67054,5,""],[67054,0,"This is a much "],[67059,10,""],[67059,0,"makes it hard to get a sense for how eg-walker compares to the equivalent CRDT - since we obviously)"],[67149,0,"("],[67160,0," wat "],[67164,1,""],[67163,1,""],[67163,0,"nt "],[67165,1,""],[67161,4,""],[67161,0,"don't simpl"],[67166,6,""],[67166,0," want to simply "],[66969,2,""],[66968,1,""],[66967,1,""],[66967,0,". Despite implmenting "],[66977,12,""],[66977,0,"in man"],[66982,1,""],[66981,1,""],[66980,1,""],[66979,1,""],[66978,1,""],[66978,0,"mplementing extremely similar algorithms, on"],[67105,5,""],[67105,0,"This m"],[67110,1,""],[67118,0," "],[67118,1,""],[67118,0," very"],[66735,503,""],[66735,0,"We've benchmarked our implementation of eg-walker against several existing CRDT libraries: Automerge @automerge, Yjs @yjs, Cola @cola, and json-joy @jsonjoy. Unfortunately, the libraries we tested vary wildly in absolute performance. Despite implementing extremely similar algorithms, on some tests the best performing library performs about 500x faster than the worst. This makes it very hard to get a sense for how eg-walker compares to the equivalent CRDT - since we (obviously) don't want to simply"],[66693,0,"\n"],[66693,0,"\nUl"],[66695,1,""],[66694,1,""],[66694,0,"We've "],[66694,6,""],[66694,0,"For this benchmark, we've chosen 2 main bench"],[66734,5,""],[66734,0,"t"],[66734,1,""],[66734,0,"measurements:"],[66729,4,""],[66729,0,"core"],[66747,0,"\n\n- Remote replay"],[66758,6,""],[66758,0,"replay of a document: This tests how "],[66749,2,""],[66776,1,""],[66776,0," \\"],[66777,1,""],[66777,0,"/"],[66777,1,""],[66777,0,"\\"],[66776,2,""],[66776,0,":"],[66749,0,"- "],[66749,1,""],[66749,0,"/"],[66764,14,""],[66749,32,""],[66749,0,"/ Remote replay: This tests how"],[66694,18,""],[66694,0,"Teo"],[66696,1,""],[66695,1,""],[66695,0,"o evaluate eg-walker"],[66706,0,"the performance of "],[66802,0," fast each "],[66771,42,""],[66771,0,"/ Remote replay: This tests how fast each"],[66734,0," compared to existing CRDT algorithms"],[66849,0," alo"],[66852,1,""],[66851,1,""],[66850,1,""],[66850,0,"implmeentation "],[66850,15,""],[66850,0,"implementation can take the expected remote format ("],[66887,15,""],[66887,0,"wire format (eithe r"],[66906,1,""],[66905,1,""],[66905,0,"r a list"],[66909,4,""],[66909,0,"set of CRDT messages"],[66869,4,""],[66869,0,"ingest "],[66875,1,""],[66869,6,""],[66869,0,"process"],[66881,9,""],[66881,0,"network"],[66888,4,""],[66895,0," in"],[66897,1,""],[66896,1,""],[66895,1,""],[66895,0," fo"],[66897,1,""],[66896,1,""],[66896,0,"of a document "],[66909,1,""],[66909,0,", and produce a local document"],[66915,24,""],[66915,0,"recreate a local document state."],[66947,31,""],[66947,0," For CRDT l"],[66957,1,""],[66957,0,"algorithms, the remote document state consists of a set of CRDT messages, enco"],[67029,6,""],[67029,0,". For eg-walker, the state is a "],[67060,1,""],[67059,1,""],[67059,0,"the event graph. In each case, we assume the local "],[67076,34,""],[67075,1,""],[67075,0,"\n/ Wire "],[67078,5,""],[67078,0,"File size: This is "],[67096,1,""],[67095,1,""],[67094,1,""],[67094,0,"measures how much "],[67107,5,""],[67107,0,"many bytes each document takes to "],[67132,9,""],[67131,1,""],[67118,0,"the "],[67122,5,""],[67118,4,""],[67118,0,"each system takes to encode the "],[67158,0,"'s history."],[67160,9,""],[67160,0," state.,"],[67167,1,""],[67166,1,""],[67166,0,", either over "],[67175,5,""],[67175,0,"for "],[67175,4,""],[67175,0,"to send over the network or store on disk.\n\n"],[66792,0,", realistic"],[67085,0," and we measure the re"],[67106,1,""],[67105,1,""],[67104,1,""],[67104,0," replay function "],[67101,0,"how lon"],[67101,7,""],[67101,0,"how long we can genera"],[67085,58,""],[67018,2,""],[67018,0,"the "],[67028,0," all"],[67236,0,"W"],[67236,1,""],[67236,0,"We've chosen "],[67242,7,""],[67241,1,""],[67240,1,""],[67239,1,""],[67239,0,"ve chosen not to "],[67236,20,""],[67236,0,"There are several other small"],[67260,5,""],[67260,0,"perfoma"],[67266,1,""],[67260,6,""],[67260,0,"performancedif"],[67273,1,""],[67272,1,""],[67271,1,""],[67271,0," figf"],[67275,1,""],[67274,1,""],[67273,1,""],[67272,1,""],[67272,0,"differences between the systems "],[67303,1,""],[67303,0," that we ar"],[67313,1,""],[67312,1,""],[67311,1,""],[67311,0," aren't measuring here:\n\n- Local "],[67338,6,""],[67338,0,"Time to process local editing events. Eg-walker simply "],[67376,0,"When local events h"],[67394,1,""],[67394,0,"occur on a "],[67387,18,""],[67387,0,"editing events occur, "],[67409,17,""],[67409,0,"CRDT implementations need to convert those editing events in"],[67376,33,""],[67413,23,""],[67413,0,"local editing events into their own internal CRDT message format. This"],[67482,1,""],[67481,1,""],[67480,1,""],[67479,1,""],[67479,0,"Eg-walker doesn't need to do this, however "],[67479,43,""],[67479,0,"All the algorithms we measured can do this much faster"],[67522,11,""],[67522,0,"many orders of magnitude faster than any user types - so we don't consider the"],[67573,27,""],[67573,0,"."],[67573,1,""],[67573,0,", so we don't consider this tex"],[67603,1,""],[67603,0,"st particularly relevant in practice.\n\n"],[67641,1,""],[67641,0,"- Memory "],[67643,0,"Resident "],[67652,1,""],[67652,0,"m"],[67659,0,"usi"],[67661,1,""],[67661,0,"age during editing. Th"],[67682,1,""],[67681,1,""],[67681,0,"E"],[67681,1,""],[67681,0,"Here eg-walker "],[67681,6,""],[67681,0,"E"],[67681,0,"In practice, "],[67694,1,""],[67694,0,"e"],[67704,0,"will have "],[67681,14,""],[67681,0,"Its quite "],[67681,10,""],[67681,0,"E"],[67680,0," CRDT implementations need to keep the CRDT state resident in memory during "],[67749,7,""],[67749,0,"while a user edits a document."],[67790,10,""],[67790,0,"does not - the state can "],[67801,14,""],[67801,0,"the state is not "],[67814,4,""],[67814,0,"only"],[67805,0,"equivalent CRDT "],[67834,0," g"],[67835,1,""],[67835,0,"generated during replay operations "],[67869,1,""],[67869,0,", "],[67870,1,""],[67869,1,""],[67845,6,""],[67845,0,"when"],[67855,1,""],[67855,0,"ying or merging remote oper"],[67881,1,""],[67880,1,""],[67879,1,""],[67878,1,""],[67877,1,""],[67888,0,". And then, only the relevant parts. "],[67924,1,""],[67924,0," However, our eg-walker implementation does not"],[67963,8,""],[67963,0,"stil"],[67963,4,""],[67963,0,"currently still keeps the event graph in memory anyway."],[67640,0,"\n- Time to merge "],[67641,16,""],[67641,0,"- Time to merge individual changes received over the network. This is hard to measure in practice. Eg-walker will have much more "],[67765,5,""],[67765,0,"less stable performance - f"],[67791,1,""],[67790,1,""],[67789,1,""],[67788,1,""],[67788,0,": it will be faster to merge sequential changes, but much slower when merging long lived branches compared to CRDTs."],[67816,0," individual"],[67479,0,"Eg-walker is much faster here, but "],[67514,1,""],[67514,0,"a"],[67549,7,""],[67549,0,"process local edits"],[67614,0," will reasonably"],[67615,15,""],[67615,0,"is capable of"],[67633,1,""],[67632,1,""],[67632,0,"ing"],[67635,1,""],[67635,0,"."],[67635,1,""],[67635,0,","],[67635,1,""],[67635,0,","],[68356,0,"\n"],[68356,0,"\n"],[68357,43,""],[68478,0," @"],[68479,1,""],[68479,0,"#foo"],[68480,3,""],[68480,0,"footnote()"],[68489,1,""],[68488,1,""],[68488,0,"[]"],[68489,0,"asdf"],[68478,16,""],[68473,0," #footnote[asdf]"],[68484,4,""],[68484,0,"We also tested Yrs"],[68499,0,"the rust rewrite of Yjs, "],[68519,5,""],[68499,20,""],[68502,0,", the rust rewrite of Yjs. At the time of writing it is"],[68556,1,""],[68555,1,""],[68555,0,"performan"],[68563,1,""],[68562,1,""],[68562,0,"s worse than Yjs so h"],[68582,1,""],[68582,0,"we have removed it from the data set."],[68527,0," by the original o"],[68544,1,""],[68544,0,"authors"],[68602,0," -"],[68603,1,""],[68602,1,""],[68602,0,","],[68631,3,""],[68631,0,"our"],[68996,35,""],[68996,0,"the goal here is to compare the algorithms, not the implementations."],[68996,4,""],[68996,0,"our "],[69004,5,""],[69059,0,"\n"],[69061,62,""],[69060,0,"\n"],[69060,0,"\n"],[69004,0," ere"],[69007,1,""],[69006,1,""],[69005,1,""],[69005,0,"here "],[69009,1,""],[69066,132,""],[69066,0,"W"],[69065,0,"\n"],[69065,0,"\nAs far "],[69066,7,""],[69066,0,"To that end, "],[69079,3,""],[69079,0,"w"],[69081,0," also"],[69196,0,"B-tree "],[69241,0,"our "],[69254,0," implementation"],[69270,1,""],[69270,0," "],[69274,0,"se"],[69305,0," in more detail"],[69353,1777,""],[2453,0,"//"],[2501,0,"\n  *Collaborative text editing: Better, Faster, Smaller*"],[2519,1,""],[2519,0,"T"],[2524,1,""],[2524,0,"E"],[8705,20,""],[8705,0,"W"],[13347,10,""],[13347,0,":"],[13448,4,""],[13448,0,"/"],[13528,15,""],[13537,0,"'s par"],[13528,52,""],[13553,0," we also say"],[14041,3,""],[14041,0,"and"],[14805,3,""],[14805,0,": t"],[14805,1,""],[14805,0,";"],[14917,10,""],[14847,7,""],[16911,12,""],[16911,0,", which"],[16883,1,""],[16875,2,""],[16875,0,"the"],[16884,5,""],[21960,7,""],[21960,0,"R"],[91741,0,"\n\n//. "],[91746,1,""],[91745,1,""],[91745,0," TODO: proofs. "],[91759,1,""],[91759,0,"\n// \"\""],[91764,0,"given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event."],[92008,1,""],[92009,0," ()"],[92011,0,"end of SEction 2"],[92019,1,""],[92019,0,"e"],[22607,0,"whenever a replica adds an event to the graph, "],[22698,46,""],[22698,0,"it"],[22519,13,""],[22530,0," replay"],[28539,11,""],[28478,13,""],[28477,1,""],[28463,3,""],[28463,0,"in"],[28454,8,""],[28454,0,"editing history"],[28597,8,""],[28597,0,"operations"],[28733,1,""],[28733,0,"w"],[28811,5,""],[28810,1,""],[28819,0,"s"],[28894,56,""],[28894,0,"prodeuc"],[28900,1,""],[28899,1,""],[28898,1,""],[28898,0,"uces the cortr"],[28911,1,""],[28910,1,""],[28910,0,"rect result, but it performs poorly, as we need to store and updatte "],[28978,1,""],[28977,1,""],[28976,1,""],[28976,0,"e a full copy of the CRDT state"],[29007,3,""],[29007,0," f"],[29054,54,""],[29277,18,""],[29293,73,""],[29293,0,"that can transform and merge events from multiple branches"],[29449,26,""],[29418,0,",  in many editing histories,"],[29419,1,""],[29588,13,""],[29523,61,""],[29523,0,","],[29528,0," we can"],[29591,172,""],[35531,0,"{"],[35535,0,"}"],[45359,2,""],[45359,0,","],[45516,0,"-"],[45390,11,""],[45390,0,"T"],[45374,0,"prepare "],[45387,9,""],[45531,0,"effect "],[45543,9,""],[45387,0," $s_p$"],[45549,0," $s_e$"],[47842,10,""],[47841,36,""],[47841,0,", which modify"],[47690,6,""],[47690,0,"makes"],[47717,16,""],[47727,1,""],[47726,1,""],[47728,10,""],[47728,0,"W"],[48251,1,""],[48251,0,"no"],[48291,17,""],[48496,1,""],[48485,1,""],[48474,0," the"],[49113,1,""],[48230,0,"While advancing/retreating we cannot look up "],[48275,3,""],[48275,0,"a"],[48290,20,""],[48304,0,"\n"],[48305,1,""],[48304,1,""],[48304,0," "],[48564,109,""],[48629,0," corresponding"],[49105,1021,""],[50078,4,""],[50078,0,"A critical"],[50096,50,""],[50096,0," might not"],[49951,0,"'s set of events"],[49951,16,""],[49951,0," or an ancestor of some event in _V"],[49985,1,""],[49984,1,""],[49984,0,"$$"],[49985,0,"V"],[49987,0,","],[49936,9,""],[49942,0,","],[50581,0,"// "],[50826,7,""],[50826,0,"observation"],[50819,1,""],[50340,93,""],[50340,0,"split the event graph into portions that can be processed independently"],[50413,26,""],[50413,0,"E"],[50420,5,""],[50420,0,"that"],[50466,2,""],[50466,0,"do not"],[50340,5,""],[50340,0,"partion"],[50346,1,""],[50345,1,""],[50345,0,"tion"],[50371,8,""],[50371,0,"sections"],[50809,3,""],[50809,0,"important"],[50922,7,""],[51313,7,""],[51313,0,"is"],[51292,15,""],[52216,32,""],[51675,11,""],[51675,0,"T"],[52448,11,""],[52448,0,"is"],[52286,17,""],[52286,0,"are not"],[53455,0,"// "],[53652,0,"// "],[53453,1,""],[53453,0,":"],[53455,302,""],[55661,50,""],[55661,0,"second B-tree"],[56856,19,""],[56856,0,"first B-"],[56864,1,""],[56903,8,""],[56903,0,"second"],[57261,12,""],[57261,0,"We can also give an upper bound"],[57293,14,""],[57293,0,"on the"],[57354,0,"\n"],[57355,3,""],[57355,0,". "],[57356,1,""],[57355,1,""],[57355,0,"N"],[57354,0,"."],[57356,11,""],[57356,0,"E"],[57417,12,""],[57446,0," at most"],[57449,5,""],[57446,3,""],[57452,0," at most"],[57590,46,""],[57590,0,"practice"],[57471,8,""],[57537,9,""],[57538,0," but"],[57391,4,""],[57461,0,", and "],[57463,4,""],[57463,0,"at $O(log n) "],[57475,1,""],[57475,0,"$ cost"],[57392,0,"and "],[58212,17,""],[58212,0,"were copied from "],[58212,12,""],[58177,0,"We also use "],[58189,1,""],[58189,0,"s"],[58193,11,""],[58185,3,""],[58185,0,"borrow"],[58200,1,""],[58200,0,"-"],[58005,8,""],[57684,5,""],[57696,3,""],[57696,0,"l"],[57756,13,""],[57756,0,"how"],[60759,0,"\n// Can use a service like https://anonymous.4open.science/\n"],[60685,0,"\n// Benchmarking crimes to avoid https://gernot-heiser.org/benchmarking-crimes.html"],[59891,76,""],[59891,0,"We use several further tricks to reduce file size"],[57710,4,""],[57722,6,""],[57722,0,"technique"],[57741,0,"s"],[57646,0,"To store "],[57655,1,""],[57655,0,"t"],[57671,13,""],[57671,0,"compactly"],[57688,24,""],[57688,0,", we developed"],[59949,0," we handle deletions in reverse direction to represent holding down backspace"],[60026,81,""],[59953,6,""],[59953,0,"also run-length encode"],[59968,1,""],[59968,0,"-"],[60007,12,""],[60007,0,"()"],[60008,0,"due to"],[60014,1,""],[60037,0,")"],[60040,0,"We express "],[60051,17,""],[60051,0,"operation "],[60068,15,""],[60110,0,", so that the number fits in fewer bytes"],[60151,0," We deduplicate"],[60167,1,""],[60167,0,"r"],[60178,29,""],[60180,9,""],[60180,0,"etc"],[59953,5,""],[59953,0,"also "],[60180,3,""],[60180,0,"and so on"],[59953,5,""],[59885,0,"\n// TODO: the next two paragraphs could be omitted if we're short fo "],[59953,1,""],[59952,1,""],[59951,1,""],[59951,0,"o f"],[59953,1,""],[59952,1,""],[59952,0,"f space"],[61282,3,""],[61282,0,", b"],[63562,0,","],[64116,12,""],[64116,0,"to perform"],[64370,8,""],[64365,18,""],[50715,8,""],[50715,0,"Litt2022peritext"],[50713,1,""],[50730,1,""],[64827,11,""],[64827,0,"We compare"],[64867,9,""],[64894,45,""],[64894,0," along the following dimensions, which are the most important aspects for practical use"],[64986,13,""],[64986,0,"Merging remote edits"],[65008,0,"How long it takes a replica to process a batch of updates it has received from another replica, and incorporate it into its local state."],[65144,122,""],[65145,0,"//"],[65294,15,""],[65294,0,"H"],[65321,5,""],[65321,0,"requires"],[65344,11,""],[65349,0," of a document"],[65414,0,"\n// TODO: memory use?"],[65436,0,"\n/*"],[66559,0,"\n*/"],[66566,34,""],[66566,0," measure the performance"],[66604,7,""],[66604,0,"compared to"],[66685,160,""],[66675,12,""],[66716,0,"We also tested Yrs, the rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have removed it from our data set. "],[66876,0,")"],[66716,0,"("],[66879,16,""],[66879,0,"T"],[66918,9,""],[66929,52,""],[66929,0,":"],[66929,1,""],[66929,0,". Despite implementing extremely similar algorithms,"],[66918,0,"absolute "],[66879,1,""],[66879,0,"Unfortunately, t"],[66716,1,""],[66876,2,""],[66716,160,""],[66675,0,"#footnote[] "],[66685,0,"We also tested Yrs, the rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have removed it from our data set."],[66709,1,""],[66709,0,"R"],[66703,0," @yrs"],[66705,3,""],[66705,0,"yrs"],[65309,11,""],[65309,0,"are"],[65320,1,""],[65320,0,"d"],[65357,7,""],[65357,0,"\n"],[65357,1,""],[65357,0,"either "],[65357,7,""],[65355,1,""],[65309,12,""],[65309,0,"it takes"],[66801,7,""],[66801,0,"omitted"],[66821,8,""],[66821,0,"results"],[66872,16,""],[66872,0,"T"],[66872,1,""],[66872,0,"Unfortunately, t"],[66872,14,""],[66872,0,"We found"],[66884,20,""],[66884,0,"y"],[66900,9,""],[66912,52,""],[66912,0,":"],[66956,8,""],[66956,0,"is"],[66968,1,""],[66968,0,"$$"],[66969,0,"times"],[66992,5,""],[66992,0,"slowest"],[67015,5,""],[66936,1,""],[66936,0,"-"],[67015,4,""],[67015,0,"difficult"],[67028,15,""],[67028,0,"evaluate"],[67000,0," It is difficult to differentiate which differences are due to implementation style, and which are fundamental algorithmic characteristics"],[67138,158,""],[67020,13,""],[67020,0,"determine"],[67137,11,""],[67137,0,"In order to better compare algorithms, not implementations"],[67268,7,""],[67268,0,". It uses"],[67839,2,""],[67839,0,"dt-crdt"],[67855,1,""],[67855,0,"ing"],[67891,18,""],[67891,0,". "],[67893,2,""],[67893,0,"I"],[67910,0,","],[66612,0,", heavily optimised"],[67138,15,""],[67138,0,"differences"],[69250,0,"\n// TODO: Typst has a bug that is currently labelling this figure with the ron "],[69328,1,""],[69327,1,""],[69326,1,""],[69325,1,""],[69325,0,"wrong number!"],[73325,8,""],[73325,0,"present"],[83158,0,"\n% T"],[83161,1,""],[83160,1,""],[83159,1,""],[83159,0,"// TOO"],[83164,1,""],[83164,0,"DO: report something about the variance between runs, e.g. standard deviation is below 1%?"],[83253,1,""],[83159,95,""],[61974,24,""],[61974,0,"dataset_stats\""],[61987,0,".json"],[62753,0,"// "],[62712,0,"// "],[62672,0,"// "],[62629,0,"// "],[62593,0,"// "],[62555,0,"// "],[62512,0,"// "],[62507,0,"\n    "],[62508,4,""],[61994,0,".at(name)"],[62516,0,"\n    \n    "],[62517,4,""],[62522,0,"..stats"],[62524,5,""],[62524,0,"stats_for(\"A1\", \"async\"),"],[68442,16,""],[68442,0,"spee"],[68442,4,""],[68442,0,"speed_remote"],[69670,8,""],[69670,0,"ff"],[69670,2,""],[69670,0,"ff_chart"],[69670,8,""],[69670,0,"ff"],[69670,2,""],[69670,0,"speed_ff"],[62814,3,""],[62770,3,""],[62727,3,""],[62681,3,""],[62642,3,""],[62601,3,""],[62555,3,""],[62522,0,"// "],[62652,8,""],[62652,0,"S"],[62614,10,""],[62614,0,"S"],[62571,15,""],[62571,0,"S"],[62630,0,"1"],[62601,0,"1"],[62572,0,"1"],[62602,1,""],[62602,0,"2"],[62632,1,""],[62632,0,"3"],[62785,12,""],[62744,11,""],[62704,11,""],[62661,14,""],[62749,0,"C"],[62719,0,"C"],[62690,0,"C"],[62661,0,"C"],[62753,0,"1"],[62722,0,"1"],[62692,0,"1"],[62662,0,"1"],[62693,1,""],[62693,0,"2"],[62724,1,""],[62723,1,""],[62723,0,"A1"],[62756,1,""],[62755,1,""],[62755,0,"A2"],[62517,36,""],[61222,0," important"],[61222,10,""],[58564,3,""],[58564,0,"Each c"],[58569,1,""],[58568,1,""],[58575,1,""],[58575,0," stores "],[58582,1,""],[58581,1,""],[58581,0,"s a different faced "],[58600,1,""],[58599,1,""],[58599,0,"t of the event date"],[58617,1,""],[58617,0,"a. "],[58595,6,""],[58595,0,"property "],[58623,0,"The columns"],[58583,20,""],[58583,0,"some fi"],[58589,1,""],[58588,1,""],[58588,0,"different fields"],[8256,0," The set of all document IDs is "],[8268,13,""],[8272,3,""],[8272,0,"for all characters in th"],[8295,1,""],[8294,1,""],[8294,0,"a docu"],[8257,0,"Editors typically need sto"],[8282,1,""],[8281,1,""],[8280,1,""],[8279,1,""],[8279,0," to load "],[8288,4,""],[8256,1,""],[8256,0,"\n"],[8288,6,""],[8288,0,"all of these"],[8304,29,""],[8304,0," i"],[8305,1,""],[8304,1,""],[8257,7,""],[8257,0,"Editing sessions typically require the"],[8294,1,""],[8293,1,""],[8293,0,"hat the full set"],[8309,37,""],[8309,0," of "],[8316,0," is loaded into memory to be able to generate "],[8353,9,""],[8353,0,"convert"],[8257,103,""],[8257,0,"Eh"],[8258,1,""],[8257,1,""],[8257,0,"When a suer"],[8267,1,""],[8266,1,""],[8265,1,""],[8264,1,""],[8264,0,"user edits a document, the full set of IDs usually needs to be loaded in t"],[8337,1,""],[8336,1,""],[8336,0,"to memory. This i"],[8352,1,""],[8345,7,""],[8345,0," t "],[8347,1,""],[8346,1,""],[8346,0,"e"],[8346,1,""],[8346,0,"in order for editing"],[8365,1,""],[8364,1,""],[8363,1,""],[8363,0,"s to be tran"],[8374,1,""],[8373,1,""],[8372,1,""],[8371,1,""],[8371,0,"converted to the CRDT's native format."],[6819,0,"\n\n> "],[6822,1,""],[6821,1,""],[6821,0,"// Seph: Might be worth "],[6830,15,""],[6830,0,"I'm not sure that "],[6843,5,""],[6843,0,"how much people care about the theori"],[6879,1,""],[6879,0,"etical complexity of OT here. Might be better to"],[6925,2,""],[6925,0,"to/"],[6927,1,""],[6927,0,"\n// provide"],[6903,4,""],[6903,0,"this early in the paper"],[6946,3,""],[6954,0," some e"],[6947,14,""],[6947,0,"ground it in some real world benchmarking."],[8516,12,""],[8516,0,"before"],[8528,3,""],[8528,0," can"],[8426,0,"\nJust storign tho"],[8432,11,""],[8432,0,"storing these IDs in memory is expensive - in our testing, industry standard CRDTs like Automerge and Yjs needed 1--"],[8547,1,""],[8546,1,""],[8546,0,"00 bytes"],[8475,79,""],[8474,1,""],[8473,1,""],[8472,1,""],[8472,0,". We measured memory"],[8640,0,"\nJust storing these IDs in memory is expensive. We measured memory"],[8427,66,""],[8516,6,""],[8516,0,"to allow"],[8530,4,""],[8530,0," to"],[8427,4,""],[8427,0,"While"],[8477,0," also"],[8582,65,""],[8581,1,""],[8581,0," In our testing, a 500kb text document needed as many as"],[8627,10,""],[8627,0,"100MB of RAM"],[8627,0,"nearly "],[8478,12,""],[8478,0,"typically"],[8439,0," is"],[8447,1,""],[8447,0,"ing"],[8523,0," in order"],[8592,65,""],[8427,34,""],[8427,0,"During editing sessions"],[8581,0," Tjos "],[8586,1,""],[8585,1,""],[8584,1,""],[8583,1,""],[8583,0,"his "],[8582,5,""],[8582,0,"Loading"],[8582,7,""],[8582,0,"In our testing of a moderately large document, some CR"],[8635,1,""],[8634,1,""],[8634,0,"industry CRDT algorithms needed minutes to load"],[8581,1,""],[8581,0,"\n\n"],[8582,1,""],[8677,4,""],[8677,0,"parse these"],[8687,1,""],[8686,1,""],[8685,1,""],[8685,0,"is data set"],[8674,22,""],[8674,0,"of time and tens of gigabytes of RAM to "],[8597,2,""],[8597,0,"with"],[8600,1,""],[8599,1,""],[8598,1,""],[8597,1,""],[8596,1,""],[8582,129,""],[8582,0,"In our testing a moderately large document, some industry CRDT algorithms needed minutes of time and tens of gigabytes of RAM to"],[8596,28,""],[8597,0," on"],[8599,1,""],[8598,1,""],[8597,1,""],[8581,0," This can be slow and expensive."],[8581,1,""],[8581,0,"\n"],[8630,0,"we have found "],[8644,4,""],[8644,0,"even"],[8657,0," leading"],[8689,47,""],[8689,0,"tens"],[8689,0,"between "],[8689,8,""],[8693,0," of megabytes to et"],[8711,1,""],[8710,1,""],[8710,0,"tens of gigabytes of RAM to load a single alrg"],[8755,1,""],[8754,1,""],[8753,1,""],[8752,1,""],[8752,0,"large document."],[8681,0," (such as Automerge and Yjs)"],[8716,0," bet"],[8719,1,""],[8718,1,""],[8717,1,""],[8716,1,""],[8582,0,"// "],[8427,0,"// "],[8924,0,"\nIn our testing, we have found even industry leading CRDT algorithms (such as Automerge and Yjs) needed tens of megabytes to tens of gigabytes of RAM to load a single large document."],[8620,182,""],[8584,35,""],[8427,0,"// This can be slow and expensive.\n"],[8619,123,""],[8462,0,"Moreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead.\n"],[8585,29,""],[8585,0,"T"],[8645,0," during editing sessions"],[8669,9,""],[8826,85,""],[8826,0,"introduced significant latency ("],[8857,1,""],[8826,31,""],[8730,96,""],[8730,0,"In our testing, we have found even industry leading CRDT algorithms (such as Automerge and Yjs)"],[8730,0,"// "],[8585,0,"// "],[61480,0,"\n"],[61480,0,"\nTo properly evaluate Eg-walker we have implemented "],[61481,20,""],[61481,0,"In this paper we evaluate"],[61516,21,""],[61516,0," a"],[61517,1,""],[61481,16,""],[61481,0,"In this work we have"],[61510,0,"d"],[61522,0,"on 3 main c"],[61522,11,""],[61521,1,""],[61497,24,""],[61497,0,"compare Eg-walker's performance against a reference CRDT and OT implementation o"],[61576,1,""],[61576,0,"on 3 criteria:\n\n- Merge speed"],[61592,1,""],[61592,0,"/"],[61605,0,": The time taken"],[61616,0,"the concu"],[61620,5,""],[61619,1,""],[61618,1,""],[61617,1,""],[61616,1,""],[61621,0," to merge a large, complex set of changes from a remote peer. Note this naturally advantages CRDTs - which do some preprop"],[61742,1,""],[61742,0,"cessing"],[61728,0,"unlike OT and Eg-walker, "],[61719,0,"."],[61720,10,""],[61720,0," U"],[61745,0," CRDTs"],[61773,0," of "],[61683,0,"//"],[61779,0,"\n"],[61592,187,""],[61592,0,"/ Merge speed: The time taken to merge a large, complex set of changes from a remote peer. //Note this naturally advantages CRDTs. Unlike OT and Eg-walker, CRDTs do some preprocessing of"],[61779,0,"/ Memory usage: The amout of "],[61799,9,""],[61799,0,"amount of resi"],[61809,4,""],[61809,0,"RAM used while"],[61818,5,""],[61818,0,"during "],[61818,7,""],[61818,0,"while "],[61818,6,""],[61817,1,""],[61817,0,". I"],[61819,1,""],[61819,0,"For CRDT and "],[61823,9,""],[61823,0,"Eg-walker and OT "],[61839,1,""],[61837,0,"our "],[61843,0," implementation, th"],[61861,1,""],[61860,1,""],[61860,0,"memory usage is further split into 2 "],[61873,24,""],[61840,0," reference"],[61870,13,""],[61870,0,"during the \"stead"],[61882,5,""],[61881,1,""],[61870,11,""],[61870,0,"memo"],[61870,4,""],[61870,0,"RAM is only "],[61870,12,""],[61870,0,"heavy computation only happens when merging remote changes"],[61914,0,"concurrent "],[61925,7,""],[61932,0," from remote peers. We shou"],[61958,1,""],[61958,0,"w both the \"t"],[61970,1,""],[61970,0,"steady state\" memory usage (when  "],[62003,1,""],[62002,1,""],[62001,1,""],[62000,1,""],[61999,1,""],[61998,1,""],[61998,0,"as it is du"],[62008,1,""],[62008,0,"uring normal usa"],[62007,17,""],[62007,0,"while edits happen normally_"],[62034,1,""],[62034,0,")"],[61998,36,""],[61997,1,""],[61997,0,"("],[61497,7,""],[61497,0,"have benchmarked"],[61480,0,"\n\n"],[61481,0,"Eg-walker compares favorably comp"],[61500,14,""],[61491,9,""],[61491,0,"compares favorably "],[61491,19,""],[61491,0,"is small ad"],[61501,1,""],[61501,0,"nd va"],[61505,1,""],[61504,1,""],[61504,0,"fast compared "],[61481,37,""],[61480,1,""],[61479,1,""],[61538,47,""],[61780,181,""],[61780,0," CRDTs "],[61781,0,"Note "],[61792,0,"need to keep the CR"],[61810,1,""],[61809,1,""],[61809,0,"\"CRDT state\" in memory during all editing operations"],[61792,0,"typically "],[61871,0," - so they usually have a fixed, constant memory size. Eg-walker and OT"],[61924,0," the entire th"],[61937,1,""],[61937,0,"ime the document is loadad"],[61962,1,""],[61962,0,"e"],[61962,1,""],[61961,1,""],[61961,0,"ed"],[61981,0," only need to process historical"],[61995,18,""],[61995,0,"visit "],[61995,6,""],[61995,0,"process historical document"],[62014,8,""],[62014,0,"edits when merging concurrent changes. W"],[62053,1,""],[62052,1,""],[62052,0,"\n/ File size: How large"],[61975,0,"- like OT based algorithms "],[62002,6,""],[62002,0,"-"],[62013,0,"s"],[62089,9,""],[62089,0,"The size on disk o"],[62106,1,""],[62105,1,""],[62093,0,"s"],[62093,1,""],[62105,0," to store the document's hi"],[62119,13,""],[62119,0,"relevant document's history. "],[62147,1,""],[62147,0,"\n\nEg-walker compares favorably "],[62149,29,""],[62149,0,"Eg-walker compares favorably on all of these metrics. "],[62202,1,""],[62202,0," The algorithm perform"],[62217,7,""],[62217,0,"merges "],[62203,21,""],[62203,0,"In our testing, the algorithm merges faster than "],[62240,0,"much "],[62257,0,"OT "],[62259,1,""],[62258,1,""],[62257,1,""],[62257,0,"our "],[62260,1,""],[62259,1,""],[62258,1,""],[62257,1,""],[62257,0,"OT based approaches"],[62257,19,""],[62257,0,"OT "],[62232,28,""],[62232,0," "],[62232,1,""],[62232,0," merges much faster than OT "],[62240,20,""],[62240,0,"abuot as "],[62240,9,""],[62240,0,"f"],[62240,1,""],[62149,91,""],[62149,0,"Eg-walker compares favorably on all of these metrics. In our testing, the algorithm merges changes faster than CRDTs in almost all cases. Rei"],[62289,1,""],[62289,0,"sident "],[62285,0," "],[62285,1,""],[62285,0,". It doesn't suffer from OT's pathological performance in the case of extremel "],[62363,1,""],[62363,0,"y complex causal graphs"],[62373,13,""],[62340,33,""],[62290,50,""],[62290,0,"scales well - and doesn't suffer"],[62304,18,""],[62304,0,"unlike OT, Eg-walker doesn't suffer from "],[62304,1,""],[62303,1,""],[62302,1,""],[62301,1,""],[62301,0,". U"],[62324,20,""],[62324,0,"still m"],[62330,1,""],[62330,0,"performs well when there are a large amount of concurrent changes"],[62397,9,""],[62397,0,"And the resulting file sizes are smaller "],[62149,289,""],[62149,0,"Eg-walker compares favorably on all of these metrics. In our testing, the algorithm merges changes faster than CRDTs in almost all cases. It scales well. Unlike OT, Eg-walker still performs well when there are a large amount of concurrent changes. And the resulting file sizes are smaller"],[62078,4,""],[62078,0,"Storage"],[62108,0," (or o"],[62113,1,""],[62112,1,""],[62111,1,""],[62110,1,""],[62109,1,""],[62108,1,""],[62150,0," This "],[62155,1,""],[62154,1,""],[62153,1,""],[62152,1,""],[62151,1,""],[62150,1,""],[62122,9,""],[62431,0," than all other formats"],[62447,0,"comparable "],[62465,0,"."],[62447,11,""],[62447,0,"evaluated "],[62549,15,""],[62549,0,"readabili"],[62549,9,""],[62549,0,"code simplicity"],[62549,5,""],[62559,0," and readability"],[62732,0,"important "],[63024,0,"\n\nWe "],[63028,1,""],[63027,1,""],[63026,1,""],[63026,0,"For comparison, we have also implmeente"],[63055,10,""],[63055,0,"implemented a "],[63068,1,""],[63067,1,""],[63067,0,"our own CRDT library using the same optimization tricks found in our Eg-walker "],[63123,0,"("],[63123,1,""],[63122,1,""],[63122,0," and data structures "],[63166,0,"implmeent"],[63166,9,""],[63166,0,"implementation. This CRDT library outperforms "],[63026,3,""],[63026,0,"To am"],[63030,1,""],[63029,1,""],[63029,0,"make a fair"],[63223,0,"th "],[63225,1,""],[63225,0,"e industry standard"],[63236,8,""],[63085,0," reference"],[63124,24,""],[63139,0," and optimizations"],[63143,14,""],[63139,4,""],[63124,0,"optimization tricks and "],[63085,10,""],[63085,0," reference"],[63164,8,""],[63164,0,"as"],[63197,4,""],[63197,0,"Our"],[63239,0,"standard libraries of Yjs and Automerge,"],[63278,1,""],[63197,3,""],[63197,0,"Our benchmarks show our home-grown"],[63309,0,". B"],[63311,1,""],[63311,0,"They have nevernt"],[63327,1,""],[63326,1,""],[63326,0,"theless been included for completeness.\n\nWe have also implemented a simple OT library. This l"],[63418,1,""],[63417,1,""],[63416,1,""],[63415,1,""],[63414,1,""],[63413,1,""],[63412,1,""],[63411,1,""],[63411,0," for comparison. This library is not as well optimized as "],[63462,1,""],[63462,0,"s"],[63469,0,"the other libraries"],[63456,9,""],[63456,0,"care"],[63456,4,""],[63441,15,""],[63441,0,"uses "],[63445,1,""],[63444,1,""],[63443,1,""],[63442,1,""],[63441,1,""],[63441,0,"is given every advantage - op"],[63469,1,""],[63468,1,""],[63468,0,"operations are gathered "],[63479,13,""],[63479,0,"pre-composed "],[63479,13,""],[63478,1,""],[63478,0," express traversals over the document"],[63428,110,""],[63427,1,""],[63427,0," This library implemented "],[63452,1,""],[63451,1,""],[63451,0,"s "],[63452,1,""],[63451,1,""],[63450,1,""],[63450,0,"s full run-length encoding"],[63452,24,""],[63452,0,"efficient "],[63452,10,""],[63451,1,""],[63450,1,""],[63449,1,""],[63448,1,""],[63447,1,""],[63446,1,""],[63445,1,""],[63444,1,""],[63443,1,""],[63442,1,""],[63441,1,""],[63440,1,""],[63439,1,""],[63438,1,""],[63437,1,""],[63436,1,""],[63435,1,""],[63434,1,""],[63433,1,""],[63432,1,""],[63431,1,""],[63430,1,""],[63429,1,""],[63428,1,""],[63428,0,"**SA "],[63432,1,""],[63432,0,"Y MORE ABOUT THIS?**"],[63429,1,""],[63428,1,""],[63428,0,"__"],[63451,1,""],[63450,1,""],[63450,0,"__"],[63451,1,""],[63450,1,""],[63450,0,"*"],[63428,2,""],[63428,0,"*TDO"],[63431,1,""],[63430,1,""],[63430,0,"ODO: "],[62004,71,""],[62004,0,"use a very small amount of RAM "],[62034,1,""],[62004,30,""],[62004,0,"do not need to store anything"],[62010,23,""],[62010,0," have any overhead beyond the document"],[62004,0,"generaly "],[62012,1,""],[62011,1,""],[62011,0,"ly have "],[62019,44,""],[62019,0,"no fixed overhead while the document is loaded."],[61815,4,""],[61815,0,"a"],[61815,1,""],[61815,0,"their "],[61892,4,""],[61892,0,"need"],[61915,6,""],[61915,0,"RAM"],[61917,1,""],[61916,1,""],[61915,1,""],[61899,21,""],[61892,7,""],[61892,0,"retain a relatively constnat "],[61912,9,""],[61912,0,"constant amount of RAM"],[61645,95,""],[61645,0,"For "],[61645,4,""],[61645,0,"All the CRDT alir"],[61661,1,""],[61660,1,""],[61660,0,"lgo"],[61662,1,""],[61661,1,""],[61660,1,""],[61660,0,"gorithms we studied "],[61669,11,""],[61669,0,"r"],[61669,1,""],[61669,0,"[re"],[61671,1,""],[61670,1,""],[61669,1,""],[61669,0,"presented"],[61658,10,""],[61658,0,"implementations"],[61683,0," here also need to do this work whn "],[61718,1,""],[61717,1,""],[61717,0,"en a document is loaded."],[61715,0,"every time "],[61726,5,""],[62473,0,"\n\n\n\n"],[62475,0,"Eg"],[62476,1,""],[62475,1,""],[61645,102,""],[61554,91,""],[61554,0,"/ Merge speed: The time taken to merge a large, complex set of changes from a remote peer."],[62372,0,"All the CRDT implementations presented here also need to do this work every time a document is loaded."],[61684,296,""],[62179,0," Note CRDTs typically need to keep their \"CRDT state\" in memory during all editing operations - so they usually retain a relatively constant amount of RAM the entire time the document is loaded. Eg-walker - like OT based algorithms - generally have no fixed overhead while the document is loaded."],[62075,0,"\nHowever, the usage "],[62089,0,"memory"],[62089,6,""],[62095,0,"patterns for Eg-walker are quite different from "],[62085,58,""],[62085,0,"yhr "],[62088,1,""],[62087,1,""],[62086,1,""],[62085,1,""],[62085,0,"the data alo"],[62076,21,""],[62075,1,""],[62075,0,"\n"],[62075,0,"\nEg-walker also performs better thatn"],[62111,1,""],[62110,1,""],[62110,0,"n CRDTs in one other important"],[62076,0,"// "],[62075,0,"\n"],[62075,0,"\nCRDTs also need to"],[62087,7,""],[62087,0,"load and store"],[62076,25,""],[62076,0,"The CRDT "],[62076,9,""],[62075,1,""],[62074,1,""],[62145,0,"Eg-walker has one other large advantage over "],[62190,1,""],[62190,0,"a"],[62233,0,": And that is, eg-walker only needs to "],[62272,59,""],[62272,0,"do this work (merging and "],[62285,13,""],[62284,1,""],[62275,5,""],[62279,0,"\n"],[62279,0," when merging changes. "],[62301,1,""],[62301,0," Allt he C"],[62310,1,""],[62309,1,""],[62308,1,""],[62307,1,""],[62306,1,""],[62305,1,""],[62304,1,""],[62303,1,""],[62302,1,""],[62301,1,""],[62145,0,"However, "],[62145,9,""],[62145,0,"However, this data"],[62154,9,""],[62154,0,"the data as-is "],[62154,14,""],[62145,10,""],[62155,3,""],[62155,0,"also has one other large "],[62180,39,""],[62180,0,"compared to the"],[62233,11,""],[62232,1,""],[62231,1,""],[62231,0,". That is,"],[62240,1,""],[62263,32,""],[62263,0,"to do work when merging "],[62232,0," C"],[62233,1,""],[62233,0,"All the CRDT li"],[62247,1,""],[62246,1,""],[62246,0,"implmeentation"],[62246,14,""],[62246,0,"implementation we studied need to "],[62272,8,""],[62272,0,"have the "],[62233,48,""],[62232,0," CRDT"],[62233,0,"For "],[62241,0," bas"],[62244,1,""],[62243,1,""],[62242,1,""],[62237,0,"the "],[62237,0,"all "],[62249,0," based impleme"],[62256,7,""],[62256,0,"implementationswe "],[62273,1,""],[62272,1,""],[62271,1,""],[62271,0," we studied, the wro"],[62290,1,""],[62289,1,""],[62289,0,"or-st"],[62293,1,""],[62292,1,""],[62291,1,""],[62291,0,"st-case CPU and memory performance was paid on "],[62335,3,""],[62335,0,"every time the document was loaded from dis. "],[62379,1,""],[62378,1,""],[62378,0,"k. "],[62233,4,""],[62233,0,"In "],[62312,12,""],[62312,0," costs"],[62318,4,""],[62318,0," were"],[62319,4,""],[62319,0,"are"],[62374,0,"Eg-walker only needs to "],[62398,57,""],[62398,0,"consume sin"],[62408,1,""],[62408,0,"gni"],[62406,5,""],[62406,0,"nonti"],[62410,1,""],[62398,12,""],[62398,0,"inspect historical events when "],[62398,7,""],[62398,0,"look at"],[62429,0,"merging concurrent changes."],[62374,0,"Like OT based approaches, "],[62482,0," In normal usage, Eg-walker never"],[62286,11,""],[62307,0," we measure in this work"],[62365,4,""],[62365,0,"is "],[62385,0," The m"],[62386,5,""],[62386,0,"The memory usage "],[62390,0,"measure d"],[62398,1,""],[62397,1,""],[62397,0,"d "],[62386,25,""],[62385,2,""],[62385,0," In "],[62388,1,""],[62387,1,""],[62386,1,""],[62386,0,"I"],[62386,1,""],[62386,0,"By constrast,"],[62399,26,""],[62415,16,""],[62415,0,"inspects"],[62415,8,""],[62415,0,"does work"],[62424,18,""],[62485,5,""],[62458,27,""],[62457,1,""],[62457,0," We "],[62458,3,""],[62458,0,"In our charts"],[62465,6,""],[62465,0,"measurements below we compare CRDT "],[62499,1,""],[62495,0,"the cost of loading a "],[62521,0," to the worst-case performance of Egw"],[62557,1,""],[62557,0,"-walker - if eg-walker"],[62564,15,""],[62564,0,". But "],[62566,4,""],[62565,1,""],[62409,1,""],[62409,0,"\n\n"],[62400,0,"when an "],[62417,0," document is loaded from disk, it can "],[62451,4,""],[62451,0,"does not need to load any additional "],[62476,12,""],[62476,0," data into "],[62482,5,""],[62482,0,"beyon"],[62486,1,""],[62485,1,""],[62485,0,"ond the documents' content"],[62504,7,""],[62503,1,""],[62502,1,""],[62501,1,""],[62501,0,"s' contents."],[62502,1,""],[62501,1,""],[62510,1,""],[62510,0," themselves."],[62231,1,""],[62231,0,":"],[62448,28,""],[62448,0,"no"],[62475,0,"'s"],[62487,10,""],[62487,0,"need to be loaded"],[62505,0,"d"],[62505,1,""],[62505,0," Ther eis"],[62513,1,""],[62512,1,""],[62511,1,""],[62510,1,""],[62510,0,"e is no overhead at all"],[62506,0,"Unless re"],[62513,2,""],[62513,0,"a"],[62513,1,""],[62506,34,""],[62506,0,"Eg-walker only has an overhead "],[62525,12,""],[62525,0,"a CPU and memory overhead when merging remote changes. "],[62570,0,","],[62570,1,""],[62570,0," c"],[62571,1,""],[62570,1,""],[62570,0,", concurrent"],[62592,0,"And even in this case, the memory"],[62619,6,""],[62619,0,"RAM usage"],[62615,13,""],[62615,0,"all RAM used returns to baseline levels after the changes have been merged in."],[62287,0,"system has a "],[62314,6,""],[62314,0," overhead"],[62323,28,""],[62323,0," that must be"],[62329,4,""],[62329,0,"is"],[62331,3,""],[62388,1,""],[62472,0," current"],[61788,8,""],[61788,0,"three"],[61683,1,""],[61683,0," while a document"],[61690,10,""],[61690,0,"changes"],[61690,7,""],[61690,0,"a "],[61684,8,""],[61684,0,"to open a document, and while changes are being"],[61702,29,""],[61702,0," and merge changes"],[61741,7,""],[61741,0,"number of bytes consumed on "],[61768,1,""],[61773,0," or over "],[61781,1,""],[61776,5,""],[61773,3,""],[61768,0," "],[61768,1,""],[61765,3,""],[61756,17,""],[61756,0," needed to"],[61772,0," or transmit"],[61593,31,""],[61593,0,"a set of events"],[61593,0,"large"],[61598,1,""],[61602,0,"s"],[61593,14,""],[61618,1,""],[61618,0,"."],[61695,0,"."],[61903,10,""],[61903,0,"most"],[61785,0,"\n"],[61785,0,"\n\n\n"],[61786,0,"Some takew"],[61795,1,""],[61795,0,"aways:\n\n- The d"],[61809,1,""],[61809,0,"er"],[61810,1,""],[61809,1,""],[61809,0,"performance difference between eg-walker and th"],[61855,1,""],[61854,1,""],[61854,0,"our reference CRDT implementation is smaller than the difference between eg-walker and "],[61927,14,""],[61927,0,"our reference implmeentation"],[61941,14,""],[61941,0,"implmeent"],[61941,9,""],[61941,0,"implmenet"],[61949,1,""],[61948,1,""],[61948,0,"tation and other "],[61945,0,"e"],[61966,0,"CRDTs"],[61970,1,""],[61970,0," "],[61970,1,""],[61970,0,"s. In essence, the algorithm (CRDT vs Eg-walker)"],[61840,1,""],[61840,0,"E"],[62018,0," made a "],[62025,1,""],[62024,1,""],[62024,0,"m"],[62024,1,""],[62024,0,"less difference"],[61999,0,"choice "],[62026,4,""],[62026,0,"mattered l"],[62035,1,""],[62034,1,""],[62039,0," for CP"],[62045,1,""],[62044,1,""],[62043,1,""],[62043,0," performance than"],[62060,11,""],[62060,0," the quality i"],[62073,1,""],[62073,0,"of the implmeentat"],[62080,11,""],[62080,0,"implementation."],[62026,34,""],[62026,0,"made less of a difference to performance than"],[62071,35,""],[62071,0," "],[62071,1,""],[62071,0," the quality of the implementation."],[62105,1,""],[62105,0," ("],[62106,1,""],[62105,1,""],[62072,33,""],[62072,0,"how well the algorithm in question has been optimized."],[62122,1,""],[62122,0,"s"],[62126,0,"\n\n"],[62127,1,""],[62127,0,"- Eg-walker consumes a similar amount of memory"],[62168,6,""],[62168,0,"RAM "],[62171,1,""],[62171,0," as the equivalent CRDT. But this"],[62203,1,""],[62129,0,"When merging "],[62129,13,""],[62129,0,"The peak memory usage "],[62129,22,""],[62129,0,"At peak, "],[62181,31,""],[62181,0," to "],[62184,1,""],[62183,1,""],[62182,1,""],[62181,1,""],[62128,0," The memory usage of Eg-walker and CRDTs o"],[62169,1,""],[62169,0,"is very "],[62140,6,""],[62140,0,"profile "],[62128,0," A"],[62129,1,""],[62128,1,""],[62129,22,""],[62138,0," has "],[62142,1,""],[62141,1,""],[62140,1,""],[62139,1,""],[62139,0,"uses memory much more like a "],[62167,1,""],[62167,0,"n OT based system than a CRDT. CRDTs typically load and store "],[62127,174,""],[62127,0,"- Eg-walker uses memory much more like an OT based system than a CRDT. CRDTs typically load and store  and CRDTs is very  At peak, Eg-walker consumes a similar amount of RAM"],[61941,14,""],[61941,0,"CRDT implmeen"],[61946,8,""],[61946,0,"implementation"],[61975,1,""],[61975,0," implemen"],[61976,8,""],[61976,0,"implementations"],[61993,11,""],[61993,0,"This leads"],[61993,10,""],[61993,0,"We believe"],[62007,10,""],[62014,0," of algorithm"],[61993,2,""],[61993,0,"For performance, we"],[61993,3,""],[61993,0,"f"],[61993,1,""],[61993,0,"From a "],[61999,1,""],[62000,0,"pure "],[62016,0," standpoint"],[62084,100,""],[62084,0,"is less important than the impact of other optimisations."],[62166,9,""],[62153,0," has a different memory profile than a "],[62169,0," characteristic"],[62207,45,""],[62205,2,""],[62205,0,"the "],[62213,0,"s"],[62213,1,""],[62213,0," implementations we caompa"],[62238,1,""],[62237,1,""],[62236,1,""],[62235,1,""],[62234,1,""],[62234,0,"omp"],[62233,4,""],[62233,0,"looked at"],[62260,19,""],[62260,0,"keep the"],[62273,1,""],[62273,0,"'s"],[62274,1,""],[62273,1,""],[62273,0," state object in memory during e"],[62304,1,""],[62304,0,"all document editing "],[62260,0,"load and "],[62334,0,"e"],[62334,1,""],[62334,0,"sessions."],[62343,9,""],[61802,0,"\n- Eg-walker only needs to consume "],[61829,8,""],[61829,0,"\"do work\" (load historical edi"],[61856,3,""],[61856,0,"events in memory and process them) when merging changes."],[61804,0," Like OT based approaches,"],[61938,0," When the "],[61939,0,"Both "],[61944,1,""],[61944,0,"w"],[61953,0,"system is as"],[61964,1,""],[61964,0,"t "],[61939,27,""],[61939,0,"And then, the work scales based"],[61943,6,""],[61964,0," on the "],[61939,33,""],[61939,0,"In the "],[61939,7,""],[61939,0,"At all other times, an Eg-walker based system "],[61803,182,""],[61803,0,"- Like OT based approaches, Eg-walker only needs to \"do work\" (load historical events in memory and process them) when merging changes. At all other times, an Eg-walker based system"],[61959,3,""],[61969,12,""],[61938,0," And the amount of work performed scales with the "],[61866,49,""],[61866,0,"transforming events"],[61909,5,""],[61909,0,"T"],[61954,0,"number of events "],[61964,0,"concurrent "],[61981,32,""],[61981,0,". Ass"],[61985,1,""],[61985,0," a result, Eg-walker is almost always "],[61983,13,""],[61983,0,"During "],[61983,7,""],[61983,0,"While a document is open and changes are bening "],[62030,1,""],[62029,1,""],[62028,1,""],[62027,1,""],[62026,1,""],[62026,0,"ing made "],[62034,1,""],[62012,22,""],[62012,0,"being edited, "],[62035,18,""],[62035,0," has a negligable performance impact."],[62046,1,""],[62046,0,"e"],[62046,1,""],[62046,0,"i"],[62048,1,""],[62048,0,"i"],[61982,0," Unlike CRDT"],[61990,4,""],[61990,0,"the CRDT iml"],[62001,1,""],[62001,0,"plem"],[61999,6,""],[61999,0,"implementations we test"],[61999,23,""],[61998,1,""],[61990,4,""],[61990,0,"typical "],[62002,0," implmeentation"],[62003,14,""],[62003,0,"implementations,"],[62020,1,""],[62020,0,"w"],[62020,5,""],[62020,0,"when"],[62089,0,"RAM footprint and "],[61801,0,"\n\n- Eg-walker performs well "],[61815,14,""],[61815,0,"is fast and efficient. Usually "],[61838,0,"It scales much better than OT"],[61866,1,""],[61865,1,""],[61865,0," t"],[61866,1,""],[61865,1,""],[61865,0,"the OT system we tested, and "],[61894,8,""],[61894,0,"it is usually smaller and faster than comparable CRDT based approaches.\n- Eg-walker differe"],[61984,1,""],[61984,0,"s from "],[61966,25,""],[61966,0,"- Eg-walker differs from"],[61965,0," In the worst case"],[61969,14,""],[61969,0,"one test, Eg-walker "],[61965,24,""],[61990,0," traditional CRDT based systems in the "],[62028,1,""],[62027,1,""],[62026,1,""],[62025,1,""],[62025,0,"*when the work i"],[62040,1,""],[62039,1,""],[61985,0," dramatically"],[61908,0,"slightly "],[61888,0," (our system performed over 100 000x faster than OT in one test)."],[61953,1,""],[61954,5,""],[61954,0,"I"],[61968,8,""],[61954,0,"And "],[61958,1,""],[61958,0,"i"],[61971,1,""],[61996,0,"a "],[62030,1,""],[62029,1,""],[62028,1,""],[62028,0,"."],[62042,74,""],[62041,1,""],[62032,0,"Unlike CRDTs, "],[62055,0," only perfom"],[62066,1,""],[62066,0,"rms work "],[62061,0,"needs to "],[62077,1,""],[62083,0,"when "],[62032,6,""],[62032,0,"Like OT based approaches (and notably uinlike"],[62070,7,""],[62070,0,"unlike"],[62082,0,")"],[62030,97,""],[62030,0,"- Like OT based approaches (and notably unlike CRDTs), Eg-walker only needs to perform work when"],[61954,5,""],[61954,0,"I"],[62024,1,""],[62024,0,"  "],[62025,1,""],[62025,0,"- but the difference is f"],[62049,1,""],[62046,3,""],[62046,0,"compared to a well optimized CRDT is much more modest."],[62197,0," merging"],[62171,16,""],[62171,0,"does"],[62193,0," divergent brances"],[62210,1,""],[62209,1,""],[62208,1,""],[62208,0,"ches of hist"],[62219,1,""],[62218,1,""],[62217,1,""],[62216,1,""],[62216,0,"events. In the "],[62224,7,""],[62224,0,"When changes "],[62224,13,""],[62224,0,"In the common case of a compl"],[62246,7,""],[62246,0,"completely in"],[62258,1,""],[62257,1,""],[62257,0,"linear changes h"],[62272,1,""],[62271,1,""],[62270,1,""],[62270,0," histories"],[62224,56,""],[62224,0,"When events are entirely linear"],[62229,0,"editing "],[62263,0,", "],[62171,4,""],[62171,0,"performs"],[62228,41,""],[62228,0,"In editing sessions in which"],[62227,0," And the amount of work scales to the size"],[62258,11,""],[62258,0,"with the number of events since the last common version. CRDT"],[62318,1,""],[62317,1,""],[62316,1,""],[62315,1,""],[62314,1,""],[62314,0," CRD"],[62317,1,""],[62317,0,"DT based approaches typically have"],[62347,4,""],[62347,0,"have a con"],[62347,10,""],[62347,0,"load and "],[62355,1,""],[62354,1,""],[62353,1,""],[62352,1,""],[62352,0,"(and reconstruct) a document entirely"],[62381,8,""],[62368,0," in memory"],[62347,0,"need to "],[62388,11,""],[62361,27,""],[62360,1,""],[62360,0,"and retain "],[62227,0," As a result, "],[62227,14,""],[62228,5,""],[62228,0,"Further, t"],[62228,7,""],[62228,0,"Moreover"],[62236,1,""],[62319,0," This is in contrast to "],[62318,0," - not the num"],[62331,1,""],[62330,1,""],[62329,1,""],[62329,0,"size of history."],[62344,1,""],[62227,0," "],[62227,1,""],[62329,0,"et"],[62330,1,""],[62330,0,"ntire "],[62376,0,"the"],[62384,17,""],[62384,0," systems we tested, which"],[62410,10,""],[62418,15,""],[62418,0,"load the "],[62410,17,""],[62410,0,"reconstruct the CRDT's state in memory when documents are loaded."],[62474,1,""],[62473,1,""],[62473,0,"d."],[62453,0,"ever"],[62479,30,""],[62479,0," And the CRDT state is maintained"],[62502,0,"retained "],[62511,10,""],[62511,0,"throughout "],[62101,421,""],[62101,0,"- Like OT based approaches (and notably unlike CRDTs), Eg-walker only performs work when merging divergent branches of events. Moreover the amount of work scales with the number of events since the last common version - not the entire size of history. This is in contrast to the CRDT systems we tested, which reconstruct the CRDT's state in memory whenever documents are loaded. And the CRDT state is retained throughout"],[61890,0,"in oun"],[61895,1,""],[61894,1,""],[61894,0,"ne test "],[61951,12,""],[61902,10,""],[61902,0,"Eg-walker"],[61958,0," also"],[61959,5,""],[62438,32,""],[62438,0,"every time a document is"],[62470,42,""],[62470,0," This i"],[62476,1,""],[62476,0,"CRDT state is retained throughout e"],[62510,1,""],[62499,11,""],[62499,0,"in"],[62500,1,""],[62499,1,""],[62499,0,"in memory during "],[62509,7,""],[62509,0,"while "],[62509,6,""],[62509,0,"the entire time a document is edited. In one case, w"],[62546,15,""],[62546,0," This retain siz"],[62552,10,""],[62552,0,"overhead can be significant - in oen"],[62587,1,""],[62586,1,""],[62586,0,"ne test we measured Automerge using "],[62606,0,"the "],[62619,0," CRDT library"],[62639,0,"44 GB of memory."],[62633,5,""],[62633,0,"e"],[62633,1,""],[62633,0,"needing"],[62633,7,""],[62633,0,"consuming"],[62659,0,"\n\n\n\n\n"],[62661,0,"\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Conc*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\"),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\"),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\"),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, counting inserted and deleted characters (in thousands). _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>"],[63638,6,""],[63638,0,"work"],[62968,216,""],[62867,4,""],[62867,0,"I"],[62867,1,""],[62867,0,"OT"],[62875,4,""],[62875,0,"Eg-Walker"],[62878,1,""],[62878,0,"w"],[62890,10,""],[62890,0,"CRDT"],[62896,34,""],[62931,0,"\n"],[62931,0,"\n    [asdf],[fdsa],"],[62704,4,""],[62704,0,"left"],[62726,12,""],[62708,0,"\""],[62704,0,"\""],[62704,8,""],[62720,0,", auto"],[62741,0,"left, "],[62763,26,""],[62763,0,"center"],[62924,0,"[dfasfd],"],[62906,0,"    [asdf],[fdsa],[dfasfd],\n    [asdf],[fdsa],[dfasfd],\n    [asdf],[fdsa],[dfasfd],\n"],[62839,0,"[], "],[62840,0,"*Action*"],[62875,1,""],[62860,1,""],[62852,1,""],[62877,1,""],[62861,1,""],[62854,1,""],[62866,1,""],[62860,0,"-"],[62860,1,""],[62866,0,"*"],[62875,0,"*"],[62860,0,"-"],[62854,0,"*"],[62873,0,"*"],[62859,0,"*"],[62852,0,"*"],[62840,8,""],[62914,0,"[blah], "],[62950,0,"[blah], "],[62986,0,"[blah], "],[63022,0,"[blah], "],[62660,0,"\n#set table(\n  \n  "],[62673,2,""],[62674,2,""],[62674,0,")"],[62666,5,""],[62666,0,"frame"],[62662,3,""],[62662,0,"let"],[62671,0,"LeftLine = "],[62681,1,""],[62680,1,""],[62679,1,""],[62680,0,"stroke) = (x, y) => ("],[62702,0,"  left: stroke,\n  right: stroke,\n  top: 1pt,\n  bottom: 0pt"],[62886,4,""],[62886,0,"fram"],[62886,4,""],[62886,0,"frameLeftLine"],[62679,11,""],[62706,0,"\n  "],[62707,2,""],[62707,0,"  "],[62706,3,""],[62679,0," = "],[62681,1,""],[62680,1,""],[62679,1,""],[62687,1,""],[62687,0," {\n  return"],[62760,0,"  "],[62763,0,"\n  "],[62764,2,""],[62764,0,"}"],[62746,2,""],[62746,0,"    "],[62734,2,""],[62734,0,"    "],[62717,2,""],[62717,0,"    "],[62701,2,""],[62701,0,"    "],[62660,0,"\n"],[62690,0,"\n#let frameLeftLine(x, y) = {"],[62662,0,"// "],[62712,0,"(tr"],[62714,1,""],[62713,1,""],[62713,0,"stroke) = "],[62816,0,"// "],[62812,0,"// "],[62796,0,"// "],[62782,0,"// "],[62763,0,"// "],[62745,0,"// "],[62734,0,"// "],[62694,0,"// "],[62662,0,"// "],[62845,0,"\n"],[62845,0,"\n#let frame(stroke) = (x, y) => (\n  left: if x > 0 { 0pt } else { stroke },\n  right: stroke,\n  top: if y < 2 { stroke } else { 0pt },\n  bottom: stroke,\n)\n\n#set table(\n  fill: (rgb(\"EAF2F5\"), none),\n  stroke: frame(rgb(\"21222C\")),\n)"],[63192,0,"// "],[63217,0,"\n    "],[63218,4,""],[63218,0,"frame(rgb(\"21222C\"))"],[63218,0,"    stroke: "],[63250,0,","],[63241,6,""],[63241,0,"00ff00"],[63075,0,"// "],[63043,0,"// "],[63012,0,"// "],[63000,0,"// "],[63247,0,"L"],[63220,0,"L"],[63067,0,"L"],[62856,0,"L"],[63251,0,"e"],[63223,0,"e"],[63069,0,"e"],[62857,0,"e"],[63255,0,"f"],[63226,0,"f"],[63071,0,"f"],[62858,0,"f"],[63259,0,"t"],[63229,0,"t"],[63073,0,"t"],[62859,0,"t"],[63263,0,"L"],[63232,0,"L"],[63075,0,"L"],[62860,0,"L"],[63267,0,"i"],[63235,0,"i"],[63077,0,"i"],[62861,0,"i"],[63271,0,"n"],[63238,0,"n"],[63079,0,"n"],[62862,0,"n"],[63275,0,"e"],[63241,0,"e"],[63081,0,"e"],[62863,0,"e"],[62865,6,""],[63274,14,""],[63274,0,"\n      "],[63274,7,""],[63274,0,"rgb(\"00ff00\"))"],[63274,13,""],[63001,0,"\n"],[63275,1,""],[63274,1,""],[62865,1,""],[62864,1,""],[62866,1,""],[62865,1,""],[62864,1,""],[62872,1,""],[62871,1,""],[62870,1,""],[62870,0," { return"],[63001,0," "],[63000,2,""],[63000,0,")}"],[63000,0,"// "],[62982,0,"// "],[62941,0,"// "],[62924,0,"// "],[62882,0,"// "],[62846,0,"// "],[63281,13,""],[63281,0,"(x, y) {\n      "],[63294,2,""],[63292,2,""],[63290,2,""],[63289,1,""],[63288,1,""],[63288,0,"=> (\n      \n      "],[63300,6,""],[63300,0,"    )"],[63299,0,"  "],[63293,8,""],[63292,1,""],[63292,0,"\n      "],[63293,6,""],[63293,0,"      "],[63293,6,""],[63293,0,"      "],[63293,6,""],[63293,0,"      left: p1"],[63306,1,""],[63306,0,"t"],[63306,1,""],[63305,1,""],[63305,0,"1pt,\n      right: 1pt,\n      top: 1pt,\n      bottom: 1pt,"],[62660,460,""],[62845,0,"if x > 0 { "],[62859,0," } else { 0pt }"],[62850,1,""],[62850,0,"=="],[62853,1,""],[62853,0,"1"],[62890,3,""],[62890,0,"none"],[62870,3,""],[62870,0,"none"],[62943,0,"// "],[63033,0,"// "],[62927,3,""],[62927,0,"N"],[62908,3,""],[62908,0,"N"],[62926,0,"o"],[62909,0,"o"],[62928,0,"n"],[62910,0,"n"],[62929,1,""],[62910,1,""],[62927,1,""],[62909,1,""],[62925,1,""],[62908,1,""],[62924,0,"n"],[62908,0,"n"],[62926,0,"o"],[62909,0,"o"],[62928,0,"n"],[62910,0,"n"],[62930,0,"e"],[62911,0,"e"],[63216,0,"// "],[62908,4,""],[62908,0,"if x == 0"],[62911,1,""],[62911,0,"y"],[62917,0," { 0.8pt } else { none }"],[62903,0,"// "],[62945,0,"\n      "],[62946,6,""],[62953,0,"// "],[62884,0,"// "],[62984,3,""],[63071,3,""],[63249,3,""],[62857,3,""],[62857,0,"0.4pt"],[63107,4,""],[63107,0,"On load"],[63146,4,""],[63107,0,"CPU "],[63107,4,""],[63107,0,"Time taken to"],[63120,2,""],[63157,0,"Memory while loaded"],[63208,4,""],[63107,18,""],[63107,0,"WH"],[63108,1,""],[63108,0,"hen loading"],[63150,0,"// "],[63204,0,"// "],[63240,4,""],[63240,0,"When merging"],[63177,4,""],[63177,0,"O"],[63123,4,""],[63123,0,"O"],[63174,1,""],[63123,1,""],[63248,4,""],[63248,0,"$O(n^2)$"],[63123,0,"$$"],[63124,0,"empt"],[63124,4,""],[63124,0,"emptyset"],[63123,10,""],[63123,0,"(negligabl"],[63132,1,""],[63131,1,""],[63130,1,""],[63130,0,"i"],[63124,7,""],[63124,0,"negligible)"],[63134,1,""],[63123,1,""],[63123,0,"_"],[63134,0,"_"],[63134,1,""],[63123,1,""],[63123,0,"("],[63134,0,")"],[63134,1,""],[63124,10,""],[63124,0,"negligi"],[63130,1,""],[63130,0,"i"],[63124,7,""],[63124,0,"negligible)"],[63134,1,""],[63123,1,""],[63123,0,"_"],[63134,0,"_"],[63123,12,""],[63123,0,"$$"],[63124,0,"emp"],[63124,3,""],[63124,0,"emptyset"],[63136,4,""],[63136,0,"$$"],[63101,0,"e"],[63101,1,""],[63137,0,"emp"],[63137,3,""],[63137,0,"emptyset"],[63149,6,""],[63149,0,"$O(n log n)$"],[63288,6,""],[63288,0,"$O(n log n)$"],[63281,4,""],[63281,0,"$O(n log n)$"],[63164,85,""],[63032,0,"Wopr"],[63035,1,""],[63034,1,""],[63034,0,"or"],[63035,1,""],[63034,1,""],[63034,0,"rk performed when / by"],[63052,1,""],[63052,0,"\\\\"],[63132,6,""],[63132,0,"L"],[63132,1,""],[63132,0,"When l"],[63292,0,"// "],[63292,3,""],[63321,376,""],[63320,1,""],[63320,0,"\n    Diffwer"],[63325,7,""],[63325,0,"Expected run-time complexity of different approa"],[63367,6,""],[63367,0,"approaches. "],[63378,1,""],[63377,1,""],[63377,0," when loading and merging changes. Notably, CRDT"],[63421,4,""],[63421,0,"OT based approaches"],[63412,7,""],[63412,0,"Eg-walker resembles "],[63432,2,""],[63412,39,""],[63412,0,"ik"],[63413,1,""],[63412,1,""],[63412,0,"Like OT based approaches, Eg-walker perfor"],[63453,1,""],[63453,0,"sm "],[63455,1,""],[63454,1,""],[63453,1,""],[63453,0,"rms "],[63448,0,"does not need to load or merge "],[63479,9,""],[63410,0," from disk"],[63411,9,""],[63410,1,""],[63391,0,"documents into memory "],[63342,11,""],[63342,0," overhead"],[63334,9,""],[63390,11,""],[63390,0,"from disk"],[63403,0," when"],[63471,22,""],[63471,0,"perform any work "],[63462,26,""],[63462,0,"has no overhead when a document is loaded"],[63478,4,""],[63478,0,"loading"],[63497,9,""],[63496,1,""],[63478,0,"when "],[63501,0,", or "],[63505,1,""],[63504,1,""],[63503,1,""],[63502,1,""],[63501,1,""],[63501,0,"."],[63501,1,""],[63501,0," into memory."],[63468,0," CPU or memory"],[63515,13,""],[63515,0," for editing. Like CRDT based approaches, Eg-walker "],[63529,38,""],[63529,0,"Eg-walker performs like a CRDT"],[63548,11,""],[63548,0,"more similarly to CRDTs when mergin"],[63577,6,""],[63577,0,"merging changes."],[63548,5,""],[63529,0,"Yet, "],[63543,0," is much faster than C"],[63564,1,""],[63564,0,"OT based systems"],[63580,29,""],[63580,0," "],[61786,18,""],[61786,0,"g"],[61786,1,""],[61786,0,"Generally we have found"],[61820,2,""],[61820,0,"to be"],[62107,0,"\n"],[62109,2,""],[61786,11,""],[61786,0,"W"],[61815,0," gneera"],[61821,1,""],[61820,1,""],[61819,1,""],[61818,1,""],[61817,1,""],[61817,0,"enerl"],[61821,1,""],[61821,0,"ally"],[61816,9,""],[61815,1,""],[61815,0," generally"],[61898,36,""],[61898,0,"Eg-walker was"],[61913,1,""],[61913,0,"7"],[61913,1,""],[61913,0,"6"],[61935,0," in one test"],[61948,1,""],[61948,0,", while "],[61948,8,""],[61948,0,"."],[62097,0,"\n"],[62097,0,"\nHowever, "],[62098,9,""],[62098,0,"Inlike"],[62098,6,""],[62098,0,"Unlike CRDT based approaches, Eg-walker does not need to "],[62098,57,""],[62097,1,""],[62096,1,""],[62946,1,""],[62767,38,""],[63082,1,""],[63206,1,""],[62656,0,"\n"],[62656,0,"\n#set figure(font: \""],[62657,19,""],[62656,1,""],[62655,1,""],[62347,0," As a result"],[62348,11,""],[62348,0,"When events are "],[62283,0," which have happened"],[62333,33,""],[62340,11,""],[62340,0,"divergence is sl"],[62355,1,""],[62354,1,""],[62354,0,"ll"],[62355,1,""],[62355,0,"ow, the "],[62340,23,""],[62340,0,"not much divergence has hepep"],[62368,1,""],[62367,1,""],[62366,1,""],[62365,1,""],[62365,0,"appened, "],[62340,34,""],[62335,5,""],[62335,0,"Not the entire size of history, as is the case "],[62333,0,", not the "],[62343,10,""],[62365,1,""],[62365,0,"."],[62366,16,""],[62453,0,"in memory whenever "],[62472,11,""],[62492,0," from disk"],[62522,0," also"],[62547,36,""],[62547,0,"while a d"],[62555,1,""],[62554,1,""],[62553,1,""],[62553,0,"the document is open"],[62687,0," This memory was not freed until the document was closed."],[62097,0,"\n// This is awkward. Reword probably."],[63704,919,""],[63703,1,""],[63702,1,""],[61949,1,""],[61949,0,"\n\n"],[61786,0,"Generally "],[61796,1,""],[61796,0,"w"],[61908,14,""],[61923,8,""],[61931,4,""],[61931,0,"case"],[61906,31,""],[61906,0,". And "],[61908,4,""],[61908,0,"Yet, "],[61908,5,""],[61908,0,"During"],[61908,0,"Unlike "],[61908,13,""],[61908,0,"In conta"],[61915,1,""],[61915,0,"rast to CRDT based approaches, Eg-walker has "],[61956,4,""],[61956,0,"does not need to retain anything in memory during editing sessions"],[61922,0," the"],[61937,0," systems we looked at"],[61958,11,""],[62036,0,"."],[61969,0," does not need to load "],[61987,5,""],[61987,0,"reconstruct an"],[62000,1,""],[61999,1,""],[61999,0,"a CRDT state ne"],[62013,1,""],[62012,1,""],[62012,0,"in memory  "],[62022,1,""],[62022,0,"before load"],[62032,1,""],[62031,1,""],[62031,0,"cal edits can be performed"],[62057,68,""],[62057,0," - so an"],[62064,1,""],[62063,1,""],[62063,0,"the "],[61907,0," while "],[61913,1,""],[61908,6,""],[61907,1,""],[61907,0,"\n\n\n"],[61910,159,""],[61910,0,"In contrast to the CRDT based systems we looked at, Eg-walker does not need to reconstruct a CRDT state in memory before local edits can be performed - so the"],[61907,0," The CRDT systems we lookeda "],[61935,1,""],[61934,1,""],[61934,0," at all retained "],[61942,0,"reconstructed the"],[61958,1,""],[61957,1,""],[61956,1,""],[61956,0,"their CRDT state in memory when documents are loaded - which "],[61941,0," "],[61938,4,""],[61938,0,"needed to"],[61960,1,""],[61959,1,""],[62015,15,""],[62014,1,""],[62013,1,""],[62012,1,""],[62012,0,"."],[62012,1,""],[62012,0," from disk. This CRDT state w"],[62040,1,""],[62040,0,"was then retained during editing sessions."],[62065,8,""],[62065,0,"the entire editing "],[62065,10,""],[62065,0,"any"],[62085,1,""],[62084,1,""],[62084,0,"."],[61907,1,""],[61907,0,"\n\n"],[61906,1,""],[61906,0,", performing 15"],[61920,1,""],[61920,0,"60 000x "],[61908,0,"merging changes "],[61924,11,""],[61933,0,"faster in one of our tests."],[61939,0," than OT"],[62000,0,"all "],[62045,0,"to"],[62046,1,""],[62045,1,""],[62057,0,"ever a"],[62072,1,""],[62072,0," s"],[62073,1,""],[62073,0,"is"],[62075,4,""],[62094,61,""],[62093,1,""],[62003,10,""],[62015,0,"ed"],[62085,0," This is ned"],[62096,1,""],[62095,1,""],[62094,1,""],[62094,0,"generally "],[62094,10,""],[62094,0,"necessary because CRDTs"],[62104,0,"to "],[62086,20,""],[62086,0,"The CRDT state needs to be available for a CRDT o"],[62134,1,""],[62134,0,"to "],[62100,0," is used by"],[62111,51,""],[62111,0," CRDT s"],[62117,1,""],[62116,1,""],[62116,0,"s to translate local edits into CRDT messages."],[62085,0," This is slow and memory"],[62103,6,""],[62103,0,"can consume as "],[62117,1,""],[62116,1,""],[62116,0," lot of RAM."],[62129,76,""],[62086,0,"The CRDT state is used by CRDTs to translate local edits into CRDT messages. "],[62089,0,"is "],[62091,1,""],[62090,1,""],[62089,1,""],[62088,1,""],[62088,0,"is is necee"],[62098,1,""],[62097,1,""],[62097,0,"essary because"],[62116,0,"s need to"],[62125,26,""],[62166,0," before the events"],[62142,0,"editing "],[62150,5,""],[62150,0,"events"],[62193,0," can be broadcast to other peers"],[62227,43,""],[62227,0,"Loading and retaining this state "],[62235,0,"this state is slow, and "],[62259,4,""],[62268,0," it "],[62272,12,""],[62272,0,"can concu"],[62280,1,""],[62279,1,""],[62279,0,"sume a lot of RAM. ("],[62298,1,""],[62297,1,""],[62297,0," (In one case, the Automerge CRDT took "],[62331,5,""],[62331,0,"needed 44 GB of RAM to operate)."],[61990,13,""],[61990,0,"analyzed"],[61997,1,""],[61996,1,""],[61995,1,""],[61995,0,"sed all needed to"],[62008,1,""],[62007,1,""],[62007,0,"ed"],[62025,1,""],[62024,1,""],[62030,0," l"],[62031,1,""],[62030,1,""],[62059,1,""],[62058,1,""],[62057,1,""],[62056,1,""],[62107,7,""],[62107,0,"to allow the"],[62124,1,""],[62124,0," to"],[62127,8,""],[62177,26,""],[62177,0," before those events can be "],[62367,0," In const"],[62375,1,""],[62374,1,""],[62374,0,"trast, Eg-walker only needs to create a "],[62413,1,""],[62413,0,"n equivalent CRDT state during merging."],[62437,15,""],[62437,0,"when merging changes. "],[62458,1,""],[62367,1,""],[62367,0,"\n\n"],[62413,3,""],[62413,0,"the "],[62460,0," Loading data from "],[62461,18,""],[62461,0,"There is no overhead when loading a document from disk"],[62473,0,"additional "],[62526,0," compared to "],[62527,12,""],[62526,1,""],[62473,0,"extra"],[62478,10,""],[62521,0,". Events can be "],[62523,14,""],[62523,0,"Per"],[62523,3,""],[62523,0,"T"],[62523,1,""],[62523,0,"Eg-walker only has a performance cost when merging remote changes"],[62580,0,", concurrent"],[62600,0,". And this cost"],[62602,13,""],[62602,0,"This cost scales based on the amount of time since"],[62631,21,""],[62631,0," number of events since the last common o"],[62671,1,""],[62671,0,"point in historiy - so"],[62686,1,""],[62685,1,""],[62685,0,"r"],[62692,0," merging "],[62687,14,""],[62687,0,". EM"],[62690,1,""],[62689,1,""],[62689,0,"MErging "],[62689,8,""],[62689,0,"M"],[62689,1,""],[62688,1,""],[62618,9,""],[62618,0," with"],[62683,1,""],[62683,0,", not "],[62688,1,""],[62688,0,"m "],[62689,1,""],[62688,1,""],[62688,0,", as is the case with CRDTs, the numnber"],[62727,1,""],[62726,1,""],[62725,1,""],[62724,1,""],[62721,3,""],[62721,0,"total number of events ever witnessed by the document."],[62749,12,""],[62749,0,"applied to"],[62774,1,""],[62775,159,""],[62773,1,""],[62773,0," Eg-walker has a peak memory usage "],[62774,34,""],[62774,0,"The peak memory used "],[62774,21,""],[62774,0,"At peak, the CPU and memroy"],[62800,1,""],[62799,1,""],[62798,1,""],[62798,0,"ory used by g"],[62810,1,""],[62810,0,"Eg-walker is similar to"],[62832,1,""],[62832,0,"o the st"],[62839,1,""],[62838,1,""],[62838,0,"amount of memory used by CRDTs the entire "],[62820,0,"when merging "],[62836,7,""],[62836,0,"comparable"],[62884,12,""],[62850,34,""],[62850,0,"the CPU time taken to loa da "],[62878,1,""],[62877,1,""],[62876,1,""],[62875,1,""],[62875,0,"d A "],[62878,1,""],[62877,1,""],[62877,0,"a CRDT from disk and the memory neede "],[62914,1,""],[62914,0,"d the entire time a CRDT document is open."],[62909,6,""],[62909,0,"consumed"],[62960,832,""],[62959,1,""],[62959,0,"\n\n"],[62959,1,""],[62958,1,""],[61908,60,""],[61908,0,"while "],[61906,8,""],[61906,0,". And "],[61908,4,""],[61907,1,""],[61866,41,""],[61856,10,""],[61856,0,"Performance while merging is fast - similar to the performance of a comparable CRDT. However, unlike the CRDT "],[61941,25,""],[61941,0,"Yet, unlike CRDT based systems, "],[61946,27,""],[61946,0,"Eg-walker has a CPU "],[61965,1,""],[61964,1,""],[61963,1,""],[61962,1,""],[61961,1,""],[61960,1,""],[61941,19,""],[61940,1,""],[61940,0," Yet, Eg-walker has m"],[61960,1,""],[61960,0,"much less memory and CPU overhead in the "],[61941,60,""],[61940,1,""],[61840,0,", small"],[61947,0," We "],[61950,1,""],[61949,1,""],[61949,0,"e "],[61948,3,""],[61947,1,""],[61947,0," Yet Eg-walker also has th"],[61972,1,""],[61971,1,""],[61952,0,"like "],[61956,1,""],[61955,1,""],[61954,1,""],[61953,1,""],[61952,1,""],[61971,0,"some properties of OT based systems - for example"],[61962,8,""],[61962,0,"retains"],[61974,0," nice"],[62013,11,""],[62013,0,"like in"],[62019,1,""],[62018,1,""],[62013,5,""],[62012,1,""],[62011,1,""],[62010,1,""],[62010,0,": documents"],[62012,9,""],[62012,0,"in the "],[62012,7,""],[62011,1,""],[62010,1,""],[62010,0,"."],[61825,10,""],[61852,0," The wrost"],[61861,1,""],[61860,1,""],[61859,1,""],[61858,1,""],[61858,0,"orst-case performance of "],[61853,0,"Eg-walker is much faster than "],[61863,20,""],[61863,0,"has a "],[61869,4,""],[61852,1,""],[61852,0,"\n\n\n\n"],[61853,0,"\nThe worst-case performance of Eg-walker is "],[61863,1,""],[61863,0," "],[61894,3,""],[61894,0,"happens when merging a large, complex event history from a remote peer."],[61945,0," with a lot of concurrency"],[61991,0," In this case, Eg-walker performs similarly to h"],[62038,1,""],[62038,0,"the "],[62041,1,""],[62040,1,""],[62039,1,""],[62038,1,""],[62038,0,"a well optimized "],[62037,18,""],[62036,1,""],[62036,0,"o a CRDT. In the best case"],[62046,0,"However, "],[62055,16,""],[62055,0,"when docu"],[62060,4,""],[62055,5,""],[62055,0,"this cost is only paid when merging changes."],[62055,0,"unlike CRDTs, "],[62113,0," (The CRDT based systems needed to perform this work every time "],[62166,0,"on "],[62168,1,""],[62167,1,""],[62166,1,""],[62177,0,"t"],[62113,65,""],[62044,69,""],[62044,0,". However, CRDT"],[62055,0,"the "],[62063,0," based systems we looked at all need to perform this work when the document is loaded. Not just when content is merged. "],[62182,1,""],[62182,0," When "],[62183,5,""],[62183,0,"Eg-walker h"],[62181,13,""],[62181,0,"."],[61854,0,"// "],[62185,1,""],[61852,0," The worst case performance of e"],[61883,1,""],[61883,0,"Eg-walker is similar"],[61879,0," and memory usage"],[61920,0," to that of a"],[61932,1,""],[61931,1,""],[61931,0," the CRDTs we tested. In fact, th"],[61963,1,""],[61962,1,""],[61962,0,"we observed more vari"],[61952,31,""],[61936,0,"expected "],[61936,9,""],[61952,0," In fact, "],[61953,9,""],[61952,1,""],[61952,0," W"],[61953,1,""],[61952,1,""],[62287,0,"// "],[61952,0," "],[61952,1,""],[61853,99,""],[61853,0,"When merging a large, complex set of changes, Eg-walker performs simil"],[61909,14,""],[61909,0,"uses a similar amoutn of "],[61933,1,""],[61932,1,""],[61931,1,""],[61930,1,""],[61929,1,""],[61928,1,""],[61928,0,"nt of RAM and PCU"],[61944,1,""],[61943,1,""],[61942,1,""],[61942,0,"CPU time as a similarly optimised CRDT. "],[61981,1,""],[62511,0,"\n"],[62511,0,"\nHowever, there is a large performance difference"],[62538,22,""],[62538,0,"difference in approaches as to "],[62512,57,""],[62512,0,"However, there is a large difference in approaches as to"],[61853,6,""],[61853,0,"M"],[61892,0," from a remote peer is the worst case "],[61912,18,""],[61912,0,"results in the worst-"],[61932,1,""],[61932,0," case "],[61912,7,""],[61912,0,"is"],[61914,3,""],[61930,0,"for"],[61933,1,""],[61943,0,". And in that case, "],[61963,7,""],[61963,0,"e"],[61963,1,""],[61963,0,"Eg-walker uses a"],[62585,47,""],[62585,0,"in normal usage "],[62600,1,""],[62600,0," we expect Eg-walker to perform much better "],[62585,2,""],[62585,0,"given nor"],[62593,1,""],[62592,1,""],[62591,1,""],[62590,1,""],[62603,0," patterns,"],[62657,0,"than comparable CRDT based "],[62661,0," the"],[62688,0,"appr"],[62688,4,""],[62688,0,"systems we looked at."],[62709,2,""],[62709,0," "],[62666,11,""],[62699,42,""],[62699,0,"CRDT base s"],[62709,1,""],[62708,1,""],[62708,0,"d systems nee"],[62720,1,""],[62719,1,""],[62718,1,""],[62717,1,""],[62697,0," (Yjs and Automerge)"],[62706,11,""],[62702,4,""],[62697,5,""],[62717,0," typically need to"],[62779,0,"ever"],[62699,0,"The reason for "],[62713,1,""],[62712,1,""],[62711,1,""],[62710,1,""],[62710,0,"is that "],[62950,0," saved and"],[62957,3,""],[62957,0,"or"],[62985,0," The translation is fast - but it requires that the"],[63036,13,""],[63036,0," entire document"],[63058,8,""],[63044,8,""],[63044,0,"CRDT"],[63054,0," is loaded "],[63065,6,""],[63016,0,"loading this data into memory is "],[63049,48,""],[63049,0,"ex"],[63050,1,""],[63049,1,""],[63049,0,"slow and expensive. And"],[63085,0," "],[63085,1,""],[62986,16,""],[62986,0,"Translating individual events "],[63043,4,""],[63043,0,"state"],[63101,4,""],[63108,0,"s"],[63176,11,""],[63138,4,""],[63138,0,"the "],[63157,6,""],[63157,0,"used"],[63174,0," to store its state"],[63024,1,""],[63023,1,""],[63023,0,","],[62986,44,""],[62986,0,"L"],[62986,1,""],[62986,0,"Translating individual events is fast, but l"],[63019,0,"very "],[63128,1,""],[63196,1,""],[63187,4,""],[63187,0,"this "],[63198,0,"\n\nGenerally, the "],[63200,15,""],[63200,0,"The worst case time and memory"],[63215,5,""],[63215,0,"performance "],[63227,10,""],[63227,0,"for Eg-walker is similar to "],[63200,0,"Gen"],[63202,1,""],[63201,1,""],[63200,1,""],[63200,0,"In our "],[63206,1,""],[63205,1,""],[63204,1,""],[63203,1,""],[63202,1,""],[63201,1,""],[63200,1,""],[63200,0,"In our testing we have found "],[63229,1,""],[63229,0,"t"],[63284,0,"the expected"],[63270,0,"("],[63270,1,""],[63296,0," epr"],[63299,1,""],[63298,1,""],[63297,1,""],[63297,0,"performen"],[63305,1,""],[63304,1,""],[63304,0,"ance when using a CRDT."],[63198,0,"\n\nThe timne"],[63208,1,""],[63207,1,""],[63207,0,"e taken for Eg-walker and a CRDT to construct this state is similar. But CRDTs must construct this tat"],[63308,1,""],[63307,1,""],[63306,1,""],[63306,0,"state every time a document loads from disk. Eg-walker only constructs this state when concurrent changes are merged. And Eg-walker only reconstructs this state as far back as the most common"],[63486,11,""],[63486,0,"common p"],[63493,1,""],[63493,0,"merge"],[63493,5,""],[63486,0,"most recent "],[63505,0," "],[63505,1,""],[63505,0,"version."],[63200,0,"In the wro"],[63209,1,""],[63208,1,""],[63207,1,""],[63200,26,""],[63210,13,""],[63210,0,"takes a similar amount of time to"],[63264,11,""],[63302,0,"_"],[63313,0,"_"],[61853,0,"//"],[61852,1,""],[61852,0,"\n\n"],[61852,0," Performance is "],[61853,0,"Worst case "],[61864,1,""],[61864,0,"p"],[61879,0,"competitive"],[61853,37,""],[61853,0,"In cases of high concurrency, performance is competitive with well "],[61915,0,"that of "],[61928,0,"optimized"],[61936,1,""],[61935,1,""],[61934,1,""],[61934,0,"sed CRDTs."],[61943,1,""],[61942,1,""],[61942,0," libraries. "],[61953,1,""],[61953,0," "],[61853,29,""],[61853,0,"Worst case"],[61853,12,""],[61853,0,"P"],[61853,1,""],[61853,0,"Worst case p"],[61934,1,""],[61933,1,""],[61933,0,", whuile"],[61940,1,""],[61939,1,""],[61938,1,""],[61937,1,""],[61937,0,"ile documents load much faster."],[61951,0,"ca"],[61952,1,""],[61951,1,""],[61935,0,"with significantly "],[61935,0,"and in th"],[61943,1,""],[61942,1,""],[61941,1,""],[61940,1,""],[61939,1,""],[61933,58,""],[61933,0,"."],[61933,1,""],[61933,0,", but many operations (loadin fr"],[61964,1,""],[61963,1,""],[61963,0,"g"],[61963,1,""],[61962,1,""],[61962,0,"g from disk, "],[61944,0,"common "],[61961,0," are faster."],[61939,0,"Eg-walker is faster for "],[61985,11,""],[61988,1,""],[61988,0,"L"],[62007,0,"merging short lived branches "],[62035,1,""],[62035,0," and merging m"],[62048,1,""],[62048,0,"sequences of mostly"],[62061,6,""],[62061,0,"linear events)."],[61951,0," sin"],[61954,1,""],[61954,0,"gnificantly"],[62010,0,"data "],[62001,1,""],[62000,1,""],[61999,1,""],[61999,0,", like "],[62006,1,""],[62006,0,";"],[62006,1,""],[62006,0,"l"],[61933,1,""],[61933,0,". However,"],[61943,4,""],[62102,1,""],[62103,0,"\n\nEg-walker also takes up less"],[62129,0,"significantly "],[62147,0," RAM while a do"],[62120,8,""],[62120,0,"has"],[62138,5,""],[62124,28,""],[62124,0,"a negligable "],[62132,1,""],[62132,0,"i"],[62105,0,"Because "],[62105,8,""],[62105,0,"Unlike CRDT based approaches, "],[62144,0," does not need to refer to a local "],[62171,8,""],[62171,0,"any local CRDT state "],[62105,0,"// "],[62105,113,""],[62105,0,"// Unlike CRDT based approaches, Eg-walker does not need to refer to any local CRDT state  also has a negligible"],[62104,0,"\n"],[62104,0,"\nEg-walker event hist"],[62121,4,""],[62120,1,""],[62119,1,""],[62118,1,""],[62117,1,""],[62116,1,""],[62115,1,""],[62114,1,""],[62114,0,"'s event graphs also take up less space "],[62105,0,"Storing "],[62113,1,""],[62113,0,"e"],[62113,1,""],[62113,0,"E"],[62138,24,""],[62137,1,""],[62137,0," on disk also s"],[62105,8,""],[62130,13,""],[62130,0,"also seem to compress better on disk"],[62166,1,""],[62166,0,"."],[62143,18,""],[62143,0,"less"],[62143,4,""],[62143,0,"tak"],[62145,1,""],[62145,0,"ke up less space on"],[62135,8,""],[62161,0," than similar algorithms"],[62175,10,""],[62175,0,"CRDT based systems"],[61853,0,"In the "],[61860,1,""],[61860,0,"w"],[61870,0,", Eg-walker's"],[61998,0,"than CRDTs "],[62035,1,""],[62035,0," -"],[62051,4,""],[62051,0,"a document"],[62102,3,""],[62102,0,"or"],[62113,0,"log"],[62115,1,""],[62115,0,"ng "],[62147,0,"// "],[63202,1,""],[63202,0,"\n"],[63080,0,"// "],[63217,0,"for this "],[63217,9,""],[63368,23,""],[63368,0," "],[63389,0," to be translated"],[63411,0," the corresponding"],[63443,0," - which must be done"],[63491,9,""],[63452,12,""],[63452,0,"happen"],[63452,6,""],[63452,0,"is required"],[63517,49,""],[63517,0,"L"],[61524,1,""],[61523,1,""],[61523,0," against CRDT and OT implementations"],[61524,35,""],[61523,1,""],[61517,0,"th"],[61518,1,""],[61517,1,""],[61514,0,"the performance of "],[61542,12,""],[61542,0," performance"],[61532,1,""],[61529,3,""],[61517,12,""],[61514,3,""],[61517,0,"th"],[61517,2,""],[61523,0," against CRDT and OT implementations"],[61543,16,""],[61540,3,""],[61536,4,""],[61531,5,""],[61523,8,""],[61523,0,"'s"],[61523,2,""],[61523,0," against CRDT and OT implementations"],[61524,35,""],[61523,1,""],[61517,0,"th"],[61517,2,""],[61514,0,"the performance of "],[61542,12,""],[61790,0,"\n"],[61790,0,"\nagainst CRDT and OT implementations"],[61791,35,""],[61790,1,""],[61789,1,""],[61514,19,""],[61514,0,"how well "],[61532,0," compares to O"],[61545,1,""],[61545,0,"th"],[61546,1,""],[61545,1,""],[61545,0,"similar OT and CRDT implementations"],[61514,9,""],[61524,8,""],[61524,0,"against"],[61531,3,""],[61524,44,""],[63191,0,"\n"],[63204,0,"for this "],[63677,0,"\nThe reason for this is that CRDT based systems typically need to reconstruct their CRDT state in memory whenever a document is loaded from disk. This is necessary to allow local editing events to be translated into the corresponding CRDT messages - which is required before those events can be broadcast to other peers. Loading this state into memory is slow and expensive. And retaining it consumes a lot of RAM. In one case, the Automerge CRDT used 44 GB of RAM to store this state."],[63221,143,""],[63221,0,"CRDTs require"],[63261,0," m"],[63262,1,""],[63262,0,"immediately"],[63321,0," before they can be saved to disk or broadcast to other peers. This translation is fast, but it requires "],[63417,0,"typically "],[63436,0,"the entire CRDT state to be loaded into RAM "],[63427,0,"first "],[63485,0,". And that"],[63495,105,""],[63495,0," can be"],[63511,3,""],[63510,1,""],[63510,0,","],[63521,0,", and "],[63526,1,""],[63522,4,""],[63521,1,""],[63510,1,""],[63466,3,""],[63466,0," rce"],[63469,1,""],[63468,1,""],[63468,0,"econstructed"],[63480,7,""],[63484,1,""],[63483,1,""],[63487,0," "],[63487,1,""],[63384,4,""],[63384,0,"Translating events into messages"],[63416,12,""],[63430,27,""],[63430,0,"before translation can co"],[63454,1,""],[63453,1,""],[63453,0,"occur,"],[63481,0," needs to "],[63490,1,""],[63489,1,""],[63488,1,""],[63487,1,""],[63490,0," be"],[63515,0," The size of the CRDRT"],[63536,1,""],[63535,1,""],[63535,0,"T state scales with the total number"],[63543,28,""],[63543,0,"is proportional to the number of events which have ever modified the document."],[63621,1,""],[63620,1,""],[63620,0,", so loading this state into memory is slow and "],[63668,51,""],[63668,0,"it"],[63671,0,"can "],[63682,1,""],[63695,0," while the document is kept open"],[63799,0,"\n"],[63760,0," took t"],[63766,1,""],[63766,0,"2 minutes to load this state into "],[63800,6,""],[63813,20,""],[63812,1,""],[63812,0,"."],[63766,34,""],[63761,5,""],[63761,0,"use"],[63763,1,""],[63762,1,""],[63761,1,""],[63761,0,"needed "],[63780,1,""],[63780,0," to store its "],[63790,4,""],[63790,0,"this state object. Simply loading this opb"],[63831,1,""],[63830,1,""],[63830,0,"bject from disk"],[63736,4,""],[63736,0,"of our tests"],[63797,0," an approximately 1MB document i"],[63798,36,""],[63798,0,"the"],[63814,0," for an approximately 1MB document"],[63836,1,""],[63836,0,"500KB"],[63841,2,""],[63851,37,""],[63791,7,""],[63791,0," load "],[63775,0," 2 minutes and"],[63832,2,""],[63832,0,"a"],[63832,1,""],[63832,0,"one"],[63289,18,""],[63289,0," corresponding"],[63290,0,"the "],[63408,0,"CRDT "],[63429,1,""],[63429,0,". However,"],[63439,4,""],[63438,1,""],[63438,0,","],[63608,0,"_"],[63604,0,"_"],[63668,0,"cam "],[63671,1,""],[63670,1,""],[63670,0,"n be "],[63675,3,""],[63683,3,""],[63683,0," doing so"],[63684,8,""],[63684,0,"the system "],[63694,1,""],[63684,10,""],[63684,0,"retaining it in memory"],[63903,486,""],[63903,0,"In our tests, "],[63961,0,"re"],[63989,0,"Eg-walker on re"],[64003,1,""],[64002,1,""],[64001,1,""],[64001,0,"ly reconstructs this state object when needed. And only "],[64057,164,""],[64056,1,""],[64055,1,""],[64054,1,""],[64053,1,""],[64052,1,""],[64052,0,"the state is only"],[64081,1,""],[64081,0,"ed"],[64083,11,""],[64083,0," "],[64083,1,""],[64083,0," to "],[64086,1,""],[64085,1,""],[64084,1,""],[64084,19,""],[64084,0,"wt"],[64085,1,""],[64085,0,"ith events back to the"],[63903,13,""],[63903,0,"When necessary,"],[63928,0," also reconstructs this state. However,"],[63967,62,""],[63982,0," needs to"],[64003,1,""],[63992,11,""],[63992,0,"build"],[64016,0,"in memory "],[64026,11,""],[64026,0,"when merging. And "],[64038,0," changes"],[64052,18,""],[64052,0,"even then, the state is"],[64095,12,""],[64095,0,"as far "],[64106,0," as"],[64109,3,""],[64038,0," concurrent"],[64152,0," Once merging is complete, Eg-walker discards this state object."],[64189,0,"immediately "],[64189,0,"can "],[64212,1,""],[64230,0," fom"],[64233,1,""],[64232,1,""],[64232,0,"rom emm"],[64238,1,""],[64237,1,""],[64236,1,""],[64236,0,"emm"],[64238,1,""],[64237,1,""],[64236,1,""],[64236,0,"memory"],[62132,1060,""],[62386,0," that"],[62387,4,""],[62387,0,"any"],[62429,18,""],[62429,0," must be"],[62414,23,""],[62414,0,"the CRDT "],[62422,1,""],[62422,0,"s we looked at "],[62436,1,""],[62436,0," "],[62436,1,""],[62433,3,""],[62426,7,""],[62423,3,""],[62422,1,""],[62422,0," "],[62422,1,""],[62417,5,""],[62414,3,""],[62414,0,"the entire CRDT must be"],[62418,7,""],[62422,0," S"],[62423,1,""],[62423,0,"state"],[62429,7,""],[62429,0,"is"],[62448,0," a memory-efficient data structure in"],[62451,16,""],[62451,0,"query optimised"],[63338,591,""],[63252,0,"_"],[63242,0,"_"],[63319,0,"_"],[63299,0,"_"],[63320,1,""],[63299,1,""],[63253,1,""],[63242,1,""],[63331,0,"similar "],[63344,0," l"],[63345,1,""],[63344,1,""],[63343,1,""],[63343,0," library. The best case performance of Eg-walker (when"],[63393,4,""],[63392,1,""],[63392,0,"is significantly faster than that of an equivalent CRDT."],[64277,3,""],[64277,0,"Like CRDT bases"],[64291,1,""],[64291,0,"d approaches"],[64318,38,""],[64318,0,"significantly more efficient at"],[64348,1,""],[64347,1,""],[64347,0,"wen"],[64349,1,""],[64348,1,""],[64348,0,"hen"],[64359,0," concurrent"],[63252,0,"_"],[63242,0,"_"],[63307,0,"_"],[63299,0,"_"],[64404,1,""],[64403,1,""],[64404,1392,""],[64403,0,"\n== Implementations"],[64870,0," "],[64870,1,""],[64870,0," "],[64870,1,""],[64764,6,""],[64764,0,". However, "],[64765,1,""],[64765,0,"\n"],[64766,74,""],[64765,1,""],[64805,0,"performance optmised "],[64820,0,"i"],[64934,0,"\n"],[64934,0,"\nWe have "],[64938,5,""],[64938,0,"compare the perofrmance"],[64950,11,""],[64950,0,"performance of our "],[64935,34,""],[64935,0,"We compare the performance of our"],[64456,1,""],[64455,1,""],[64455,0,"Eg"],[64565,40,""],[64568,1,""],[64470,21,""],[64470,0,"implementation"],[64546,11,""],[64546,0,"implementation"],[64560,4,""],[64594,0,"  @dt"],[64595,1,""],[64466,3,""],[64466,0,"a reference"],[64553,0," an optimiz"],[64563,1,""],[64563,0,"sed"],[64555,1,""],[64555,0," performance"],[64592,34,""],[64597,0,"\nThe implmeentation"],[64602,14,""],[64602,0,"implementations are algorithmically identical. However, the reference implment"],[64679,1,""],[64678,1,""],[64677,1,""],[64676,1,""],[64676,0,"ementation is missing"],[64697,36,""],[64690,7,""],[64689,1,""],[64688,1,""],[64687,1,""],[64687,0,"omits"],[64556,0,"production-ready, "],[64795,0,"\n"],[64871,0,"\n"],[64796,1,""],[64857,5,""],[64994,0,"\n"],[64960,1,""],[64993,0,"\nDetails of the hardware and software setup of our experiments are given in @benchmark-setup."],[64867,93,""],[64900,0,"\n"],[64866,1,""],[64899,1,""],[64866,0,"\n"],[64900,0,"\n\n"],[64869,0," have benchmarked Eg-walker against"],[64904,31,""],[64904,0," popular "],[64905,0,"the "],[64917,0,"industry li"],[64927,1,""],[64926,1,""],[64926,0,"CRDT"],[64917,0,"opensource "],[64937,0," s"],[64938,1,""],[64937,1,""],[64917,20,""],[64921,0," libraries of Yjs @yjs"],[64940,3,""],[64940,0,"yjs and Automerge @atui"],[64962,1,""],[64961,1,""],[64960,1,""],[64960,0,"uto"],[64959,4,""],[64959,0,"automerge. However, "],[64867,112,""],[64867,0,"We have benchmarked Eg-walker against the popular CRDT libraries of Yjs @yjs and Automerge @automerge. However,"],[65073,1,""],[64981,0,"\n"],[65074,1,""],[64982,0,"\n"],[65075,340,""],[64983,0,"To make a fair comparison, we have also implemented our own reference CRDT library using the same optimization tricks and data structures as our Eg-walker implementation. Our benchmarks show our home-grown CRDT library outperforms the industry standard libraries of Yjs and Automerge. They have nevertheless been included for completeness.\n"],[65415,1,""],[65323,0,"\n"],[65416,90,""],[65324,0,"We have also implemented a simple OT library for comparison. *TODO: SAY MORE ABOUT THIS?*\n"],[64981,1,""],[64980,1,""],[64979,1,""],[64978,0," these libraries are lso"],[65001,1,""],[65000,1,""],[64999,1,""],[64999,0,"missing some important optimisations"],[64998,37,""],[64998,0," not as fast t"],[65011,1,""],[64905,3,""],[64905,0,"two"],[64931,3,""],[64931,0,":"],[65004,5,""],[65004,0,"well optimised as our Eg-walker implmeentation"],[65036,14,""],[65036,0,"implementation - and we don't "],[65050,16,""],[65050,0,". "],[65052,2,""],[65104,7,""],[65104,0,"a "],[65105,1,""],[65104,1,""],[65104,0,"our own performance-optimised"],[65171,24,""],[65156,0,". This libraries"],[65171,1,""],[65170,1,""],[65169,1,""],[65169,0,"y shares"],[65177,6,""],[65181,5,""],[65181,0," high er"],[65188,1,""],[65187,1,""],[65187,0,"performance"],[65214,7,""],[65214,0," with our"],[65249,169,""],[65025,0," ow"],[65027,1,""],[65026,1,""],[65025,1,""],[65025,0," own"],[65028,1,""],[65027,1,""],[65026,1,""],[65025,1,""],[65059,2,""],[65059,0," "],[65060,6,""],[65060,0,"the "],[65074,0," more fair"],[65111,7,""],[65111,0,"a"],[65179,21,""],[65179,0,"severaa"],[65185,1,""],[65184,1,""],[65183,1,""],[65182,1,""],[65181,1,""],[65180,1,""],[65179,1,""],[65179,24,""],[65179,0,"many of the optimisations c"],[65205,1,""],[65204,1,""],[65179,25,""],[65179,0,"as muich "],[65187,1,""],[65186,1,""],[65185,1,""],[65184,1,""],[65184,0,"ch code"],[65179,12,""],[65179,0,"a lot of its od"],[65193,1,""],[65192,1,""],[65192,0,"codw"],[65195,1,""],[65195,0,"e"],[65172,24,""],[65172,0,"si"],[65173,1,""],[65172,1,""],[65172,0,"is as close to our"],[65215,1,""],[65215,0," as possible."],[65175,8,""],[65175,0,"very similar"],[65175,4,""],[65175,0,"as"],[65185,0," asposs"],[65191,1,""],[65190,1,""],[65189,1,""],[65188,1,""],[65188,0," possible "],[65197,4,""],[65197,0," as"],[65229,12,""],[65232,0,"\n"],[65232,0,"\n"],[65232,0,"For "],[65232,4,""],[65232,0,"To compare Eg-walker with OT, we implemented a simple OT based "],[65232,10,""],[65232,0,"We have also implemented a "],[65259,37,""],[65275,0,"reference implementation t"],[65300,1,""],[65300,0,"for comparison. This "],[65320,1,""],[65319,1,""],[65318,1,""],[65317,1,""],[65316,1,""],[65315,1,""],[65315,0," This library u"],[65329,1,""],[65329,0,"reconstructs "],[65329,13,""],[65329,0,"transforms "],[65329,0,"batch-"],[65329,6,""],[65329,0,"is written "],[65332,8,""],[65329,3,""],[65329,0,"batch"],[65329,5,""],[65329,0,"bulk "],[65345,0,"the event graph"],[65344,0," all oper"],[65352,1,""],[65351,1,""],[65350,1,""],[65349,1,""],[65349,0,"operations in"],[65378,0," to make a lie"],[65391,1,""],[65391,0,"near sequence of e"],[65408,1,""],[65408,0,"operations which are apl"],[65431,1,""],[65431,0,"plied. It uses memoi"],[65446,5,""],[65446,0,"memoize"],[65441,5,""],[65448,0,"s "],[65438,12,""],[65438,0,"Op"],[65439,1,""],[65438,1,""],[65438,0,"Transformed operations are memoi"],[65465,5,""],[65465,0,"memoized "],[65232,242,""],[65232,0,"We have also implemented a simple OT based reference implementation for comparison. This library bulk transforms all operations in the event graph to make a linear sequence of operations which are applied. Transformed operations are memoized"],[65174,0," made to be"],[65159,82,""],[65158,1,""],[65157,1,""],[65157,0," which outperforms "],[65164,12,""],[65164,0,"shares much of its cow"],[65185,1,""],[65185,0,"de with Yjs and Automerge. Thi s"],[65216,1,""],[65215,1,""],[65215,0,"s library op"],[65226,1,""],[65226,0,"utperforms both libraries."],[65193,17,""],[65171,22,""],[65171,0,"many implementation details with our optimised Eg-walker implmeentation"],[65274,9,""],[65274,0,"Yjs and Automerge"],[65232,0,"e"],[65235,1,""],[65074,5,""],[65420,3,""],[65420,0,"a given"],[65440,57,""],[65439,1,""],[65476,0," during processing."],[65477,0,"and reused "],[65506,0," This library is not as well optimised as the other implem"],[65558,6,""],[65558,0,"implementations."],[65507,67,""],[65506,1,""],[65507,90,""],[65507,0,"\n"],[65507,0,"\nAll benchmarked"],[65522,1,""],[65521,1,""],[65521,0,"ed code is included "],[65511,12,""],[65512,0,"beh"],[65514,1,""],[65514,0,"nchmark "],[65526,0," and data"],[65548,0," "],[65548,1,""],[65548,0,"in the "],[65539,16,""],[65511,10,""],[65526,3,""],[65526,0,"used to generate ou"],[65544,1,""],[65543,1,""],[65542,1,""],[65531,11,""],[65531,0,"here is included in the associated data set."],[65539,8,""],[65538,1,""],[65537,1,""],[65536,1,""],[65535,1,""],[65534,1,""],[65533,1,""],[65532,1,""],[65531,1,""],[65531,0,"in these bebnch"],[65545,1,""],[65544,1,""],[65543,1,""],[65542,1,""],[65542,0,"nchmarks is included"],[65562,28,""],[65553,9,""],[65553,0," published alongside this pa"],[65580,1,""],[65579,1,""],[65579,0,"article."],[65681,0,"\n"],[65588,1,""],[65680,0,"\nAll code and data used in these benchmarks is published alongside this article."],[65508,80,""],[65624,8,""],[65624,0,"in our"],[64796,3,""],[64796,0,"All"],[64864,0," of Eg-walker"],[64831,3,""],[64831,0,"opu"],[64833,1,""],[64832,1,""],[64832,0,"ur"],[64534,0,"written IN"],[64543,1,""],[64542,1,""],[64542,0,"in Typescript "],[64633,0,"written in Rust "],[64654,3,""],[64654,0,"Both"],[64654,0,"\n"],[64654,1,""],[64714,4,""],[64714,0," our"],[65111,15,""],[65111,0," for a more"],[65127,0," comparison of the algorithms themselves"],[65291,10,""],[65367,0,"For comparison, "],[65383,1,""],[65383,0,"w"],[65450,15,""],[65757,0,"\nDetails of the hardware and software setup of our experiments are given in @benchmark-setup."],[65587,93,""],[67481,1,""],[67480,1,""],[67479,1,""],[67478,1,""],[67477,1,""],[67477,0,"S1, S2, S3"],[67484,3,""],[67480,4,""],[67477,3,""],[67477,0,"\"seq\""],[67477,5,""],[67477,0,"S1, S2, S3"],[67821,6,""],[67821,0,"C1, C2"],[68086,7,""],[68086,0,"A, "],[68088,1,""],[68087,1,""],[68087,0,"1, A2"],[68109,0,"ed"],[68112,2,""],[68112,0,"the"],[68130,3,""],[68130,0,"of"],[68133,1,""],[68133,0,"some"],[68142,0,"s"],[68146,2,""],[68145,1,""],[68144,1,""],[68144,0,"in lon"],[68149,1,""],[68148,1,""],[68147,1,""],[68146,1,""],[68160,1,""],[68160,0,"ies"],[68163,1,""],[68163,0,"."],[68163,1,""],[68163,0,","],[68294,0,"d"],[68498,120,""],[68498,0," The"],[68501,1,""],[68500,1,""],[68499,1,""],[68498,1,""],[68498,0," Traces contain a"],[68499,16,""],[68499,0,"The "],[68502,1,""],[68501,1,""],[68500,1,""],[68499,1,""],[68498,1,""],[68499,238,""],[68500,129,""],[68499,0,"\nAll traces have been nor"],[68521,3,""],[68500,21,""],[68500,0,"The traces varies"],[68516,1,""],[68516,0,"d a great deal in their "],[68500,40,""],[68500,0,"We have norma"],[68512,1,""],[68512,0,"alized all traces"],[68500,20,""],[68500,0,"A"],[68510,0," have been norma"],[68525,1,""],[68524,1,""],[68524,0,"malized ("],[68532,1,""],[68531,1,""],[68500,31,""],[68500,0,"As reciord"],[68509,1,""],[68508,1,""],[68507,1,""],[68506,1,""],[68506,0,"orded, the traces were quite "],[68500,35,""],[68500,0,"When we re"],[68500,10,""],[68500,0,"The or"],[68505,1,""],[68504,1,""],[68504,0,"traces originall "],[68520,1,""],[68520,0,"y a"],[68522,1,""],[68522,0,"varied a great deal in the o"],[68549,1,""],[68548,1,""],[68548,0,"ir length"],[68503,0," length of the "],[68517,1,""],[68517,0," "],[68517,1,""],[68513,4,""],[68510,3,""],[68503,7,""],[68557,0,". To "],[68561,1,""],[68560,1,""],[68559,1,""],[68559,0,"This made side-to-side comparisons "],[68559,35,""],[68559,0,"Ti "],[68561,1,""],[68560,1,""],[68560,0,"o make "],[68559,8,""],[68559,0,"We have modified "],[68567,9,""],[68567,0,"normalized "],[68577,1,""],[68576,1,""],[68575,1,""],[68574,1,""],[68574,0,"sed all t"],[68582,1,""],[68581,1,""],[68566,0," adjusted for this by"],[68550,0," operation"],[68607,1,""],[68606,1,""],[68606,0,"ing"],[68613,0," our traces"],[68597,27,""],[68569,28,""],[68568,1,""],[68567,1,""],[68567,0,"  "],[68568,1,""],[68567,1,""],[68545,22,""],[68545,0,"the number of contained events. W"],[68577,1,""],[68577,0,"To make our comparisons easier, "],[68577,32,""],[68577,0,"We have adj"],[68587,1,""],[68586,1,""],[68586,0,"djusted for this by dupl"],[68606,4,""],[68606,0,"internally duplicating some event "],[68605,28,""],[68605,0," "],[68559,10,""],[68565,0," they each contained"],[68500,0,"W"],[68500,1,""],[68500,0,"As originally recorded"],[68500,22,""],[68500,0,"When rec"],[68500,8,""],[68500,0,"The original "],[68513,4,""],[68504,9,""],[68504,0,"raw "],[68514,11,""],[68520,1,""],[68519,1,""],[68519,0,"y"],[68519,1,""],[68518,1,""],[68518,0,"y"],[68549,0," contained"],[68566,20,""],[68597,7,""],[68597,0,"internally duplicating the set of "],[68500,131,""],[68500,0,"The raw traces vary a great deal in the number of contained events. We have adjusted for this by internally duplicating the set of"],[68503,4,""],[68503,0," editing"],[68500,0,"As recorded, "],[68513,1,""],[68513,0,"t"],[68535,1,""],[68535,0,"ied"],[68537,1,""],[68536,1,""],[68535,1,""],[68535,0,"y"],[68566,10,""],[68573,0," they each contain"],[68553,38,""],[68553,0,"size"],[68558,63,""],[68558,0," We have standardize"],[68577,1,""],[68576,1,""],[68576,0,"sed the size "],[68588,1,""],[68588,0,"s of each trace by diplica"],[68607,7,""],[68607,0,"duplicatin"],[68616,1,""],[68615,1,""],[68615,0,"ing "],[68535,1,""],[68535,0,"ied"],[68621,0,"events mu"],[68621,9,""],[68621,0,"the "],[68621,4,""],[68621,0,"some event graphs multiple times. For example, a dataset "],[68670,8,""],[68670,0,"trace containing events A, B, C"],[68695,0,"$"],[68694,0,"$"],[68700,0,"$"],[68699,0,"$"],[68705,0,"$"],[68704,0,"$"],[68702,1,""],[68702,0," and"],[68710,0," woul dbe "],[68719,1,""],[68718,1,""],[68717,1,""],[68716,1,""],[68716,0,"d "],[68717,1,""],[68716,1,""],[68715,1,""],[68500,14,""],[68500,0,"T"],[68500,1,""],[68500,0,"As recorded, t"],[68715,0,"d be duplicated in sequence"],[68720,22,""],[68720,0,"repeated by "],[68729,3,""],[68729,0,"to become  $A$, $B$ and $C$"],[68749,4,""],[68748,1,""],[68748,0,", "],[68739,1,""],[68752,0,", $A$, $B$, $C$, $A$, $B$, $C$, "],[68783,1,""],[68782,1,""],[68782,0,", and so on. Causally, each "],[68500,310,""],[68500,0,"As recorded, the editing traces varied a great deal in size. We have standardised the sizes of each trace by duplicating some event graphs multiple times. For example, a trace containing events $A$, $B$ and $C$ would be repeated to become $A$, $B$, $C$, $A$, $B$, $C$, $A$, $B$, $C$, and so on. Causally, each"],[65585,0," This library has not been optimised as well as the other code."],[65624,5,""],[65624,0," thoroughly"],[68569,16,""],[68569,0,"The recorded"],[68596,0," origina"],[68597,7,""],[68596,1,""],[68596,0," originally"],[68871,14,""],[68871,0,"Each "],[68817,0,"_1"],[68824,0,"_1"],[68831,0,"_1"],[68838,0,"_2"],[68845,0,"_2"],[68852,0,"_2"],[68859,0,"_3"],[68866,0,"_3"],[68873,0,"_3"],[68835,0," ...,"],[68861,0," ...,"],[68771,0,"{"],[68773,4,""],[68773,0,", "],[68776,7,""],[68776,0,", "],[68779,0,", ...}"],[68816,0,"{"],[68879,4,""],[68872,4,""],[68853,4,""],[68846,4,""],[68827,4,""],[68820,4,""],[68859,0,","],[68856,0,","],[68841,0,","],[68838,0,","],[68823,0,","],[68820,0,","],[68865,0," "],[68861,0," "],[68845,0," "],[68841,0," "],[68825,0," "],[68821,0," "],[68830,1,""],[68837,1,""],[68850,1,""],[68857,1,""],[68870,0,"}"],[68870,0,", ..."],[68877,11,""],[68884,0,"repeated copy of the graph com"],[68913,1,""],[68912,1,""],[68911,1,""],[68911,0,"happens after all earlier repition"],[68937,8,""],[68937,0,"repeit"],[68942,1,""],[68941,1,""],[68941,0,"titions. I"],[68950,1,""],[68918,0," causally"],[68911,0,"is wr"],[68915,1,""],[68914,1,""],[68913,1,""],[68913,0," "],[68913,1,""],[68912,1,""],[68911,1,""],[68958,1,""],[68957,1,""],[68957,0,", so for example #"],[68974,1,""],[68974,0,"$$"],[68975,0,"A_2"],[68975,0,"\\rightarr "],[68976,8,""],[68976,0,"arrow.right"],[68975,1,""],[68981,5,""],[68980,1,""],[68975,5,""],[68975,0,"->"],[68975,0,"{} "],[68976,0,"A_1, B_1, C_1, ..."],[68999,3,""],[68999,0,"{}"],[69000,0,"A_2, B_2, C_2, ..."],[69020,0,"."],[69005,10,""],[69009,0," -> {}"],[69014,0,"A_3, ..."],[68645,0,"roughly "],[68679,4,""],[68679,0,"all"],[68683,5,""],[68683,0,"editing traces"],[68717,0," o"],[68718,1,""],[68717,1,""],[68717,0," "],[68717,1,""],[69041,0," All traces were normalized"],[69067,1,""],[69066,1,""],[69065,1,""],[69065,0,"sed to contain approim"],[69086,1,""],[69085,1,""],[69085,0,"ximately 500k inserted characters - resulting in documents up to about 100 pages in length depending on font size"],[69189,0,"the number of deleted characters and the printed "],[69247,0,",."],[69248,1,""],[69247,1,""],[69247,0,"."],[69118,2,""],[69118,0,". This"],[69133,1,""],[69132,1,""],[69131,1,""],[69131,0,"s"],[69177,0,","],[69252,0,"\n"],[68717,0," of our recorded"],[68739,0,"s"],[68740,7,""],[68739,1,""],[68739,0," graphs"],[69269,0,"\n\n\n"],[69269,0,"\n=== Merge s"],[69280,1,""],[69280,0,"Speed"],[69272,1,""],[69284,0,"\n\n"],[69273,11,""],[69273,0,"Performance when merging\n\n"],[72006,217,""],[69300,0,"\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    The speed of eg-walker event graph replay, compared to merging the equivalent set of CRDT operations.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>"],[69299,0,"The performance when mergign "],[69327,1,""],[69326,1,""],[69325,1,""],[69325,0,"ng"],[69299,28,""],[69299,0,"In @char"],[69303,4,""],[69303,0,"chart-remote we show "],[69299,25,""],[69299,0,"In @chart-remote we show the performance when merging "],[69328,11,""],[69328,0,"time taken"],[69299,53,""],[69299,0,"In @chart-remote we show the time taken when merging"],[69298,0,"\n"],[69298,0,"\n"],[69298,1,""],[69297,1,""],[69614,1716,""],[69613,1,""],[64993,0,"#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have omitted it from our results.]"],[64993,0," "],[64994,175,""],[64988,0,"#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have omitted it from our results.]"],[65169,25,""],[65168,1,""],[64985,0,"Automerge @automerge and "],[65277,0," "],[65277,1,""],[65279,63,""],[65279,0,"In an effort to rule out impemen"],[65310,1,""],[65309,1,""],[65308,1,""],[65307,1,""],[65306,1,""],[65305,1,""],[65304,1,""],[65295,9,""],[65295,0,"remove the effect of implementation differences in our results"],[69541,0," "],[69529,13,""],[69529,0,"to merge all changes"],[69488,0,"\n"],[69488,0,"\n"],[69474,13,""],[69463,0,"M"],[69463,1,""],[69463,0,"CPU "],[69480,0,"There are generally "],[69490,0,"2 "],[69492,10,""],[69492,0,"impoo"],[69496,1,""],[69496,0,"rtant scenarios when "],[69492,0,"separate cases "],[69507,25,""],[69507,0,"to consider when benchmarking changes"],[69537,0,"a concurrent editing systems' capacity to handle "],[69586,7,""],[69586,0,"events:\n\n1. Teh "],[69601,1,""],[69600,1,""],[69599,1,""],[69598,1,""],[69598,0,"Perform"],[69598,7,""],[69598,0,"Local editing events. When a local user types "],[69638,6,""],[69638,0,"makes l"],[69644,1,""],[69644,0,"lo"],[69645,1,""],[69644,1,""],[69638,6,""],[69638,0,"edits "],[69595,49,""],[69595,0,"1. Local editing events. When a local user edits a local document, the "],[69646,6,""],[69656,4,""],[69656,0,"each e"],[69661,1,""],[69661,0,"keystroke is first "],[69674,6,""],[69674,0,"converted"],[69674,9,""],[69656,18,""],[69656,0,"an "],[69658,1,""],[69657,1,""],[69657,0," corresponding "],[69656,16,""],[69656,0,"each keystroke is converted ot"],[69685,1,""],[69684,1,""],[69684,0,"to the corrse"],[69696,1,""],[69695,1,""],[69695,0,"esponsin"],[69702,1,""],[69701,1,""],[69700,1,""],[69700,0,"ding editing event."],[69595,2,""],[69595,0,"/"],[69617,1,""],[69617,0,":"],[69718,0,"\n/ Remote editing events: When"],[69747,1,""],[69746,1,""],[69745,1,""],[69744,1,""],[69743,1,""],[69718,0," For CRDTs, this involved"],[69742,1,""],[69742,0,"s"],[69719,4,""],[69724,1,""],[69724,0," need to"],[69732,14,""],[69732,0," convert the "],[69733,12,""],[69725,0,"additionally "],[69746,0,"convert the positional "],[69758,11,""],[69758,0,"editing position of the event (eg position"],[69792,0,"cursor "],[69807,0," 1000) into the corerspo"],[69830,1,""],[69829,1,""],[69828,1,""],[69827,1,""],[69826,1,""],[69819,7,""],[69819,0,"a *"],[69821,1,""],[69821,0,"_CRDT message_ (eg "],[69839,1,""],[69838,1,""],[69837,1,""],[69836,1,""],[69835,1,""],[69835,0,"."],[69861,0," When "],[69862,5,""],[69862,0,"When a local "],[69869,6,""],[69868,1,""],[69867,1,""],[69867,0,"editing events are sent over the netwee"],[69905,1,""],[69904,1,""],[69904,0,"ork between replicas"],[69886,4,""],[69886,0,"received"],[69911,8,""],[69911,0," from another"],[69932,1,""],[69932,0,", they need to be merged into the local event "],[69972,6,""],[69972,0,"s"],[69972,1,""],[69972,0,"state and used to update the local document."],[69965,51,""],[69965,0," document"],[69966,0,"local "],[69980,0," state.\n\n"],[69480,0,"Generally, "],[69491,1,""],[69491,0,"t"],[70000,0,"?Ho"],[70002,1,""],[70001,1,""],[70000,1,""],[70000,0,"However, local editing events only need to be processed at the speed"],[69831,0," c o"],[69834,1,""],[69833,1,""],[69833,0,"orrespodn"],[69841,1,""],[69840,1,""],[69840,0,"nding"],[69859,1,""],[69845,2,""],[69845,0," "],[69858,1,""],[69858,0," ("],[69859,1,""],[69858,1,""],[69858,0,", "],[69803,7,""],[69816,0,"_"],[69803,0,"_"],[69846,9,""],[69846,0,"position (between "],[69856,8,""],[69855,1,""],[69854,1,""],[69854,0,", with reference to the IDs of the adj"],[69885,7,""],[69885,0,"any adjacent items."],[69884,4,""],[70121,0," of the "],[70125,4,""],[70125,0,"a "],[70125,2,""],[70125,0,"local"],[70125,5,""],[70124,1,""],[70123,1,""],[70122,1,""],[70122,0,"that a user types. All systems we "],[70053,10,""],[70053,0,"But l"],[70140,0,"the "],[70155,0,"benchmark here pr"],[70171,1,""],[70170,1,""],[70170,0,"can process millions of events per second"],[70053,3,""],[70053,0,"However,"],[70109,19,""],[70109,0,"fast enough to keep up with ther"],[70140,1,""],[70145,0,"'s"],[70152,1,""],[70151,1,""],[70151,0,"ing speed"],[70237,0," - far in excess o"],[70254,1,""],[70253,1,""],[70253,0,".\n\nThe interesting"],[70260,0,"much more "],[70281,0," benchmak "],[70290,1,""],[70289,1,""],[70289,0,"rk is the time taken to process remote editing events."],[70343,2,""],[70343,0," "],[70344,3,""],[70358,3,""],[70362,0,"s"],[70399,0," as if they came from a remote peer."],[70654,0,"\nInters"],[70655,6,""],[70655,0,"There are a few interestin"],[70655,26,""],[70655,0,"This chart is interesting for several reasons:\n\n"],[70702,0,"// And I'm not sure how much of"],[70726,7,""],[70726,0,"many of these reasons to include here!"],[70701,0,"\n"],[70767,0,"- Autoemrg"],[70776,1,""],[70775,1,""],[70774,1,""],[70773,1,""],[70773,0,"merge hit some pathologica"],[70788,11,""],[70788,0,"pathological case "],[70769,0,"C1 and C2 "],[70779,10,""],[70806,0,"in the automerge lirbar"],[70828,1,""],[70827,1,""],[70826,1,""],[70825,1,""],[70825,0,"brary. This has been reported "],[70830,0,", taking minutes of time and tens of gigabytes of memory r"],[70887,1,""],[70887,0,"to run"],[70832,0,"unexpectedly "],[70931,0,"upstream, and will hopefully be fixed by the "],[70830,146,""],[70830,0,". We have reported this to the upstr"],[70861,5,""],[70861,0,"a"],[70861,1,""],[70861,0,"package man"],[70871,1,""],[70871,0,"intainers."],[70766,0,"\n- OT"],[70770,1,""],[70769,1,""],[70769,0,"The difference between Eg-walker and t"],[70806,1,""],[70772,0,"re is more"],[70801,0," different CRDT implementations than there s"],[70844,1,""],[70844,0,"is between"],[70869,0,"our reference CRDT implmeentation."],[70894,1,""],[70895,0,"n"],[70895,1,""],[70888,13,""],[70888,0,"implementation"],[70903,0," When it comes to pure performance, we believe "],[70939,11,""],[70939,0,"implementation quality matters more than algorithm."],[70766,0,"\n"],[70766,0,"\n"],[70768,0,"- Eg-walker and the OT"],[70784,6,""],[70784,0,"our"],[70786,1,""],[70785,1,""],[70784,1,""],[70784,0,"the OT implementation, as expected, were practically "],[70824,13,""],[70824,0," ese"],[70827,1,""],[70827,0,"sentialy"],[70820,15,""],[70820,0,"had no i"],[70827,1,""],[70827,0,"overhead in the sequential "],[70836,0,"at all "],[70845,0," processing"],[70860,0," purely"],[70879,0," "],[70879,1,""],[70879,0,"editing events"],[70879,14,""],[70879,0,"event traces."],[70820,4,""],[70820,0,"added "],[70598,0," Each test"],[70604,4,""],[70604,0,"algorithm received the set of \"remote events\" and outpu"],[70654,5,""],[70654,0,"converted "],[70654,10,""],[70654,0,"generated the document, as a string."],[70676,14,""],[70676,0,"."],[70667,0," currentl"],[70675,1,""],[70675,0,", m"],[70677,1,""],[70676,1,""],[70675,1,""],[70674,1,""],[70491,1,""],[70673,0,"t"],[70491,0,"["],[70668,7,""],[70491,1,""],[70666,1,""],[70490,1,""],[70665,0," current"],[70490,0," ["],[70675,0,", m"],[70654,34,""],[70649,0," (which difer"],[70661,1,""],[70660,1,""],[70660,0,"fered depending on the algorithm)"],[70698,0,"produced the resulting, merged document state."],[70738,5,""],[70737,1,""],[70497,101,""],[70497,0,"The time taken to merge all changes into a an "],[70512,0,"by each algorithm "],[70551,4,""],[70551,0,"in a document, i"],[70566,1,""],[70565,1,""],[70564,1,""],[70550,20,""],[70550,0," in"],[70552,1,""],[70551,1,""],[70550,1,""],[70550,0,"."],[70550,0," in each editing trace"],[70550,22,""],[70543,7,""],[70543,0,"editing events"],[70583,0,"a copm"],[70588,1,""],[70587,1,""],[70586,1,""],[70585,1,""],[70584,1,""],[70583,1,""],[70583,0,"the complete"],[70595,3,""],[70667,8,""],[70667,0,"output"],[70583,0,"as input "],[71148,16,""],[71148,0,"When measuring"],[71203,0," seems to"],[71219,1,""],[71355,0,"\n- OT "],[71358,0,"Our "],[71365,0,"library "],[71358,0,"As expected, "],[71371,3,""],[71371,0,"our "],[71374,1,""],[71378,8,""],[71378,0,"implementation perf"],[71371,26,""],[71371,0,"operations"],[71380,1,""],[71380,0,"al transform per"],[71395,1,""],[71394,1,""],[71393,1,""],[71371,0,"our "],[71397,0,"implementation perfosm"],[71418,1,""],[71417,1,""],[71417,0,"ms "],[71419,1,""],[71418,1,""],[71417,1,""],[71417,0,"rms very well when there is no o"],[71448,1,""],[71448,0,"concurrent"],[71457,1,""],[71457,0,"cy. But then it scales poorly when "],[71487,5,""],[71465,22,""],[71465,0,"it scales very poorly when concurrency is high. A2"],[71513,0,"The "],[71519,0,"_"],[71517,0,"_"],[71521,0," test"],[71522,4,""],[71522,0,"trace took over 1 hour to "],[71545,3,""],[71544,1,""],[71544,0,"."],[71513,0,"Merging "],[71521,1,""],[71521,0,"t"],[71541,12,""],[71541,0,"about 1 hour."],[71553,1,""],[71553,0," "],[71553,1,""],[71553,0,"."],[71541,6,""],[71541,0,"approximately "],[71561,1,""],[71561,0," ="],[71562,1,""],[71562,0,"- which is 160 000x slower than Eg-walker."],[69479,0,"\n"],[69479,0,"\n"],[69479,0,"\n\nThe most interesting"],[69485,16,""],[69485,0,"slowest operation a ="],[69505,1,""],[69504,1,""],[69504,0," collaborative editing system needs to perform is merging a large set of remote edits from another"],[69554,0,"when "],[69559,8,""],[69587,0,"is recieved "],[69611,0," peer, and must be merged into the active document."],[69593,1,""],[69594,0,"i"],[69622,0,"all changes "],[70541,91,""],[70453,88,""],[70453,0,"The much more interesting benchmark is the time taken to process remote editing events."],[69674,0," @chart-remote shows the time taken to merge all changes as if they came from a remote peer."],[69710,0,"be"],[69711,1,""],[69711,0,"y each tested algorithm "],[69755,36,""],[69755,0,"."],[69479,1,""],[69756,0,"\nIntuit"],[69757,6,""],[69757,0,"We also measured the time taken to emit these changes locally"],[69755,0," For the CRDT algorihtms, the "],[69769,16,""],[69769,0,"algorithms, the ch"],[69786,1,""],[69785,1,""],[69584,1,""],[69584,0,"int "],[69587,1,""],[69586,1,""],[69586,0,"g events"],[69624,1,""],[69624,0,"."],[69626,5,""],[69626,0,"A"],[69638,5,""],[69638,0,"need to "],[69793,0,"events have been preprocessed into the approap"],[69838,1,""],[69837,1,""],[69837,0,"priate CRDT message format.\n\n"],[69866,2,""],[69866,0,"CRDTs take "],[69866,11,""],[69901,0,"convert local edi"],[69909,9,""],[69901,34,""],[69901,0,"convert local editing events into "],[69868,0," have"],[69940,0,"remote events - however, "],[69953,12,""],[69953,0,". However, all meae"],[69971,1,""],[69971,0,"sured systems "],[69934,0," (keystrokes)"],[69953,0,"the associated "],[69980,1,""],[69980,0," format"],[69953,34,""],[69953,0,"the CRDT's local format"],[69991,17,""],[69991,0,"the se"],[69996,1,""],[69995,1,""],[69995,0,"systems we measured could process millions of events per second - and "],[70064,1,""],[70064,0," this is "],[70065,8,""],[70065,0,"as this is far in excess of human typing speed, we have"],[70116,4,""],[70116,0,"are not including the "],[70113,25,""],[70113,0,"that chart is not included here."],[70147,864,""],[70146,1,""],[69550,22,""],[69550,0,"is "],[69552,1,""],[69551,1,""],[69550,1,""],[69533,17,""],[69533,0,"performs is merging a large set of"],[69589,12,""],[69612,0," recieved"],[69613,8,""],[69613,0,"received"],[69641,0,"somehow "],[69641,8,""],[69641,0,"transformed and "],[69770,0," in all"],[69776,1,""],[69775,1,""],[69774,1,""],[69774,0,"our dataset"],[69887,0," The time taken to do this is not included in the measurement."],[70676,0,"\n"],[70613,1,""],[70677,1,""],[70676,1,""],[71398,0,"\nAs menmt"],[71406,1,""],[71405,1,""],[71404,1,""],[71403,1,""],[71402,1,""],[71402,0,"discussed earlier, this chart is \n"],[71399,36,""],[71399,0,"As discussed earlier, this chart is"],[71421,13,""],[71421,0,"all CRDT"],[71425,0,"the "],[71433,0," algorithms we measuerd "],[71456,1,""],[71455,1,""],[71454,1,""],[71453,1,""],[71452,1,""],[71452,0,"ured alos n"],[71462,1,""],[71461,1,""],[71460,1,""],[71459,1,""],[71459,0,"so perform this ne"],[71476,1,""],[71475,1,""],[71475,0,"work"],[71462,0,"ne"],[71463,1,""],[71462,1,""],[71479,0," any time a document is loaded from disk. Eg-walker and OT"],[71521,0,"The "],[71541,0," approaches have no additional overhead when loading a document beyond reading th "],[71622,1,""],[71622,0,"e text content int"],[71639,1,""],[71638,1,""],[71638,0,"tself."],[71421,0,"Eg-walker a "],[71431,2,""],[71431,0,"dn "],[71433,1,""],[71432,1,""],[71431,1,""],[71431,0,"and CRDT approaches havea  s"],[71458,1,""],[71457,1,""],[71456,1,""],[71455,1,""],[71455,0," a similar performance profile when merging remote"],[71499,6,""],[71499,0,"larse"],[71503,1,""],[71502,1,""],[71502,0,"ge sets of remote changes over the "],[71528,9,""],[71527,1,""],[71527,0,". However, "],[71538,4,""],[71546,11,""],[71546,0," implementations"],[71575,0,"must "],[71727,0," into a text editor"],[71420,0," this chart is somewhat misleading."],[71279,25,""],[71279,0," when "],[71284,1,""],[71283,1,""],[71282,1,""],[71281,1,""],[71280,1,""],[71280,0,"as editing traces become more complex"],[70802,1,""],[70802,0," (S1, S2, S3)."],[71849,1856,""],[88181,5099,""],[87120,1061,""],[83894,0,"\n"],[83894,1,""],[83894,0,"\n/*"],[86122,0,"\n*/"],[71849,0,"\n\n"],[71849,0,"\n== RAM usage\n\n\n#charts.memusage_all"],[71863,0,"\n#figure(\n  text(8pt, charts.speed_remote),\n  caption: [\n    The time taken by each algorithm to merge all editing events. Each algorithm received as input the complete set of \"remote events\" (which differed depending on the algorithm) and output the resulting, merged document.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>"],[72199,19,""],[72198,1,""],[72197,1,""],[71885,19,""],[71885,0,"charts.memusage_all"],[72183,12,""],[72183,0,"memusage"],[72183,0,"chart-"],[71880,1,""],[71880,0,"7"],[71924,217,""],[71924,0,"Memory usage while processing each editing trace. "],[71924,7,""],[71924,0,"RAM "],[71928,5,""],[71928,0,"used"],[71939,31,""],[71939,0,"replaying each editing trace. "],[71968,1,""],[71968,0," F"],[71949,4,""],[71949,0,"all"],[71968,1,""],[71967,1,""],[71966,1,""],[71966,0,"s. OT "],[71971,1,""],[71970,1,""],[71969,1,""],[71969,0,"Eg-walker and OT ba"],[71987,1,""],[71986,1,""],[71985,1,""],[71969,0,"The "],[71989,0," algorithms only need RAM "],[72011,0,"not"],[72013,1,""],[72011,2,""],[72011,0,"additional "],[72026,0,"while merging changes. When "],[72049,5,""],[72048,1,""],[72040,0,"concurrent "],[72059,0," N"],[72060,1,""],[72060,0,"When changes are mergd"],[72081,1,""],[72081,0,"ed, only the roe"],[72096,1,""],[72096,0,"pe data structure containing the cure"],[72132,1,""],[72132,0,"rent document text is retained. CR"],[72165,1,""],[72164,1,""],[72163,1,""],[72059,5,""],[72059,0," Once all"],[72089,44,""],[71863,0,"\n"],[71863,0,"\nDuring editing "],[71864,15,""],[71864,0,"We have also"],[71872,4,""],[71872,0,"measured the RAM used while processing editing events. "],[71900,10,""],[71900,0,"merging remote"],[71931,0,"Eg-walker uses more RAM"],[71893,0," during the previous test -"],[71921,5,""],[71921,0,"when"],[71956,1,""],[71956,0,"\n\n"],[71864,0,"In @char"],[71868,4,""],[71868,0,"chart-memusage "],[71883,1,""],[71883,0,"w"],[71885,0," show the"],[71894,18,""],[71894,0," "],[71894,1,""],[71894,0," meme"],[71898,1,""],[71898,0,"ory"],[71901,9,""],[71901,0," usage"],[71907,25,""],[71923,0,"sets of"],[71923,7,""],[71923,0,"all th"],[71928,1,""],[71927,1,""],[71927,7,""],[71942,2,""],[71942,0," "],[71942,1,""],[71942,0,"\n\n"],[71942,0," Note that"],[71943,9,""],[71942,1,""],[71902,5,""],[71895,7,""],[71895,0,"RAM"],[71895,3,""],[71895,0,"memory used while merging changes."],[71929,35,""],[71921,8,""],[71921,0,"remote editing even"],[71906,34,""],[71902,4,""],[71902,0,"footprint f"],[71912,1,""],[71912,0,"of each algorihtm"],[71928,1,""],[71927,1,""],[71926,1,""],[71926,0,"thm. Note "],[71935,1,""],[71934,1,""],[71933,1,""],[71932,1,""],[71931,1,""],[71930,1,""],[71930,0," Notes:\n\n- "],[71941,2,""],[71964,0," for C1, C2 than other algorithms because it needs to "],[71939,79,""],[71938,1,""],[71937,1,""],[71936,1,""],[71931,5,""],[71930,1,""],[71930,0," Once again"],[71931,10,""],[71931,0,"Once the "],[71931,9,""],[71931,0,"The memory used by Eg-wakler an"],[71953,9,""],[71953,0,"walker and OT is split into a "],[71976,7,""],[71975,1,""],[71975,0," into peak usage (during merging) and steady "],[72013,0,"the "],[72024,0,"state memory usage, after the contents "],[72050,13,""],[72050,0,"all incoming changes have been merged."],[72315,0,"only the "],[72088,0,"\n\nThe OT algori"],[72097,6,""],[72097,0,"implementation used here mo"],[72123,1,""],[72123,0,"emo"],[72122,4,""],[72122,0,"uses memoization to impr"],[72122,5,""],[72132,1,""],[72131,1,""],[72130,1,""],[72129,1,""],[72128,1,""],[72128,0,"es"],[72131,7,""],[72131,0,"intermediate transformed operations to improve performance."],[72189,1,""],[72189,0,", but the memo"],[72199,4,""],[72199,0,"memoize"],[72205,1,""],[72205,0,"ating"],[72209,1,""],[72209,0," "],[72209,1,""],[72208,1,""],[72207,1,""],[72207,0,"ion comes at the cost of extra memorty"],[72231,14,""],[72231,0," dramatically higher memeo"],[72256,1,""],[72255,1,""],[72255,0,"ory usage during"],[72265,6,""],[72264,1,""],[72264,0,". At peak this implementation used 6.8GB of RAM to merge changes."],[72321,8,""],[72321,0,"these changes. "],[72335,1,""],[72335,0,"\n\nOnce again, Automerge "],[72337,22,""],[72337,0,"Once again, Automerge"],[72337,12,""],[72346,0," uses "],[72347,5,""],[72347,0,"needs over 20"],[72359,1,""],[72359,0,"70MB of RAM "],[72337,34,""],[72337,0,"Automerge needs over 270MB of RAM"],[72087,1,""],[72087,0," and the intermediate state is discarded."],[72410,0," for the "],[72386,0," is exceptionally inefficient here -"],[72427,1,""],[72427,0,"ing"],[72449,8,""],[72449,0,"in the best case"],[72422,1,""],[72421,1,""],[72420,1,""],[72420,0,". In the "],[72422,7,""],[72422,0,"The smallest "],[72426,9,""],[72426,0,"best test for automerge still "],[72456,42,""],[72456,0,"required over 270MB of RAM. The "],[72450,0,"(S1) "],[72455,6,""],[72487,0,"worst required "],[72451,1,""],[72451,0,"A"],[72502,0,"44GB."],[72415,5,""],[72404,0,"memory "],[72422,1,""],[72422,0,". It uses more "],[72436,1,""],[72431,5,""],[72426,5,""],[72423,3,""],[72509,0," W"],[72510,1,""],[72510,0,"Ou"],[72511,1,""],[72510,1,""],[72510,0,"We needed to "],[72510,13,""],[72510,0,"Our benchmarking machine h"],[72535,1,""],[72510,25,""],[72510,0,"The computer se "],[72525,1,""],[72524,1,""],[72523,1,""],[72523,0,"we used for benchmarking wsa "],[72551,1,""],[72550,1,""],[72549,1,""],[72549,0,"as "],[72548,4,""],[72548,0,"had enough RAM to prevent swapping."],[71912,0,"(heaps "],[71918,1,""],[71917,1,""],[71917,0," size) "],[71913,0,"retained "],[71927,4,""],[71926,1,""],[71926,0," "],[71926,1,""],[71926,0," size"],[75392,1922,""],[72933,0,"\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled eg-walker's built-in LZ4 and Automerge's built-in gzip compression; enabling this compression further reduces the file sizes.\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, eg-walker has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\nIn contrast, Yjs does not store any deleted characters, which results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using eg-walker's event graph encoding and Automerge.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>"],[72932,1,""],[72932,0,"\n"],[73148,2,""],[73148,0,"Eg"],[73530,0,"\n// (seph): No, that causes problems because of the repeated event graphs. Gzip is sometimes"],[73613,0,"("],[73623,0,") co"],[73626,1,""],[73626,0,"lever enough to compact the repeated events - but tah"],[73678,1,""],[73677,1,""],[73677,0,"hats very algorithm dependant)"],[73706,1,""],[73706,0,"."],[73273,0,"\n"],[73225,5,""],[73214,1,""],[73214,0,"."],[73215,2,""],[73215,0," E"],[73215,2,""],[73215,0," e"],[73214,1,""],[73214,0,";"],[73225,0,"this "],[73225,5,""],[73214,1,""],[73214,0,"."],[73215,2,""],[73215,0," E"],[73225,0,"this "],[73709,0,"\n\n"],[73710,0,"\n#()"],[73713,0,"1,2,3)"],[73717,0,"(5, "],[73717,0,"..."],[73719,1,""],[73710,16,""],[73709,1,""],[74733,0," The raw size son"],[74749,1,""],[74748,1,""],[74748,0,"hown is the full "],[74760,5,""],[74760,0,"lenght of"],[74768,1,""],[74767,1,""],[74766,1,""],[74765,1,""],[74764,1,""],[74764,0,"th of all inserted keystrokes - which acts a "],[74808,1,""],[74808,0,"s a lower buond"],[74822,1,""],[74821,1,""],[74820,1,""],[74819,1,""],[74819,0,"ound on the filz"],[74834,1,""],[74834,0,"e size in this test."],[74760,0,"concatenated "],[74033,0,"\n\nNote that storing the raw editing trace like this removes one of the principle benefits of "],[74075,4,""],[74075,0,"in this compact form"],[74095,5,""],[74137,0,"Eg-walker - "],[74148,1,""],[74147,1,""],[74146,1,""],[74146,0,", in that the event graph must be replayed in order to determine the current document state. The "],[74239,4,""],[74238,1,""],[74146,1,""],[74146,0,":"],[74148,7,""],[74147,1,""],[74146,1,""],[74146,0,", as"],[74227,5,""],[74227,0,"text"],[74232,0," To improve load time, the current content can either b"],[74279,8,""],[74279,0,"be cached and stored alongside the event graph on diskl"],[74333,1,""],[74333,0,". Alternately, "],[74267,0,"text "],[74353,0,"the transfomr"],[74365,1,""],[74364,1,""],[74364,0,"rmed op"],[74370,1,""],[74369,1,""],[74369,0,"operation positions can be stored in the file. In our testing "],[74430,1,""],[74430,0,", this resulted in a "],[74392,0," also"],[74456,0,"tiny increase in file size."],[74482,1,""],[74482,0," and "],[74483,4,""],[74483,0,"while improving startup performance by an "],[74499,26,""],[74499,0,"load performance by an order of magnitude. // I'"],[74546,1,""],[74545,1,""],[74544,1,""],[74543,1,""],[74542,1,""],[74541,1,""],[74597,7,""],[74597,0,", which"],[74542,0,"\nIn contrast, Yjs only stores the current "],[74543,41,""],[74542,1,""],[74035,0,"// "],[74034,0,"\n// Is this worth adding?"],[74037,0," TODO:"],[74594,37,""],[74594,0,"only stores the current "],[74594,24,""],[74594,0,"stores the "],[74604,1,""],[74600,4,""],[74594,6,""],[74594,0,"only stores the current "],[74617,1,""],[74609,8,""],[74605,4,""],[74598,7,""],[74594,4,""],[74594,0,"does not store any deleted characters"],[74631,1,""],[74631,0,". This"],[74637,6,""],[75654,0," The arw"],[75661,1,""],[75660,1,""],[75659,1,""],[75659,0,"raw size shown here is the length "],[75686,7,""],[75686,0,"resulting document length"],[75705,6,""],[75704,1,""],[75685,0," size of the"],[75698,18,""],[75698,0,"final document."],[75703,0,"m, "],[75705,1,""],[75704,1,""],[75703,1,""],[75703,0,", stored"],[75721,0," This acts as a lower bound i"],[75749,1,""],[75749,0,"on the filze "],[75761,1,""],[75760,1,""],[75759,1,""],[75759,0,"e size in all cases."],[75835,0,"\n"],[75879,0,"As show"],[75882,4,""],[75881,1,""],[75880,1,""],[75879,1,""],[75879,0,"In the"],[75879,6,""],[75837,2458,""],[71849,0,"== Eg-walker performance and concurrency\n\nEg-walker is especially fast on traces that are mostly (e.g., `node_nodecc`) or entirely sequential.\nThis is because we can clear the internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare eg-walker's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the ratio of replay throughput between the optimised and the unoptimised versions for several traces.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n// TODO: Typst has a bug that is currently labelling this figure with the wrong number!\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the eg-walker state size while processing the _friendsforever_ data set, with and without internal state clearing enabled.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Performance of eg-walker with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _git-makefile_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of eg-walker is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n"],[71848,0,"\n"],[70677,0,"// "],[71895,0,"In the CPU benchmark above, we can see that "],[71926,4,""],[71998,11,""],[71998,0,"A1"],[71997,1,""],[71997,0,"_"],[72000,1,""],[72000,0,"_"],[72762,14,""],[72762,0,"C1"],[72825,0," Unlike in other tests, this "],[72849,5,""],[72849,0,"for this chart we used th "],[72874,1,""],[72873,1,""],[72872,1,""],[72871,1,""],[72870,1,""],[72870,0," the raw (not duplicated) version of the dataset."],[72762,0,"raw "],[73048,1,""],[73048,0,"E"],[73033,14,""],[73033,0,"Tim"],[73035,1,""],[73034,1,""],[73033,1,""],[73033,1,""],[73033,0,"Time taken for "],[73057,0," to process"],[73061,7,""],[73061,0,"replay all remote "],[73068,11,""],[73068,0,"an event graph,"],[71898,17,""],[71898,0,"@chart-remo"],[71899,10,""],[71899,0,"chart-remote"],[72021,0," (e.g., _S"],[72030,1,""],[72030,0,"C1"],[72031,1,""],[72030,1,""],[72030,0,"S1_)"],[72385,107,""],[72385,0,"shos"],[72388,1,""],[72388,0,"ws how dis optimi"],[72391,14,""],[72391,0,"the time taken to replay all our traces with this optimosa"],[72448,1,""],[72447,1,""],[72446,1,""],[72445,1,""],[72445,0,"misation enabled and disabled."],[73184,12,""],[73184,0,"A2"],[89137,0,"// "],[89091,0,"// "],[88419,1,""],[88419,0,"5"],[88424,1,""],[88423,1,""],[88423,0,"27"],[88424,1,""],[88424,0,"8"],[88417,0," "],[88417,1,""],[88417,0,"Mint"],[88417,4,""],[88425,1,""],[88425,0," and 64GB of RAM (enough "],[88441,0,"."],[88444,7,""],[88444,0,"M"],[88444,1,""],[88443,1,""],[88442,1,""],[88441,1,""],[88441,0," ."],[88442,1,""],[88441,1,""],[88441,0,". (Eniouygh"],[88444,8,""],[88443,1,""],[88443,0,"(Enough to prevent sa"],[88463,1,""],[88463,0,"wapping "],[88462,0,"memory "],[88478,0,"in all cases)."],[88533,1,""],[88533,0,"7"],[88535,1,""],[88535,0,"2"],[88688,1,""],[88688,0,"7"],[88776,0," except OT/"],[88786,1,""],[88786,0," running A2. This test was only run for 10 inte"],[88832,1,""],[88831,1,""],[88830,1,""],[88830,0,"terations"],[88840,1,""],[88840,0,"\n\n"],[89179,1,""],[89179,0,"9"],[88840,0," Error bars ar e"],[88855,1,""],[88854,1,""],[88854,0,"e not included above as the standard deviation on all measurements was less than 1%."],[88901,6,""],[88901,0,"for all"],[88908,13,""],[88908,0," benchmarkr "],[88919,1,""],[88918,1,""],[88918,0," results"],[89237,12,""],[89237,0,"44a65c44bf"],[61539,0,"\n/ Load speed: "],[61540,14,""],[61540,0,"/ Load speed:"],[61523,0," "],[61523,1,""],[61523,0,", s"],[61525,1,""],[61524,1,""],[61523,1,""],[61523,0," an"],[61525,1,""],[61524,1,""],[61523,1,""],[61497,26,""],[61497,0,"compare Eg-walker to various CRDT implementation a"],[61546,1,""],[61545,1,""],[61545,0,"s and an OT implementation"],[61575,1,""],[61575,0,"4"],[61601,0," "],[61602,66,""],[61588,0,"/ Merge speed: The time taken to merge events from a remote peer.\n"],[61668,0,"The n"],[61672,1,""],[61672,0,"time taken to load a document from disk and prepare for an editing ss"],[61740,1,""],[61740,0,"esssion"],[61746,1,""],[61745,1,""],[61744,1,""],[61743,1,""],[61743,0,"ion."],[62273,0,"\nGenerally we have found Eg-walker to be fast, small and efficient. In the worst case, Eg-walker's performance is competitive with that of well optimised CRDT libraries. However, Eg-walker is significantly faster than CRDTs for many common operations - like loading a document from disk, merging short lived branches or merging long sequences of linear events."],[61980,0," Like OT systems, "],[61998,20,""],[62008,1,""],[62007,1,""],[62007,0," can be configured "],[62015,11,""],[62007,8,""],[62007,0," does not need"],[61981,40,""],[61981,0,"Merging"],[61981,9,""],[61981,0,"P"],[61992,0," merging large editing traces"],[61981,11,""],[61981,0,"The time taken to"],[62005,1,""],[62004,1,""],[62003,1,""],[62003,0,"e"],[61981,14,""],[61981,0,"Eg-walker is "],[61991,3,""],[61991,0,"takes a similar amount of time "],[62022,1,""],[62036,0,", complex"],[62060,58,""],[61991,33,""],[61991,0,"can"],[62030,0," in a similar amoutn of "],[62044,10,""],[62044,0,"amount of time as a well optimized CRDT"],[62064,4,""],[62064,0,"similar"],[62071,10,""],[62064,8,""],[62088,0," does not "],[62079,0,"unlike CRDTs, "],[62086,0,"most "],[62086,5,""],[62086,0,"typical "],[62120,0,"need"],[62031,3,""],[62031,0,"prett"],[62031,5,""],[62031,0,"as far as "],[62040,1,""],[62039,1,""],[62038,1,""],[62037,1,""],[62036,1,""],[62036,0,"st as "],[62042,34,""],[62042,0,"well optimised CRDT implementations"],[62062,15,""],[62061,1,""],[62061,0,"s"],[62061,1,""],[62061,0," libraries"],[62113,0," can load data from disk much more quickly"],[62113,0," only incurs an o"],[62129,1,""],[62128,1,""],[62127,1,""],[62126,1,""],[62126,0,"CPU and memory overhead when merging changes. Loading documents from disk is instant"],[62172,0,"The er"],[62177,1,""],[62176,1,""],[62175,1,""],[62175,0,"re is no over "],[62188,1,""],[62188,0,"head when "],[62198,1,""],[62198,0,"l"],[62206,0,"a "],[62216,1,""],[62216,0," "],[62216,1,""],[62183,0," additonal"],[62184,9,""],[62184,0,"additional"],[61587,0,"\n/ Speed: Tim"],[61599,1,""],[61598,1,""],[61597,1,""],[61597,0,"The time taken to merge changes"],[61620,0," a set of "],[61629,1,""],[61637,0," from a remote peer, then later re-open "],[61656,21,""],[61656,0,"."],[61615,0,"load a larg"],[61625,1,""],[61624,1,""],[61623,1,""],[61622,1,""],[61622,0,"document and "],[61678,160,""],[61720,5,""],[61720,0,"load "],[61972,0,"a "],[62408,0,"\n"],[61969,34,""],[61930,39,""],[61930,0," e"],[61931,1,""],[61931,0,"complex ex"],[61940,1,""],[61940,0,"diting traces at the same speed as its embedded CRDT"],[61957,0,"about "],[61966,0," "],[61966,1,""],[61998,0," - thuoigh i"],[62001,9,""],[61998,3,""],[61998,0," implememt"],[62007,1,""],[62006,1,""],[62006,0,"ntation"],[62125,11,""],[62125,0," extra"],[62140,0," involved"],[62183,239,""],[62183,0," or making edits - "],[62201,1,""],[62200,1,""],[62199,1,""],[62199,0,"."],[62141,8,""],[62141,0,"incurred"],[62194,0,"local "],[62208,360,""],[62207,1,""],[62013,0,"  "],[62014,1,""],[62014,0,"- though E"],[62023,1,""],[62022,1,""],[62021,1,""],[62020,1,""],[62019,1,""],[62018,1,""],[62017,1,""],[62016,1,""],[62015,1,""],[62014,1,""],[62013,1,""],[61954,12,""],[61954,0,"a similar"],[61963,5,""],[61954,1,""],[61954,0,"at a"],[61967,5,""],[61967,0,"rate"],[61967,40,""],[61967,0,"speed a"],[61973,1,""],[61973,0,"t"],[61973,1,""],[61973,0,"to a"],[61976,1,""],[61976,0,"an equivalent CRDT implementa"],[62004,1,""],[62003,1,""],[62002,1,""],[62002,0,"ntation"],[62110,40,""],[62110,0,"Documents"],[62110,0,"Eg-walker allows "],[62127,1,""],[62127,0,"d"],[62136,0," to be"],[62149,1,""],[62148,1,""],[62147,1,""],[62147,0,"ed"],[62149,11,""],[62159,0," without"],[62160,7,""],[62160,0,"more or "],[62160,8,""],[62160,0,"instantly"],[62169,23,""],[62160,9,""],[62160,0,"with no extra overhead. And ther is "],[62195,1,""],[62194,1,""],[62193,1,""],[62192,1,""],[62192,0,"e is no extra memory usage"],[62213,5,""],[62213,0,"used while a document is being edited."],[62443,0," In order to"],[62456,1,""],[62456,0,"t"],[62466,1,""],[62465,1,""],[62464,1,""],[62464,0,"e editing"],[62485,0," t"],[62486,1,""],[62485,1,""],[62499,51,""],[62501,3,""],[62501,0,"a "],[62502,1,""],[62513,0," object needs to be"],[62532,22,""],[62533,5,""],[62533,0,"queries"],[62539,1,""],[62539,0,"d and modified."],[62431,5,""],[62431,0,"remote"],[62503,0," "],[62503,1,""],[62503,0," local replica needs to query the current"],[62562,33,""],[62562,0,". Typically this "],[62564,15,""],[62564,0,"In the systems we looked at t"],[62592,1,""],[62591,1,""],[62591,0,", the CRDT state object is loaded from disk into an"],[62642,1,""],[62618,24,""],[62618,0,"unpacked"],[62618,8,""],[62618,0,"constructed"],[62629,28,""],[62618,11,""],[62618,0,"unpacked into an optmi"],[62639,1,""],[62638,1,""],[62637,1,""],[62636,1,""],[62635,1,""],[62634,1,""],[62633,1,""],[62633,0," query-optimie"],[62646,1,""],[62646,0,"sed data structure in"],[62593,0,"when a document is first"],[62593,24,""],[62593,0,"each time a document e"],[62614,1,""],[62614,0,"is opened from "],[62624,5,""],[62623,1,""],[62623,0,", "],[62704,1,""],[62704,0,"\n\n\n"],[62650,0,"first "],[62709,1,""],[62709,0," before e"],[62717,1,""],[62717,0,"any edits can take place. This is "],[62743,8,""],[62743,0,"Loading "],[62639,7,""],[62639,0," must be f"],[62649,5,""],[62741,8,""],[62740,1,""],[62740,0," This introduces noticable latency "],[62762,0,"e"],[62776,0,"to startup time, add"],[62795,1,""],[62794,1,""],[62793,1,""],[62745,0," "],[62745,1,""],[62776,3,""],[62776,0,"at "],[62793,0,"and "],[62645,3,""],[62650,0," be"],[62640,13,""],[62640,0,"is"],[62640,2,""],[62640,0,"must first be"],[62645,6,""],[62253,538,""],[62253,0,"The reason for this is that CRDTs require local editing events to be immediately translated into the corresponding CRDT messages before they can be saved to disk or broadcast to remote peers. In order to translate editing events into CRDT messages, a local replica needs to query the current CRDT state object. In the systems we looked at, each time a document is opened, the CRDT state must be unpacked into a query-optimised data structure in RAM before any edits can take place. This introduces noticeable latency at startup time, and"],[62264,17,""],[62269,0," have extra overhead when a document is loaded is that CRDTs"],[62365,11,""],[62364,1,""],[62253,11,""],[62305,7,""],[62305,0,"because"],[62252,0,"\n// TODO: Move this further down I reckon."],[62855,0,"// "],[61973,2,""],[61973,0,"as"],[61976,13,""],[61976,0,"a similarly constructed"],[62029,0," the way CPU and "],[62038,0,"that "],[62051,0,"memory i"],[62058,1,""],[62058,0,"are used in Eg"],[62071,1,""],[62070,1,""],[62070,0,"Eg-walker is quite different to "],[62102,7,""],[62102,0,"th"],[62103,1,""],[62102,1,""],[62102,0,"the"],[62105,8,""],[62105,0," typical"],[62102,3,""],[62101,1,""],[62101,0," the"],[62105,8,""],[62111,0," "],[62111,1,""],[62110,1,""],[62110,0," implementations we looked at. "],[62019,1,""],[62019,0,".\n\n"],[62020,0," And we have found the event graph"],[62025,14,""],[62025,0,"our storage format "],[62025,19,""],[62025,0,"our binary encoding of the "],[62051,1,""],[62050,1,""],[62049,1,""],[62048,1,""],[62063,0," is "],[62064,3,""],[62064,0,"takes up less space on disk."],[62094,11,""],[62094,0,"Thou"],[62097,1,""],[62096,1,""],[62095,1,""],[62094,1,""],[62094,0,"Even though Eg-walker performs similar "],[62116,9,""],[62116,0,"merges changes at a "],[62142,1,""],[62142,0,"r speed to a CRDT."],[62123,0,"large sets of "],[62173,1,""],[62173,0,","],[62174,12,""],[62174,0," the way"],[62179,4,""],[62179,0,"times"],[62183,1,""],[62182,1,""],[62181,1,""],[62180,1,""],[62179,1,""],[62179,0,"way and t"],[62183,5,""],[62183,0,"tjat"],[62186,1,""],[62185,1,""],[62184,1,""],[62184,0,"hat "],[62247,3,""],[62247,0,"that of the"],[62294,2,""],[62294,0,"\n"],[62094,200,""],[62094,0,"Even though Eg-walker merges large sets of changes at a similar speed to a CRDT, the way that CPU and memory are used in Eg-walker is quite different to that of the CRDT implementations we looked at."],[62294,0,"\n\n"],[62294,0,"\nAt srtat"],[62302,1,""],[62301,1,""],[62300,1,""],[62299,1,""],[62298,1,""],[62297,1,""],[62296,1,""],[62295,1,""],[62294,1,""],[62293,1,""],[62292,1,""],[62292,0,":\n\n/ At startup time: Eg-walker only loads the document com"],[62350,1,""],[62349,1,""],[62348,1,""],[62348,0,"contents into memory, just like any other text"],[62380,14,""],[62380,0,"a non-con"],[62388,1,""],[62380,8,""],[62380,0,"a normal c"],[62389,1,""],[62389,0,"non-collaborative text editin"],[62417,1,""],[62416,1,""],[62416,0,"or. The CRDTs we kill"],[62436,1,""],[62435,1,""],[62434,1,""],[62433,1,""],[62433,0,"l"],[62296,1,""],[62295,1,""],[62295,0," - "],[62297,1,""],[62296,1,""],[62295,1,""],[62295,0,"- "],[62312,1,""],[62312,0,","],[62434,0,"ook"],[62419,0," The event graph does"],[62439,1,""],[62438,1,""],[62437,1,""],[62436,1,""],[62436,0,"is not loaded from disk."],[62461,0,"In "],[62464,1,""],[62464,0,"t"],[62473,1,""],[62472,1,""],[62472,0," implementated"],[62485,1,""],[62484,1,""],[62484,0,"ions "],[62496,0,"ed at, the entire e"],[62514,1,""],[62507,7,""],[62507,0,"CRDT state object is unpacked from disk into a query-optimized"],[62568,1,""],[62567,1,""],[62566,1,""],[62566,0,"sed data "],[62503,0,"when a document is opened, "],[62529,1,""],[62528,1,""],[62528,0," "],[62601,0,"structure "],[62610,1,""],[62610,0,". This introduces noticable latency "],[62628,10,""],[62636,0,"at load time and takes up a non-trivial "],[62653,23,""],[62653,0,"increases the pr"],[62667,2,""],[62667,0,"memory footprint of the process. However, "],[62700,9,""],[62699,1,""],[62699,0,"\n- When changes are merged, Eg-walker reconstructs the CRDT state from the point of "],[62774,9,""],[62774,0,"\"fork point\""],[62774,12,""],[62774,0,"last common version "],[62793,1,""],[62793,0," "],[62793,1,""],[62793,0,"."],[62706,0," concurrent"],[62805,0," This state is used to transform the merged changes "],[62849,8,""],[62718,8,""],[62718,0,"events "],[62848,0,"events and then discarded. The CRDT implementations we looked at simil"],[62917,1,""],[62916,1,""],[62916,0,"ply merge any events into their local CRDT"],[62953,0," retained"],[62967,0," state object."],[62864,0,"it is "],[62123,14,""],[62123,0,"concurrent "],[62093,0,"\nThe "],[62094,4,""],[62094,0,"Eg-walker is about as "],[62107,9,""],[62106,1,""],[62105,1,""],[62104,1,""],[62104,0,"is about as fast as a CRDT wh"],[62132,1,""],[62131,1,""],[62104,0,"merges changes "],[62119,27,""],[62119,0,"at a similar speed to a CRDT. However,"],[62157,78,""],[62161,9,""],[62176,0," profiles"],[62184,1,""],[62184,0," of"],[62187,12,""],[62297,0,"has no additional overhead. The "],[62329,4,""],[62329,0,"text content is simply"],[62356,1,""],[62356,0,"ed"],[62358,22,""],[62358,0," from disk"],[62451,15,""],[62451,0,"re"],[62452,1,""],[62451,1,""],[62450,1,""],[62449,1,""],[62448,1,""],[62448,0,"remains on"],[62465,0,"In contrast, "],[62478,1,""],[62478,0,"t"],[62478,1,""],[62478,0,"i"],[62465,14,""],[62465,0,"I"],[62992,0,"\n"],[62992,0,"\nAs a result, Eg-walker has a "],[63021,1,""],[63020,1,""],[63019,1,""],[63018,1,""],[63017,1,""],[63016,1,""],[63016,0,"allows documents to be loaded more or"],[63046,7,""],[63046,0,"\"instantly\""],[63056,1,""],[63046,1,""],[63046,0,"from disk "],[63056,9,""],[63045,0," direclty"],[63053,1,""],[63052,1,""],[63051,1,""],[63051,0,"tly"],[63064,1,""],[63064,0,", wioth "],[63071,1,""],[63070,1,""],[63069,1,""],[63068,1,""],[63068,0,"th no overhead. Memory use"],[63093,1,""],[63093,0,"age is more \"spikey\","],[63113,1,""],[63112,1,""],[63111,1,""],[63110,1,""],[63110,0,"y\" "],[63112,1,""],[63084,28,""],[63084,0,"Because the CRDT state is only reconstructed back to the common branching point, when "],[63165,5,""],[62993,172,""],[62993,0,"As a result, Eg-walker allows documents to be loaded directly from disk, with no overhead. Because the CRDT state is only reconstructed back to the common branching point, merging concurrent"],[63173,0,"sequential or "],[63173,24,""],[63173,0,"recent changes is extreem"],[63197,1,""],[63196,1,""],[63196,0,"mely fast."],[63191,9,""],[63191,0,"consite"],[63197,1,""],[63196,1,""],[63196,0,"stently"],[63209,0," "],[62993,217,""],[62993,0,"As a result, Eg-walker allows documents to be loaded directly from disk, with no overhead. Because the CRDT state is only reconstructed back to the common branching point, merging recent changes is consistently fast."],[62297,3,""],[62297,0,"adds"],[62324,0," to the text editor"],[62353,8,""],[62353,0," docuemnt"],[62361,1,""],[62360,1,""],[62359,1,""],[62358,1,""],[62358,0,"ment can"],[62366,3,""],[62373,0," be"],[62405,50,""],[62405,0,", with"],[62411,3,""],[62411,0," t"],[62434,1,""],[62434,0,"ing"],[62447,7,""],[62447,0,"The "],[62484,0," work quite differently, "],[62508,1,""],[62507,1,""],[62507,0,". "],[62509,3,""],[62509,0,"W"],[62534,0,","],[62446,1,""],[62446,0,"\n\n"],[62447,1,""],[62447,0,"\n  "],[62448,2,""],[62447,1,""],[62446,1,""],[62446,0," "],[62560,0," first"],[62623,0,", to allowe "],[62634,1,""],[62633,1,""],[62633,0," events to be translated to the CRDT's message format"],[62634,0,"local "],[63123,9,""],[63133,0," much faster"],[63145,18,""],[63145,0," than CRDTs allow. And resident memory usage is lower. "],[63199,1,""],[63198,1,""],[63193,0,"much "],[63205,0,"When mer"],[63212,1,""],[63211,1,""],[63210,1,""],[63210,0,"changes are merged, "],[63230,8,""],[63133,0," and edited"],[63175,5,""],[63175,0,"R"],[63200,0,"also "],[63222,0,"c"],[63222,1,""],[63314,0," so"],[63362,0," The only slow operation is"],[63388,1,""],[63387,1,""],[63386,1,""],[63386,0," is "],[63367,23,""],[63367,0,"slowest operation Eg-awlk"],[63391,1,""],[63390,1,""],[63389,1,""],[63388,1,""],[63388,0,"walker encounters is merging together long lived branches."],[63446,212,""],[63446,0,"\n"],[63417,9,""],[63436,0," together"],[63409,0,"when it "],[63423,1,""],[63422,1,""],[63421,1,""],[63421,0,"es"],[63497,0,"// "],[64058,381,""],[65580,0,"// "],[65576,0,"// "],[65265,0,"// "],[65252,0,"// "],[65234,0,"// "],[65228,0,"// "],[65196,0,"// "],[65134,0,"// "],[65072,0,"// "],[65040,0,"// "],[64960,0,"// "],[64928,0,"// "],[64921,0,"// "],[64898,0,"// "],[64849,0,"// "],[64827,0,"// "],[64780,0,"// "],[64756,0,"// "],[64713,0,"// "],[64674,0,"// "],[64655,0,"// "],[64646,0,"// "],[63174,1,""],[63173,1,""],[63173,0,", and with less "],[63189,1,""],[63189,0,"r"],[63210,19,""],[63448,0," When this happens, memory usage temporarily spikes. "],[63500,1,""],[63499,1,""],[63499,0," as the CRDT strc"],[63515,1,""],[63515,0,"uctu"],[63512,7,""],[63512,0,"state object is constructed and disc"],[63540,8,""],[63539,1,""],[63539,0,"."],[63503,3,""],[63503,0,"a temporary"],[63503,0,"the "],[63503,4,""],[63503,0,"events are loaded from disk, and "],[63580,0," to transform the "],[63597,1,""],[63596,1,""],[63595,1,""],[63594,1,""],[63593,1,""],[63593,0," "],[63593,1,""],[63584,0,"perform the "],[63605,0,"ation"],[63584,12,""],[63597,1,""],[63596,1,""],[63595,1,""],[63594,1,""],[63593,1,""],[63593,0," the events"],[63535,0," transformed b"],[63548,1,""],[63548,0,"via"],[63581,39,""],[63419,0,"large, "],[64195,0,"// "],[64540,0,"// "],[63321,0,"sequential changes, or "],[63350,0," concurrent"],[63070,0,"\n"],[63070,0,"\ncharts"],[63071,0,"#"],[63078,0,".gm((1,2,3))"],[63070,20,""],[63069,1,""],[65819,3,""],[65812,3,""],[65498,3,""],[65482,3,""],[65461,3,""],[65452,3,""],[65417,3,""],[65352,3,""],[65287,3,""],[65252,3,""],[65169,3,""],[65134,3,""],[65124,3,""],[65098,3,""],[65046,3,""],[65021,3,""],[64971,3,""],[64944,3,""],[64898,3,""],[64856,3,""],[64834,3,""],[64822,3,""],[65253,12,""],[65253,0,"Merg time"],[65257,0,"e"],[65313,12,""],[65313,0,"Load time"],[65267,10,""],[65267,0,"#cha"],[65270,1,""],[65269,1,""],[65268,1,""],[65267,2,""],[65266,1,""],[65266,0,"charts.avg_times.ot]"],[65266,0,"[$"],[65267,1,""],[65267,0,"#calc.counr"],[65277,1,""],[65276,1,""],[65275,1,""],[65274,1,""],[65273,1,""],[65273,0,"round("],[65298,0," / 1000, 2)"],[65307,0,"digits: "],[65265,1,""],[65265,0,"\n      "],[65324,1,""],[65324,0,"\n      "],[65324,0,","],[65344,1,""],[65344,0,",\n      "],[65333,10,""],[65333,0,"#calc.round(charts.avg_times.ot / 1000, digits: 2)"],[65362,2,""],[65361,1,""],[65361,0,".dt"],[65381,1,""],[65381,0,"3"],[65381,1,""],[65381,0,"2"],[65381,1,""],[65381,0,"3"],[65321,1,""],[65321,0,"3"],[65326,0,"      [#calc.round(charts.avg_times.dt / 1000, digits: 3)],\n"],[65446,21,""],[65445,1,""],[65424,0,"cr"],[65422,4,""],[65422,0,"dtcrdt"],[65253,10,""],[65253,0,"Merge"],[65248,0,"    [Merge],\n      [#calc.round(charts.avg_times.ot / 1000, digits: 3)],\n      [#calc.round(charts.avg_times.dt / 1000, digits: 3)],\n      [#calc.round(charts.avg_times.dtcrdt / 1000, digits: 3)],\n"],[65450,5,""],[65450,0,"Load document"],[65473,50,""],[65473,0,"0"],[65484,50,""],[65484,0,"0"],[65455,8,""],[65455,0,"(9v"],[65457,1,""],[65456,1,""],[65456,0,"overhead)"],[65378,0," ms"],[65445,0," ms"],[65426,7,""],[65359,7,""],[65306,0," / 60"],[65323,0," minutes"],[65324,7,""],[65324,0,"mins"],[65324,4,""],[65324,0,"minutes"],[65323,8,""],[65308,3,""],[65306,2,""],[65419,0," / 1000"],[65359,0," / 1000"],[65445,3,""],[65378,3,""],[65258,0," (secs)"],[65263,1,""],[65263,0,"onds"],[65258,10,""],[65553,0,"\n      "],[65554,6,""],[65555,58,""],[65554,1,""],[65553,1,""],[65553,0,"\n      "],[65558,2,""],[65558,0,"[Memory usage],\n      [], "],[65583,1,""],[65583,0,"\n      "],[65588,2,""],[65586,2,""],[65584,2,""],[65583,1,""],[65583,0," [], [],"],[65581,0,"#charts.av"],[65589,2,""],[65589,0,"avg_mem.ot.peak"],[65571,0," (peak)"],[65589,0,"calc.round("],[65622,0,"/1e6)"],[65629,1,""],[65629,0,"\n      "],[65581,0,"      [#calc.round(charts.avg_mem.ot.peak/1e6)],\n      [#calc.round(charts.avg_mem.ot.peak/1e6)],\n"],[65728,13,""],[65727,1,""],[65664,2,""],[65664,0,"dt"],[65714,1,""],[65713,1,""],[65713,0,"dtc"],[65713,3,""],[65713,0,"dtcrdt"],[65724,0," "],[65671,0," "],[65622,0," "],[65728,0," "],[65674,0," "],[65624,0," "],[65734,0,","],[65679,0,","],[65628,0,","],[65737,0," "],[65681,0," "],[65629,0," "],[65740,0,"2"],[65683,0,"2"],[65630,0,"2"],[65742,1,""],[65684,1,""],[65630,1,""],[65739,1,""],[65682,1,""],[65629,1,""],[65736,1,""],[65680,1,""],[65628,1,""],[65734,0,","],[65679,0,","],[65628,0,","],[65737,0," "],[65681,0," "],[65629,0," "],[65740,0,"d"],[65683,0,"d"],[65630,0,"d"],[65743,0,"i"],[65685,0,"i"],[65631,0,"i"],[65746,0,"g"],[65687,0,"g"],[65632,0,"g"],[65749,0,"f"],[65689,0,"f"],[65633,0,"f"],[65752,0,"i"],[65691,0,"i"],[65634,0,"i"],[65754,1,""],[65692,1,""],[65634,1,""],[65751,1,""],[65690,1,""],[65633,1,""],[65749,0,"i"],[65689,0,"i"],[65633,0,"i"],[65752,0,"t"],[65691,0,"t"],[65634,0,"t"],[65755,0,"s"],[65693,0,"s"],[65635,0,"s"],[65758,0,":"],[65695,0,":"],[65636,0,":"],[65761,0," "],[65697,0," "],[65637,0," "],[65764,0,"2"],[65699,0,"2"],[65638,0,"2"],[65766,1,""],[65700,1,""],[65638,1,""],[65764,0,"1"],[65699,0,"1"],[65638,0,"1"],[65554,0,"    [Memory usage (peak)],\n      [#calc.round(charts.avg_mem.ot.peak / 1e6, digits: 1)],\n      [#calc.round(charts.avg_mem.dt.peak / 1e6, digits: 1)],\n      [#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)],\n"],[65790,4,""],[65790,0,"steady"],[65965,4,""],[65965,0,"s"],[65899,4,""],[65899,0,"s"],[65837,4,""],[65837,0,"s"],[65960,0,"t"],[65897,0,"t"],[65838,0,"t"],[65963,0,"e"],[65899,0,"e"],[65839,0,"e"],[65966,0,"a"],[65901,0,"a"],[65840,0,"a"],[65969,0,"d"],[65903,0,"d"],[65841,0,"d"],[65967,5,""],[65967,0,"steady_state"],[65900,5,""],[65900,0,"steady_state"],[65837,5,""],[65837,0,"steady_state"],[65258,0," tm"],[65260,1,""],[65260,0,"ime (secs)"],[65467,0,"times"],[65472,9,""],[65471,2,""],[65471,0," (secs)"],[65264,1,""],[65263,1,""],[65263,0,", "],[65269,1,""],[65476,1,""],[65471,1,""],[65470,1,""],[65470,0,", "],[65589,0,", mb"],[65592,1,""],[65591,1,""],[65591,0,"MB"],[65592,1,""],[65591,1,""],[65590,1,""],[65589,1,""],[65588,0," MB"],[65810,0," MB"],[65215,0,"\n    table.header([Work performed when \\\\ by], [*OT*], [*Eg-walker*], [*CRDT*]),"],[65140,0,"// "],[65237,25,""],[65544,1,""],[65544,0,"charts"],[65544,0,"#"],[65551,0,".opt"],[65552,3,""],[65552,0,"avg_opt_load_time / 1000"],[65545,0,"calc.c"],[65550,1,""],[65550,0,"round("],[65587,0,")"],[65587,0,", digits: 5"],[65597,1,""],[65597,0,"6"],[65597,1,""],[65597,0,"5"],[65597,1,""],[65597,0,"6"],[65597,1,""],[65597,0,"5"],[65609,1,""],[65609,0,"#calc.round(charts.avg_opt_load_time / 1000, digits: 5)"],[65709,7,""],[65645,7,""],[65580,7,""],[65492,7,""],[65428,7,""],[65368,7,""],[65488,1,""],[65431,1,""],[65378,1,""],[65486,0,"0"],[65430,0,"0"],[65378,0,"0"],[65488,1,""],[65431,1,""],[65378,1,""],[65486,0,"1"],[65430,0,"1"],[65378,0,"1"],[65378,1,""],[65378,0,"0"],[65569,1,""],[65569,0,"2"],[65569,1,""],[65569,0,"3"],[65627,1,""],[65627,0,"3"],[65684,1,""],[65684,0,"1"],[65323,4,""],[65323,0,"ms"],[65507,4,""],[65507,0,"ms)"],[65507,0,"("],[65325,0,")"],[65323,0,"("],[66006,1,""],[66006,0,"2"],[66076,1,""],[66076,0,"2"],[65260,0," )"],[65261,1,""],[65261,0,"(ours)"],[65397,0,"*"],[65441,0,"*"],[65590,0,"*"],[65532,0,"*"],[65640,0,"*"],[65581,0,"*"],[65863,0,"*"],[65920,0,"*"],[66033,0,"*"],[66094,0,"*"],[66023,0,"*"],[65963,0,"*"],[65328,1,""],[65515,1,""],[61575,1,""],[61575,0,"3"],[61844,11,""],[61844,0,"W"],[61858,0,"#calc.round(charts.avg_opt_load_time / 1000, digits: 5)"],[61858,55,""],[61844,14,""],[61853,0," is"],[61856,6,""],[61882,0," n "],[61884,1,""],[61883,1,""],[61844,0,"We have found "],[61867,0," to be"],[61903,0," "],[61903,1,""],[61903,0,"on all of these measures"],[61870,33,""],[61870,0," perform well "],[61920,4,""],[61925,0,"s"],[61972,11,""],[61972,0,"the equivalently"],[62021,0," Memory us"],[62022,9,""],[62022,0,"Peak "],[62022,5,""],[62022,0,"Memory usage "],[62022,13,""],[62022,0,"Peak memory usage is higher than that of our "],[62040,27,""],[62040,0,"(when merging complex changes) s"],[62071,1,""],[62071,0,"is higher than that of the "],[62097,1,""],[62096,1,""],[62095,1,""],[62094,1,""],[62094,0,"an equivalent CRDT, but after merging is complete, the memory is freed. So avega"],[62169,5,""],[62169,0,"the \"steady state\" memory overhead "],[62166,38,""],[62165,1,""],[62165,0," The \"steady"],[62176,1,""],[62175,1,""],[62174,1,""],[62173,1,""],[62173,0,"eady state\" memory overhead of Eg-walker is lower th"],[62166,59,""],[62166,0,"W"],[62166,1,""],[62166,0,"Eg-walker has no ongoing "],[62166,25,""],[62165,1,""],[62156,2,""],[62156,0,"can"],[62145,14,""],[62145,0,"any memory used can be once again"],[62259,0,"Despite "],[62282,1,""],[62281,1,""],[62281,0,"ing complex"],[62306,8,""],[62311,0," similar"],[62322,0," that of"],[62337,1,""],[62337,0,","],[62339,9,""],[62397,50,""],[62397,0,":"],[62379,2,""],[62379,0," "],[62379,1,""],[62379,0,"can be"],[62564,9,""],[62564,0,"staying"],[62757,1,""],[62757,0,". This"],[62763,3,""],[62763,0," is n"],[62767,1,""],[62766,1,""],[62765,1,""],[62764,1,""],[62763,1,""],[62769,0,"s"],[62829,17,""],[62829,0,","],[62829,1,""],[62829,0,". However, "],[62831,9,""],[62830,1,""],[62829,1,""],[62829,0,", but this"],[62835,4,""],[62835,0,"unpacking the CRDT state intor"],[62864,1,""],[62863,1,""],[62863,0,"roduces"],[62978,0," together"],[63012,4,""],[63012,0,"a "],[63024,0," s"],[63025,1,""],[63025,0," obn"],[63028,1,""],[63027,1,""],[63026,1,""],[63025,1,""],[63025,0,"object"],[63041,4,""],[63041,0,"mostr"],[63045,1,""],[63045,0," recent"],[63067,0," "],[63067,1,""],[63079,0," object"],[63125,0,". After transformation, the state object"],[63165,15,""],[63165,0," can be"],[63183,107,""],[63183,0," The CRDT implementations we looked at simply merge any events into their local retained CRDT state object."],[63183,107,""],[63183,0," The CRDT implementations we looked at have "],[63222,5,""],[63222,0,"allocate m"],[63231,1,""],[63231,0,"memory sta"],[63240,1,""],[63239,1,""],[63238,1,""],[63238,0,"at startup for their CRDT state objects and retain that memory throughout the p"],[63316,1,""],[63316,0,"editing session. Eg-walker does not need memory star"],[63367,1,""],[63366,1,""],[63365,1,""],[63364,1,""],[63364,0,"at artup"],[63367,0,"st"],[63374,0,", but will consume signific"],[63393,8,""],[63393,0,"significant emm"],[63405,3,""],[63405,0,"amount "],[63411,1,""],[63411,0,"s of temporary memory when merging concurrent changes."],[63445,0," complex sets of"],[66624,0,"// "],[66660,0,"// "],[66655,0,"\n    Summary of results. "],[66679,1,""],[66678,1,""],[66671,0,"CPU and memory usage "],[66699,0,". "],[66671,0,"ava"],[66673,1,""],[66673,0,"erage "],[66709,0,"This table compares "],[66720,9,""],[66720,0,"shows the mean of "],[66735,3,""],[66656,79,""],[66656,0,"    Summary of average CPU and memory usage results. This table shows the mean"],[65989,1,""],[65989,0,"2"],[66049,1,""],[66049,0,"2"],[66734,0," time (in milliseconds) for "],[66758,4,""],[66758,0,"for loading and merging our datasets."],[66739,0," talenm"],[66745,1,""],[66744,1,""],[66743,1,""],[66742,1,""],[66742,0,"ken"],[66800,1,""],[66800,0,", "],[66801,1,""],[66800,1,""],[66800,0,", using "],[66656,152,""],[66656,0,"    Summary of average CPU and memory usage results. This table shows the mean time taken (in milliseconds) for loading and merging our datasets, using"],[65651,1,""],[65651,0,"\n    "],[65651,5,""],[65651,0," "],[65681,1,""],[65659,1,""],[65651,1,""],[65679,0,"\n    "],[65658,0,"\n    "],[65651,0,"\n    "],[65694,0,"  "],[65668,0,"  "],[65656,0,"  "],[65708,0,"\n      "],[65713,2,""],[65708,0,",\n      [*Eg-walker* (ours)],"],[65666,28,""],[65879,57,""],[65825,0,"      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n"],[66078,57,""],[66019,0,"      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n"],[66289,68,""],[66228,0,"      [*#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)*],\n"],[66533,74,""],[66462,0,"      [#calc.round(charts.avg_mem.dtcrdt.steady_state / 1e6, digits: 1)],\n"],[65674,0,"Ref-"],[65674,4,""],[66754,9,""],[66754,0,"average"],[66762,0,"time "],[66648,3,""],[62404,2,""],[62941,2,""],[62941,0,"\n"],[62470,7,""],[62459,11,""],[62458,1,""],[62458,0," to th"],[62463,1,""],[62462,1,""],[62461,1,""],[62460,1,""],[62459,1,""],[62458,1,""],[62431,27,""],[62431,0,"has no cost on the editing system"],[62470,5,""],[62478,0," contents"],[62530,10,""],[62530,0,". The"],[62547,0," itself can"],[62565,1,""],[62564,1,""],[62563,1,""],[62686,6,""],[62686,0," immediatl"],[62695,1,""],[62695,0,"ely"],[62827,1,""],[62827,0,". However,"],[62837,4,""],[63001,2,""],[63013,0," new"],[63017,1,""],[63017,0," "],[63071,0," of the merge "],[63084,1,""],[63084,0,"d brnach"],[63091,1,""],[63090,1,""],[63089,1,""],[63088,1,""],[63088,0,"anches"],[66778,8,""],[66806,0," and memory used, averaged "],[66822,0," (peak and at quein"],[66840,1,""],[66839,1,""],[66838,1,""],[66838,0,"iescence)"],[66811,6,""],[66811,0,"HEAP"],[66814,1,""],[66813,1,""],[66812,1,""],[66811,1,""],[66811,0,"heap memory"],[66852,1,""],[66852,0," for our OT, reference-CRDT and optimised EG-"],[66896,1,""],[66895,1,""],[66895,0,"g-walker implementations. All results are"],[66946,44,""],[66946,0,"("],[66946,1,""],[66946,0,"a"],[66946,1,""],[66946,0,"over all of our datasets."],[66921,5,""],[66921,0,"R"],[66968,314,""],[66942,4,""],[66942,0,"across"],[66964,0," "],[66964,1,""],[66960,8,""],[66960,0,"editing traces"],[66874,1,""],[66874,0," "],[67018,0," created"],[67027,12,""],[67030,0," implementations"],[67046,9,""],[67049,0," the"],[67052,1,""],[67051,1,""],[67050,1,""],[67049,1,""],[67249,62,""],[67249,0,"O"],[67356,3,""],[67355,1,""],[67355,0,","],[67364,0," and event graph sort"],[67381,0,"pre-"],[67389,0,"ing"],[67381,4,""],[66975,0," Smaller is better."],[66975,19,""],[67759,48,""],[67759,0,"there is a large perofrma"],[67783,1,""],[67782,1,""],[67781,1,""],[67780,1,""],[67779,1,""],[67779,0,"rmance diff"],[67776,14,""],[67776,0,"performance difference b"],[67799,1,""],[67799,0,"b"],[67798,2,""],[67787,11,""],[67776,11,""],[67776,0,"perrmance diff"],[67785,5,""],[67779,6,""],[67779,0,"ofrma"],[67775,9,""],[67769,6,""],[67767,2,""],[67764,3,""],[67759,5,""],[67759,0,"these libraries are not as well optimised as our"],[67759,48,""],[67759,0,"there is a large perofrma"],[67779,5,""],[67779,0,"rmance diff"],[67776,14,""],[67776,0,"performance difference b"],[67799,1,""],[67762,37,""],[67762,0,"se libraries have a large spread "],[67775,7,""],[67775,0,"exhbi"],[67779,1,""],[67778,1,""],[67778,0,"ibit a "],[67798,0,"of perofmr"],[67807,1,""],[67806,1,""],[67805,1,""],[67804,1,""],[67804,0,"rman"],[67807,1,""],[67806,1,""],[67805,1,""],[67804,1,""],[67804,0,"formance."],[67814,26,""],[67790,7,""],[67790,0," range"],[67918,1,""],[67918,0,"ourn "],[67922,1,""],[67921,1,""],[67921,0," own"],[67970,0,". This library"],[67985,6,""],[67991,5,""],[67991,0," much of "],[67992,8,""],[67992,0,"most of its"],[68018,9,""],[68018,0," "],[68037,15,""],[68028,0,"optimize"],[68035,1,""],[68034,1,""],[68034,0,"sed "],[68003,15,""],[68003,0," code"],[68037,0," implementation"],[68053,49,""],[68053,0," This library outperforms both Yjs and Automerge."],[68052,0,", making it (as much as posisble) "],[68061,25,""],[68061,0,"for (as much as possible "],[68085,1,""],[68085,0,") a like-to-like comparuison"],[68112,1,""],[68111,1,""],[68110,1,""],[68109,1,""],[68108,1,""],[68108,0,"ison"],[68102,0,"performance "],[68126,4,""],[68126,0,"Our reference CRDT "],[68144,1,""],[68124,0," between approaches"],[68259,2,""],[68259,0,"Operational Transform"],[68286,25,""],[68286,0," system"],[68287,6,""],[68287,0,"implmeentation"],[68287,14,""],[68287,0,"implementation"],[68280,6,""],[68302,7,""],[68302,0,"OT library"],[68313,5,""],[68324,3,""],[68313,0,"batch "],[68329,1,""],[68364,0," Intermediate "],[68378,2,""],[68378,0,"t"],[68432,10,""],[68432,0,"the graph traversal - which dramatically improves performance but increases"],[68498,0,"also "],[68512,0," memory usage"],[68718,2,""],[68718,0,"used in"],[68742,4,""],[68742,0,"is "],[70219,0,". "],[70220,1,""],[70219,1,""],[70219,0,". Each inserted or dat"],[70240,1,""],[70239,1,""],[70239,0,"et"],[70240,1,""],[70240,0,"leted character counts as 1 event"],[70164,42,""],[70176,1,""],[66921,20,""],[66921,0,"We have "],[66924,5,""],[66924,0,"show the mean result"],[66921,0,"In this table "],[66935,1,""],[66935,0,"w"],[71205,1,""],[71205,0,". The event graph"],[71222,17,""],[71231,1,""],[71230,1,""],[71229,1,""],[71229,0,"s"],[71255,4,""],[71359,0,"necessary "],[71476,67,""],[71406,0," `src/node.cc` from the Git repository for Node.js @node-src-nodecc."],[71407,67,""],[71406,1,""],[71476,0,"`src/node.cc` from the Git repository for Node.js @node-src-nodecc."],[71476,67,""],[71407,0,"`src/node.cc` from the Git repository for Node.js @node-src-nodecc."],[71473,1,""],[71473,0," and "],[71541,6,""],[71541,0,"."],[71688,11,""],[71688,0,"the"],[71728,0," in the data files"],[71736,10,""],[71736,0,"eve"],[71736,3,""],[71736,0,"dataset"],[71732,4,""],[71732,0,"our "],[71736,7,""],[71736,0,"f"],[71736,1,""],[71736,0,"data files"],[72054,4,""],[72054,0,"h"],[72054,1,""],[72054,0,"have been"],[72074,0," (repeated)"],[72075,10,""],[72075,0,"this way"],[72135,4,""],[72135,0,"The resulting dcu"],[72151,1,""],[72150,1,""],[72150,0,"ocument sizes are"],[72167,21,""],[72135,0,"T"],[72135,1,""],[72135,0,"When the editing traces are replayed, "],[72173,1,""],[72173,0,"t"],[72195,0,"s"],[72196,6,""],[72135,41,""],[72135,0,"If printed, the"],[72170,4,""],[72170,0," end u"],[72171,5,""],[72171,0,"are"],[72181,5,""],[72181,0,"around"],[72171,3,""],[72171,0,"end u"],[72175,1,""],[72174,1,""],[72178,2,""],[72178,0,"at"],[72178,2,""],[72178,0,"to"],[72174,0," u"],[72174,2,""],[72171,3,""],[72171,0,"are"],[72180,7,""],[72180,0," around"],[72180,7,""],[72171,9,""],[72171,0,"would be up to about"],[72628,10,""],[72628,0,"impel"],[72632,1,""],[72631,1,""],[72631,0,"pleme"],[72635,1,""],[72634,1,""],[72633,1,""],[72632,1,""],[72631,1,""],[72631,0,"lementations"],[72655,5,""],[72655,0," were"],[72660,5,""],[72761,4,""],[72761,0,"our "],[72776,0,"s"],[67987,0,", hereafter r"],[67999,1,""],[67999,0,"\""],[67999,1,""],[67999,0,"*Ref-CRDT*"],[67999,1,""],[67999,0,"_"],[68008,1,""],[68008,0,"_"],[67987,22,""],[73100,1,""],[73099,1,""],[73098,1,""],[73097,1,""],[73096,1,""],[73095,1,""],[73095,0,"merge"],[72975,15,""],[72920,8,""],[72920,0,"looked at"],[72944,12,""],[72944,0,"millions of "],[72974,1,""],[72973,1,""],[72973,0,","],[72975,16,""],[72975,0,"much faster than"],[73010,1,""],[73010,0,"."],[73011,2,""],[73011,0," "],[73011,1,""],[73011,0,"T"],[73011,0,"A "],[73012,1,""],[73012,0,"s a result, "],[73011,0," "],[72927,48,""],[72927,0,"were many orders of magnitude "],[72927,4,""],[72927,0,"at could ingest "],[72936,7,""],[72936,0,"receive events"],[72936,8,""],[72936,0,"process "],[72992,0," a"],[72993,1,""],[72992,1,""],[72992,0," a"],[72782,5,""],[72900,0,"of "],[72998,0,"'s"],[73028,1,""],[73028,0,"t"],[73039,21,""],[73039,0,"has been elided."],[73333,0," I"],[73334,1,""],[73334,0,"For the CRDT impelmentations "],[73347,16,""],[73347,0,"implmeentations"],[73342,0,"3 "],[73354,1,""],[73349,14,""],[73349,0,"impleme"],[73349,7,""],[73349,0,"implementations (Ref-CRDT, Yjs, Automerge) this time "],[73397,5,""],[73397,0,"work is also performed when a document i"],[73436,1,""],[73436,0,"is l"],[73439,1,""],[73439,0,"initially loaded."],[73439,16,""],[73439,0,"loaded from disk"],[73424,0,"ever"],[72613,0," ino"],[72616,1,""],[72616,0,"to an empty document"],[72667,0," before merging, all"],[72687,4,""],[72668,16,""],[72757,10,""],[72757,0,"prepr"],[72757,5,""],[72757,0,"convert events into "],[72757,20,""],[72757,0,"do this is"],[74402,0,"// "],[74401,0,"\n"],[74401,0,"\nAs discussed earlier, "],[74402,22,""],[74402,0,"As discussed earlier,"],[72291,4,""],[72291,0,"M"],[72291,1,""],[72291,0,"CPU "],[72306,0," when loading and merging"],[72291,20,""],[72291,0,"Time taken to"],[72311,1,""],[72310,1,""],[72309,1,""],[72320,1,""],[72319,1,""],[72318,1,""],[72318,0,"e changes"],[73140,0,"]"],[73122,0,"[#"],[73123,0,"\n    "],[73147,0,"\n    "],[73148,4,""],[73148,0,"  "],[73124,0,"    #charts.speed_merge\n"],[73170,1,""],[73169,1,""],[73168,1,""],[73167,1,""],[73166,1,""],[73166,0,"load\n    #charts.speed_merge"],[73124,24,""],[72328,0,"\n"],[72328,0,"\nWe have measured the time taken to load "],[72364,5,""],[72364,0,"merge a large"],[72370,7,""],[72370,0,"our data"],[72377,1,""],[72376,1,""],[72375,1,""],[72374,1,""],[72374,0,"editing traces into a local, empty document. Once loaded"],[72424,6,""],[72424,0,"all events were loaded, the document was saved and loaded back."],[72329,0,"// "],[72985,0,"\n\nOnce all events were im"],[73008,2,""],[73008,0,"im"],[73009,1,""],[73008,1,""],[73008,0,"received from a remote peer, the documents were saved to disk and loaded back. Th"],[73088,1,""],[73087,1,""],[73086,1,""],[73410,24,""],[73388,0,"    #charts.speed_merge\n"],[73040,10,""],[73040,0," local state"],[73052,5,""],[73052,0," was"],[73061,1,""],[73061,0,"d "],[73062,1,""],[73075,0,"then freshly "],[73100,0," As y"],[73104,1,""],[73104,0,"we can see, the CRDT implementations"],[73101,16,""],[73101,0,"T"],[73125,0," had no"],[73130,2,""],[73129,1,""],[73128,1,""],[73127,1,""],[73126,1,""],[73126,0,"perform the same work in each case"],[73150,10,""],[73150,0," both cases - "],[73148,16,""],[73148,0,"in each case, "],[73041,0,"resulting "],[73089,8,""],[73101,0," into memory"],[73176,0,"c"],[73176,1,""],[73162,14,""],[73148,14,""],[73148,0,"the same f"],[73140,18,""],[73140,0,"run the same "],[73140,13,""],[73140,0,"execute the same commands to construct a re"],[73182,1,""],[73181,1,""],[73181,0,"lo"],[73182,1,""],[73181,1,""],[73181,0,"l"],[73181,1,""],[73181,0,"local CRDT object from memory"],[73204,0,"events "],[73211,6,""],[73204,7,""],[73204,0,"remote events and from locally sto"],[73227,11,""],[73227,0,"events stored on disk. However, for OT"],[73264,1,""],[73263,1,""],[73263,0,"both OT and Eg-walker"],[73268,0,"the "],[73259,13,""],[73259,0,"both the "],[73284,0," implementations are"],[73285,19,""],[73285,0,"approaches are abo"],[73302,1,""],[73302,0,"le to cache the resulting document"],[73259,5,""],[73290,0," have no "],[73291,8,""],[73291,0,"do not need to "],[73291,15,""],[73290,1,""],[73331,0," state."],[73303,5,""],[73303,0,"s"],[73303,1,""],[73303,0,"simply load"],[73338,6,""],[73338,0,"content from disk and edi"],[73362,1,""],[73361,1,""],[73360,1,""],[73359,1,""],[73358,1,""],[73357,1,""],[73356,1,""],[73355,1,""],[73355,0," and edit "],[73360,5,""],[73360,0,"emit edits directly. Historical events"],[73381,0,"In these algorithm"],[73381,18,""],[73381,0,"USing the"],[73381,9,""],[73381,0,"Using these systems, "],[73402,1,""],[73402,0,"h"],[73419,0," are only loaded when needed for merging."],[73462,0,"For completeness, "],[73480,1,""],[73480,0,"w"],[73543,13,""],[73529,8,""],[73529,0,"edits"],[73534,6,""],[73515,8,""],[73515,0,"process "],[73528,0," "],[73528,1,""],[73533,1,""],[73533,0,"ing events"],[73543,29,""],[73576,6,""],[73576,0,"tests"],[73580,1,""],[73580,0,"ed"],[73582,9,""],[73582,0," can"],[73645,0,"ny"],[73670,40,""],[73670,0,"We have elided"],[73678,6,""],[73678,0,"removed "],[73678,8,""],[73678,0,"not included this c"],[73696,1,""],[73696,0,"data."],[74197,10,""],[74197,0,"The editing t"],[74201,9,""],[74201,0,"merge times are"],[74216,3,""],[74458,0," When merging, "],[74473,2,""],[74473,0,"t"],[73250,10,""],[73250,0,"T"],[73271,10,""],[73271,0,"algori"],[73271,6,""],[73271,0,"approaches"],[73271,10,""],[73250,4,""],[73267,0,"based systems"],[73319,8,""],[73319,0,"text"],[73331,0," directly"],[73350,24,""],[73352,5,""],[73352,0,"With"],[73363,7,""],[73363,0,"approaches"],[73352,5,""],[73352,0,"When using one of "],[73421,25,""],[73421,0," from disk when m"],[73437,1,""],[73437,0,"con"],[73439,1,""],[73438,1,""],[73437,1,""],[73437,0,"remo"],[73440,1,""],[73439,1,""],[73438,1,""],[73437,1,""],[73437,0,"concurrent branches are merged together."],[73873,0," "],[73873,1,""],[73873,0,", then load "],[73880,5,""],[73880,0,"restart the editing e"],[73900,1,""],[73880,20,""],[73880,0,"reload the editing context from disk"],[74073,127,""],[74073,0," The load time for Eg-walker and OT is "],[74073,39,""],[73687,0,"As a result, "],[73700,1,""],[73700,0,"w"],[73687,43,""],[73687,0,"As a result, we have not included this data"],[73687,14,""],[73687,0,"W"],[73699,14,""],[73699,0,"shown this "],[73714,0," as the differences betwene "],[73741,1,""],[73740,1,""],[73739,1,""],[73739,0,"en systems are i"],[73717,0," at that speed,"],[73770,0,"rrelevant"],[74783,0,"upstea"],[74783,6,""],[75073,23,""],[75074,427,""],[75207,13,""],[75207,0," (e.g., _A1_)"],[75207,13,""],[75238,0,"_A1_ and "],[75251,0,", respectively"],[75284,6,""],[75284,0,"Eg-walker can"],[75304,3,""],[75304,0,"its"],[77853,1,""],[77852,1,""],[77851,1,""],[77851,0,"e operations"],[77873,0,"\""],[77886,0,"\""],[77900,0,", after the system has req"],[77925,1,""],[77925,0,"turned to quie"],[77935,4,""],[77935,0,"quiescence"],[77945,1,""],[77945,0,"."],[77946,85,""],[77946,0," We assume Eg-walker and an OT system do not cache"],[77946,50,""],[77908,0,"temporary data is discarded and "],[78079,1,""],[78079,0,". However,"],[78089,4,""],[78104,1,""],[78103,1,""],[78102,1,""],[78101,1,""],[78100,1,""],[78099,1,""],[78098,1,""],[78098,0,"ized data"],[78107,21,""],[78101,1,""],[78100,1,""],[78100,0,"ed"],[78107,0," "],[78107,1,""],[78107,0,"se"],[78108,1,""],[78107,1,""],[78106,1,""],[78106,0,"a"],[78108,12,""],[78108,0,"dramatically"],[78094,0,"k"],[78094,1,""],[78090,0,"keeping this "],[78120,0," in memory results in"],[78230,14,""],[78230,0," the _A2_ data"],[78243,1,""],[78240,3,""],[78240,0,"editing trace"],[78256,133,""],[78328,1,""],[78328,0," in all cases."],[88493,9,""],[88493,0,"Eg-walker"],[88283,9,""],[88283,0,"Eg-walker"],[87857,9,""],[87857,0,"Eg-walker"],[87629,9,""],[87629,0,"Eg-walker"],[86234,9,""],[86234,0,"Eg-walker"],[85720,9,""],[85720,0,"Eg-walker"],[84930,9,""],[84930,0,"Eg-walker"],[82881,9,""],[82881,0,"Eg-walker"],[82456,9,""],[82456,0,"Eg-walker"],[81998,9,""],[81998,0,"Eg-walker"],[80965,9,""],[80965,0,"Eg-walker"],[79656,9,""],[79656,0,"Eg-walker"],[76904,9,""],[76904,0,"Eg-walker"],[75950,9,""],[75950,0,"Eg-walker"],[75441,9,""],[75441,0,"Eg-walker"],[50756,9,""],[50756,0,"Eg-walker"],[49885,9,""],[49885,0,"Eg-walker"],[45717,9,""],[45717,0,"Eg-walker"],[45067,9,""],[45067,0,"Eg-walker"],[38937,9,""],[38937,0,"Eg-walker"],[31709,9,""],[31709,0,"Eg-walker"],[31568,9,""],[31568,0,"Eg-walker"],[31416,9,""],[31416,0,"Eg-walker"],[31185,9,""],[31185,0,"Eg-walker"],[31019,9,""],[31019,0,"Eg-walker"],[30053,9,""],[30053,0,"Eg-walker"],[27810,9,""],[27810,0,"Eg-walker"],[23651,9,""],[23651,0,"Eg-walker"],[11612,9,""],[11612,0,"Eg-walker"],[11307,9,""],[11307,0,"Eg-walker"],[11236,9,""],[11236,0,"Eg-walker"],[446,0,"#if anonymous {\n"],[461,0,"\n  let algname = \"\""],[479,0,"Feathertail"],[491,0,"\n  "],[492,2,""],[492,0,"} else {}"],[500,0,"\n  \n"],[503,0,"let algname = \"\""],[518,0,"Eg-walker"],[2538,51,""],[2537,1,""],[2590,1,""],[2511,82,""],[2510,1,""],[2619,0,"#align(center, text(20pt)[*Collaborative Text Editing: Better, Faster, Smaller*])\n"],[2619,0,"  "],[2621,1,""],[2526,0,"\n  align(center, text(20pt)[*Collaborative Text Editing: Better, Faster, Smaller*])"],[2555,0,"#algname"],[2563,26,""],[440,5,""],[440,0,"true"],[527,0,"\n} else {"],[491,9,""],[518,0,"\n  let algname = \"Feathertail\""],[461,30,""],[488,0,"\n#if anonymous {"],[445,18,""],[445,0,"#"],[518,9,""],[490,4,""],[440,4,""],[440,0,"false"],[2529,0,"\n    "],[2582,0,","],[2586,14,""],[2586,0,"  "],[2650,2,""],[2650,0,"    "],[2626,4,""],[2626,0,"      "],[2600,4,""],[2600,0,"      "],[2660,0,"\n    )"],[2663,2,""],[2581,1,""],[2658,1,""],[440,5,""],[440,0,"true"],[2555,23,""],[2555,0,"Fast and Mem"],[2564,3,""],[2564,0,"memory "],[2570,1,""],[2570,0,"-efficient collaborative text editg"],[2604,1,""],[2604,0,"ing"],[2609,1,""],[2609,0," +"],[2533,76,""],[2528,0,"text(20pt)[*#algname: Fast and memory-efficient collaborative text editing*])"],[2611,1,""],[2610,1,""],[2608,2,""],[2608,0,"align()"],[2614,0,"center"],[2620,5,""],[2620,0,","],[2688,4,""],[2688,0,"  "],[2662,6,""],[2662,0,"    "],[2634,6,""],[2634,0,"    "],[2687,3,""],[2540,10,""],[3556,9,""],[3556,0,"#al"],[3557,2,""],[3557,0,"algname"],[3758,9,""],[3758,0,"#algname"],[8957,0,"#if anonymous { algname } else { ["],[9023,0,"] }"],[440,4,""],[440,0,"false"],[440,5,""],[440,0,"true"],[9013,9,""],[9013,0,"#algname"],[9139,9,""],[9139,0,"#algname"],[9364,9,""],[9364,0,"#algname"],[9539,9,""],[9539,0,"#algname"],[9715,9,""],[9715,0,"#algname"],[10426,9,""],[10426,0,"#algname"],[10495,9,""],[10495,0,"#algname"],[10789,9,""],[10789,0,"#algname"],[11364,9,""],[11364,0,"#algname"],[11434,9,""],[11434,0,"#algname"],[11569,9,""],[11569,0,"#algname"],[11737,9,""],[11737,0,"#algname"],[23022,9,""],[23022,0,"#algname"],[23774,9,""],[23774,0,"#algname"],[23908,9,""],[23908,0,"#algname"],[24573,9,""],[24573,0,"#algname"],[27930,9,""],[27930,0,"#algname"],[28535,9,""],[28535,0,"#algname"],[28563,9,""],[28563,0,"#algname"],[29684,9,""],[29684,0,"#algname"],[29736,9,""],[29736,0,"#algname"],[30168,9,""],[30168,0,"#algname"],[30674,9,""],[30674,0,"#algname"],[31132,9,""],[31132,0,"#algname"],[31297,9,""],[31297,0,"#algname"],[31527,9,""],[31527,0,"#algname"],[31678,9,""],[31678,0,"#algname"],[31818,9,""],[31818,0,"#algname"],[39045,9,""],[39045,0,"#algname"],[45174,9,""],[45174,0,"#algname"],[45823,9,""],[45823,0,"#algname"],[49990,9,""],[49990,0,"#algname"],[50860,9,""],[50860,0,"#algname"],[58502,9,""],[58502,0,"#algname"],[61607,9,""],[61607,0,"#algname"],[61959,9,""],[61959,0,"#algname"],[62010,9,""],[62010,0,"#algname"],[62366,9,""],[62366,0,"#algname"],[62467,9,""],[62467,0,"#algname"],[62518,9,""],[62518,0,"#algname"],[63087,9,""],[63087,0,"#algname"],[63455,9,""],[63455,0,"#algname"],[63617,9,""],[63617,0,"#algname"],[63946,9,""],[63946,0,"#algname"],[64779,9,""],[64779,0,"#algname"],[64827,9,""],[64827,0,"#algname"],[65037,9,""],[65037,0,"#algname"],[65167,9,""],[65167,0,"#algname"],[65281,9,""],[65281,0,"#algname"],[65721,9,""],[65721,0,"#algname"],[65803,9,""],[65803,0,"#algname"],[66979,9,""],[66979,0,"#algname"],[67151,9,""],[67151,0,"#algname"],[67562,9,""],[67562,0,"#algname"],[67593,9,""],[67593,0,"#algname"],[68126,9,""],[68126,0,"#algname"],[73337,9,""],[73337,0,"#algname"],[74393,9,""],[74393,0,"#algname"],[74632,9,""],[74632,0,"#algname"],[75139,9,""],[75139,0,"#algname"],[75154,9,""],[75154,0,"#algname"],[75228,9,""],[75228,0,"#algname"],[75358,9,""],[75358,0,"#algname"],[75514,9,""],[75514,0,"#algname"],[76022,9,""],[76022,0,"#algname"],[76350,9,""],[76350,0,"#algname"],[76974,9,""],[76974,0,"#algname"],[77866,9,""],[77866,0,"#algname"],[78521,9,""],[78521,0,"#algname"],[78953,9,""],[78953,0,"#algname"],[79722,9,""],[79722,0,"#algname"],[79974,9,""],[79974,0,"#algname"],[81029,9,""],[81029,0,"#algname"],[81671,9,""],[81671,0,"#algname"],[82060,9,""],[82060,0,"#algname"],[82517,9,""],[82517,0,"#algname"],[82838,9,""],[82838,0,"#algname"],[82940,9,""],[82940,0,"#algname"],[83070,9,""],[83070,0,"#algname"],[84223,9,""],[84223,0,"#algname"],[84986,9,""],[84986,0,"#algname"],[85775,9,""],[85775,0,"#algname"],[85953,9,""],[85953,0,"#algname"],[86287,9,""],[86287,0,"#algname"],[87143,9,""],[87143,0,"#algname"],[87680,9,""],[87680,0,"#algname"],[87907,9,""],[87907,0,"#algname"],[88332,9,""],[88332,0,"#algname"],[88541,9,""],[88541,0,"#algname"],[22985,0,"\n#if na"],[22991,1,""],[22990,1,""],[22990,0,"anonymous {}"],[23001,0,"\n  \n"],[23007,34,""],[23002,2,""],[23002,0,"  []"],[23005,0,"= The Event Graph Walker algorithm"],[23042,0," "],[23042,1,""],[23001,0,"\n  "],[23002,2,""],[23002,0,"} else {}"],[23010,1,""],[23001,0,"\n  []"],[23005,0,"= The #alg"],[23012,3,""],[23012,0,"algname algorithm"],[23080,1,""],[3319,0," fall in two categories: "],[3448,29,""],[3344,0,"Operational Transformation/OT"],[3370,1,""],[3370,0," ("],[3374,0,") algorithms "],[3387,11,""],[3387,0,"are very"],[3471,22,""],[3471,0,"; and CRDTs are slow to load n"],[3500,1,""],[3500,0,"and consume a lot of memory"],[3472,4,""],[3523,84,""],[3391,5,""],[3639,0," consumes an order of magni"],[3661,5,""],[3661,0,"magnitude less memory than CRDTs in the steady state; "],[3714,1,""],[3713,1,""],[3713,0,", and is "],[3713,9,""],[3713,0,"; loading a document off disk is several orders mo"],[3762,1,""],[3761,1,""],[3761,0,"of man"],[3766,1,""],[3766,0,"g"],[3764,3,""],[3764,0,"magnitude faster than CRDTs; and on editing histories with long-running branches, it is several orders of magn"],[3870,4,""],[3870,0,"magnitudef"],[3879,1,""],[3879,0," faster than OT"],[3894,72,""],[3785,0," with"],[3734,3,""],[3734,0,"from"],[3902,0,"Even in the worst cases, "],[3927,1,""],[3927,0,"o"],[3902,26,""],[3902,0,"O"],[3582,0," avoids both these weaknesses: "],[3613,54,""],[3613,0,"compared to CRDTs,"],[3677,11,""],[3697,1,""],[3697,0,", and"],[3769,17,""],[3769,0,". "],[3770,1,""],[3770,0,"\nCompared to OT,"],[3787,29,""],[3787,0,"merging"],[3816,1,""],[3857,8,""],[3858,0,"\nEven in the worst cases, "],[3884,2,""],[3884,0,"o"],[3859,6,""],[3859,0,"I"],[3879,18,""],[3879,0,"the performance"],[3907,11,""],[3907,0,"is comparable to"],[3938,7,""],[3948,0,".\n"],[3949,0,"\n#al"],[3951,2,""],[3951,0,"algname can be used everywhere CRDTs are used"],[3996,100,""],[3996,0,", including"],[4021,13,""],[4021,0,"systems"],[4055,48,""],[3625,0,"existing "],[3295,13,""],[3294,1,""],[3576,4,""],[3575,1,""],[3807,3,""],[3844,0," in some cases"],[3852,6,""],[3847,5,""],[3844,3,""],[3810,8,""],[3855,1,""],[3860,0," merging"],[7273,0,"the "],[7282,1,""],[7281,1,""],[7281,0,"s each"],[7299,1,""],[7299,0,"n"],[7313,36,""],[7402,3,""],[7402,0,"n^2"],[7427,3,""],[7427,0,"first user's"],[7499,3,""],[7499,0,"second user's"],[7743,9,""],[7743,0,"n"],[7746,3,""],[7746,0,"is"],[7920,3,""],[7920,0,"n^2"],[7956,0,"\nIn @be"],[7961,2,""],[7961,0,"benchmarking one of our "],[7974,11,""],[7974,0,"we show an example that takes j"],[8004,1,""],[8004,0,"one hour to merge using OT."],[7992,0," of a 500 kB document"],[8004,9,""],[8004,0," document"],[7993,12,""],[7983,1,""],[7983,0," real-life"],[8620,0," a significant"],[8583,17,""],[8593,33,""],[8593,0,"uses a lot of additional memory and makes document s"],[8644,1,""],[8643,1,""],[8643,0,"s slower to load from disk"],[8473,4,""],[8472,1,""],[8471,1,""],[8471,0,", which"],[8570,0,".\n"],[8571,0,"\nUnfortunately, the"],[8589,1,""],[8589,0,"ose IDs mn"],[8598,1,""],[8597,1,""],[8597,0,"need to be held in memory while a document is being edited, which uses a lot more memory than the e"],[8695,1,""],[8695,0,"document text itself, "],[8717,56,""],[8716,1,""],[8586,0," even with careful optimisation"],[8572,0,"Unfortunately, even with careful optimisation those IDs need to be held in memory while a document is being edited, which uses a lot more memory than the document text itself, and makes documents slower to load from disk.\n"],[8572,222,""],[8586,31,""],[8655,7,""],[8655,0,"; even with careful optimisation, this i"],[8694,1,""],[8694,0,"uses more than 10 times "],[8718,12,""],[8781,0,"much "],[8812,35,""],[8935,247,""],[8693,0," metadata"],[8762,6,""],[8762,0,"\n"],[8762,1,""],[8761,1,""],[8571,242,""],[8288,0,"Unfortunately, those IDs need to be held in memory while a document is being edited; even with careful optimisation, this metadata uses more than 10 times more memory than the document text, and makes documents much slower to load from disk.\n"],[8813,123,""],[8530,0,"Moreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead.\n"],[8936,0,"\nMoreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead."],[8530,123,""],[8813,0,"\nUnfortunately, those IDs need to be held in memory while a document is being edited; even with careful optimisation, this metadata uses more than 10 times more memory than the document text, and makes documents much slower to load from disk."],[8288,242,""],[8471,7,""],[8471,0,".\nThis"],[8516,1,""],[8515,0,","],[8568,1,""],[8587,1,""],[8587,0,"e"],[9332,9,""],[9332,0,"n"],[9346,12,""],[9346,0,"each"],[9392,5,""],[9392,0,"n"],[9398,5,""],[9398,0,"n"],[9444,3,""],[9444,0,"n^2"],[10331,0,"\n~"],[10332,1,""],[10332,0,"// TODO: also ephas"],[10350,1,""],[10349,1,""],[10348,1,""],[10347,1,""],[10347,0,"mphasise that the CRDT is not needed for viewing or edtig"],[10403,1,""],[10403,0,"ting a document, only for merging."],[9403,9,""],[7524,3,""],[7524,0,"or"],[7584,18,""],[7590,50,""],[7590,0,"or even slower"],[7423,9,""],[7423,0,"one"],[7493,6,""],[7493,0,"other"],[7516,14,""],[7544,0,"merge "],[10004,0," and discard its state as soon as the merge is complete.\n"],[10009,0,"we "],[10063,0,"\n"],[10003,0," of concurrent edits"],[10084,0,"No CRDT metadata"],[10084,16,""],[10084,0,"During "],[10084,7,""],[10084,0,"While a document is being edited, #a"],[10119,1,""],[10119,0,"algname only holds the document text in memory, but no CRDT metadata.\nThis allows #algname to u"],[10118,8,""],[10118,0,"we"],[10130,1,""],[10207,0,"se an order of magnitude less memory than the best known CRDT implementations."],[10210,2,""],[10210,0,"1–2"],[10219,0,"s"],[10287,0,"\nEven during merging, when #al"],[10315,2,""],[10315,0,"algname's memory "],[10322,10,""],[10322,0," tempor"],[10323,6,""],[10323,0,"temporarilyu"],[10334,1,""],[10334,0," uses more memory, the peak "],[10288,6,""],[10288,0,"D"],[10348,3,""],[10348,0,"its"],[10286,0," most of the time"],[10374,0,"memory use is comparable to the best known "],[10182,11,""],[10182,0,"Most of the time,"],[10209,2,""],[10209,0,"therefore"],[10222,0,"s"],[10265,52,""],[10265,0,"a CRDT"],[10385,0,"CRDT implementations."],[10407,0,"//"],[10534,0,"// "],[10271,0," and is "],[10271,8,""],[9725,82,""],[9725,0,"the concurrent operations"],[9755,5,""],[9762,14,""],[9762,0,"it"],[9669,6,""],[9625,44,""],[9630,3,""],[9630,0,"s"],[9706,3,""],[9706,0,"es"],[9688,10,""],[9688,0,"edits"],[4687,18,""],[4687,0,"so"],[4584,12,""],[4908,3,""],[4908,0,"e"],[4938,5,""],[4264,11,""],[4264,0,"ion"],[3725,8,""],[3592,3,""],[3592,0,".\nC"],[3899,2,""],[3899,0,"with"],[7432,4,""],[7432,0,"all"],[8335,16,""],[8762,35,""],[8676,11,""],[8676,0,"S"],[8696,0," also"],[9244,3,""],[9244,0,"OT's cos"],[9251,1,""],[9250,1,""],[9249,1,""],[9248,1,""],[9274,26,""],[8934,22,""],[8934,0,"s"],[8856,13,""],[8879,0,"algorithm "],[8894,8,""],[8894,0,"has"],[8914,0," both"],[8932,0,", without their weaknesses"],[8932,9,""],[8932,0," but not"],[6898,1,""],[9279,28,""],[9277,4,""],[9285,0,"  merge concurrent operations"],[9286,1,""],[9291,0,"s"],[9315,9,""],[9315,0,"by"],[9327,0,"ing"],[9331,4,""],[9339,28,""],[9361,0,"While OT "],[9370,11,""],[9381,1,""],[9380,1,""],[9379,1,""],[9379,0,"s"],[9430,10,""],[9526,15,""],[9535,0,"s efficiently"],[9277,0,"Both "],[9290,0," and OT"],[9303,1,""],[9349,21,""],[9043,0,"\n// "],[9122,157,""],[9044,0,"When two users concurrently perform $n$ operations each, #algname can merge them at a cost of $O(n log n)$, much faster than OT's cost of $O(n^2)$ or worse.\n"],[9043,0,"na "],[9045,1,""],[9044,1,""],[9043,1,""],[9043,0,"and it "],[9043,7,""],[9043,0,"so it does not need to store the IDs that "],[9041,44,""],[9041,0,"; it does not store "],[9055,6,""],[9055,0,"need to hold any per-character unique IDs in memory."],[9055,30,""],[9055,0,"store"],[9061,6,""],[9061,0,"character"],[9074,10,""],[9074,0,", making it mc"],[9087,1,""],[9087,0,"uch more memory-efficient than CRDTs"],[9282,79,""],[9041,82,""],[9041,0,", and transforms those indexes to merge concurrent operations"],[9104,0,"\n"],[9263,74,""],[9104,1,""],[9262,0,"// "],[9262,192,""],[22890,0,"\n// While OT transforms one operation with respect to one other operation, #algname builds a temporary data structure that reflects the concurrent edits, and uses it to operations efficiently.\n"],[9262,0,"#al"],[9263,2,""],[9263,0,"algname "],[9271,12,""],[9274,0,"s"],[9271,0,"internally "],[9294,32,""],[9294,0,"mormer"],[9294,6,""],[9294,0,"for merging"],[9262,0,"Internally, "],[9282,11,""],[9973,69,""],[9973,0,"§"],[9466,0,"\n; we never write CRDT data to disk and never send it over the network"],[9467,3,""],[9467,0,"W"],[9534,0,"."],[9859,292,""],[9487,4,""],[9487,0,"state"],[9482,0,"the "],[9288,1,""],[9288,0,"our own"],[9262,12,""],[9271,29,""],[9271,0,"mer"],[9271,3,""],[9271,0,"uses our own CRDT for merging"],[9271,29,""],[9271,0,"merges concurrent edits using a CRDT algorithm we designed"],[9424,5,""],[9424,0,"operations"],[9331,10,""],[9331,0,"U"],[10869,7,""],[9884,142,""],[9893,5,""],[10736,4,""],[10745,0,", a collaborative text editing"],[10785,0," combining the best as "],[10807,1,""],[10807,0,"pects of OT and  "],[10823,1,""],[10823,0,"CRDTs"],[10748,0,"n algorithm for"],[10790,54,""],[10790,0," that can be used anywhere that CRDTs"],[10791,36,""],[10791,0,"with the same capabilities as CRDTs, but "],[10805,12,""],[10805,0,"features"],[10805,8,""],[10805,0,"capabilities"],[10832,0,"which does not hold CRDT metadata in memory whil"],[10876,4,""],[10876,0,"during editing."],[10832,58,""],[10832,0,"with much lower memory use"],[10842,5,""],[10842,0,"smaller"],[10857,3,""],[10857,0,"footprint"],[10867,0,"\n- Since there is no published benchmark for coll"],[10915,1,""],[10914,1,""],[10913,1,""],[10912,1,""],[10912,0,"text "],[10888,9,""],[10888,0,"established"],[10919,0,"coll"],[10914,9,""],[10914,0,"collaborative text editing, we into"],[10948,1,""],[10948,0,"roduce a suite of text file edti"],[10979,1,""],[10978,1,""],[10978,0,"iting traces"],[10866,0," "],[10866,1,""],[10837,4,""],[10837,0,"vastly"],[10791,29,""],[10791,0,"similar to a"],[10808,1,""],[10850,0," and "],[10850,5,""],[10813,0," faster and"],[10791,0,"that is "],[10838,0,"a "],[10821,0," "],[10821,1,""],[10448,0,"\n"],[10448,1,""],[10449,27,""],[10449,0,"C"],[10490,0,"\n\n"],[10490,0," is our initial example application for #al"],[10531,2,""],[10531,0,"algname; "],[10540,13,""],[10556,3,""],[10556,0,"the same"],[10575,4,""],[10575,0,"an"],[10689,0,"\nMore generally"],[10685,3,""],[10685,0,"and more"],[10709,0,", #al"],[10712,2,""],[10712,0,"algname provides a general framework for efficient coordination-free distributed systems,"],[89045,0,"\n  Thank you to Matthew Wed"],[89071,1,""],[89071,0,"idner and Joe Hellerstein for feedback on a draft of this paper."],[10731,8,""],[10793,0," in which nodes can always make progress independently, but converge eventually @Hellerstein2010."],[10538,1,""],[10538,0,".\n"],[10540,2,""],[10540,0,"W"],[10494,19,""],[10494,0,"the first"],[10546,8,""],[10546,0,"our"],[10459,14,""],[10459,0,"ion on"],[11144,9,""],[11144,0,"publish"],[11163,10,""],[11177,0," of text files that demonstrage "],[11208,1,""],[11207,1,""],[11206,1,""],[11206,0,"te i"],[11209,1,""],[11209,0,"different patterns"],[11209,9,""],[11209,0,"various"],[11225,0," of concurrent editing."],[11144,0,"are also "],[11160,0,"ing"],[11282,0," use those editint"],[11299,1,""],[11299,0,"g traces to"],[11338,0," our implementation of"],[11369,0,"."],[11370,1,""],[11371,0,"We "],[11382,1,""],[11381,1,""],[11380,1,""],[11380,0,"e"],[11208,0," are derived from real "],[11203,0," for benchmarking."],[11222,4,""],[11222,0,"They"],[11249,0,"e"],[11249,1,""],[11249,0,"documents and"],[11373,0," o"],[11374,1,""],[11373,1,""],[11809,0,"\n- We prove the correctness of #al"],[11841,2,""],[11841,0,"algname in @proofs."],[93132,0,"\n\n"],[93133,0,"= Proof of Correctness <proofs>\n\nTODO"],[93172,17,""],[11295,0,"sequential and "],[11438,0,", comparing it to selected CRDTs and an OT imple"],[11481,5,""],[11481,0,"implementation"],[11499,0," measure time to load a documnt, "],[11531,1,""],[11530,1,""],[11529,1,""],[11528,1,""],[11528,0,"ent, time to merge remote"],[11547,6,""],[11547,0,"edits from a remote replica, memory use"],[11585,1,""],[11585,0,"age, and file size"],[11603,122,""],[11508,0,"CPU "],[11536,0," CPU"],[11624,0," orders of magn"],[11635,4,""],[11635,0,"magnitude"],[11622,2,""],[11622,0,"improves on"],[11632,1,""],[11631,1,""],[11631,0,"the state of the art by"],[11674,0," in the best cases, and is only slightly worse than "],[11715,257,""],[11715,0,"slower in the worst cases"],[22994,0," <algorithm>"],[23054,0," <algorithm>"],[10918,0,"In "],[10920,1,""],[10919,1,""],[10918,1,""],[10918,0,"In @algorithm,"],[10931,1,""],[10931,0," "],[10932,1,""],[10932,0,"w"],[9362,5,""],[9377,0," only"],[10956,1,""],[10956,0," CRDT/OT"],[11013,23,""],[11025,4,""],[11025,0,"has"],[11062,0," than existing CRDTs"],[10979,14,""],[10983,8,""],[10957,0,"hybrid "],[39266,0,"\n// can use RGA/YATA but not any CRDT"],[39269,0," TODO:"],[39267,43,""],[3286,89844,""],[3286,0,"Existing collaboration algorithms are either slow to merge files that have diverged substantially due to offline editing (in the case of Operational Transformation/OT), or incur overheads due to giving a unique ID to every character (in the case of CRDTs).\nWe introduce #algname, a collaboration algorithm for text that achieves the best of both the OT and the CRDT worlds: it avoids the overheads of CRDTs while simultaneously offering fast merges.\nOur implementation of #algname outperforms existing CRDT and OT algorithms in most editing scenarios, while also using less memory, having smaller file sizes, and supporting peer-to-peer collaboration without a central server.\n*(TODO: quantify the performance improvement?)*\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software.\n\n\n= Introduction <introduction>\n\nReal-time collaborative editing has become an essential feature for many types of software, including document editors such as Google Docs, Microsoft Word, or Overleaf, and graphics software such as Figma.\nIn such software, each user's device locally maintains a copy of the shared file (e.g. in a tab of their web browser).\nA user's edits to the file are immediately applied to their own local copy, without waiting for a network round-trip, in order to ensure that the user interface is responsive regardless of network latency.\nDifferent users may therefore make edits concurrently, and the software must merge such concurrent edits in a way that preserves the users' intentions, and ensuring that all devices converge towards the same state.\n\nFor example, in @two-inserts, two users initially have the same document \"Helo\".\nUser 1 inserts a second letter \"l\" at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $italic(\"Insert\")(3, \\\"l\\\")$ it can apply it to obtain \"Hello!\", but when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ it cannot apply that operation as-is, since that would result in the state \"Hell!o\", which would be inconsistent with the other user's state and the intended insertion position.\nDue to the concurrent insertion at an earlier index, user 1 must insert the exclamation mark at index 5.\n\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\")\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\")\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\n\n// Seph: I'm not sure how much people care about the theoretical complexity of OT this early in the paper. Might be better to ground it in some real world benchmarking.\nOT is simple and fast in the case of @two-inserts, where each user performed only one operation since the last version they had in common.\nIn general, if user 1 performed $k$ operations and user 2 performed $m$ operations since their last common version, merging their states using OT has a cost of at least $O(k m)$, since each of the $k$ operations must be transformed with respect to each of the $m$ operations and vice versa.\nSome OT algorithms have a complexity that is quadratic or even cubic in the number of operations performed by each user @Li2006 @Roh2011RGA @Sun2020OT.\nThis is acceptable for online collaboration where $k$ and $m$ are typically small, but if users may edit a document offline or if the software supports explicit branching and merging workflows @Upwelling, an algorithm with complexity $O(k m)$ can become impracticably slow.\n\n_Conflict-free Replicated Data Types_ (CRDTs) have been proposed as an alternative to OT.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006WOOT, and over a dozen text CRDTs have been published since @crdt-papers.\nThese algorithms work by giving each character a unique identifier, and using those IDs instead of integer indexes to identify the position of insertions and deletions in the document.\nThis avoids having to transform operations (since IDs are not affected by concurrent operations), but storing and transmitting those IDs introduces overhead.\n// This can be slow and expensive.\nMoreover, some CRDT algorithms need to retain IDs of deleted characters (_tombstones_), which introduces further overhead.\n// The full set of IDs typically needs to be loaded into memory during editing sessions to allow edits to be converted to the CRDT's native format.\n// In our testing, we have found even industry leading CRDT algorithms (such as Automerge and Yjs)\n\nIn this paper we propose #if anonymous { algname } else { [_Event Graph Walker_ (#algname)] }, an approach to collaborative editing that combines the strengths of OT and CRDT in a single algorithm.\nLike OT, #algname uses integer indexes to identify insertion and deletion positions, and it avoids the overheads of CRDTs at times when there is no concurrency.\nWhen two users concurrently perform $k$ and $m$ operations respectively, #algname can merge them at a cost of $O((k+m) log (k+m))$, which is much faster than the cost of $O(k m)$ or worse incurred by OT algorithms.\n\nTo merge concurrent operations, #algname must also transform the indexes of insertions and deletions like in @two-inserts.\nInstead of transforming one operation with respect to one other operation, as in OT, #algname transforms sets of concurrent operations by first building a temporary data structure that reflects all of the operations that have occurred since the last version they had in common, and then using that structure to transform each operation.\nIn fact, we use a CRDT to implement this data structure.\nHowever, unlike existing algorithms, we only invoke the CRDT to perform merges, and we avoid the CRDT overhead whenever operations are not concurrent (which is the common case in most editing workflows).\nMoreover, we use the CRDT only temporarily for merges; we never write CRDT data to disk and never send it over the network.\n\nThe fact that both sequential operations and large merges are fast makes #algname suitable for both real-time collaboration and offline work.\n#algname also assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, #algname's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nIn this paper we focus on collaborative editing of plain text files, although we believe that our approach could be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, etc.\n\nThis paper makes the following contributions:\n\n- TODO\n- We introduce the #algname algorithm.\n- In @benchmarking we evaluate the performance of #algname, comparing it to equivalent CRDT based approaches on file size, CPU time and memory usage in real world editing environments. #algname is usually faster and smaller than equivalent CRDT based approaches in our real world data sets. However, in our testing we have found modern CRDTs outperform #algname in case of extreme concurrency (for example, very complex git editing histories).\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs\n\nWe represent the editing history of a document as an _event graph_: a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert/delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen $a$ is a _parent_ of $b$, we also say $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, and neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by simply taking the union of their sets of events.\nEvents in the graph are immutable; they always represents the operation as originally generated, and not as a result of any transformation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider the event $italic(\"Delete\")(i)$, which deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nHence, for all valid event graphs $G$, we have $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence also be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, a version rarely consists of more than two events in practice.\n\n== Replaying editing history\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nRegardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n#if anonymous {\n  [= The #algname algorithm]\n} else {\n  [= The Event Graph Walker algorithm]\n}\n\n#algname is a collaborative text editing algorithm based on the idea of event graph replay.\nThe algorithm builds on a replication layer that ensures that whenever a replica adds an event to the graph, all non-crashed replicas eventually receive it.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that #algname uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\n#algname can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort. Then each event is transformed so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\n\nIn graphs with concurrent operations there are multiple possible sort orders. #algname guarantees that the final document state is the same, regardless which of these orders is chosen. However, the choice of sort order may affect the performance of the algorithm, as discussed in @complexity.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; #algname either first inserts \"l\" at index 3 and then the exclamation mark at index 5 (like User 1 in @two-inserts), or first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts); the final document state is \"Hello!\" either way.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of #algname <characteristics>\n\n#algname ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of each branch of the editing history in a separate CRDT object.\nThe CRDT for a given branch could translate events from the event graph into the corresponding CRDT operations.\nWhen branches fork, the CRDT object would need to be cloned in memory.\nWhen branches merge, CRDT operations from one branch would be applied to the other branch's CRDT state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nThis approach produces the correct result, but it performs poorly, as we need to store and update a full copy of the CRDT state for every concurrent branch in the event graph.\n\n// (Seph): We have benchmark data for this approach btw.\n\n#algname improves on this approach in two ways:\n\n1. #algname avoids the need to clone and merge multiple CRDT objects. Instead, the algorithm maintains a single data structure that can transform and merge events from multiple branches.\n2. In portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of events), events do not need to be transformed at all, and we can discard all of the internal state accumulated so far.\n\nMoreover, #algname does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state.\nThe event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\n#algname's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis can use significant amounts of memory and can make documents slow to load.\n\nOT algorithms avoid this internal state; similarly to #algname, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both #algname and OT, the editing history/event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms have asymptotically worse performance than #algname in transforming concurrent operations (see @complexity).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas #algname handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of #algname that replays the entire event graph without discarding its internal state along the way. This approach incurs some CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$. We avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in the order that events are visited.\nWhen a node has multiple children in the graph, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be ${e_2}$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ back into the prepare state again. We do this by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$.\nSubsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which the event graph is traversed.\nAny list CRDT could be used for this purpose; the main differences between algorithms are their performance and their interleaving characteristics @fugue.\nOur implementation of #algname uses a variant of the Yjs algorithm @yjs @Nicolaescu2016YATA that we conjecture to be maximally non-interleaving; we leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal #algname state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally the exclamation mark is inserted after the \"y\".\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply.\nIn order to update #algname's internal state, we need to map these indexes to the correct record in the sequence, based on the prepare state $s_p$.\nTo produce the transformed operations, we need to map the positions of these internal records back to indexes again -- this time based on the effect state $s_e$.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow it is easy to find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nThe above process makes $sans(\"apply\")(e_i)$ efficient.\nWe also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"advance\")(e_i)$, which modify the prepare state $s_p$ of the record inserted or deleted by $e_i$.\n// For insert events, we modify the corresponding insert record with an _id_ of $i$, matching the event.\n// And for delete events, we modify the record of the item _deleted by_ the event.\n// Note that the event's index can't be used to locate the item, as the item's absolute position in the sequence may not match the event's index.\nWhile advancing/retreating we cannot look up a target record by its index. Instead, we maintain a second B-tree, mapping from each event's ID to the target record. The mapping stores a value depending on the type of the event:\n\n- For delete events, we store the ID of the character deleted by the event.\n- For insert events, we store a pointer to the leaf node in the first B-tree which contains the corresponding record. When nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\nOn every $sans(\"apply\")(e)$, after updating the sequence as above, we update this mapping based on the event.\nWhen we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nThis map allows us to advance or retreat in logarithmic time.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows #algname to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either in $V$, or an ancestor of some event in $V$, or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nA critical version might not remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\n\nA key insight in the design of #algname is that critical versions partition the event graph into sections that can be processed independently. Events that happened at or before a critical version do not affect how any event after the critical version is transformed. // #footnote[This property holds for our most, but not all text based CRDTs. Notably, this property does not hold for the Peritext CRDT for collaborative rich text editing @Litt2022peritext due to how peritext processes concurrent annotations.]\nThis observation enables two important optimisations:\n\n- Any time the version of the event graph processed so far is critical, we can discard the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway. In this case, the transformed event is identical to the original event, so the event can simply be emitted as-is.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\n\nThe internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new event, replaying the existing events that happened after that critical version, and finally applying the new events.\nEvents from before that critical version are not replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph is replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nLuckily, the exact internal state at $V_\"crit\"$ is not needed. All we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we replay the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we replay them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in second B-tree.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of first B-tree, and at most one traversal of the second B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nWe can also give an upper bound on the complexity of replaying an event graph with $n$ events.\nEach event is applied exactly once, and before each event we retreat or advance each prior event at most once, at $O(log n)$ cost.\nThe worst-case complexity of the algorithm is therefore $O(n^2 log n)$, but this case is unlikely to occur in practice.\n\n== Storing the event graph <storage>\n\nTo store the event graph compactly on disk, we developed a compression technique that takes advantage of how people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\n#algname's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005. We also borrow some bit-packing tricks from the Yjs CRDT library @yjs.\n\nWe first topologically sort the events in the graph. Different replicas may sort the set differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nEach column stores some different fields of the event data. The columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We simply concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and then LZ4-compress this string.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n\n// TODO: the next two paragraphs could be omitted if we're short of space\nWe use several further tricks to reduce file size. For example, we run-length-encode deletions in reverse direction (due to holding down backspace). We express operation indexes relative to the end of the previous event, so that the number fits in fewer bytes. We deduplicate replica IDs, and so on.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using the $(italic(\"replicaID\"), italic(\"seqNo\"))$ event IDs, but otherwise a similar encoding can be used.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n// Benchmarking crimes to avoid https://gernot-heiser.org/benchmarking-crimes.html\n\n// TODO: anonymise the references to repos for the conference submission\n// Can use a service like https://anonymous.4open.science/\n\nIn this work we compare #algname to various CRDT implementations and an OT implementation on 3 criteria:\n\n/ Speed: The time taken to load a document and merge a set of changes from a remote peer.\n/ Memory usage: The amount of RAM used to load a document and merge changes.\n/ Storage size: The number of bytes needed to store or transmit the document's history.\n\nWe have found #algname to perform well on all of these measures. #algname merges complex editing traces at a similar speed as the equivalently constructed CRDT implementation. Peak memory usage (when merging complex changes) is higher than that of an equivalent CRDT, but after merging is complete, any memory used can be once again freed. And our binary encoding of the event graph takes up less space on disk.\n\nDespite #algname merging complex changes at a speed similar to that of a CRDT, the CPU and memory profile of #algname can be quite different:\n\nAt startup time, #algname has no cost on the editing system. The document contents can simply be loaded from disk into memory. The event graph itself can stay on disk. The CRDT implementations we looked at work quite differently. When a document is opened, the CRDT state object is immediately unpacked from disk into a query-optimised data structure. This allows local events to be translated to the CRDT's message format. However, unpacking the CRDT state introduces latency at load time and increases the memory footprint of the process.\n\nWhen concurrent events are merged together, #algname constructs a new CRDT state object from the most recent common version of the merged branches. This state object is used to transform the merged events. After transformation, the state object can be discarded. The CRDT implementations we looked at allocate memory at startup for their CRDT state objects and retain that memory throughout the editing session. #algname does not need memory at startup, but will consume significant amounts of temporary memory when merging complex sets of concurrent changes.\n\nAs a result, #algname allows documents to be loaded from disk and edited much faster than CRDTs allow, and with less resident memory usage. When changes are merged, the CRDT state is only reconstructed back to the common branching point, so merging sequential changes, or recent concurrent changes is consistently fast. The slowest operation #algname encounters is when it merges large, long lived branches together. When this happens, memory usage temporarily spikes as events are loaded from disk, and transformed via a temporary CRDT state object.\n\n// TODO: Move this further down I reckon.\n// CRDTs have extra overhead when a document is loaded because CRDTs require local editing events to be translated into the corresponding CRDT messages before they can be saved to disk or broadcast to remote peers. In order to translate editing events into CRDT messages, a local replica needs to query the current CRDT state object. In the systems we looked at, each time a document is opened, the CRDT state must be unpacked into a query-optimised data structure in RAM before any edits can take place. This introduces noticeable latency at startup time, and\n\n// When necessary, #algname also reconstructs this state. However, #algname only needs to build this state object in memory when merging concurrent changes. And even then, the state is only reconstructed as far back as the most recent common version. Once merging is complete, #algname can immediately discard this state object from memory.\n\n// In our testing we have found the _worst case_ performance for #algname is similar to the _expected_ performance when using a similar CRDT library. The best case performance of #algname is significantly faster than that of an equivalent CRDT.\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto),\n    align: (left, center, center, center),\n    stroke: (x, y) => (\n      left: if x == 1 { 0.4pt } else { none },\n      // right: none,\n      // top: if y == 0 { 0.8pt } else { none },\n      // bottom: none,\n    ),\n    table.hline(stroke: 0.8pt),\n    // table.header([Work performed when \\\\ by], [*OT*], [*#algname*], [*CRDT*]),\n    table.header([],\n      [*OT*],\n      [*CRDT*],\n      [*#algname* (ours)],\n    ),\n    table.hline(stroke: 0.4pt),\n    [Merge time (ms)],\n      [#calc.round(charts.avg_times.ot, digits: 0)],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_times.dt, digits: 1)*],\n    [Load time (ms)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n    [Memory usage (peak MB)],\n      [#calc.round(charts.avg_mem.ot.peak / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)*],\n      [#calc.round(charts.avg_mem.dt.peak / 1e6, digits: 1)],\n    [Memory usage (steady MB)],\n      [*#calc.round(charts.avg_mem.ot.steady_state / 1e6, digits: 2)*],\n      [#calc.round(charts.avg_mem.dtcrdt.steady_state / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dt.steady_state / 1e6, digits: 2)*],\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    Summary of average CPU and memory usage results. This table shows the time taken (in milliseconds) and heap memory used (peak and at quiescence) for our OT, reference CRDT and optimised #algname implementations. In this table we show the mean result across all of our editing traces.\n  ]\n) <work-table>\n\n== Implementations\n\nWe created two implementations of #algname: a reference implementation optimised for simplicity and readability written in Typescript @reference-reg, and a production-ready, performance optimised implementation written in Rust @dt.\nOur reference implementation omits several important optimisations, including internal run-length encoding, B-trees and event graph sorting.\nAll benchmarks in this section use our performance optimised version of #algname.\n\nWe have benchmarked #algname against two popular CRDT libraries: Automerge @automerge and Yjs#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have omitted it from our results.] @yjs. However, these libraries exhibit a large range of performance. In an effort to remove the effect of implementation differences in our results, we have also implemented our own performance-optimised reference CRDT library. This library shares most of its code with our optimised #algname implementation, making for (as much as possible) a like-to-like performance comparison between approaches. Our reference CRDT library outperforms both Yjs and Automerge.\n\nFor comparison, we have also implemented a simple Operational Transform implementation. This OT library batch transforms operations in a given event graph. Intermediate transformed operations are memoized and reused during the graph traversal - which dramatically improves performance but also increases memory usage. This library has not been optimised as thoroughly as the other code.\n\nAll code and data used in our benchmarks is published alongside this article.\nDetails of the hardware and software setup used in our experiments is given in @benchmark-setup.\n\n\n== Editing traces\n\n// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\n\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n#let stats_for(name, type) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Conc*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\"),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\"),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\"),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, in thousands. Each inserted or deleted character counts as 1 event. _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n/ Sequential Traces: (S1, S2, S3): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n/ Concurrent Traces: (C1, C2): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n\n\n== Time taken to load and merge changes\n\n// We have measured the time taken to merge our editing traces into a local, empty document. Once all events were loaded, the document was saved and loaded back.\n\nThe slowest operation a collaborative editing system performs is merging a large set of remote editing events from another peer. All received changes need to be transformed and merged into the active document. @chart-remote shows the time taken by each tested algorithm to merge all changes in our dataset into an empty document. For the CRDT implementations, all events were preprocessed into the appropriate CRDT message format. The time taken to do this is not included in our measurements.\n\nOnce all events were received from a remote peer, the resulting local state was saved to disk and then loaded back into memory. The CRDT implementations execute the same commands to construct a local CRDT object from remote events and from events stored on disk. OT and #algname based systems are able to simply load the resulting text content directly from disk. When using one of these approaches, historical events are only loaded from disk when concurrent branches are merged together.\n\nFor completeness, we also measured the time taken to process local editing events. However, all of the systems we tested can process events many orders of magnitude much faster than any human's typing speed. We have not shown this data as at that speed, the differences between systems are irrelevant.\n\n#figure(\n  text(8pt, [\n    #charts.speed_merge\n    #charts.speed_load\n  ]),\n  caption: [\n    The time taken by each algorithm to merge all editing events, then reload the editing context from disk. Each algorithm received as input the complete set of \"remote events\" (which differed depending on the algorithm) and output the resulting, merged document.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\nThe merge times are interesting for several reasons:\n// And I'm not sure how many of these reasons to include here!\n\n// - #algname and the OT implementation, as expected, added no overhead at all in processing the purely sequential event traces (S1, S2, S3).\n- When merging, there is more difference between different CRDT implementations than there is between #algname and our reference CRDT implementation. When measuring pure performance, implementation quality seems to matter more than algorithm.\n- C1 and C2 hit some pathological case in the automerge library. We have reported this to the package maintainers.\n- As expected, our operational transform implementation performs very well when there is no concurrency. But it scales very poorly as editing traces become more complex. Merging the _A2_ trace took approximately 1 hour - which is 160 000x slower than #algname.\n\n\n== #algname performance and concurrency\n\nIn @chart-remote above, we see that #algname is especially fast on traces that are mostly or entirely sequential (e.g., _A1_ and _S1_, respectively).\nThis is because #algname can clear its internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare #algname's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the time taken to replay all our traces with this optimisation enabled and disabled.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n// TODO: Typst has a bug that is currently labelling this figure with the wrong number!\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the #algname state size while processing the _raw C1_ data set, with and without internal state clearing enabled. Unlike in other tests, for this chart we use the raw (not duplicated) version of the dataset.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Time taken for #algname to replay an event graph, with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _A2_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of #algname is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n\n== RAM usage\n\nIn @chart-memusage we show the memory footprint (retained heap size) of each algorithm. The memory used by #algname and OT is split into peak usage (during merge operations) and the \"steady state\" memory usage, after temporary data is discarded and the system has returned to quiescence.\n\nThe OT implementation used here memoizes intermediate transformed operations to improve performance. However, keeping this the memoized data in memory results in dramatically higher memory usage. At peak this implementation used 6.8GB of RAM to merge the _A2_ editing trace.\n\nThe computer we used for benchmarking had enough RAM to prevent swapping in all cases.\n\n#figure(\n  text(7pt, charts.memusage_all),\n  caption: [\n    RAM used while replaying all editing traces. The #algname and OT algorithms only need additional RAM while merging concurrent changes. Once all changes are merged, only the current document text is retained.\n  ],\n  kind: image,\n  placement: top,\n) <chart-memusage>\n\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled #algname's built-in LZ4 and Automerge's built-in gzip compression. Enabling this compression further reduces the file sizes.\n\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n// (seph): No, that causes problems because of the repeated event graphs. Gzip is (sometimes) clever enough to compact the repeated events - but thats very algorithm dependant.\n\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, #algname has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\n// TODO: Is this worth adding?\n// Note that storing the raw editing trace in this compact form removes one of the principle benefits of #algname, as the event graph must be replayed in order to determine the current document text. To improve load time, the current text content can be cached and stored alongside the event graph on disk. Alternately, the transformed operation positions can also be stored in the file. In our testing, this resulted in a tiny increase in file size while improving load performance by an order of magnitude.\n\nIn contrast, Yjs does not store any deleted characters. This results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using #algname's event graph encoding and Automerge. The raw size shown is the concatenated length of all inserted keystrokes - which acts as a lower bound on the file size in this test.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size. The raw size shown here is the size of the final, stored document. This acts as a lower bound on the file size in all cases.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>\n\n\n\n\n= Related Work <related-work>\n\n#algname is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 present only datatypes such as maps, sets, and registers; #algname adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with #algname: both are based on traversing an event graph, with operations being transformed from the form in which they were originally generated into a form that can be applied in topologically sorted order to obtain the current document state.\nToomim also points out that CRDTs can be used to perform this transformation.\n#algname is a concrete, optimised implementation of the time machine approach; novel contributions of #algname include updating the prepare version by retreating and advancing, as well as the details of partial event graph replay.\n\n#algname can also be regarded as an _operational transformation_ (OT) algorithm @Ellis1989, since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research, tracing back to several seminal papers in the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms follow a pattern of two sub-algorithms: a set of _transformation functions_ that transform one operation with regard to one other, concurrent operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformation functions.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$, as each operation from one branch needs to be transformed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\n#algname departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the theoretical upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding #algname, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\nOther prominent collaborative text editing algorithms belong to the _conflict-free replicated data types_ (CRDTs) family @Shapiro2011, with early examples including RGA @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue being more recent.\nTo our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persisted for the lifetime of the document and sent to all replicas, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead.\nIn contrast, #algname uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\n#algname does need to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT metadata, and it only needs to be memory-resident to handle concurrent operations; most of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 is superficially similar to #algname, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n\nVersion control systems such as Git, as well as differential synchronization @Fraser2009, perform merges by diffing the old and new states on one branch, and applying the diff to the other branch.\nApplying patches relies on heuristics, such as searching for some amount of context before and after the modified text passage, which can apply the patch in the wrong place if the same context exists in multiple locations, and which can fail if the context has concurrently been modified.\nThese approaches therefore generally require manual merge conflict resolution and don't ensure automatic replica convergence.\n\n\n= Conclusion\n\n#algname is a new approach to collaborative text editing that has significant performance advantages over existing OT and CRDT algorithms.\nCompared to CRDTs, it uses less memory, files are smaller and faster to load, and edits from other users are merged much faster in documents with largely sequential editing.\nCompared to OT, large merges (e.g., from users who did a significant amount of work while offline) are much faster, both asymptotically and in practice, and peer-to-peer collaboration is robustly supported.\n\nMoreover, since #algname stores the full keystroke-granularity editing history of a document, it allows applications to show that history to the user, and to restore arbitrary past versions of a document.\nThe only downsides we have found with #algname is that it is more complex to implement, and it is somewhat slower than an optimised CRDT on event graphs with a high degree of concurrency (though easily fast enough for practical use, with merging throughput of over 1 million events/sec).\n\nThe underlying event graph is a straightforward representation of the edits that have occurred, which is easy to replicate over any network, and which is not specific to the #algname algorithm.\nWe therefore expect that the same data format will be able to support future collaborative editing algorithms as well, without requiring the data format to be changed.\nWe also believe that #algname can be extended to other file types such as rich text, graphics, or spreadsheets, and we believe that this is a promising direction for future research in realtime editing.\n\n#if not anonymous [\n  #heading(numbering: none, [Acknowledgements])\n\n  This work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n]\n\n#show bibliography: set text(8pt)\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n\n#counter(heading).update(0)\n#set heading(numbering: \"A\", supplement: \"Appendix\")\n\n/*\n= Generic CRDT to replay algorithm <generic-crdt-replay>\n\nIn this section, we present a generic replay function which matches the behaviour of any CRDT.\n\nThis algorithm is presented in Haskell. In other programming languages, this algorithm would need to actively memoize some function return values to prevent exponential time complexity. In @am-converter we present an equivalent algorithm in Rust, presented using Automerge@automerge to replay sequence editing events - though the algorithm could easily be adapted to use any event source and compatible CRDT.\n\nGiven the CRDT is defined by the following set of methods:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n  ```haskell\n  initialState :: CRDT\n  query :: CRDT -> Doc\n\n  -- Modify a CRDT by applying a local update.\n  update :: (CRDT, (Id, Event)) -> CRDT\n\n  -- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\n  merge :: (CRDT, CRDT) -> CRDT\n\n  mergeAll :: [CRDT] -> CRDT\n  mergeAll crdts = foldl initialState crdts\n  ```\n]\n\nThe replay function then can be defined recursively like this:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n]\n\n// CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n\n*/\n\n= Benchmark Setup <benchmark-setup>\n\nAll benchmarks were run on a Ryzen 7950x CPU running Linux 6.5.0-28 and 64GB of RAM. (Enough to prevent memory swapping in all cases).\n\nRust code was compiled with `rustc v1.77.2` and compiled in release mode with `-C target-cpu=native`. Code is run on a single, pinned core for consistency.\n\nJavascript was run using `nodejs v21.7.0`.\n\nAll time based measurements are based on the mean of at least 100 test iterations except OT running A2. This test was only run for 10 iterations. Error bars are not included above as the standard deviation for all benchmark results was less than 1%.\n\nAll benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n#table(\n  columns: (auto, auto, auto),\n  align: (left, left, right, right, right, right),\n  [*Library*], [*Language*], [*Version / Git Hash*],\n  [Diamond Types (DT / DT-CRDT)], [Rust], [`44a65c44bf`],\n  [Automerge], [Rust], [v 0.5.9],\n  [Yjs], [Javascript], [v 13.6.10],\n  // [JSON-Joy], [Javascript], [`38392b30228a`],\n  // [Cola], [Rust], [v 0.1.1],\n)\n\nCola with cursor optimisation removed is available at `https://github.com/josephg/cola-nocursors/`. //#link(https://github.com/josephg/cola-nocursors/).\n\n// TODO: proofs.\n"],[3286,89548,""],[3286,0,"Existing algorithms fall in two categories: Operational Transformation (OT) algorithms are slow to merge files that have diverged substantially due to offline editing; CRDTs are slow to load and consume a lot of memory.\nWe introduce #algname, a collaboration algorithm for text that avoids these weaknesses.\nCompared to existing CRDTs, it consumes an order of magnitude less memory in the steady state, and loading a document from disk is orders of magnitude faster.\nCompared to OT, merging long-running branches is orders of magnitude faster.\nIn the worst case, the merging performance of #algname is comparable with existing CRDT algorithms.\n#algname can be used everywhere CRDTs are used, including peer-to-peer systems without a central server.\nBy offering performance that is competitive with centralised algorithms, our result paves the way towards the widespread adoption of peer-to-peer collaboration software.\n\n\n= Introduction <introduction>\n\nReal-time collaboration has become an essential feature for many types of software, including document editors such as Google Docs, Microsoft Word, or Overleaf, and graphics software such as Figma.\nIn such software, each user's device locally maintains a copy of the shared file (e.g. in a tab of their web browser).\nA user's edits are immediately applied to their own local copy, without waiting for a network round-trip, so that the user interface is responsive regardless of network latency.\nDifferent users may therefore make edits concurrently, and the software must merge such concurrent edits in a way that preserves the users' intentions, and ensure that all devices converge to the same state.\n\nFor example, in @two-inserts, two users initially have the same document \"Helo\".\nUser 1 inserts a second letter \"l\" at index 3, while concurrently user 2 inserts an exclamation mark at index 4.\nWhen user 2 receives the operation $italic(\"Insert\")(3, \\\"l\\\")$ it can apply it to obtain \"Hello!\", but when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ it cannot apply that operation as-is, since that would result in the state \"Hell!o\", which would be inconsistent with the other user's state and the intended insertion position.\nDue to the concurrent insertion at an earlier index, user 1 must insert the exclamation mark at index 5.\n\n#figure(\n  fletcher.diagram({\n    let (left1, right1, left2, right2, left3, right3) = ((0,2), (2,2), (0,1), (2,1), (0,0), (2,0))\n    node((0,2.4), \"User 1:\")\n    node((2,2.4), \"User 2:\")\n    node(left1, `Helo`)\n    node(left2, `Hello`)\n    node(left3, `Hello!`)\n    node(right1, `Helo`)\n    node(right2, `Helo!`)\n    node(right3, `Hello!`)\n    edge(left1, left2, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: right)\n    edge(right1, right2, $italic(\"Insert\")(4, \\\"!\\\")$, \"->\", label-side: left)\n    edge(left2, left3, $italic(\"Insert\")(5, \\\"!\\\")$, \"->\", label-side: right)\n    edge(right2, right3, $italic(\"Insert\")(3, \\\"l\\\")$, \"->\", label-side: left)\n    edge((0.1,1.5), (1.9,0.5), \"->\", \"dashed\")\n    edge((1.9,1.5), (0.1,0.5), \"->\", \"dashed\")\n  }),\n  placement: top,\n  caption: [Two concurrent insertions into a text document.],\n) <two-inserts>\n\nOne way of solving this problem is to use _Operational Transformation_ (OT): when user 1 receives $italic(\"Insert\")(4, \\\"!\\\")$ that operation is transformed with regard to the concurrent insertion at index 3, which increments the index at which the exclamation mark is inserted.\nOT is an old and widely-used technique: it was introduced in 1989 @Ellis1989, and the OT algorithm Jupiter @Nichols1995 forms the basis of real-time collaboration in Google Docs @DayRichter2010.\n\n// Seph: I'm not sure how much people care about the theoretical complexity of OT this early in the paper. Might be better to ground it in some real world benchmarking.\nOT is simple and fast in the case of @two-inserts, where each user performed only one operation since the last version they had in common.\nIn general, if the users each performed $n$ operations since their last common version, merging their states using OT has a cost of at least $O(n^2)$, since each of one user's operations must be transformed with respect to all of the other user's operations.\nSome OT algorithms have a merge complexity that is cubic or even slower @Li2006 @Roh2011RGA @Sun2020OT.\nThis is acceptable for online collaboration where $n$ is typically small, but if users may edit a document offline or if the software supports explicit branching and merging workflows @Upwelling, an algorithm with complexity $O(n^2)$ can become impracticably slow.\nIn @benchmarking we show a real-life example document that takes one hour to merge using OT.\n\n_Conflict-free Replicated Data Types_ (CRDTs) have been proposed as an alternative to OT.\nThe first CRDT for collaborative text editing appeared in 2006 @Oster2006WOOT, and over a dozen text CRDTs have been published since @crdt-papers.\nThese algorithms work by giving each character a unique identifier, and using those IDs instead of integer indexes to identify the position of insertions and deletions.\nThis avoids having to transform operations, since IDs are not affected by concurrent operations.\nUnfortunately, these IDs need to be held in memory while a document is being edited; even with careful optimisation, this metadata uses more than 10 times more memory than the document text, and makes documents much slower to load from disk.\nSome CRDT algorithms also need to retain IDs of deleted characters (_tombstones_).\n\nIn this paper we propose #if anonymous { algname } else { [_Event Graph Walker_ (#algname)] }, a collaborative editing algorithm that has the strengths of both OT and CRDTs but not their weaknesses.\nLike OT, #algname uses integer indexes to identify insertion and deletion positions, and transforms those indexes to merge concurrent operations.\nWhen two users concurrently perform $n$ operations each, #algname can merge them at a cost of $O(n log n)$, much faster than OT's cost of $O(n^2)$ or worse.\n\n#algname merges concurrent edits using a CRDT algorithm we designed.\nUnlike existing algorithms, we invoke the CRDT only to perform merges of concurrent operations, and we discard its state as soon as the merge is complete.\nWe never write the CRDT state to disk and never send it over the network.\nWhile a document is being edited, we only hold the document text in memory, but no CRDT metadata.\nMost of the time, #algname therefore uses 1–2 orders of magnitude less memory than a CRDT.\nDuring merging, when #algname temporarily uses more memory, its peak memory use is comparable to the best known CRDT implementations.\n\n#algname assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, #algname's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nCollaboration on plain text files is the first application for #algname.\nWe believe that our approach can be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, and more.\nMore generally, #algname provides a framework for efficient coordination-free distributed systems, in which nodes can always make progress independently, but converge eventually @Hellerstein2010.\n\nThis paper makes the following contributions:\n\n- In @algorithm we introduce #algname, a hybrid CRDT/OT algorithm for text that is faster and has a vastly smaller memory footprint than existing CRDTs.\n- Since there is no established benchmark for collaborative text editing, we are also publishing a suite of editing traces of text files for benchmarking. They are derived from real documents and demonstrate various patterns of sequential and concurrent editing.\n- In @benchmarking we use those editing traces to evaluate the performance of our implementation of #algname, comparing it to selected CRDTs and an OT implementation. We measure CPU time to load a document, CPU time to merge edits from a remote replica, memory usage, and file size. #algname improves the state of the art by orders of magnitude in the best cases, and is only slightly slower in the worst cases.\n- We prove the correctness of #algname in @proofs.\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs\n\nWe represent the editing history of a document as an _event graph_: a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert/delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen $a$ is a _parent_ of $b$, we also say $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, and neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by simply taking the union of their sets of events.\nEvents in the graph are immutable; they always represents the operation as originally generated, and not as a result of any transformation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider the event $italic(\"Delete\")(i)$, which deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nHence, for all valid event graphs $G$, we have $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence also be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, a version rarely consists of more than two events in practice.\n\n== Replaying editing history\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nRegardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n#if anonymous {\n  [= The #algname algorithm <algorithm>]\n} else {\n  [= The Event Graph Walker algorithm <algorithm>]\n}\n\n// While OT transforms one operation with respect to one other operation, #algname builds a temporary data structure that reflects the concurrent edits, and uses it to operations efficiently.\n\n#algname is a collaborative text editing algorithm based on the idea of event graph replay.\nThe algorithm builds on a replication layer that ensures that whenever a replica adds an event to the graph, all non-crashed replicas eventually receive it.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that #algname uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\n#algname can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort. Then each event is transformed so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\n\nIn graphs with concurrent operations there are multiple possible sort orders. #algname guarantees that the final document state is the same, regardless which of these orders is chosen. However, the choice of sort order may affect the performance of the algorithm, as discussed in @complexity.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; #algname either first inserts \"l\" at index 3 and then the exclamation mark at index 5 (like User 1 in @two-inserts), or first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts); the final document state is \"Hello!\" either way.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of #algname <characteristics>\n\n#algname ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of each branch of the editing history in a separate CRDT object.\nThe CRDT for a given branch could translate events from the event graph into the corresponding CRDT operations.\nWhen branches fork, the CRDT object would need to be cloned in memory.\nWhen branches merge, CRDT operations from one branch would be applied to the other branch's CRDT state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nThis approach produces the correct result, but it performs poorly, as we need to store and update a full copy of the CRDT state for every concurrent branch in the event graph.\n\n// (Seph): We have benchmark data for this approach btw.\n\n#algname improves on this approach in two ways:\n\n1. #algname avoids the need to clone and merge multiple CRDT objects. Instead, the algorithm maintains a single data structure that can transform and merge events from multiple branches.\n2. In portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of events), events do not need to be transformed at all, and we can discard all of the internal state accumulated so far.\n\nMoreover, #algname does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state.\nThe event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\n#algname's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis can use significant amounts of memory and can make documents slow to load.\n\nOT algorithms avoid this internal state; similarly to #algname, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both #algname and OT, the editing history/event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms have asymptotically worse performance than #algname in transforming concurrent operations (see @complexity).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas #algname handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of #algname that replays the entire event graph without discarding its internal state along the way. This approach incurs some CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$. We avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in the order that events are visited.\nWhen a node has multiple children in the graph, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be ${e_2}$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ back into the prepare state again. We do this by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$.\nSubsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which the event graph is traversed.\nAny list CRDT could be used for this purpose; the main differences between algorithms are their performance and their interleaving characteristics @fugue.\nOur implementation of #algname uses a variant of the Yjs algorithm @yjs @Nicolaescu2016YATA that we conjecture to be maximally non-interleaving; we leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal #algname state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally the exclamation mark is inserted after the \"y\".\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply.\nIn order to update #algname's internal state, we need to map these indexes to the correct record in the sequence, based on the prepare state $s_p$.\nTo produce the transformed operations, we need to map the positions of these internal records back to indexes again -- this time based on the effect state $s_e$.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow it is easy to find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nThe above process makes $sans(\"apply\")(e_i)$ efficient.\nWe also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"advance\")(e_i)$, which modify the prepare state $s_p$ of the record inserted or deleted by $e_i$.\n// For insert events, we modify the corresponding insert record with an _id_ of $i$, matching the event.\n// And for delete events, we modify the record of the item _deleted by_ the event.\n// Note that the event's index can't be used to locate the item, as the item's absolute position in the sequence may not match the event's index.\nWhile advancing/retreating we cannot look up a target record by its index. Instead, we maintain a second B-tree, mapping from each event's ID to the target record. The mapping stores a value depending on the type of the event:\n\n- For delete events, we store the ID of the character deleted by the event.\n- For insert events, we store a pointer to the leaf node in the first B-tree which contains the corresponding record. When nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\nOn every $sans(\"apply\")(e)$, after updating the sequence as above, we update this mapping based on the event.\nWhen we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nThis map allows us to advance or retreat in logarithmic time.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows #algname to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either in $V$, or an ancestor of some event in $V$, or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nA critical version might not remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\n\nA key insight in the design of #algname is that critical versions partition the event graph into sections that can be processed independently. Events that happened at or before a critical version do not affect how any event after the critical version is transformed. // #footnote[This property holds for our most, but not all text based CRDTs. Notably, this property does not hold for the Peritext CRDT for collaborative rich text editing @Litt2022peritext due to how peritext processes concurrent annotations.]\nThis observation enables two important optimisations:\n\n- Any time the version of the event graph processed so far is critical, we can discard the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway. In this case, the transformed event is identical to the original event, so the event can simply be emitted as-is.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\n\nThe internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new event, replaying the existing events that happened after that critical version, and finally applying the new events.\nEvents from before that critical version are not replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph is replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nLuckily, the exact internal state at $V_\"crit\"$ is not needed. All we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we replay the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we replay them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in second B-tree.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of first B-tree, and at most one traversal of the second B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nWe can also give an upper bound on the complexity of replaying an event graph with $n$ events.\nEach event is applied exactly once, and before each event we retreat or advance each prior event at most once, at $O(log n)$ cost.\nThe worst-case complexity of the algorithm is therefore $O(n^2 log n)$, but this case is unlikely to occur in practice.\n\n== Storing the event graph <storage>\n\nTo store the event graph compactly on disk, we developed a compression technique that takes advantage of how people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\n#algname's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005. We also borrow some bit-packing tricks from the Yjs CRDT library @yjs.\n\nWe first topologically sort the events in the graph. Different replicas may sort the set differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nEach column stores some different fields of the event data. The columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We simply concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and then LZ4-compress this string.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n\n// TODO: the next two paragraphs could be omitted if we're short of space\nWe use several further tricks to reduce file size. For example, we run-length-encode deletions in reverse direction (due to holding down backspace). We express operation indexes relative to the end of the previous event, so that the number fits in fewer bytes. We deduplicate replica IDs, and so on.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using the $(italic(\"replicaID\"), italic(\"seqNo\"))$ event IDs, but otherwise a similar encoding can be used.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n// Benchmarking crimes to avoid https://gernot-heiser.org/benchmarking-crimes.html\n\n// TODO: anonymise the references to repos for the conference submission\n// Can use a service like https://anonymous.4open.science/\n\nIn this work we compare #algname to various CRDT implementations and an OT implementation on 3 criteria:\n\n/ Speed: The time taken to load a document and merge a set of changes from a remote peer.\n/ Memory usage: The amount of RAM used to load a document and merge changes.\n/ Storage size: The number of bytes needed to store or transmit the document's history.\n\nWe have found #algname to perform well on all of these measures. #algname merges complex editing traces at a similar speed as the equivalently constructed CRDT implementation. Peak memory usage (when merging complex changes) is higher than that of an equivalent CRDT, but after merging is complete, any memory used can be once again freed. And our binary encoding of the event graph takes up less space on disk.\n\nDespite #algname merging complex changes at a speed similar to that of a CRDT, the CPU and memory profile of #algname can be quite different:\n\nAt startup time, #algname has no cost on the editing system. The document contents can simply be loaded from disk into memory. The event graph itself can stay on disk. The CRDT implementations we looked at work quite differently. When a document is opened, the CRDT state object is immediately unpacked from disk into a query-optimised data structure. This allows local events to be translated to the CRDT's message format. However, unpacking the CRDT state introduces latency at load time and increases the memory footprint of the process.\n\nWhen concurrent events are merged together, #algname constructs a new CRDT state object from the most recent common version of the merged branches. This state object is used to transform the merged events. After transformation, the state object can be discarded. The CRDT implementations we looked at allocate memory at startup for their CRDT state objects and retain that memory throughout the editing session. #algname does not need memory at startup, but will consume significant amounts of temporary memory when merging complex sets of concurrent changes.\n\nAs a result, #algname allows documents to be loaded from disk and edited much faster than CRDTs allow, and with less resident memory usage. When changes are merged, the CRDT state is only reconstructed back to the common branching point, so merging sequential changes, or recent concurrent changes is consistently fast. The slowest operation #algname encounters is when it merges large, long lived branches together. When this happens, memory usage temporarily spikes as events are loaded from disk, and transformed via a temporary CRDT state object.\n\n// TODO: Move this further down I reckon.\n// CRDTs have extra overhead when a document is loaded because CRDTs require local editing events to be translated into the corresponding CRDT messages before they can be saved to disk or broadcast to remote peers. In order to translate editing events into CRDT messages, a local replica needs to query the current CRDT state object. In the systems we looked at, each time a document is opened, the CRDT state must be unpacked into a query-optimised data structure in RAM before any edits can take place. This introduces noticeable latency at startup time, and\n\n// When necessary, #algname also reconstructs this state. However, #algname only needs to build this state object in memory when merging concurrent changes. And even then, the state is only reconstructed as far back as the most recent common version. Once merging is complete, #algname can immediately discard this state object from memory.\n\n// In our testing we have found the _worst case_ performance for #algname is similar to the _expected_ performance when using a similar CRDT library. The best case performance of #algname is significantly faster than that of an equivalent CRDT.\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto),\n    align: (left, center, center, center),\n    stroke: (x, y) => (\n      left: if x == 1 { 0.4pt } else { none },\n      // right: none,\n      // top: if y == 0 { 0.8pt } else { none },\n      // bottom: none,\n    ),\n    table.hline(stroke: 0.8pt),\n    // table.header([Work performed when \\\\ by], [*OT*], [*#algname*], [*CRDT*]),\n    table.header([],\n      [*OT*],\n      [*CRDT*],\n      [*#algname* (ours)],\n    ),\n    table.hline(stroke: 0.4pt),\n    [Merge time (ms)],\n      [#calc.round(charts.avg_times.ot, digits: 0)],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_times.dt, digits: 1)*],\n    [Load time (ms)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n    [Memory usage (peak MB)],\n      [#calc.round(charts.avg_mem.ot.peak / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)*],\n      [#calc.round(charts.avg_mem.dt.peak / 1e6, digits: 1)],\n    [Memory usage (steady MB)],\n      [*#calc.round(charts.avg_mem.ot.steady_state / 1e6, digits: 2)*],\n      [#calc.round(charts.avg_mem.dtcrdt.steady_state / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dt.steady_state / 1e6, digits: 2)*],\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    Summary of average CPU and memory usage results. This table shows the time taken (in milliseconds) and heap memory used (peak and at quiescence) for our OT, reference CRDT and optimised #algname implementations. In this table we show the mean result across all of our editing traces.\n  ]\n) <work-table>\n\n== Implementations\n\nWe created two implementations of #algname: a reference implementation optimised for simplicity and readability written in Typescript @reference-reg, and a production-ready, performance optimised implementation written in Rust @dt.\nOur reference implementation omits several important optimisations, including internal run-length encoding, B-trees and event graph sorting.\nAll benchmarks in this section use our performance optimised version of #algname.\n\nWe have benchmarked #algname against two popular CRDT libraries: Automerge @automerge and Yjs#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have omitted it from our results.] @yjs. However, these libraries exhibit a large range of performance. In an effort to remove the effect of implementation differences in our results, we have also implemented our own performance-optimised reference CRDT library. This library shares most of its code with our optimised #algname implementation, making for (as much as possible) a like-to-like performance comparison between approaches. Our reference CRDT library outperforms both Yjs and Automerge.\n\nFor comparison, we have also implemented a simple Operational Transform implementation. This OT library batch transforms operations in a given event graph. Intermediate transformed operations are memoized and reused during the graph traversal - which dramatically improves performance but also increases memory usage. This library has not been optimised as thoroughly as the other code.\n\nAll code and data used in our benchmarks is published alongside this article.\nDetails of the hardware and software setup used in our experiments is given in @benchmark-setup.\n\n\n== Editing traces\n\n// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\n\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n#let stats_for(name, type) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Conc*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\"),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\"),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\"),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, in thousands. Each inserted or deleted character counts as 1 event. _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n/ Sequential Traces: (S1, S2, S3): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n/ Concurrent Traces: (C1, C2): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n\n\n== Time taken to load and merge changes\n\n// We have measured the time taken to merge our editing traces into a local, empty document. Once all events were loaded, the document was saved and loaded back.\n\nThe slowest operation a collaborative editing system performs is merging a large set of remote editing events from another peer. All received changes need to be transformed and merged into the active document. @chart-remote shows the time taken by each tested algorithm to merge all changes in our dataset into an empty document. For the CRDT implementations, all events were preprocessed into the appropriate CRDT message format. The time taken to do this is not included in our measurements.\n\nOnce all events were received from a remote peer, the resulting local state was saved to disk and then loaded back into memory. The CRDT implementations execute the same commands to construct a local CRDT object from remote events and from events stored on disk. OT and #algname based systems are able to simply load the resulting text content directly from disk. When using one of these approaches, historical events are only loaded from disk when concurrent branches are merged together.\n\nFor completeness, we also measured the time taken to process local editing events. However, all of the systems we tested can process events many orders of magnitude much faster than any human's typing speed. We have not shown this data as at that speed, the differences between systems are irrelevant.\n\n#figure(\n  text(8pt, [\n    #charts.speed_merge\n    #charts.speed_load\n  ]),\n  caption: [\n    The time taken by each algorithm to merge all editing events, then reload the editing context from disk. Each algorithm received as input the complete set of \"remote events\" (which differed depending on the algorithm) and output the resulting, merged document.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\nThe merge times are interesting for several reasons:\n// And I'm not sure how many of these reasons to include here!\n\n// - #algname and the OT implementation, as expected, added no overhead at all in processing the purely sequential event traces (S1, S2, S3).\n- When merging, there is more difference between different CRDT implementations than there is between #algname and our reference CRDT implementation. When measuring pure performance, implementation quality seems to matter more than algorithm.\n- C1 and C2 hit some pathological case in the automerge library. We have reported this to the package maintainers.\n- As expected, our operational transform implementation performs very well when there is no concurrency. But it scales very poorly as editing traces become more complex. Merging the _A2_ trace took approximately 1 hour - which is 160 000x slower than #algname.\n\n\n== #algname performance and concurrency\n\nIn @chart-remote above, we see that #algname is especially fast on traces that are mostly or entirely sequential (e.g., _A1_ and _S1_, respectively).\nThis is because #algname can clear its internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare #algname's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the time taken to replay all our traces with this optimisation enabled and disabled.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n// TODO: Typst has a bug that is currently labelling this figure with the wrong number!\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the #algname state size while processing the _raw C1_ data set, with and without internal state clearing enabled. Unlike in other tests, for this chart we use the raw (not duplicated) version of the dataset.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Time taken for #algname to replay an event graph, with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _A2_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of #algname is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n\n== RAM usage\n\nIn @chart-memusage we show the memory footprint (retained heap size) of each algorithm. The memory used by #algname and OT is split into peak usage (during merge operations) and the \"steady state\" memory usage, after temporary data is discarded and the system has returned to quiescence.\n\nThe OT implementation used here memoizes intermediate transformed operations to improve performance. However, keeping this the memoized data in memory results in dramatically higher memory usage. At peak this implementation used 6.8GB of RAM to merge the _A2_ editing trace.\n\nThe computer we used for benchmarking had enough RAM to prevent swapping in all cases.\n\n#figure(\n  text(7pt, charts.memusage_all),\n  caption: [\n    RAM used while replaying all editing traces. The #algname and OT algorithms only need additional RAM while merging concurrent changes. Once all changes are merged, only the current document text is retained.\n  ],\n  kind: image,\n  placement: top,\n) <chart-memusage>\n\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled #algname's built-in LZ4 and Automerge's built-in gzip compression. Enabling this compression further reduces the file sizes.\n\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n// (seph): No, that causes problems because of the repeated event graphs. Gzip is (sometimes) clever enough to compact the repeated events - but thats very algorithm dependant.\n\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, #algname has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\n// TODO: Is this worth adding?\n// Note that storing the raw editing trace in this compact form removes one of the principle benefits of #algname, as the event graph must be replayed in order to determine the current document text. To improve load time, the current text content can be cached and stored alongside the event graph on disk. Alternately, the transformed operation positions can also be stored in the file. In our testing, this resulted in a tiny increase in file size while improving load performance by an order of magnitude.\n\nIn contrast, Yjs does not store any deleted characters. This results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using #algname's event graph encoding and Automerge. The raw size shown is the concatenated length of all inserted keystrokes - which acts as a lower bound on the file size in this test.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size. The raw size shown here is the size of the final, stored document. This acts as a lower bound on the file size in all cases.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-yjs>\n\n\n\n\n= Related Work <related-work>\n\n#algname is an example of a _pure operation-based CRDT_ @polog, which is a family of algorithms that capture a DAG (or partially ordered log) of operations in the form they were generated, and define the current state as a query over that log.\nHowever, existing publications on pure operation-based CRDTs @Almeida2023 @Bauwens2023 present only datatypes such as maps, sets, and registers; #algname adds a list/text datatype to this family.\n\nMRDTs @Soundarapandian2022 are similarly based on a DAG, and use a three-way merge function to combine two branches since their lowest common ancestor; if the LCA is not unique, a recursive merge is used.\nMRDTs for various datatypes have been defined, but so far none offers text with arbitrary insertion and deletion.\n\nToomim's _time machines_ approach @time-machines shares a conceptual foundation with #algname: both are based on traversing an event graph, with operations being transformed from the form in which they were originally generated into a form that can be applied in topologically sorted order to obtain the current document state.\nToomim also points out that CRDTs can be used to perform this transformation.\n#algname is a concrete, optimised implementation of the time machine approach; novel contributions of #algname include updating the prepare version by retreating and advancing, as well as the details of partial event graph replay.\n\n#algname can also be regarded as an _operational transformation_ (OT) algorithm @Ellis1989, since it takes operations that insert or delete characters at some index, and transforms them into operations that can be applied to the local replica state to have an effect equivalent to the original operation in the state in which it was generated.\nOT has a long lineage of research, tracing back to several seminal papers in the 1990s @Nichols1995 @Ressel1996 @Sun1998.\nTo our knowledge, all existing OT algorithms follow a pattern of two sub-algorithms: a set of _transformation functions_ that transform one operation with regard to one other, concurrent operation, and a _control algorithm_ that traverses an editing history and invokes the necessary transformation functions.\nA problem with this architecture is that when two replicas have diverged and each performed $n$ operations, merging their states unavoidably has a cost of at least $O(n^2)$, as each operation from one branch needs to be transformed with respect to all of the operations on the other branch; in some OT algorithms the cost is cubic or even worse @Li2006 @Roh2011RGA @Sun2020OT.\n#algname departs from the transformation function/control algorithm architecture and instead performs transformations using an internal CRDT state, which reduces the merging cost to $O(n log n)$ in most cases; the theoretical upper bound of $O(n^2 log n)$ is unlikely to occur in practical editing histories.\n\nMoreover, most practical implementations of OT require a central server to impose a total order on operations.\nAlthough it is possible to perform OT in a peer-to-peer context without a central server @Sun2020OT, several early published peer-to-peer OT algorithms later turned out to be flawed @Imine2003 @Oster2006TTF, leaving OT with a reputation of being difficult to reason about @Levien2016.\nWe have not formally evaluated the ease of understanding #algname, but we believe that it is easier to establish the correctness of our approach compared to distributed OT algorithms.\n\nOther prominent collaborative text editing algorithms belong to the _conflict-free replicated data types_ (CRDTs) family @Shapiro2011, with early examples including RGA @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue being more recent.\nTo our knowledge, all existing CRDTs for text work by assigning every character a unique ID, and translating index-based insertions and deletions into ID-based addressing.\nThese unique IDs need to be persisted for the lifetime of the document and sent to all replicas, increasing I/O costs, and they need to be held in memory when a document is being edited, causing memory overhead.\nIn contrast, #algname uses unique IDs only transiently during replay but does not persist or replicate them, and it can free all of its internal state whenever a critical version is reached.\n#algname does need to store the event graph as long as concurrent operations may arrive, but this takes less space than CRDT metadata, and it only needs to be memory-resident to handle concurrent operations; most of the time the event graph can remain on disk.\n\nGu et al.'s _mark & retrace_ method @Gu2005 is superficially similar to #algname, but it differs in several important details: it builds a CRDT-like structure containing the entire editing history, not only the parts being merged, and its ordering of concurrent insertions is prone to interleaving.\n\nVersion control systems such as Git, as well as differential synchronization @Fraser2009, perform merges by diffing the old and new states on one branch, and applying the diff to the other branch.\nApplying patches relies on heuristics, such as searching for some amount of context before and after the modified text passage, which can apply the patch in the wrong place if the same context exists in multiple locations, and which can fail if the context has concurrently been modified.\nThese approaches therefore generally require manual merge conflict resolution and don't ensure automatic replica convergence.\n\n\n= Conclusion\n\n#algname is a new approach to collaborative text editing that has significant performance advantages over existing OT and CRDT algorithms.\nCompared to CRDTs, it uses less memory, files are smaller and faster to load, and edits from other users are merged much faster in documents with largely sequential editing.\nCompared to OT, large merges (e.g., from users who did a significant amount of work while offline) are much faster, both asymptotically and in practice, and peer-to-peer collaboration is robustly supported.\n\nMoreover, since #algname stores the full keystroke-granularity editing history of a document, it allows applications to show that history to the user, and to restore arbitrary past versions of a document.\nThe only downsides we have found with #algname is that it is more complex to implement, and it is somewhat slower than an optimised CRDT on event graphs with a high degree of concurrency (though easily fast enough for practical use, with merging throughput of over 1 million events/sec).\n\nThe underlying event graph is a straightforward representation of the edits that have occurred, which is easy to replicate over any network, and which is not specific to the #algname algorithm.\nWe therefore expect that the same data format will be able to support future collaborative editing algorithms as well, without requiring the data format to be changed.\nWe also believe that #algname can be extended to other file types such as rich text, graphics, or spreadsheets, and we believe that this is a promising direction for future research in realtime editing.\n\n#if not anonymous [\n  #heading(numbering: none, [Acknowledgements])\n\n  This work was made possible by the generous support from Michael Toomim, the Braid community and the Invisible College. None of this would have been possible without financial support and the endless conversations we have shared about collaborative editing.\n  Thank you to Matthew Weidner and Joe Hellerstein for feedback on a draft of this paper.\n]\n\n#show bibliography: set text(8pt)\n#bibliography((\"works.yml\", \"works.bib\"),\n  title: \"References\",\n  style: \"association-for-computing-machinery\"\n)\n\n#counter(heading).update(0)\n#set heading(numbering: \"A\", supplement: \"Appendix\")\n\n/*\n= Generic CRDT to replay algorithm <generic-crdt-replay>\n\nIn this section, we present a generic replay function which matches the behaviour of any CRDT.\n\nThis algorithm is presented in Haskell. In other programming languages, this algorithm would need to actively memoize some function return values to prevent exponential time complexity. In @am-converter we present an equivalent algorithm in Rust, presented using Automerge@automerge to replay sequence editing events - though the algorithm could easily be adapted to use any event source and compatible CRDT.\n\nGiven the CRDT is defined by the following set of methods:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n  ```haskell\n  initialState :: CRDT\n  query :: CRDT -> Doc\n\n  -- Modify a CRDT by applying a local update.\n  update :: (CRDT, (Id, Event)) -> CRDT\n\n  -- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\n  merge :: (CRDT, CRDT) -> CRDT\n\n  mergeAll :: [CRDT] -> CRDT\n  mergeAll crdts = foldl initialState crdts\n  ```\n]\n\nThe replay function then can be defined recursively like this:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n]\n\n// CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n\n*/\n\n= Benchmark Setup <benchmark-setup>\n\nAll benchmarks were run on a Ryzen 7950x CPU running Linux 6.5.0-28 and 64GB of RAM. (Enough to prevent memory swapping in all cases).\n\nRust code was compiled with `rustc v1.77.2` and compiled in release mode with `-C target-cpu=native`. Code is run on a single, pinned core for consistency.\n\nJavascript was run using `nodejs v21.7.0`.\n\nAll time based measurements are based on the mean of at least 100 test iterations except OT running A2. This test was only run for 10 iterations. Error bars are not included above as the standard deviation for all benchmark results was less than 1%.\n\nAll benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n#table(\n  columns: (auto, auto, auto),\n  align: (left, left, right, right, right, right),\n  [*Library*], [*Language*], [*Version / Git Hash*],\n  [Diamond Types (DT / DT-CRDT)], [Rust], [`44a65c44bf`],\n  [Automerge], [Rust], [v 0.5.9],\n  [Yjs], [Javascript], [v 13.6.10],\n  // [JSON-Joy], [Javascript], [`38392b30228a`],\n  // [Cola], [Rust], [v 0.1.1],\n)\n\nCola with cursor optimisation removed is available at `https://github.com/josephg/cola-nocursors/`. //#link(https://github.com/josephg/cola-nocursors/).\n\n= Proof of Correctness <proofs>\n\nTODO\n\n"],[39267,0,"// TODO: can use RGA/YATA but not any CRDT\n"],[39267,43,""],[8433,73394,""],[8433,0,"Unfortunately, these IDs need to be held in memory while a document is being edited.\nEven with careful optimisation, this metadata uses more than 10 times as much memory as the document text, and makes documents much slower to load from disk.\nSome CRDT algorithms also need to retain IDs of deleted characters (_tombstones_).\n\nIn this paper we propose #if anonymous { algname } else { [_Event Graph Walker_ (#algname)] }, a collaborative editing algorithm that has the strengths of both OT and CRDTs but not their weaknesses.\nLike OT, #algname uses integer indexes to identify insertion and deletion positions, and transforms those indexes to merge concurrent operations.\nWhen two users concurrently perform $n$ operations each, #algname can merge them at a cost of $O(n log n)$, much faster than OT's cost of $O(n^2)$ or worse.\n\n#algname merges concurrent edits using a CRDT algorithm we designed.\nUnlike existing algorithms, we invoke the CRDT only to perform merges of concurrent operations, and we discard its state as soon as the merge is complete.\nWe never write the CRDT state to disk and never send it over the network.\nWhile a document is being edited, we only hold the document text in memory, but no CRDT metadata.\nMost of the time, #algname therefore uses 1–2 orders of magnitude less memory than a CRDT.\nDuring merging, when #algname temporarily uses more memory, its peak memory use is comparable to the best known CRDT implementations.\n\n#algname assumes no central server, so it can be used over a peer-to-peer network.\nAlthough all existing CRDTs and a few OT algorithms can be used peer-to-peer, most of them have poor performance compared to the centralised OT used in production software such as Google Docs.\nIn contrast, #algname's performance matches or surpasses that of centralised algorithms.\nIt therefore paves the way towards the widespread adoption of peer-to-peer collaboration software, and perhaps overcoming the dominance of centralised cloud software that exists in the market today.\n\nCollaboration on plain text files is the first application for #algname.\nWe believe that our approach can be generalised to other file types such as rich text, spreadsheets, graphics, presentations, CAD drawings, and more.\nMore generally, #algname provides a framework for efficient coordination-free distributed systems, in which nodes can always make progress independently, but converge eventually @Hellerstein2010.\n\nThis paper makes the following contributions:\n\n- In @algorithm we introduce #algname, a hybrid CRDT/OT algorithm for text that is faster and has a vastly smaller memory footprint than existing CRDTs.\n- Since there is no established benchmark for collaborative text editing, we are also publishing a suite of editing traces of text files for benchmarking. They are derived from real documents and demonstrate various patterns of sequential and concurrent editing.\n- In @benchmarking we use those editing traces to evaluate the performance of our implementation of #algname, comparing it to selected CRDTs and an OT implementation. We measure CPU time to load a document, CPU time to merge edits from a remote replica, memory usage, and file size. #algname improves the state of the art by orders of magnitude in the best cases, and is only slightly slower in the worst cases.\n- We prove the correctness of #algname in @proofs. // TODO!\n\n= Background\n\nWe consider a collaborative plain text editor whose state is a linear sequence of characters, which may be edited by inserting or deleting characters at any position.\nSuch an edit is captured as an _operation_; we use the notation $italic(\"Insert\")(i, c)$ to denote an operation that inserts character $c$ at index $i$, and $italic(\"Delete\")(i)$ deletes the character at index $i$ (indexes are zero-based).\nOur implementation compresses runs of consecutive insertions or deletions, but for simplicity we describe the algorithm in terms of single-character operations.\n\n== System model\n\nEach device on which a user edits a document is a _replica_, and each replica stores its full editing history.\nWhen a user makes an insertion or deletion, that operation is immediately applied to the user's local replica, and then asynchronously sent over the network to any other replicas that have a copy of the same document.\nUsers can also edit their local copy while offline; the corresponding operations are then enqueued and sent when the device is next online.\n\nOur algorithm makes no assumptions about the underlying network via which operations are replicated: any reliable broadcast protocol (which detects and retransmits lost messages) is sufficient.\nFor example, a relay server could store and forward messages from one replica to the others, or replicas could use a peer-to-peer gossip protocol.\nWe make no timing assumptions and can tolerate arbitrary network delay, but we assume replicas are non-Byzantine.\n\nA key property that the collaboration algorithm must satisfy is _convergence_: any two replicas that have seen the same set of operations must be in the same document state (i.e., a text consisting of the same sequence of characters), even if the operations arrived in a different order at each replica.\nIf the underlying broadcast protocol ensures that every non-crashed replica eventually receives every operation, the algorithm achieves _strong eventual consistency_ @Shapiro2011.\n\n== Event graphs\n\nWe represent the editing history of a document as an _event graph_: a directed acyclic graph (DAG) in which every node is an _event_ consisting of an operation (insert/delete a character), a unique ID, and a set of IDs of its _parent nodes_.\nWhen $a$ is a _parent_ of $b$, we also say $b$ is a _child_ of $a$, and the graph contains an edge from $a$ to $b$.\nWe construct events such that the graph is transitively reduced (i.e., it contains no redundant edges).\nWhen there is a directed path from $a$ to $b$ we say that $a$ _happened before_ $b$, and write $a -> b$ as per Lamport @Lamport1978.\nThe $->$ relation is a strict partial order.\nWe say that events $a$ and $b$ are _concurrent_, written $a parallel b$, if both events are in the graph, $a eq.not b$, and neither happened before the other: $a arrow.r.not b and b arrow.r.not a$.\n\nThe _frontier_ is the set of events with no children.\nWhenever a user performs an operation, a new event containing that operation is added to the graph, and the previous frontier in the replica's local copy of the graph becomes the new event's parents.\nThe new event and its parent edges are then replicated over the network, and each replica adds them to its copy of the graph.\nIf any parent events are missing, the replica waits for them to arrive before adding them to the graph; the result is a simple causal broadcast protocol @Birman1991 @Cachin2011.\nTwo replicas can merge their event graphs by simply taking the union of their sets of events.\nEvents in the graph are immutable; they always represents the operation as originally generated, and not as a result of any transformation.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (char1, char2, char3, char4, char5, char6) = ((0,2), (0,1.5), (0,1), (0,0.5), (-0.5,0), (0.5,0))\n    node(char1, $e_1: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(char2, $e_2: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(char3, $e_3: italic(\"Insert\")(2, \\\"l\\\")$)\n    node(char4, $e_4: italic(\"Insert\")(3, \\\"o\\\")$)\n    node(char5, $e_5: italic(\"Insert\")(3, \\\"l\\\")$)\n    node(char6, $e_6: italic(\"Insert\")(4, \\\"!\\\")$)\n    edge(char1, char2, \"-|>\")\n    edge(char2, char3, \"-|>\")\n    edge(char3, char4, \"-|>\")\n    edge(char4, char5, \"-|>\")\n    edge(char4, char6, \"-|>\")\n  }),\n  placement: top,\n  caption: [The event graph corresponding to @two-inserts.],\n) <graph-example>\n\nFor example, @graph-example shows the event graph corresponding to @two-inserts.\nThe events $e_5$ and $e_6$ are concurrent, and the frontier of this graph is the set of events ${e_5, e_6}$.\n\nThe event graph for a substantial document, such as a research paper, may contain hundreds of thousands of events.\nIt can nevertheless be stored in a very compact form by exploiting the typical editing patterns of humans writing text: characters tend to be inserted or deleted in consecutive runs.\nMany portions of a typical event graph are linear, with each event having one parent and one child.\nWe describe the storage format in more detail in @storage.\n\n== Document versions <versions>\n\nLet $G$ be an event graph, represented as a set of events.\nDue to convergence, any two replicas that have the same set of events must be in the same state.\nTherefore, the document state (sequence of characters) resulting from $G$ must be $sans(\"replay\")(G)$, where $sans(\"replay\")$ is some pure (deterministic and non-mutating) function.\nIn principle, any pure function of the set of events results in convergence, although a $sans(\"replay\")$ function that is useful for text editing must satisfy additional criteria (see @characteristics).\n\nConsider the event $italic(\"Delete\")(i)$, which deletes the character at position $i$ in the document. In order to correctly interpret this event, we need to determine which character was at index $i$ at the time when the operation was generated.\n\nMore generally, let $e_i$ be some event. The document state when $e_i$ was generated must be $sans(\"replay\")(G_i)$, where $G_i$ is the set of events that were known to the generating replica at the time when $e_i$ was generated (not including $e_i$ itself).\nBy definition, the parents of $e_i$ are the frontier of $G_i$, and thus $G_i$ is the set of all events that happened before $e_i$, i.e., $e_i$'s parents and all of their ancestors.\nTherefore, the parents of $e_i$ unambiguously define the document state in which $e_i$ must be interpreted.\n\nTo formalise this, given an event graph (set of events) $G$, we define the _version_ of $G$ to be its frontier set:\n\n$ sans(\"Version\")(G) = {e_1 in G | exists.not e_2 in G: e_1 -> e_2} $\n\nGiven some version $V$, the corresponding set of events can be reconstructed as follows:\n\n$ sans(\"Events\")(V) = V union {e_1 | exists e_2 in V : e_1 -> e_2} $\n\nSince an event graph grows only by adding events that are concurrent to or children of existing events (we never change the parents of an existing event), there is a one-to-one correspondence between an event graph and its version.\nHence, for all valid event graphs $G$, we have $sans(\"Events\")(sans(\"Version\")(G)) = G$.\n\nThe set of parents of an event in the graph is the version of the document in which that operation must be interpreted.\nThe version can hence also be seen as a _logical clock_, describing the point in time at which a replica knows about the exact set of events in $G$.\nEven if the event graph is large, a version rarely consists of more than two events in practice.\n\n== Replaying editing history\n\nCollaborative editing algorithms are usually defined in terms of sending and receiving messages over a network.\nThe abstraction of an event graph allows us to reframe these algorithms in a simpler way: a collaborative text editing algorithm is a pure function $sans(\"replay\")(G)$ of an event graph $G$.\nThis function can use the parent-child relationships to partially order events, but concurrent events could be processed in any order.\nThis allows us to separate the process of replicating the event graph from the algorithm that ensures convergence.\nIn fact, this is how _pure operation-based CRDTs_ @polog are formulated, as discussed in @related-work.\n\nIn addition to determining the document state from an entire event graph, we need an _incremental update_ function.\nSay we have an existing event graph $G$ and corresponding document state $italic(\"doc\") = sans(\"replay\")(G)$. Then an event $e$ from a remote replica is added to the graph.\nWe could rerun the function to obtain $italic(\"doc\")' = sans(\"replay\")(G union {e})$, but it would be inefficient to process the entire graph again.\nInstead, we need to efficiently compute the operation to apply to $italic(\"doc\")$ in order to obtain $italic(\"doc\")'$.\nFor text documents, this incremental update is also described as an insertion or deletion at a particular index; however, the index may differ from that in the original event due to the effects of concurrent operations, and a deletion may turn into a no-op if the same character has also been deleted by a concurrent operation.\n\nBoth OT and CRDT algorithms focus on this incremental update.\nIf none of the events in $G$ are concurrent with $e$, OT is straightforward: the incremental update is identical to the operation in $e$, as no transformation takes place.\nIf there is concurrency, OT must transform each new event with regard to each existing event that is concurrent to it.\n\nIn CRDTs, each event is first translated into operations that use unique IDs instead of indexes, and then these operations are applied to a data structure that reflects all of the operations seen so far (both concurrent operations and those that happened before).\nIn order to update the text editor, these updates to the CRDT's internal structure need to be translated back into index-based insertions and deletions.\nMany CRDT papers elide this translation from unique IDs back to indexes, but it is important for practical applications. // - such as updating specialised buffers inside text editors, and updating user cursor positions.\n\n// Seph: If we want to cut down on the length of the paper, we could probably remove this.\n\n// - Text editors use specialised data structures such as piece trees @vscode-buffer to efficiently edit large documents, and integrating with these structures requires index-based operations. Incrementally updating these structures also enables syntax highlighting without having to repeatedly parse the whole file on every keystroke.\n// - The user's cursor position in a document can be represented as an index; if another user changes text earlier in the document, index-based operations make it easy to update the cursor so that it remains in the correct position relative to the surrounding text.\n\nRegardless of whether the OT or the CRDT approach is used, a collaborative editing algorithm can be boiled down to an incremental update to an event graph: given an event to be added to an existing event graph, return the (index-based) operation that must be applied to the current document state so that the resulting document is identical to replaying the entire event graph including the new event.\n\n// (seph): ^-- this is a very bold statement.\n\n#if anonymous {\n  [= The #algname algorithm <algorithm>]\n} else {\n  [= The Event Graph Walker algorithm <algorithm>]\n}\n\n// While OT transforms one operation with respect to one other operation, #algname builds a temporary data structure that reflects the concurrent edits, and uses it to operations efficiently.\n\n#algname is a collaborative text editing algorithm based on the idea of event graph replay.\nThe algorithm builds on a replication layer that ensures that whenever a replica adds an event to the graph, all non-crashed replicas eventually receive it.\nThe state of each replica consists of three parts:\n\n1. *Event graph:* Each replica stores a copy of the event graph on disk, in a format described in @storage.\n2. *Document state:* The current sequence of characters in the document with no further metadata. On disk this is simply a plain text file; in memory it may be represented as a rope @Boehm1995, piece table @vscode-buffer, or similar structure to support efficient insertions and deletions.\n3. *Internal state:* A temporary CRDT structure that #algname uses to merge concurrent edits. It is not persisted or replicated, and it is discarded when the algorithm finishes running.\n\n#algname can reconstruct the document state by replaying the entire event graph.\nIt first performs a topological sort, as illustrated in @topological-sort. Then each event is transformed so that the transformed insertions and deletions can be applied in topologically sorted order, starting with an empty document, to obtain the document state.\nIn Git parlance, this process \"rebases\" a DAG of operations into a linear operation history with the same effect.\nThe input of the algorithm is the event graph, and the output is this topologically sorted sequence of transformed operations.\n\nIn graphs with concurrent operations there are multiple possible sort orders. #algname guarantees that the final document state is the same, regardless which of these orders is chosen. However, the choice of sort order may affect the performance of the algorithm, as discussed in @complexity.\n\n#figure(\n  fletcher.diagram(node-inset: 2pt, node-stroke: black, node-fill: black, {\n    let (a1, a2, a3, a4, a5, a6) = ((0,2), (0,1.5), (0,1), (0,0.5), (0,0), (0,-0.5))\n    let (b1, b2, b3, b4) = ((1,1.5), (1,1), (1,0.5), (1,0))\n    let (c1, c2, c3) = ((-1,1), (-1,0.5), (-1,0))\n    let (x1, x2, x3, x4, x5, x6, x7) = ((4,2), (4,1.5), (4,1), (4,0.5), (4,0), (4,-0.5), (4,-1))\n    let (x8, x9, x10, x11, x12, x13) = ((5,2), (5,1.5), (5,1), (5,0.5), (5,0), (5,-0.5))\n    node(a1, text(0.1em, $a$))\n    node(a2, text(0.1em, $a$))\n    node(a3, text(0.1em, $a$))\n    node(a4, text(0.1em, $a$))\n    node(a5, text(0.1em, $a$))\n    node(a6, text(0.1em, $a$))\n    node(b1, text(0.1em, $a$))\n    node(b2, text(0.1em, $a$))\n    node(b3, text(0.1em, $a$))\n    node(b4, text(0.1em, $a$))\n    node(c1, text(0.1em, $a$))\n    node(c2, text(0.1em, $a$))\n    node(c3, text(0.1em, $a$))\n    node(x1, text(0.1em, $a$))\n    node(x2, text(0.1em, $a$))\n    node(x3, text(0.1em, $a$))\n    node(x4, text(0.1em, $a$))\n    node(x5, text(0.1em, $a$))\n    node(x6, text(0.1em, $a$))\n    node(x7, text(0.1em, $a$))\n    node(x8, text(0.1em, $a$))\n    node(x9, text(0.1em, $a$))\n    node(x10, text(0.1em, $a$))\n    node(x11, text(0.1em, $a$))\n    node(x12, text(0.1em, $a$))\n    node(x13, text(0.1em, $a$))\n    edge(a1, a2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(a2, a3, $e_\"A2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(a3, a4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(a4, a5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(a5, a6, $e_\"A5\"$, \"-|>\", label-pos: 0)\n    edge(a5, (0,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n    edge(b1, b2, $e_\"B1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b2, b3, $e_\"B2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, b4, $e_\"B3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(b3, (1,-0.05), $e_\"B4\"$, label-pos: 1, label-side: left)\n    edge(c1, c2, $e_\"C1\"$, \"-|>\", label-pos: 0)\n    edge(c2, c3, $e_\"C2\"$, \"-|>\", label-pos: 0)\n    edge(c2, (-1,-0.05), $e_\"C3\"$, label-pos: 1)\n    edge(a1, b1, \"-|>\", bend: +20deg)\n    edge(a3, b3, \"-|>\")\n    edge(b2, a5, \"-|>\")\n    edge(a2, c1, \"-|>\", bend: -20deg)\n    edge(c3, a6, \"-|>\")\n    edge(x1, x2, $e_\"A1\"$, \"-|>\", label-pos: 0)\n    edge(x2, x3, $e_\"A2\"$, \"-|>\", label-pos: 0)\n    edge(x3, x4, $e_\"A3\"$, \"-|>\", label-pos: 0)\n    edge(x4, x5, $e_\"A4\"$, \"-|>\", label-pos: 0)\n    edge(x5, x6, $e_\"B1\"$, \"-|>\", label-pos: 0)\n    edge(x6, x7, $e_\"B2\"$, \"-|>\", label-pos: 0)\n    edge(x6, (4,-1.05), $e_\"B3\"$, label-pos: 1)\n    edge(x7, x8, \"-|>\")\n    edge(x8, x9, $e_\"B4\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x9, x10, $e_\"C1\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x10, x11, $e_\"C2\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x11, x12, $e_\"C3\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, x13, $e_\"A5\"$, \"-|>\", label-pos: 0, label-side: left)\n    edge(x12, (5,-0.55), $e_\"A6\"$, label-pos: 1, label-side: left)\n  }),\n  placement: top,\n  caption: [An event graph (left) and one possible topologically sorted order of that graph (right).],\n) <topological-sort>\n\nFor example, the graph in @graph-example has two possible sort orders; #algname either first inserts \"l\" at index 3 and then the exclamation mark at index 5 (like User 1 in @two-inserts), or first inserts \"!\" at index 4 followed by \"l\" at index 3 (like User 2 in @two-inserts); the final document state is \"Hello!\" either way.\n\nEvent graph replay easily extends to incremental updates for real-time collaboration: when a new event is added to the graph, it becomes the next element of the topologically sorted sequence.\nWe can transform each new event in the same way as during replay, and apply the transformed operation to the current document state.\n\n== Characteristics of #algname <characteristics>\n\n#algname ensures that the resulting document state is consistent with Attiya et al.'s _strong list specification_ @Attiya2016 (in essence, replicas converge to the same state and apply operations in the right place), and it is _maximally non-interleaving_ @fugue (i.e., concurrent sequences of insertions at the same position are placed one after another, and not interleaved).\n\nOne way of achieving this goal would be to track the state of each branch of the editing history in a separate CRDT object.\nThe CRDT for a given branch could translate events from the event graph into the corresponding CRDT operations.\nWhen branches fork, the CRDT object would need to be cloned in memory.\nWhen branches merge, CRDT operations from one branch would be applied to the other branch's CRDT state.\nEssentially, this approach simulates a network of communicating CRDT replicas and their states.\nThis approach produces the correct result, but it performs poorly, as we need to store and update a full copy of the CRDT state for every concurrent branch in the event graph.\n\n// (Seph): We have benchmark data for this approach btw.\n\n#algname improves on this approach in two ways:\n\n1. #algname avoids the need to clone and merge multiple CRDT objects. Instead, the algorithm maintains a single data structure that can transform and merge events from multiple branches.\n2. In portions of the event graph that have no concurrency (which, in many editing histories, is the vast majority of events), events do not need to be transformed at all, and we can discard all of the internal state accumulated so far.\n\nMoreover, #algname does not need the event graph and the internal state when generating new events, or when adding an event to the graph that happened after all existing events.\nMost of the time, we only need the current document state.\nThe event graph can remain on disk without using any space in memory or any CPU time.\nThe event graph is only required when handling concurrency, and even then we only have to replay the portion of the graph since the last ancestor that the concurrent operations had in common.\n\n#algname's approach contrasts with existing CRDTs, which require every replica to persist the internal state (including the unique ID for each character) and send it over the network, and which require that state to be loaded into memory in order to both generate and receive operations, even when there is no concurrency.\nThis can use significant amounts of memory and can make documents slow to load.\n\nOT algorithms avoid this internal state; similarly to #algname, they only need to persist the latest document state and the history of operations that are concurrent to operations that may arrive in the future.\nIn both #algname and OT, the editing history/event graph can be discarded if we know that no event we may receive in the future will be concurrent with any existing event.\nHowever, OT algorithms have asymptotically worse performance than #algname in transforming concurrent operations (see @complexity).\nSome OT algorithms are only able to handle restricted forms of event graphs, whereas #algname handles arbitrary DAGs.\n\n== Walking the event graph <graph-walk>\n\nFor the sake of clarity we first explain a simplified version of #algname that replays the entire event graph without discarding its internal state along the way. This approach incurs some CRDT overhead even for non-concurrent operations.\nIn @partial-replay we show how the algorithm can be optimised to replay only a part of the event graph.\n\nFirst, we topologically sort the event graph in a way that keeps events on the same branch consecutive as much as possible: for example, in @topological-sort we first visit $e_\"A1\" ... e_\"A4\"$, then $e_\"B1\" ... e_\"B4\"$. We avoid alternating between branches, such as $e_\"A1\", e_\"B1\", e_\"A2\", e_\"B2\" ...$, even though that would also be a valid topological sort.\nFor this we use a standard textbook algorithm @CLRS2009: perform a depth-first traversal starting from the oldest event, and build up the topologically sorted list in the order that events are visited.\nWhen a node has multiple children in the graph, we choose their order based on a heuristic so that branches with fewer events tend to appear before branches with more events in the sorted order; this can improve performance but is not essential.\nWe estimate the size of a branch by counting the number of events that happened after each event.\n\nThe algorithm then processes the events one at a time in topologically sorted order, updating the internal state and outputting a transformed operation for each event.\nThe internal state simultaneously captures the document at two versions: the version in which an event was generated (which we call the _prepare_ version), and the version in which all events seen so far have been applied (which we call the _effect_ version).\nIf the prepare and effect versions are the same, the transformed operation is identical to the original one.\nIn general, the prepare version represents a subset of the events of the effect version.\n// Due to the topological sorting it is not possible for the prepare version to be later than the effect version.\n\nThe internal state can be updated with three methods, each of which takes an event as argument:\n\n- $sans(\"apply\")(e)$ updates the prepare version and the effect version to include $e$, assuming that the current prepare version equals $e.italic(\"parents\")$, and that $e$ has not yet been applied. This method interprets $e$ in the context of the prepare version, and outputs the operation representing how the effect version has been updated.\n- $sans(\"retreat\")(e)$ updates the prepare version to remove $e$, assuming the prepare version previously included $e$.\n- $sans(\"advance\")(e)$ updates the prepare version to add $e$, assuming that the prepare version previously did not include $e$, but the effect version did.\n\n#figure(\n  fletcher.diagram(node-inset: 6pt, node-defocus: 0, {\n    let (e1, e2, e3, e4, e5, e6, e7, e8) = ((0.5,2.5), (0.5,2), (0,1.5), (0,1), (1,1.5), (1,1), (1,0.5), (0.5,0))\n    node(e1, $e_1: italic(\"Insert\")(0, \\\"h\\\")$)\n    node(e2, $e_2: italic(\"Insert\")(1, \\\"i\\\")$)\n    node(e3, $e_3: italic(\"Insert\")(0, \\\"H\\\")$)\n    node(e4, $e_4: italic(\"Delete\")(1)$)\n    node(e5, $e_5: italic(\"Delete\")(1)$)\n    node(e6, $e_6: italic(\"Insert\")(1, \\\"e\\\")$)\n    node(e7, $e_7: italic(\"Insert\")(2, \\\"y\\\")$)\n    node(e8, $e_8: italic(\"Insert\")(3, \\\"!\\\")$)\n    edge(e1, e2, \"-|>\")\n    edge(e2, e3, \"-|>\")\n    edge(e3, e4, \"-|>\")\n    edge(e2, e5, \"-|>\")\n    edge(e5, e6, \"-|>\")\n    edge(e6, e7, \"-|>\")\n    edge(e7, e8, \"-|>\")\n    edge(e4, e8, \"-|>\")\n  }),\n  placement: top,\n  caption: [An event graph. Starting with document \"hi\", one user changes \"hi\" to \"hey\", while concurrently another user capitalises the \"H\". After merging to the state \"Hey\", one of them appends an exclamation mark to produce \"Hey!\".],\n) <graph-hi-hey>\n\nThe effect version only moves forwards in time (through $sans(\"apply\")$), whereas the prepare version can move both forwards and backwards.\nConsider the example in @graph-hi-hey, and assume that the events $e_1 ... e_8$ are traversed in order of their subscript.\nThese events can be processed as follows:\n\n1. Start in the empty state, and then call $sans(\"apply\")(e_1)$, $sans(\"apply\")(e_2)$, $sans(\"apply\")(e_3)$, and $sans(\"apply\")(e_4)$. This is valid because each event's parent version is the set of all events processed so far.\n2. Before we can apply $e_5$ we must rewind the prepare version to be ${e_2}$, which is the parent of $e_5$. We can do this by calling $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$.\n3. Now we can call $sans(\"apply\")(e_5)$, $sans(\"apply\")(e_6)$, and $sans(\"apply\")(e_7)$.\n4. The parents of $e_8$ are ${e_4, e_7}$; before we can apply $e_8$ we must therefore add $e_3$ and $e_4$ back into the prepare state again. We do this by calling $sans(\"advance\")(e_3)$ and $sans(\"advance\")(e_4)$.\n5. Finally, we can call $sans(\"apply\")(e_8)$.\n\nIn complex event graphs such as the one in @topological-sort the same event may have to be retreated and advanced several times, but we can process arbitrary DAGs this way.\nIn general, before applying the next event $e$ in topologically sorted order, compute $G_\"old\" = sans(\"Events\")(V_p)$ where $V_p$ is the current prepare version, and $G_\"new\" = sans(\"Events\")(e.italic(\"parents\"))$.\nWe then call $sans(\"retreat\")$ on each event in $G_\"old\" - G_\"new\"$ (in reverse topological sort order), and call $sans(\"advance\")$ on each event in $G_\"new\" - G_\"old\"$ (in topological sort order) before calling $sans(\"apply\")(e)$.\n\nThe following algorithm efficiently computes the events to retreat and advance when moving the prepare version from $V_p$ to $V'_p$.\nFor each event in $V_p$ and $V'_p$ we insert the index of that event in the topological sort order into a priority queue, along with a tag indicating whether the event is in the old or the new prepare version.\nWe then repeatedly pop the event with the greatest index off the priority queue, and enqueue the indexes of its parents along with the same tag.\nWe stop the traversal when all entries in the priority queue are common ancestors of both $V_p$ and $V'_p$.\nAny events that were traversed from only one of the versions need to be retreated or advanced respectively.\n\n== Representing prepare and effect versions <prepare-effect-versions>\n\nThe internal state implements the $sans(\"apply\")$, $sans(\"retreat\")$, and $sans(\"advance\")$ methods by maintaining a CRDT data structure.\nThis structure consists of a linear sequence of records, one per character in the document, including tombstones for deleted characters.\nRuns of characters with consecutive IDs and the same properties can be run-length encoded to save memory.\nA record is inserted into this sequence by $sans(\"apply\")(e_i)$ for an insertion event $e_i$.\nSubsequent deletion events and $sans(\"retreat\")$/$sans(\"advance\")$ calls may modify properties of the record, but records in the sequence are not removed or reordered once they have been inserted.\n\nWhen the event graph contains concurrent insertion operations, we use an existing CRDT algorithm to ensure that all replicas place the records in this sequence in the same order, regardless of the order in which the event graph is traversed.\nAny list CRDT could be used for this purpose; the main differences between algorithms are their performance and their interleaving characteristics @fugue.\nOur implementation of #algname uses a variant of the Yjs algorithm @yjs @Nicolaescu2016YATA that we conjecture to be maximally non-interleaving; we leave a detailed analysis of this algorithm to future work, since it is not core to this paper.\n\nEach record in this sequence contains:\n- the ID of the event that inserted the character;\n- $s_p in {mono(\"NotInsertedYet\"), mono(\"Ins\"), mono(\"Del 1\"), mono(\"Del 2\"), ...}$, the character's state in the prepare version;\n- $s_e in {mono(\"Ins\"), mono(\"Del\")}$, the state in the effect version;\n- and any other fields required by the CRDT to determine the order of concurrent insertions.\n\nThe rules for updating $s_p$ and $s_e$ are:\n\n- When a record is first inserted by $sans(\"apply\")(e_i)$ with an insertion event $e_i$, it is initialised with $s_p = s_e = mono(\"Ins\")$.\n- If $sans(\"apply\")(e_d)$ is called with a deletion event $e_d$, we set $s_e = mono(\"Del\")$ in the record representing the deleted character. In the same record, if $s_p = mono(\"Ins\")$ we update it to $mono(\"Del 1\")$, and if $s_p = mono(\"Del\") n$ it advances to $mono(\"Del\") (n+1)$, as shown in @spv-state.\n- If $sans(\"retreat\")(e_i)$ is called with insertion event $e_i$, we must have $s_p = mono(\"Ins\")$ in the record affected by the event, and we update it to $s_p = mono(\"NotInsertedYet\")$. Conversely, $sans(\"advance\")(e_i)$ moves $s_p$ from $mono(\"NotInsertedYet\")$ to $mono(\"Ins\")$.\n- If $sans(\"retreat\")(e_d)$ is called with a deletion event $e_d$, we must have $s_p = mono(\"Del\") n$ in the affected record, and we update it to $mono(\"Del\") (n-1)$ if $n>1$, or to $mono(\"Ins\")$ if $n=1$. Calling $sans(\"advance\")(e_d)$ performs the opposite.\n\n#figure(\n  fletcher.diagram(spacing: (4mm, 4mm), node-stroke: 0.5pt, node-inset: 5mm,\n  {\n    let (nyi, ins, del1, del2, deln) = ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0))\n    node(nyi, `NIY`)\n    node(ins, `Ins`)\n    node(del1, `Del 1`)\n    node(del2, `Del 2`)\n    node(deln, $dots.c$, shape: \"rect\")\n\n    node((-0.5, 0.8), [$sans(\"advance\"):$], stroke: 0pt)\n    node((0.5, 0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, 0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(nyi, ins, bend: 50deg, \"-|>\")\n    edge(ins, del1, bend: 50deg, \"-|>\")\n    edge(del1, del2, bend: 50deg, \"-|>\")\n    edge(del2, deln, bend: 50deg, \"--|>\")\n\n    node((-0.5, -0.8), [$sans(\"retreat\"):$], stroke: 0pt)\n    node((0.5, -0.8), [$italic(\"Insert\")$], stroke: 0pt)\n    node((1.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((2.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    node((3.5, -0.8), [$italic(\"Delete\")$], stroke: 0pt)\n    edge(ins, nyi, bend: 50deg, \"-|>\")\n    edge(del1, ins, bend: 50deg, \"-|>\")\n    edge(del2, del1, bend: 50deg, \"-|>\")\n    edge(deln, del2, bend: 50deg, \"--|>\")\n  }),\n  placement: top,\n  caption: [State machine for internal state variable $s_p$.]\n) <spv-state>\n\nAs a result, $s_p$ and $s_e$ are `Ins` if the character is visible (inserted but not deleted) in the prepare and effect version respectively; $s_p = mono(\"Del\") n$ indicates that the character has been deleted by $n$ concurrent delete events in the prepare version; and $s_p = mono(\"NotInsertedYet\")$ indicates that the insertion of the character has been retreated in the prepare version.\n$s_e$ does not count the number of deletions and does not have a $mono(\"NotInsertedYet\")$ state since we never remove the effect of an operation from the effect version.\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), box(width: 14mm, height: 0mm), stroke: 0pt),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"NIY\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((6,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    edge((2.6,0), (3.4,0), text(0.7em, $sans(\"retreat\")(e_4)\\ sans(\"retreat\")(e_3)$), marks: \"=>\", thickness: 0.8pt, label-sep: 0.5em)\n  ),\n  placement: top,\n  caption: [Left: the internal state after applying $e_1 ... e_4$ from @graph-hi-hey. Right: after $sans(\"retreat\")(e_4)$ and $sans(\"retreat\")(e_3)$, the prepare state is updated to mark \"H\" as `NotInsertedYet`, and the deletion of \"h\" is undone. The effect state is unchanged.]\n) <crdt-state-1>\n\nFor example, @crdt-state-1 shows the state after applying $e_1 ... e_4$ from @graph-hi-hey, and how that state is updated by retreating $e_4$ and $e_3$ before $e_5$ is applied.\nIn the effect state, the lowercase \"h\" is marked as deleted, while the uppercase \"H\" and the \"i\" are visible.\nIn the prepare state, by retreating $e_4$ and $e_3$ the \"H\" is marked as `NotInsertedYet`, and the deletion of \"h\" is undone ($s_p = mono(\"Ins\")$).\n\n#figure(\n  fletcher.diagram(node-stroke: 0.5pt, node-inset: 5pt, spacing: 0pt,\n    node((0,0), text(0.8em, [#v(5pt)$text(\"“H”\")\\ italic(\"id\"): 3\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((1,0), text(0.8em, [#v(5pt)$text(\"“h”\")\\ italic(\"id\"): 1\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\"),\n    node((2,0), text(0.8em, [#v(5pt)$text(\"“e”\")\\ italic(\"id\"): 6\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((3,0), text(0.8em, [#v(3.5pt)$text(\"“y”\")\\ italic(\"id\"): 7\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((4,0), text(0.8em, [#v(5pt)$text(\"“!”\")\\ italic(\"id\"): 8\\ s_p: mono(\"Ins\")\\ s_e: mono(\"Ins\")$]), shape: \"rect\"),\n    node((5,0), text(0.8em, [#v(5pt)$text(\"“i”\")\\ italic(\"id\"): 2\\ s_p: mono(\"Del 1\")\\ s_e: mono(\"Del\")$]), shape: \"rect\")\n  ),\n  placement: top,\n  caption: [The internal #algname state after replaying all of the events in @graph-hi-hey.]\n) <crdt-state-2>\n\n@crdt-state-2 shows the state after replaying all of the events in @graph-hi-hey: \"i\" is also deleted, the characters \"e\" and \"y\" are inserted immediately after the \"h\", $e_3$ and $e_4$ are advanced again, and finally the exclamation mark is inserted after the \"y\".\nThe figures include the character for the sake of readability, but the algorithm actually does not need to store characters in its internal state.\n\n== Mapping indexes to character IDs\n\nIn the event graph, insertion and deletion operations specify the index at which they apply.\nIn order to update #algname's internal state, we need to map these indexes to the correct record in the sequence, based on the prepare state $s_p$.\nTo produce the transformed operations, we need to map the positions of these internal records back to indexes again -- this time based on the effect state $s_e$.\n\nA simple but inefficient algorithm would be: to apply a $italic(\"Delete\")(i)$ operation we iterate over the sequence of records and pick the $i$th record with a prepare state of $s_p = mono(\"Ins\")$ (i.e., the $i$th among the characters that are visible in the prepare state, which is the document state in which the operation should be interpreted).\nSimilarly, to apply $italic(\"Insert\")(i, c)$ we skip over $i - 1$ records with $s_p = mono(\"Ins\")$ and insert the new record after the last skipped record (if there have been concurrent insertions at the same position, we may also need to skip over some records with $s_p = mono(\"NotInsertedYet\")$, as determined by the list CRDT's insertion ordering).\n\nTo reduce the cost of this algorithm from $O(n)$ to $O(log n)$, where $n$ is the number of characters in the document, we construct a B-tree whose leaves, from left to right, contain the sequence of records representing characters.\nWe extend the tree into an _order statistic tree_ @CLRS2009 (also known as _ranked B-tree_) by adding two integers to each node: the number of records with $s_p = mono(\"Ins\")$ contained within that subtree, and the number of records with $s_e = mono(\"Ins\")$ in that subtree.\nEvery time $s_p$ or $s_e$ are updated, we also update those numbers on the path from the updated record to the root.\nAs the tree is balanced, this update takes $O(log n)$.\n\nNow it is easy to find the $i$th record with $s_p = mono(\"Ins\")$ in logarithmic time by starting at the root of the tree, and adding up the values in the subtrees that have been skipped.\nMoreover, once we have a record in the sequence we can efficiently determine its index in the effect state by going in the opposite direction: working upwards in the tree towards the root, and summing the numbers of records with $s_e = mono(\"Ins\")$ that lie in subtrees to the left of the starting record.\nThis allows us to efficiently transform the index of an operation from the prepare version into the effect version.\nIf the character was already deleted in the effect version ($s_e = mono(\"Del\")$), the transformed operation is a no-op.\n\nThe above process makes $sans(\"apply\")(e_i)$ efficient.\nWe also need to efficiently perform $sans(\"retreat\")(e_i)$ and $sans(\"advance\")(e_i)$, which modify the prepare state $s_p$ of the record inserted or deleted by $e_i$.\n// For insert events, we modify the corresponding insert record with an _id_ of $i$, matching the event.\n// And for delete events, we modify the record of the item _deleted by_ the event.\n// Note that the event's index can't be used to locate the item, as the item's absolute position in the sequence may not match the event's index.\nWhile advancing/retreating we cannot look up a target record by its index. Instead, we maintain a second B-tree, mapping from each event's ID to the target record. The mapping stores a value depending on the type of the event:\n\n- For delete events, we store the ID of the character deleted by the event.\n- For insert events, we store a pointer to the leaf node in the first B-tree which contains the corresponding record. When nodes in the first B-tree are split, we update the pointers in the second B-tree accordingly.\n\nOn every $sans(\"apply\")(e)$, after updating the sequence as above, we update this mapping based on the event.\nWhen we subsequently perform a $sans(\"retreat\")(e)$ or $sans(\"advance\")(e)$, that event $e$ must have already been applied, and hence $e.italic(\"id\")$ must appear in this mapping.\nThis map allows us to advance or retreat in logarithmic time.\n\n== Clearing the internal state <clearing>\n\nAs described so far, the algorithm retains every insertion since document creation forever in its internal state, consuming a lot of memory, and requiring the entire event graph to be replayed in order to restore the internal state.\nWe now introduce a further optimisation that allows #algname to completely discard its internal state from time to time, and replay only a subset of the event graph.\n\nWe define a version $V subset.eq G$ to be a _critical version_ in an event graph $G$ iff it partitions the graph into two subsets of events $G_1 = sans(\"Events\")(V)$ and $G_2 = G - G_1$ such that all events in $G_1$ happened before all events in $G_2$:\n$ forall e_1 in G_1: forall e_2 in G_2: e_1 -> e_2. $\n\nEquivalently, $V$ is a critical version iff every event in the graph is either in $V$, or an ancestor of some event in $V$, or happened after _all_ of the events in $V$:\n$ forall e_1 in G: e_1 in sans(\"Events\")(V) or (forall e_2 in V: e_2 -> e_1). $\nA critical version might not remain critical forever; it is possible for a critical version to become non-critical because a concurrent event is added to the graph.\n\nA key insight in the design of #algname is that critical versions partition the event graph into sections that can be processed independently. Events that happened at or before a critical version do not affect how any event after the critical version is transformed. // #footnote[This property holds for our most, but not all text based CRDTs. Notably, this property does not hold for the Peritext CRDT for collaborative rich text editing @Litt2022peritext due to how peritext processes concurrent annotations.]\nThis observation enables two important optimisations:\n\n- Any time the version of the event graph processed so far is critical, we can discard the internal state (including both B-trees and all $s_p$ and $s_e$ values), and replace it with a placeholder as explained in @partial-replay.\n- If both an event's version and its parent version are critical versions, there is no need to traverse the B-trees and update the CRDT state, since we would immediately discard that state anyway. In this case, the transformed event is identical to the original event, so the event can simply be emitted as-is.\n\nThese optimisations make it very fast to process documents that are mostly edited sequentially (e.g., because the authors took turns and did not write concurrently, or because there is only a single author), since most of the event graph of such a document is a linear chain of critical versions.\n\nThe internal state can be discarded once replay is complete, although it is also possible to retain the internal state for transforming future events.\nIf a replica receives events that are concurrent with existing events in its graph, but the replica has already discarded its internal state resulting from those events, it needs to rebuild some of that state.\nIt can do this by identifying the most recent critical version that happened before the new event, replaying the existing events that happened after that critical version, and finally applying the new events.\nEvents from before that critical version are not replayed.\nSince most editing histories have critical versions from time to time, this means that usually only a small subset of the event graph is replayed.\nIn the worst case, this algorithm replays the entire event graph.\n\n== Partial event graph replay <partial-replay>\n\nAssume that we want to add event $e_\"new\"$ to the event graph $G$, that $V_\"curr\" = sans(\"Version\")(G)$ is the current document version reflecting all events except $e_\"new\"$, and that $V_\"crit\" eq.not V_\"curr\"$ is the latest critical version in $G union {e_\"new\"}$ that happened before both $e_\"new\"$ and $V_\"curr\"$.\nFurther assume that we have discarded the internal state, so the only information we have is the latest document state at $V_\"curr\"$ and the event graph; in particular, without replaying the entire event graph we do not know the document state at $V_\"crit\"$.\n\nLuckily, the exact internal state at $V_\"crit\"$ is not needed. All we need is enough state to transform $e_\"new\"$ and rebase it onto the document at $V_\"curr\"$.\nThis internal state can be obtained by replaying the events since $V_\"crit\"$, that is, $G - sans(\"Events\")(V_\"crit\")$, in topologically sorted order:\n\n1. We initialise a new internal state corresponding to version $V_\"crit\"$. Since we do not know the the document state at this version, we start with a single placeholder record representing the unknown document content.\n2. We update the internal state by replaying events from $V_\"crit\"$ to $V_\"curr\"$, but we do not output transformed operations during this stage.\n3. Finally, we replay the new event $e_\"new\"$ and output the transformed operation. If we received a batch of new events, we replay them in topologically sorted order.\n\nThe placeholder record we start with in step 1 represents the range of indexes $[0, infinity]$ of the document state at $V_\"crit\"$ (we do not know the length of the document at that version, but we can still have a placeholder for arbitrarily many indexes).\nPlaceholders are counted as the number of characters they represent in the order statistic tree construction, and they have the same length in both the prepare and the effect versions.\nWe then apply events as follows:\n\n- Applying an insertion at index $i$ creates a record with $s_p = s_e = mono(\"Ins\")$ and the ID of the insertion event. We map the index to a record in the sequence using the prepare state as usual; if $i$ falls within a placeholder for range $[j, k]$, we split it into a placeholder for $[j, i-1]$, followed by the new record, followed by a placeholder for $[i, k]$. Placeholders for empty ranges are omitted.\n- Applying a deletion at index $i$: if the deleted character was inserted prior to $V_\"crit\"$, the index must fall within a placeholder with some range $[j, k]$. We split it into a placeholder for $[j, i-1]$, followed by a new record with $s_p = mono(\"Del 1\")$ and $s_e = mono(\"Del\")$, followed by a placeholder for $[i+1, k]$. The new record has a placeholder ID that only needs to be unique within the local replica, and need not be consistent across replicas.\n- Applying a deletion of a character inserted since $V_\"crit\"$ updates the record created by the insertion.\n\nBefore applying an event we retreat and advance as usual.\nThe algorithm never needs to retreat or advance an event that happened before $V_\"crit\"$, therefore every retreated or advanced event ID must exist in second B-tree.\n\nIf there are concurrent insertions at the same position, we invoke the CRDT algorithm to place them in a consistent order as discussed in @prepare-effect-versions.\nSince all concurrent events must be after $V_\"crit\"$, they are included in the replay.\nWhen we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$.\n\n== Algorithm complexity <complexity>\n\nSay we have two users who have been working offline, generating $k$ and $m$ events respectively.\nWhen they come online and merge their event graphs, the latest critical version is immediately prior to the branching point.\nIf the branch of $k$ events comes first in the topological sort, the replay algorithm first applies $k$ events, then retreats $k$ events, applies $m$ events, and finally advances $k$ events again.\nAsymptotically, $O(k+m)$ calls to apply/retreat/advance are required regardless of the order of traversal, although in practice the algorithm is faster if $k<m$ since we don't need to retreat/advance on the branch that is visited last.\n\nEach apply/retreat/advance requires one or two traversals of first B-tree, and at most one traversal of the second B-tree.\nThe upper bound on the number of entries in each tree (including placeholders) is $2(k+m)+1$, since each event generates at most one new record and one placeholder split.\nSince the trees are balanced, the cost of each traversal is $O(log(k+m))$.\nOverall, the cost of merging branches with $k$ and $m$ events is therefore $O((k+m) log(k+m))$.\n\nWe can also give an upper bound on the complexity of replaying an event graph with $n$ events.\nEach event is applied exactly once, and before each event we retreat or advance each prior event at most once, at $O(log n)$ cost.\nThe worst-case complexity of the algorithm is therefore $O(n^2 log n)$, but this case is unlikely to occur in practice.\n\n== Storing the event graph <storage>\n\nTo store the event graph compactly on disk, we developed a compression technique that takes advantage of how people typically write text documents: namely, they tend to insert or delete consecutive sequences of characters, and less frequently hit backspace or move the cursor to a new location.\n#algname's event graph storage format is inspired by the Automerge CRDT library @automerge-storage @automerge-columnar, which in turn uses ideas from column-oriented databases @Abadi2013 @Stonebraker2005. We also borrow some bit-packing tricks from the Yjs CRDT library @yjs.\n\nWe first topologically sort the events in the graph. Different replicas may sort the set differently, but locally to one replica we can identify an event by its index in this sorted order.\nThen we store different properties of events in separate byte sequences called _columns_, which are then combined into one file with a simple header.\nEach column stores some different fields of the event data. The columns are:\n\n- _Event type, start position, and run length._ For example, \"the first 23 events are insertions at consecutive indexes starting from index 0, the next 10 events are deletions at consecutive indexes starting from index 7,\" and so on. We encode this using a variable-length binary encoding of integers, which represents small numbers in one byte, larger numbers in two bytes, etc.\n- _Inserted content._ An insertion event contains exactly one character (a Unicode scalar value), and a deletion does not. We simply concatenate the UTF-8 encoding of the characters for insertion events in the same order as they appear in the first column, and then LZ4-compress this string.\n- _Parents._ By default we assume that every event has exactly one parent, namely its predecessor in the topological sort. Any events for which this is not true are listed explicitly, for example: \"the first event has zero parents; the 153rd event has two parents, namely events numbers 31 and 152;\" and so on.\n- _Event IDs._ Each event is uniquely identified by a pair of a replica ID and a per-replica sequence number. This column stores runs of event IDs, for example: \"the first 1085 events are from replica $A$, starting with sequence number 0; the next 595 events are from replica $B$, starting with sequence number 0;\" and so on.\n\n// TODO: the next two paragraphs could be omitted if we're short of space\nWe use several further tricks to reduce file size. For example, we run-length-encode deletions in reverse direction (due to holding down backspace). We express operation indexes relative to the end of the previous event, so that the number fits in fewer bytes. We deduplicate replica IDs, and so on.\n\nWe send the same data format over the network when replicating the entire event graph.\nWhen sending a subset of events over the network (e.g., a single event during real-time collaboration), references to parent events outside of that subset need to be encoded using the $(italic(\"replicaID\"), italic(\"seqNo\"))$ event IDs, but otherwise a similar encoding can be used.\n\n= Evaluation <benchmarking>\n\n// Hints for writing systems papers https://irenezhang.net/blog/2021/06/05/hints.html\n// Benchmarking crimes to avoid https://gernot-heiser.org/benchmarking-crimes.html\n\n// TODO: anonymise the references to repos for the conference submission\n// Can use a service like https://anonymous.4open.science/\n\nIn this work we compare #algname to various CRDT implementations and an OT implementation on 3 criteria:\n\n/ Speed: The time taken to load a document and merge a set of changes from a remote peer.\n/ Memory usage: The amount of RAM used to load a document and merge changes.\n/ Storage size: The number of bytes needed to store or transmit the document's history.\n\nWe have found #algname to perform well on all of these measures. #algname merges complex editing traces at a similar speed as the equivalently constructed CRDT implementation. Peak memory usage (when merging complex changes) is higher than that of an equivalent CRDT, but after merging is complete, any memory used can be once again freed. And our binary encoding of the event graph takes up less space on disk.\n\nDespite #algname merging complex changes at a speed similar to that of a CRDT, the CPU and memory profile of #algname can be quite different:\n\nAt startup time, #algname has no cost on the editing system. The document contents can simply be loaded from disk into memory. The event graph itself can stay on disk. The CRDT implementations we looked at work quite differently. When a document is opened, the CRDT state object is immediately unpacked from disk into a query-optimised data structure. This allows local events to be translated to the CRDT's message format. However, unpacking the CRDT state introduces latency at load time and increases the memory footprint of the process.\n\nWhen concurrent events are merged together, #algname constructs a new CRDT state object from the most recent common version of the merged branches. This state object is used to transform the merged events. After transformation, the state object can be discarded. The CRDT implementations we looked at allocate memory at startup for their CRDT state objects and retain that memory throughout the editing session. #algname does not need memory at startup, but will consume significant amounts of temporary memory when merging complex sets of concurrent changes.\n\nAs a result, #algname allows documents to be loaded from disk and edited much faster than CRDTs allow, and with less resident memory usage. When changes are merged, the CRDT state is only reconstructed back to the common branching point, so merging sequential changes, or recent concurrent changes is consistently fast. The slowest operation #algname encounters is when it merges large, long lived branches together. When this happens, memory usage temporarily spikes as events are loaded from disk, and transformed via a temporary CRDT state object.\n\n// TODO: Move this further down I reckon.\n// CRDTs have extra overhead when a document is loaded because CRDTs require local editing events to be translated into the corresponding CRDT messages before they can be saved to disk or broadcast to remote peers. In order to translate editing events into CRDT messages, a local replica needs to query the current CRDT state object. In the systems we looked at, each time a document is opened, the CRDT state must be unpacked into a query-optimised data structure in RAM before any edits can take place. This introduces noticeable latency at startup time, and\n\n// When necessary, #algname also reconstructs this state. However, #algname only needs to build this state object in memory when merging concurrent changes. And even then, the state is only reconstructed as far back as the most recent common version. Once merging is complete, #algname can immediately discard this state object from memory.\n\n// In our testing we have found the _worst case_ performance for #algname is similar to the _expected_ performance when using a similar CRDT library. The best case performance of #algname is significantly faster than that of an equivalent CRDT.\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto),\n    align: (left, center, center, center),\n    stroke: (x, y) => (\n      left: if x == 1 { 0.4pt } else { none },\n      // right: none,\n      // top: if y == 0 { 0.8pt } else { none },\n      // bottom: none,\n    ),\n    table.hline(stroke: 0.8pt),\n    // table.header([Work performed when \\\\ by], [*OT*], [*#algname*], [*CRDT*]),\n    table.header([],\n      [*OT*],\n      [*CRDT*],\n      [*#algname* (ours)],\n    ),\n    table.hline(stroke: 0.4pt),\n    [Merge time (ms)],\n      [#calc.round(charts.avg_times.ot, digits: 0)],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_times.dt, digits: 1)*],\n    [Load time (ms)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n    [Memory usage (peak MB)],\n      [#calc.round(charts.avg_mem.ot.peak / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)*],\n      [#calc.round(charts.avg_mem.dt.peak / 1e6, digits: 1)],\n    [Memory usage (steady MB)],\n      [*#calc.round(charts.avg_mem.ot.steady_state / 1e6, digits: 2)*],\n      [#calc.round(charts.avg_mem.dtcrdt.steady_state / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dt.steady_state / 1e6, digits: 2)*],\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    Summary of average CPU and memory usage results. This table shows the time taken (in milliseconds) and heap memory used (peak and at quiescence) for our OT, reference CRDT and optimised #algname implementations. In this table we show the mean result across all of our editing traces.\n  ]\n) <work-table>\n\n== Implementations\n\nWe created two implementations of #algname: a reference implementation optimised for simplicity and readability written in Typescript @reference-reg, and a production-ready, performance optimised implementation written in Rust @dt.\nOur reference implementation omits several important optimisations, including internal run-length encoding, B-trees and event graph sorting.\nAll benchmarks in this section use our performance optimised version of #algname.\n\nWe have benchmarked #algname against two popular CRDT libraries: Automerge @automerge and Yjs#footnote[We also tested Yrs @yrs, the Rust rewrite of Yjs by the original authors. At the time of writing it performs worse than Yjs, so we have omitted it from our results.] @yjs. However, these libraries exhibit a large range of performance. In an effort to remove the effect of implementation differences in our results, we have also implemented our own performance-optimised reference CRDT library. This library shares most of its code with our optimised #algname implementation, making for (as much as possible) a like-to-like performance comparison between approaches. Our reference CRDT library outperforms both Yjs and Automerge.\n\nFor comparison, we have also implemented a simple Operational Transform implementation. This OT library batch transforms operations in a given event graph. Intermediate transformed operations are memoized and reused during the graph traversal - which dramatically improves performance but also increases memory usage. This library has not been optimised as thoroughly as the other code.\n\nAll code and data used in our benchmarks is published alongside this article.\nDetails of the hardware and software setup used in our experiments is given in @benchmark-setup.\n\n\n== Editing traces\n\n// TODO: add node_nodecc and git-makefile to editing-traces repo\n// TODO: anonymise the editing-traces repo for the conference submission\n\nIn order to ensure our benchmarks are meaningful, we collected a dataset of text editing traces from real documents, which we have made freely available on GitHub @editing-traces.\nThe traces we use are listed in @traces-table.\nThere are three types:\n\n#let stats_for(name, type) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Conc*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\"),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\"),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\"),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, in thousands. Each inserted or deleted character counts as 1 event. _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n/ Sequential Traces: (S1, S2, S3): Keystroke-granularity history of a single user writing a document, collected using an instrumented text editor. These traces contain no concurrency. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n/ Concurrent Traces: (C1, C2): Multiple users concurrently editing the same document in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n\n\n== Time taken to load and merge changes\n\n// We have measured the time taken to merge our editing traces into a local, empty document. Once all events were loaded, the document was saved and loaded back.\n\nThe slowest operation a collaborative editing system performs is merging a large set of remote editing events from another peer. All received changes need to be transformed and merged into the active document. @chart-remote shows the time taken by each tested algorithm to merge all changes in our dataset into an empty document. For the CRDT implementations, all events were preprocessed into the appropriate CRDT message format. The time taken to do this is not included in our measurements.\n\nOnce all events were received from a remote peer, the resulting local state was saved to disk and then loaded back into memory. The CRDT implementations execute the same commands to construct a local CRDT object from remote events and from events stored on disk. OT and #algname based systems are able to simply load the resulting text content directly from disk. When using one of these approaches, historical events are only loaded from disk when concurrent branches are merged together.\n\nFor completeness, we also measured the time taken to process local editing events. However, all of the systems we tested can process events many orders of magnitude much faster than any human's typing speed. We have not shown this data as at that speed, the differences between systems are irrelevant.\n\n#figure(\n  text(8pt, [\n    #charts.speed_merge\n    // #charts.speed_load\n  ]),\n  caption: [\n    The time taken by each algorithm to merge all editing events and reload the resulting document from disk. Each algorithm received as input the complete set of \"remote events\" (which differed depending on the algorithm) and output the resulting, merged document. The CRDT implementations (Ref CRDT, Automerge and Yjs) take the same amount of time to merge changes as they do to subsequently load the document from disk. The red line in this chart shows 1 frame \\@ 60hz.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\nThe merge times are interesting for several reasons:\n// And I'm not sure how many of these reasons to include here!\n\n// - #algname and the OT implementation, as expected, added no overhead at all in processing the purely sequential event traces (S1, S2, S3).\n- When merging, there is more difference between different CRDT implementations than there is between #algname and our reference CRDT implementation. When measuring pure performance, implementation quality seems to matter more than algorithm.\n- C1 and C2 hit some pathological case in the automerge library. We have reported this to the package maintainers.\n- As expected, our operational transform implementation performs very well when there is no concurrency. But it scales very poorly as editing traces become more complex. Merging the _A2_ trace took approximately 1 hour - which is 160 000x slower than #algname.\n\n\n== #algname performance and concurrency\n\nIn @chart-remote above, we see that #algname is especially fast on traces that are mostly or entirely sequential (e.g., _A1_ and _S1_, respectively).\nThis is because #algname can clear its internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare #algname's performance with a version of the algorithm that has these optimisations disabled.\n@ff-memory shows the memory usage over the course of replaying one trace, and @speed-ff shows the time taken to replay all our traces with this optimisation enabled and disabled.\n\n// TODO: what is the unit (\"state size\") of the y axis of this chart?\n// TODO: Typst has a bug that is currently labelling this figure with the wrong number!\n#figure(\n  text(8pt, charts.ff_chart),\n  caption: [\n    A comparison of the #algname state size while processing the _raw C1_ data set, with and without internal state clearing enabled. This chart uses the raw (not duplicated) version of the dataset.\n  ],\n  kind: image,\n  placement: top,\n) <ff-memory>\n\n// TODO: This chart does not include time spent *applying* the transformed changes, so its slightly faster\n// than the merge times we list.\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Time taken for #algname to merge all events in an event graph, with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nThe _A2_ editing trace does not contain any critical events, so performance is the same as if the optimisations are disabled, whereas the fully sequential editing traces are processed approximately 15$times$ faster with these optimisations.\nThe concurrent trace used in @ff-memory has frequently occurring critical versions, allowing the optimisation to keep the internal state small.\n\nWhen processing an event graph with very high concurrency (like _git-makefile_), the performance of #algname is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this test as much as 8$times$ slower, and our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\nHowever, the topological sort itself also takes time: in the _friendsforever_ and _clownschool_ traces, about 40% of the runtime is the topological sort, as there are thousands of tiny branch and merge points due to the fine-grained concurrency.\n\n/*\n#figure(\n  text(8pt, charts.all_speed_local),\n  caption: [\n    xxx\n    // Comparative speed of DT and DT-crdt algorithms processing remote data, measured in millions of run-length encoded events processed per second.\n  ],\n  kind: image,\n  placement: top,\n) <chart-all-local>\n*/\n\n\n== RAM usage\n\nIn @chart-memusage we show the memory footprint (retained heap size) of each algorithm. The memory used by #algname and OT is split into peak usage (during merge operations) and the \"steady state\" memory usage, after temporary data is discarded and the system has returned to quiescence.\n\nThe OT implementation used here memoizes intermediate transformed operations to improve performance. However, keeping this the memoized data in memory results in dramatically higher memory usage. At peak this implementation used 6.8GB of RAM to merge the _A2_ editing trace.\n\nThe computer we used for benchmarking had enough RAM to prevent swapping in all cases.\n\n#figure(\n  text(7pt, charts.memusage_all),\n  caption: [\n    RAM used while replaying all editing traces. The #algname and OT algorithms only need additional RAM while merging concurrent changes. Once all changes are merged, only the current document text is retained.\n  ],\n  kind: image,\n  placement: top,\n) <chart-memusage>\n\n\n== Storage size\n\nOur binary encoding of event graphs (@storage) results in smaller files than the equivalent internal CRDT state persisted by Automerge or Yjs.\nTo ensure a like-for-like comparison we have disabled #algname's built-in LZ4 and Automerge's built-in gzip compression. Enabling this compression further reduces the file sizes.\n\n// TODO: instead of disabling compression in Automerge and DT, maybe it would be better to report the gzipped file size for all libraries? That will not change the Automerge/DT file size much, but it will reduce the Yjs file size to make a fair comparison.\n// (seph): No, that causes problems because of the repeated event graphs. Gzip is (sometimes) clever enough to compact the repeated events - but thats very algorithm dependant.\n\n\nAutomerge also stores the full editing history of a document, and @chart-dt-vs-automerge shows the resulting file sizes relative to the raw concatenated text content of all insertions.\nIn all of our traces, #algname has a significantly smaller file size, and the graph structure adds only modest overhead to the raw text.\n\n// TODO: Is this worth adding?\n// Note that storing the raw editing trace in this compact form removes one of the principle benefits of #algname, as the event graph must be replayed in order to determine the current document text. To improve load time, the current text content can be cached and stored alongside the event graph on disk. Alternately, the transformed operation positions can also be stored in the file. In our testing, this resulted in a tiny increase in file size while improving load performance by an order of magnitude.\n\nIn contrast, Yjs does not store any deleted characters. This results in a smaller file size, at the cost of not being able to reconstruct past document states.\nTo make the comparison fair, @chart-dt-vs-yjs compares Yjs to a variant of our event graph encoding in which the text content of deleted characters is omitted.\nOur encoding is smaller than Yjs on all traces, and the overhead of storing the event graph is between 20% and 3$times$ the final plain text file size.\n\n// TODO: why is git-makefile not included in this and the following figure?\n#figure(\n  text(8pt, charts.filesize_full),\n  caption: [Relative file size storing edit traces using #algname's event graph encoding and Automerge. The lightly shaded region in each bar shows the concatenated length of all inserted text - which is a lower bound on the file size in this test.],\n  kind: image,\n  placement: top,\n) <chart-dt-vs-automerge>\n\n#figure(\n  text(8pt, charts.filesize_smol),\n  caption: [File size of our event graph encoding in which deleted text content has been omitted, compared to the equivalent Yjs file size. The lightly shaded region is the size of the resulting document, which acts as a lower bound on the file size.],\n"],[39277,0,"// TODO: can use RGA/YATA but not any CRDT\n"],[19237,12,""],[19187,0," in practice"],[28238,20,""],[28238,0,"the exclamation mark"],[28238,20,""],[28238,0,"\"\""],[28239,0,"!"],[28287,0,"it "],[28375,3,""],[28375,0,". T"],[23083,193,""],[24555,0,"// While OT transforms one operation with respect to one other operation, #algname builds a temporary data structure that reflects the concurrent edits, and uses it to operations efficiently.\n"],[24555,3,""],[24635,74,""],[24640,2,""],[24640,0,"the internal state"],[24661,1,""],[24661,0,"t"],[24661,1,""],[24661,0," transform "],[24615,9,""],[24614,1,""],[18795,8,""],[18795,0,"F"],[18827,8,""],[19012,5,""],[31160,4,""],[31163,0,"s"],[31199,4,""],[31203,0,"s"],[31470,16,""],[31620,108,""],[31620,0,"are very slow to merge long-running branches ()"],[31666,0,"see @b3"],[31672,1,""],[31671,1,""],[31671,0,"enc"],[31673,1,""],[31672,1,""],[31671,1,""],[31671,0,"ben"],[31671,3,""],[31671,0,"benchmarking"],[31684,0,"."],[32977,0," ()"],[32979,0,"see @complexity"],[37287,0,"\n/*"],[37994,0,"\n*/"],[36545,12,""],[36512,9,""],[36512,0,"to"],[38797,8,""],[38796,1,""],[38795,1,""],[38955,0,"\nFor example, RGA @Roh2011RGA or YATA"],[39263,19,""],[38992,0," @Nicolaescu2016YATA"],[39012,14,""],[39043,109,""],[39045,43,""],[39116,1,""],[39116,0,", itself based on YATA,"],[38775,10,""],[38774,1,""],[38774,0,"s"],[38791,10,""],[39171,3,""],[39171,0,".\nW"],[45598,13,""],[45598,0,"#a"],[45599,1,""],[45599,0,"algname"],[45483,20,""],[45483,0,":"],[45483,1,""],[45483,0,"\"\""],[45484,0,"!"],[45608,8,""],[45614,10,""],[45614,0,"text content"],[49145,5,""],[49145,0,"that"],[49374,19,""],[49397,9,""],[49397,0,"a"],[49397,1,""],[49397,0,"call"],[52646,0,"s"],[54352,6,""],[54352,0,"apply"],[54461,6,""],[54461,0,"apply"],[58815,3,""],[58815,0,"graph"],[59655,7,""],[59783,5,""],[59796,11,""],[59796,0,"it"],[59795,3,""],[61512,14,""],[61512,0,"W"],[61589,13,""],[61589,0,"along three dimensions"],[61535,7,""],[61535,0,"state-of-the-art"],[61535,16,""],[61535,0,"leading"],[61535,7,""],[61535,0,"popular"],[61535,0,"two "],[61660,0," "],[61636,6,""],[61655,0,"into memory,"],[61630,0," CPU"],[61675,0," to"],[61716,4,""],[61716,0,"replica"],[64352,5,""],[64352,0,"replicas"],[72644,4,""],[72644,0,"replica"],[73063,4,""],[73063,0,"replica"],[61764,2,""],[61764,0,"while"],[61769,5,""],[61745,10,""],[61770,0," is loaded"],[61784,0," while"],[61795,1,""],[61795,0,"ing"],[61694,7,""],[61694,0,"updates"],[61799,7,""],[61799,0,"remote updates"],[61676,0,"the time "],[61684,1,""],[61679,5,""],[61676,3,""],[61861,40,""],[61861,0,"persistently store a document or replicate it over the network"],[61926,3405,""],[78554,0,"/*\n*/"],[78556,0,"\nWe have found #algname to perform well on all of these measures. #algname merges complex editing traces at a similar speed as the equivalently constructed CRDT implementation. Peak memory usage (when merging complex changes) is higher than that of an equivalent CRDT, but after merging is complete, any memory used can be once again freed. And our binary encoding of the event graph takes up less space on disk.\n\nDespite #algname merging complex changes at a speed similar to that of a CRDT, the CPU and memory profile of #algname can be quite different:\n\nAt startup time, #algname has no cost on the editing system. The document contents can simply be loaded from disk into memory. The event graph itself can stay on disk. The CRDT implementations we looked at work quite differently. When a document is opened, the CRDT state object is immediately unpacked from disk into a query-optimised data structure. This allows local events to be translated to the CRDT's message format. However, unpacking the CRDT state introduces latency at load time and increases the memory footprint of the process.\n\nWhen concurrent events are merged together, #algname constructs a new CRDT state object from the most recent common version of the merged branches. This state object is used to transform the merged events. After transformation, the state object can be discarded. The CRDT implementations we looked at allocate memory at startup for their CRDT state objects and retain that memory throughout the editing session. #algname does not need memory at startup, but will consume significant amounts of temporary memory when merging complex sets of concurrent changes.\n\nAs a result, #algname allows documents to be loaded from disk and edited much faster than CRDTs allow, and with less resident memory usage. When changes are merged, the CRDT state is only reconstructed back to the common branching point, so merging sequential changes, or recent concurrent changes is consistently fast. The slowest operation #algname encounters is when it merges large, long lived branches together. When this happens, memory usage temporarily spikes as events are loaded from disk, and transformed via a temporary CRDT state object.\n\n// TODO: Move this further down I reckon.\n// CRDTs have extra overhead when a document is loaded because CRDTs require local editing events to be translated into the corresponding CRDT messages before they can be saved to disk or broadcast to remote replicas. In order to translate editing events into CRDT messages, a local replica needs to query the current CRDT state object. In the systems we looked at, each time a document is opened, the CRDT state must be unpacked into a query-optimised data structure in RAM before any edits can take place. This introduces noticeable latency at startup time, and\n\n// When necessary, #algname also reconstructs this state. However, #algname only needs to build this state object in memory when merging concurrent changes. And even then, the state is only reconstructed as far back as the most recent common version. Once merging is complete, #algname can immediately discard this state object from memory.\n\n// In our testing we have found the _worst case_ performance for #algname is similar to the _expected_ performance when using a similar CRDT library. The best case performance of #algname is significantly faster than that of an equivalent CRDT.\n"],[81961,1,""],[61927,1748,""],[76809,0,"#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto),\n    align: (left, center, center, center),\n    stroke: (x, y) => (\n      left: if x == 1 { 0.4pt } else { none },\n      // right: none,\n      // top: if y == 0 { 0.8pt } else { none },\n      // bottom: none,\n    ),\n    table.hline(stroke: 0.8pt),\n    // table.header([Work performed when \\\\ by], [*OT*], [*#algname*], [*CRDT*]),\n    table.header([],\n      [*OT*],\n      [*CRDT*],\n      [*#algname* (ours)],\n    ),\n    table.hline(stroke: 0.4pt),\n    [Merge time (ms)],\n      [#calc.round(charts.avg_times.ot, digits: 0)],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_times.dt, digits: 1)*],\n    [Load time (ms)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n      [#calc.round(charts.avg_times.dtcrdt, digits: 1)],\n      [*#calc.round(charts.avg_opt_load_time, digits: 2)*],\n    [Memory usage (peak MB)],\n      [#calc.round(charts.avg_mem.ot.peak / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dtcrdt.peak / 1e6, digits: 1)*],\n      [#calc.round(charts.avg_mem.dt.peak / 1e6, digits: 1)],\n    [Memory usage (steady MB)],\n      [*#calc.round(charts.avg_mem.ot.steady_state / 1e6, digits: 2)*],\n      [#calc.round(charts.avg_mem.dtcrdt.steady_state / 1e6, digits: 1)],\n      [*#calc.round(charts.avg_mem.dt.steady_state / 1e6, digits: 2)*],\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    Summary of average CPU and memory usage results. This table shows the time taken (in milliseconds) and heap memory used (peak and at quiescence) for our OT, reference CRDT and optimised #algname implementations. In this table we show the mean result across all of our editing traces.\n  ]\n) <work-table>\n\n"],[91974,1046,""],[91936,192,""],[63700,0,"\nAll benchmarks were run on a Ryzen 7950x CPU running Linux 6.5.0-28 and 64GB of RAM. (Enough to prevent memory swapping in all cases).\n\nRust code was compiled with `rustc v1.77.2` and compiled in release mode with `-C target-cpu=native`. Code is run on a single, pinned core for consistency.\n\nJavascript was run using `nodejs v21.7.0`.\n\nAll time based measurements are based on the mean of at least 100 test iterations except OT running A2. This test was only run for 10 iterations. Error bars are not included above as the standard deviation for all benchmark results was less than 1%.\n\nAll benchmark code and data is available on Github. We tested the following versions of all libraries:\n\n#table(\n  columns: (auto, auto, auto),\n  align: (left, left, right, right, right, right),\n  [*Library*], [*Language*], [*Version / Git Hash*],\n  [Diamond Types (DT / DT-CRDT)], [Rust], [`44a65c44bf`],\n  [Automerge], [Rust], [v 0.5.9],\n  [Yjs], [Javascript], [v 13.6.10],\n  // [JSON-Joy], [Javascript], [`38392b30228a`],\n  // [Cola], [Rust], [v 0.1.1],\n)\n"],[61926,21,""],[61512,414,""],[64312,0,"\nWe compare #algname to two popular CRDT implementations and an OT implementation along three dimensions:\n\n/ Speed: The CPU time to load a document into memory, and to merge a set of updates from a remote replica.\n/ Memory usage: The RAM used while a document is loaded and while merging remote updates.\n/ Storage size: The number of bytes needed to persistently store a document or replicate it over the network.\n\n"],[61559,9,""],[61558,1,""],[61558,0,"n educational"],[61559,12,""],[61558,1,""],[61558,0," TypeScript"],[61625,22,""],[61625,0,"#if not anonymous {}"],[61644,1,""],[61644,0,"[]"],[61645,1,""],[61660,0,"]}"],[61686,0," Rust implementation"],[61706,13,""],[61717,30,""],[61717,0,"for performance#if not anonymous {}"],[61751,0,"[]"],[61752,0," @dt"],[61758,4,""],[63183,97,""],[61511,1,""],[61522,33,""],[61550,0," of #algname"],[61738,13,""],[61738,0,"The TypeScript"],[61859,11,""],[61859,0,"topological"],[61878,0," heuristics"],[61895,10,""],[61895,0,"results"],[61923,45,""],[61923,0,"the Rust implementation"],[61891,3,""],[61891,0,"The"],[61919,3,""],[61919,0,"are based on"],[61854,0,","],[61854,1,""],[61854,0,","],[61782,10,""],[61753,14,""],[61753,0,"version"],[61800,9,""],[61819,0," of the internal state"],[61842,0," the"],[61962,16,""],[61962,0,"compare"],[61979,7,""],[61979,0,"with"],[62032,0," ()"],[62034,0,"in Rust, version 0.5.9"],[62240,5,""],[62065,0,"  @yjs "],[62066,1,""],[62034,3,""],[62067,0," *"],[62068,1,""],[62068,0,"()"],[62069,0,"JavaScript, version 13.6.10"],[62097,0,"."],[62098,1,""],[62273,1,""],[62273,0," These "],[62273,1,""],[62273,0,"\n"],[62280,0,"libraries offer a more general JSON-like data model, but we test only their text editing feature."],[62377,1,""],[62377,0,"\n"],[62274,0,"We only th"],[62283,1,""],[62283,0,"est their collaborative text datatypes, and not the other datatypes they support"],[62363,102,""],[62374,0,"the performance of "],[62409,36,""],[62409,0,"varies widely"],[62423,1,""],[62423,0,"\n"],[62582,0,"\n"],[62583,1,""],[62754,1,""],[62754,0,"\n"],[62341,9,""],[62341,0,"features"],[62628,9,""],[62628,0,"Rust"],[62658,10,""],[62658,0,"enabling"],[62735,10,""],[62735,0,"algorithms"],[62765,8,""],[62439,20,""],[62439,0,"distinguish between"],[62486,14,""],[62486,0,"and algorithmic differences"],[62679,1,""],[62698,1,""],[62813,17,""],[62813,0,"W"],[62883,0," using the TTF algorithm @Oster2006TTF"],[62847,36,""],[62847,0,"OT library"],[62896,0," "],[62896,1,""],[62896,0,"\n"],[62897,1,""],[62896,0,"\n()"],[62898,0,"We don't use them "],[62915,1,""],[62914,1,""],[62914,0," server-based Jupiter algorithm @Nichols1995 or the popular OT library ShareDB @sharedb because they are no"],[63015,6,""],[63015,0,"do not handle the branching and merging patterns in some of our dataset."],[63022,6,""],[63022,0,"support"],[63064,0," that occur "],[63075,1,""],[63101,0,"// "],[64530,413,""],[63403,0,"\nWe compare #algname to two popular CRDT implementations and an OT implementation along three dimensions:\n\n/ Speed: The CPU time to load a document into memory, and to merge a set of updates from a remote replica.\n/ Memory usage: The RAM used while a document is loaded and while merging remote updates.\n/ Storage size: The number of bytes needed to persistently store a document or replicate it over the network.\n"],[63415,28,""],[63415,0,"these"],[63436,25,""],[63443,5,""],[63443,0,"3"],[62903,0," "],[62905,1,""],[62905,0,"o"],[62041,7,""],[62075,7,""],[62040,6,""],[62039,1,""],[62038,1,""],[62021,0," v0.5.9"],[62073,8,""],[62072,1,""],[62071,1,""],[62054,0," v13.6.10"],[63828,1,""],[63829,0,"We ran "],[63836,3,""],[63836,0,"the"],[63851,9,""],[63910,1,""],[63912,1,""],[63912,0,"e"],[63945,13,""],[63947,1,""],[63948,0,"We compiled "],[63969,13,""],[63975,1,""],[63988,1,""],[64002,0,"it "],[64049,1,""],[64049,0,"\nWe ran "],[64057,15,""],[64079,15,""],[64079,0,"to remove "],[64082,7,""],[64082,0,"avoid interference from context switches"],[64123,1,""],[64128,1,""],[64128,0,"S"],[64149,2,""],[64149,0,"N"],[64153,0,"."],[64153,1,""],[64153,0,"."],[64164,1,""],[64165,1,""],[64248,0,"("],[64255,0," for the case wehre"],[64273,1,""],[64272,1,""],[64271,1,""],[64270,1,""],[64270,0,"here"],[64277,0," takes an hour to run;"],[64295,3,""],[64295,0,"merge"],[64302,13,""],[64302,0,"we ran t"],[64318,13,""],[64336,0,")"],[64338,0,"\n"],[64339,39,""],[64339,0,"T"],[64407,461,""],[64404,0,", hence we do not show error bars"],[63912,6,""],[63912,0,"sufficient"],[63993,16,""],[64044,0," code on"],[64120,0,"For "],[64135,7,""],[64135,0,"we"],[64142,1,""],[64141,1,""],[64140,1,""],[64140,0,"ed"],[64123,0," running"],[64124,8,""],[64045,5,""],[62729,0,"a CRDT and the #al"],[62745,2,""],[62745,0,"algname "],[62762,1,""],[62729,1,""],[62729,0,"the"],[62737,0," approach"],[62750,4,""],[62759,10,""],[62663,0,"("],[62683,0,")"],[62700,12,""],[62722,0," traditional"],[64151,0," ()"],[64153,0,"Yjs"],[64477,139,""],[64728,1297,""],[91255,0,"\n\n= Editing t"],[91267,1,""],[91267,0,"Traces <traces-appendix>\n\n#let stats_for(name, type) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000, digits: 1)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(data.num_agents)\n  )\n}\n\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Conc*], [*Runs*], [*Replicas*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\"),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\"),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\"),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, in thousands. Each inserted or deleted character counts as 1 event. _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Replicas_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n"],[92334,0,"\n    "],[92337,2,""],[92337,0,"  "],[92334,5,""],[92333,1,""],[92333,0,"one"],[89025,2233,""],[89025,0,"/*\n= Generic CRDT to replay algorithm <generic-crdt-replay>\n\nIn this section, we present a generic replay function which matches the behaviour of any CRDT.\n\nThis algorithm is presented in Haskell. In other programming languages, this algorithm would need to actively memoize some function return values to prevent exponential time complexity. In @am-converter we present an equivalent algorithm in Rust, presented using Automerge@automerge to replay sequence editing events - though the algorithm could easily be adapted to use any event source and compatible CRDT.\n\nGiven the CRDT is defined by the following set of methods:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n  ```haskell\n  initialState :: CRDT\n  query :: CRDT -> Doc\n\n  -- Modify a CRDT by applying a local update.\n  update :: (CRDT, (Id, Event)) -> CRDT\n\n  -- Statefully merge 2 CRDTs. Merge must be commutative and idempotent.\n  merge :: (CRDT, CRDT) -> CRDT\n\n  mergeAll :: [CRDT] -> CRDT\n  mergeAll crdts = foldl initialState crdts\n  ```\n]\n\nThe replay function then can be defined recursively like this:\n\n#code(\n  block-align: none,\n  row-gutter: 3pt,\n  fill: none,\n  // indent-guides: 1pt + gray,\n  // column-gutter: 5pt,\n  // inset: 5pt,\n  // stroke: 2pt + black,\n  // stroke: none,\n)[\n```haskell\n-- Given some helper functions for accessing events:\nlookup :: Graph -> Id -> (Event, [Id])\nallIds :: Graph -> [Id]\n\nemptyDoc :: Doc\nemptyDoc = query initialState\n\n-- Get the CRDT's state immediately after any event\ncrdtAfterEvent :: Graph -> Id -> CRDT\ncrdtAfterEvent graph, id = update crdtBeforeEvent event\n  where\n    (event, parentIds) = lookup graph id\n    crdtBeforeEvent = replay graph parentIds\n\n-- Replay the transitive subset of the graph named by version [Id]\nreplay :: Graph -> [Id] -> CRDT\nreplay graph, ids = mergeAll (map (crdtAfterEvent graph) ids)\n\nreplayAll :: Graph\nreplayAll graph = replay graph (allIds graph)\n```\n]\n\n// CLAIM: Using an event graph, in combination with this replay function ($q$ = *replayAll*), this algorithm will generate the same document state at all times to the equivalent CRDT.\n\n*/\n\n="],[89025,2232,""],[90360,0,"@tr"],[90361,2,""],[90361,0,"traces-table shows "],[90374,6,""],[90374,0,"gives an overview of the editing traces used in our evaluation ()"],[90438,0,"@ben"],[90439,3,""],[90439,0,"benchmarking"],[90452,0,"."],[64456,1,""],[64827,45,""],[64866,0,", collected using an instrumented text editor "],[64866,205,""],[64865,1,""],[66311,0,"\n, collected using an instrumented text editor We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article."],[66312,0,"/ Sequential Traces: (S1, S2, S3): "],[66347,3,""],[66347,0,"C"],[66390,0,"."],[64827,0,", or multiple authors taking turns"],[64762,34,""],[64762,0,"A"],[65569,0,"\n\n"],[65570,0,"Keystroke-granularity history of a"],[64828,23,""],[64828,0," with "],[64829,5,""],[64829,0,"("],[64844,0,")"],[64762,8,""],[64762,0,"One"],[64766,23,""],[64766,0,"author"],[64766,6,""],[64766,0,"user writing a document"],[64766,23,""],[64766,0,"author"],[64909,0," with 1 second latency.\n"],[64933,179,""],[65408,0,"\n in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n"],[65409,1,""],[66331,240,""],[65408,0,"\n/ Sequential Traces: (S1, S2, S3): Collected using an instrumented text editor. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n"],[65406,1,""],[65405,1,""],[65404,1,""],[65403,1,""],[65402,1,""],[65645,0,"/ Concurrent Traces: (C1, C2): "],[65643,1,""],[65853,0,"/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n"],[64966,0,"Derived from "],[64979,52,""],[65059,274,""],[65059,0,"Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n"],[65059,273,""],[64965,0," Event graph"],[64978,1,""],[64978,0,"d"],[64990,0," branching/merging"],[64990,0," a"],[65015,75,""],[65015,0,"commit history. These traces have long-running concurrent branches."],[65062,11,""],[64977,0,"s"],[64991,2,""],[65027,1,""],[65027,0,"ies"],[64932,0," Many short-lived branches, frequent merges."],[64958,1,""],[64958,0," with"],[64474,0,"\n\nAs there is no existing benchmark for collaborative text editing, we collected a set of text document "],[64569,9,""],[64569,0,"editing traces from real documents that we can replay to evaluate different algorithms.\nT"],[64657,1,""],[64657,0,"We use sven"],[64667,1,""],[64666,1,""],[64665,1,""],[64665,0,"even traces in this paper, which fall in three categories:"],[64905,47,""],[64656,0,"\n#if not anon"],[64665,4,""],[64665,0,"anonymous {}"],[64676,0,"[]"],[64677,1,""],[64677,0,"]"],[64871,56,""],[64677,0,"we have made freely available on GitHub @editing-traces."],[64677,1,""],[64677,0,"W"],[64689,0," these traces"],[64817,148,""],[64564,5,""],[64617,33,""],[65172,1,""],[64192,6,""],[64330,4,""],[64333,10,""],[64333,0,"times"],[63851,0,"#footnote["],[64450,0,"]"],[63861,0,"Details: "],[63861,0,"Experimental "],[63874,1,""],[63874,0,"d"],[63465,386,""],[64088,0,"\n/ Speed: The CPU time to load a document into memory, and to merge a set of updates from a remote replica.\n/ Memory usage: The RAM used while a document is loaded and while merging remote updates.\n/ Storage size: The number of bytes needed to persistently store a document or replicate it over the network.\n\nAll code and data used in our benchmarks is published alongside this article.\n"],[63464,1,""],[64396,78,""],[64395,1,""],[64562,4,""],[64573,0,"\n  "],[64573,0,"\n  All code and data used in our benchmarks is published alongside this article.\n"],[64576,0,"["],[64654,0,"]"],[64656,0,"} else {}"],[64664,1,""],[64739,0,"\n  }"],[64740,2,""],[64738,1,""],[64537,19,""],[64722,0,"For this evaluation "],[64742,1,""],[64742,0,"w"],[64745,3,""],[64745,0,"replay"],[64764,14,""],[64635,0,"#footnote[]"],[64645,0,"TODO: anonymised link to download"],[64602,32,""],[64602,0,"available for anybody to reproduce"],[65033,0,"$approx$"],[65245,0," and infrequent merges"],[65206,19,""],[65206,0,"L"],[65206,0,"Multiple "],[65215,1,""],[65215,0,"l"],[65260,0,"\nThe sequential and concurrent traces "],[65261,0,"We recorded "],[65273,1,""],[65273,0,"t"],[65310,0,"with keystroke granularity using an instrumented text editor.\nTo make the traces easier to compare, we normalised them so that each traces "],[65448,1,""],[65447,1,""],[65447,0," contains $$"],[65458,0,"approx"],[65465,0,"500k inserted characters ()"],[65491,0,"$$"],[65492,0,"approx"],[65499,0,"100 printed pages"],[65517,0,"."],[65519,29,""],[65519,0,"F"],[65519,1,""],[65519,0,"We extended shorter traces to this length by s"],[65564,1,""],[65564,0,"repeating it several times."],[65592,0,"\n/*"],[67227,0,"*/"],[65591,0,"\nMore detail "],[65592,12,""],[65592,0,"See @traces-appendix for details."],[65617,0,"more "],[65491,8,""],[65491,0,">"],[65567,2,""],[65567,0,"them"],[65612,5,""],[65622,1636,""],[65621,1,""],[65620,1,""],[89557,0,"\n/*\n/ Sequential Traces: (S1, S2, S3): Collected using an instrumented text editor. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n/ Concurrent Traces: (C1, C2): in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n*/"],[91192,2,""],[89558,3,""],[89557,0,"\n\n"],[89558,0,"// TODO: comment on how the traces were collected, and that we have the consent of the authors to use their writing. In the case of the Git-derived traces, it's public data"],[69259,602,""],[69079,78,""],[69644,0,"//"],[70379,281,""],[70378,1,""],[70377,1,""],[65663,163,""],[65685,1,""],[65685,0,"in many"],[65721,8,""],[65749,7,""],[65753,9,""],[65761,6,""],[65761,0," remote"],[65776,0," into the local state"],[65798,0,"\n"],[65799,1,""],[65798,0,"\nTo measure a worst-case merge, "],[65802,7,""],[65802,0,"simulate"],[65831,0,"we start with an empty document and then merge an entire editing trace into it; in the case of #al"],[65927,2,""],[65927,0,"algname this means replaying the full trace."],[65972,81,""],[66091,0,"\n//"],[66014,7,""],[65792,0,"replica "],[65917,3,""],[65917,0,".\nI"],[66036,55,""],[66036,0,"perform this merge"],[66224,0,"After completing this merge, we saved the resulting local replica state to disk and loaded it back into memory.\n"],[66307,0," measured the time to"],[66334,1,""],[66333,1,""],[66355,131,""],[66355,0,"In "],[66358,1,""],[66358,0,"t"],[66382,0," we tested, loading a document e"],[66413,1,""],[66413,0,"is equivalent to merging the remote events and takes the same time"],[66479,109,""],[66480,0,"\nOn the other hand,"],[66515,14,""],[66516,0,"only need to "],[66529,19,""],[66538,31,""],[66538,0,"final document state"],[66568,0," in order to edit a document"],[66597,0,"\n"],[66598,1,""],[66596,0," ()"],[66598,0,"historical events are only needed to perfor"],[66616,25,""],[66598,0,"loading "],[66624,0,"can be deferred until a merge is requried"],[66668,125,""],[66661,0,"i"],[66663,1,""],[66668,0,"This takes 120#"],[66682,1,""],[66682,0,"$$"],[66683,0,"mu"],[66686,0,"s"],[66683,0,"upright)"],[66690,1,""],[66690,0,"("],[66693,0," s)"],[66697,1,""],[66697,0," or less on all of our traces -- more than 100 times faster than the fastest CRDT load time."],[65684,0,"s"],[65806,0,", and loading a document from disk so that it can be displayed and edited"],[65724,2,""],[65724,0,"are"],[65708,15,""],[65708,0,"editors"],[66421,0,"\nThe time to load each document "],[66422,32,""],[66735,0,"As shown in @chart-remote "],[66761,1,""],[66761,0,"t"],[66760,0,","],[66546,0,", so we don't show load "],[66569,1,""],[66569,0,"ing times for CRDTs separately in @chart-remote "],[66616,1,""],[66387,0," CPU"],[66561,1,""],[66561,0,"o"],[66560,0," "],[66565,0,"CRDT "],[66565,5,""],[66570,0,"CRDT "],[66588,10,""],[66894,13,""],[66894,0,"hundreds of"],[66857,2,""],[66859,0,"s"],[66952,0,"// "],[67878,0,"\nWe can see in @chart-remote that "],[67912,123,""],[67924,4,""],[67927,68,""],[67927,0," are very fast to merge"],[67954,7,""],[67965,6,""],[67986,0,"\n"],[67985,0,", since they simply apply the operations with no transformation"],[68049,0,"\nHowever, OT performance degrades dramatically on the asynchronous traces ()"],[68124,0,"6 seconds for A1, and 1 hour for A2"],[68160,0,", whereas #al"],[68171,2,""],[68171,0,"algname "],[68161,0," due to the quadratic complexity of the algorithm,"],[68160,1,""],[68228,0,"remains fast on these traces.\n\nOn the concurrent ()"],[68278,0,"C1, C2"],[68285,0," and asynch"],[68290,6,""],[68290,0,"asynchronous ()"],[68304,0,"A1, A2"],[68311,0," traces, the "],[68241,15,""],[68241,0,"(160,000)"],[68249,0,"$$"],[68250,0,"times"],[68256,0," faster for A2"],[68264,3,""],[68264,0,"in the case of"],[68710,261,""],[68302,0," traces"],[68336,1,""],[68336,0,"trace "],[68346,12,""],[68350,0,"merge time of #a"],[68365,1,""],[68365,0,"algname is similar to that of our refe"],[68399,4,""],[68399,0,"reference CRDT"],[68343,1,""],[68343,0,"2"],[68413,0,", which in turn is signifi"],[68432,7,""],[68432,0,"significantly faster than the state-of-the-art Yjs and Automerge CRDT libraries.\nOn the sequential traces "],[68537,1,""],[68537,0,", and on trace C1 ()"],[68556,0,"which"],[68552,1,""],[68552,0,"A"],[68561,0," contains large sequential sections"],[68597,0,", #fea"],[68602,1,""],[68601,1,""],[68600,1,""],[68600,0,"al"],[68600,2,""],[68600,0,"algname "],[68414,0," since they are performing similar work.\n"],[68455,17,""],[68455,0,"Both are"],[68543,0,"; this is due to implementation differences and not fundamental algorithmic reasons"],[68723,0,"outperforms our reference CRDT by a factor of "],[68654,60,""],[68709,0,"\nand on trace A1 (which contains large sequential sections)"],[68652,1,""],[68708,0,"7--10$$"],[68714,0,"times"],[68720,1,""],[68720,0,", "],[68627,0,"\n"],[68781,0," #a"],[68783,1,""],[68783,0,"algname is almost 5$$"],[68803,0,"times"],[68809,0," faster.\nThe ratios are higher when comparing to Yjs or Automerge.\nThis speedup is due to #a"],[68900,1,""],[68900,0,"algname's ability to clear its "],[68933,358,""],[68931,234,""],[68818,28,""],[68818,0,"C"],[68826,1,""],[68825,1,""],[68824,1,""],[68824,0,"ed"],[68846,0,", this "],[68825,1,""],[68824,1,""],[68824,0,"ing"],[68854,0,"speedup is greater still"],[68885,7,""],[68885,0,"effect"],[68885,7,""],[68794,7,""],[69247,0,"\nWe see a significant speed "],[69274,1,""],[69248,26,""],[69248,0,"We see that the optimisation is effective for S1, S2, S3, and A1, whereas for C1, C2, and C2 it "],[69343,1,""],[69342,1,""],[69341,1,""],[69340,1,""],[69339,1,""],[69338,1,""],[69338,0,"A2 it makes little difference."],[69592,388,""],[69590,0,"\n\nC1 and C2 hit some pathological case in the automerge library. We have reported this to the package maintainers.\n"],[69591,0,"\nThe "],[69592,4,""],[69591,1,""],[69592,0,"Traces "],[69592,0,"The merge times on "],[69611,1,""],[69611,0,"t"],[69627,0," are outliers. This appears to be a bug"],[69666,55,""],[69666,0,", which w"],[69592,3,""],[69592,0,"Automerge's"],[69731,1,""],[69797,14,""],[69797,0,"A2"],[69426,0,"CPU "],[69430,1,""],[69430,0,"t"],[69478,13,""],[69478,0," trace"],[69426,5,""],[69426,0,"T"],[69367,0," ()A"],[69370,1,""],[69369,0,"A2 contains no critical versions"],[67358,0,"CPU "],[67418,0,","],[67420,3,""],[67420,0,"or to"],[67404,8,""],[67410,0," in each trace (as received from a remote replica)"],[67509,156,""],[67279,7,""],[67297,30,""],[67617,10,""],[67632,13,""],[67632,0,"at 17 ms"],[67636,1,""],[67636,0,"6"],[67641,0,"indicates the time budget available to an application that wants to show the results of an operation by the next frame, assuming a monitor with a "],[67787,17,""],[67789,0," "],[67790,1,""],[67790,0,"H"],[67792,0," refresh rate"],[67772,7,""],[67772,0,"display"],[70135,16,""],[70135,0,"C1"],[70142,13,""],[70142,0,"C2"],[69952,4,""],[69952,0,"trace"],[69984,0," to merge"],[69750,10,""],[69750,0,"merging"],[63577,40,""],[63487,7,""],[63487,0,"setup"],[70275,3,""],[70291,3,""],[70295,0,"s"],[70426,0,"the "],[70436,10,""],[70436,0,"process"],[70502,0," "],[70502,1,""],[70515,42,""],[70502,0," suchas "],[70507,0," "],[70511,0,"#al"],[70512,2,""],[70512,0,"algname's internal state"],[70549,0,", and the event graph is s"],[70574,1,""],[70574,0,"written out to disk"],[70357,0,"\n"],[70358,1,""],[70594,0,"\nFor the CRDT impl"],[70608,4,""],[70608,0,"implementations there is no signi"],[70636,5,""],[70636,0,"significant difference betwen "],[70665,1,""],[70664,1,""],[70664,0,"en peak and stead-state"],[70681,0,"y"],[70688,0," memory use.\n\n#al"],[70703,2,""],[70703,0,"algname's peak memory use is compara"],[70732,7,""],[70732,0,"comparable to our reference CRDT -- approxim"],[70768,8,""],[70768,0,"approximatelydo"],[70782,1,""],[70781,1,""],[70781,0," double on the concurrent traces, and slightlye "],[70828,1,""],[70827,1,""],[70827,0," less on the sequential traces."],[70789,2,""],[70789,0,"for"],[70859,0,"\nHowever, the steady-state memory use of #algname is 1-2 orders "],[70913,0,"-"],[70924,0,"of magnitu"],[70927,7,""],[70927,0,"magnitude lower.\nThis is a significant result"],[70942,0," -- below 1 MiB for all of our traces"],[70607,16,""],[70607,0,"s"],[70749,3,""],[70749,0,":"],[70992,0,", since the steady state is what matters while "],[71033,6,""],[71033,0,"during normal operation while a document is being edited.\n\nOT has the same low memory use as #a"],[71127,1,""],[71127,0,"algname in the stead state, "],[71147,0,"y"],[71156,0,"but significantly higher peak memory use on the C1, C2, and A2 traces."],[71226,1,""],[71230,0," reason is that our"],[71267,10,""],[71225,0," (6.8GB of RAM "],[71230,0," "],[71232,0,"i"],[71242,0,"for A2)"],[71536,86,""],[71248,0,"; The computer we used for benchmarking had enough RAM to prevent swapping in all cases."],[71335,1,""],[71250,1,""],[71250,0,"t"],[71322,13,""],[71434,0,"\n"],[71435,1,""],[71434,0,"\nIt would be possible to reduce the memory use o"],[71234,7,""],[71475,0,"f this OT implementation, at the cost of increased merge times."],[71539,176,""],[71428,32,""],[71428,0,"T"],[71468,1,""],[71468,0," cyu"],[71471,1,""],[71470,1,""],[71470,0,"ould be reduced"],[71600,9,""],[71600,0,"merging"],[71628,4,""],[71644,10,""],[71644,0,"only retain the current documente "],[71677,1,""],[71676,1,""],[71676,0," text in the steady state,"],[71703,4,""],[71703,0,"but"],[71726,0," at peak"],[71768,73,""],[71090,0,"\n\nYjs has slightly higher memory use than our reference CRDT, and Automerge sig"],[71166,3,""],[71166,0,"significantly higher. "],[71187,1,""],[71187,0,"\nThe very high m"],[71188,3,""],[71188,0,"Automerge's"],[71211,0,"emory use on A"],[71224,1,""],[71224,0,"C1 and C2 is probably a bug "],[71403,74,""],[71251,1,""],[71251,0,".\n; the computer we used for benchmarking had enough RAM to prevent swapping"],[71253,3,""],[71253,0,"T"],[71325,0," in all cases."],[71188,0,"As before, "],[71188,11,""],[68368,4,""],[68377,1,""],[68376,1,""],[68375,1,""],[71776,11,""],[71776,0,"an editing trace"],[71792,7,""],[71792,0," from another replica"],[71793,0,"received "],[70547,0," after"],[70547,6,""],[70542,1,""],[70601,23,""],[70601,0,"the"],[70656,0," is small"],[71071,0,"\nNote also that we report the peak memory usage for replaying the entire trace; in most practical scenarios #fe"],[71181,1,""],[71180,1,""],[71180,0,"al"],[71180,2,""],[71180,0,"algname would only need to replay a recent subset of the graph, which would use accordingly "],[71256,4,""],[71268,0,"use less memory."],[71072,0,"=="],[71073,1,""],[71072,1,""],[71072,0,"//"],[70698,10,""],[70698,0,"similar"],[70780,39,""],[70775,5,""],[70728,0," slightly less on the sequential traces, and "],[70772,1,""],[70738,4,""],[70738,0,"lower"],[70905,36,""],[70905,0,"than the best CRDT"],[71052,2,""],[71062,19,""],[71080,164,""],[71080,0,"would be lower when replaying a subst"],[71116,1,""],[71116,0,"et of an event graph, which is likely to be the common case"],[71061,0," that"],[71448,4,""],[71712,3,""],[71692,1,""],[71692,0,"is"],[71705,23,""],[74338,10,""],[74338,0,"F"],[74509,2,""],[74509,0,","],[74550,13,""],[72433,436,""],[73770,76,""],[72443,5,""],[72687,0,"storing "],[72704,10,""],[72681,7,""],[72681,0,". "],[72682,1,""],[72682,0,"\nS"],[74445,2305,""],[66382,0," again"],[66382,6,""],[66851,56,""],[66691,0,", which hundreds of times faster than the fastest CRDT load time."],[66699,0,"is "],[66759,0,"\nThey can defer"],[66775,1,""],[66775,0,"the "],[66786,0," of"],[66808,16,""],[66833,1,""],[66835,89,""],[66834,1,""],[66833,0,"; CRDTs cannot defer in the same way as they require in-memory metadata "],[69659,33,""],[69659,0,"."],[66835,0,"existing "],[66914,0,"to supp"],[66917,4,""],[66917,0,"allow a document to be edited"],[66895,51,""],[66895,0,"the CRDT state in memory "],[66863,15,""],[66863,0,"loading"],[66912,0,"in or "],[66917,1,""],[66917,0,"der to "],[66912,12,""],[66912,0,"to allow a user to make local edits"],[66576,19,""],[66591,0," load documents hundreds of times faster because they"],[66727,68,""],[66726,1,""],[66725,1,""],[66725,0,"; t"],[66800,0,".\n"],[66802,3,""],[66802,0,"E"],[66753,0," and replay"],[66841,7,""],[66841,0,"this work"],[66882,0,"to be "],[74436,2607,""],[74681,3,""],[74436,245,""],[74435,1,""],[79939,0,"\n// In our testing we have found the _worst case_ performance for #algname is similar to the _expected_ performance when using a similar CRDT library. The best case performance of #algname is significantly faster than that of an equivalent CRDT.\n"],[74151,27,""],[74151,0,"storing edit traces"],[74219,26,""],[74219,0,"as is the case with"],[74242,10,""],[74269,0," in each bar"],[74327,7,""],[74327,0,"is"],[74301,9,""],[74301,0,"final"],[75389,0,"ir original"],[75406,40,""],[75467,37,""],[75507,18,""],[75507,0,"implement"],[75860,0,". //"],[75864,1,""],[76284,39,""],[76284,0,"consist of"],[76384,12,""],[76496,10,""],[76496,0,"s"],[75791,8,""],[75791,0,"viewee"],[75796,1,""],[75796,0,"=d"],[75797,1,""],[75797,0,"d"],[75797,1,""],[75796,1,""],[75796,0,"d"],[75779,21,""],[75779,0,"is also"],[76134,43,""],[76134,0," going back to"],[76626,117,""],[76928,12,""],[77011,0,"\n/*"],[77594,0,"\n*/"],[77666,0," family of"],[77723,7,""],[78108,4,""],[78108,0,","],[78131,22,""],[78132,92,""],[78131,1,""],[78130,1,""],[78130,0,"."],[78065,0," and they need to be held in memory when a document is being edited, causing memory overhead."],[78066,20,""],[78114,24,""],[78114,0,","],[78114,1,""],[78113,1,""],[78158,0,"and "],[77771,75,""],[77735,54,""],[77652,0," @Roh2011RGA, Treedoc @Preguica2009, and Logoot @Weiss2010, and Fugue @fugue"],[77664,9,""],[77678,12,""],[77689,11,""],[77665,14,""],[77653,0,"@Preguica2009 "],[77679,11,""],[77686,0,"@Weiss2010 "],[77604,10,""],[78289,5,""],[78293,0,"s"],[77835,5,""],[77835,0,"eacg"],[77838,1,""],[77838,0,"h"],[77930,10,""],[77930,0,"ones"],[78394,8,""],[78394,0,"state"],[78472,3,""],[78472,0,".\nM"],[78441,9,""],[78441,0,"while merging"],[78424,0," in-"],[78428,1,""],[78434,9,""],[78825,0,"\n// TODO: also mention Pijul and Darcs?"],[79439,6,""],[79439,0,"guarantee"],[79458,8,""],[79357,10,""],[79357,0,"systems"],[79357,7,""],[79357,0,"approaches"],[79357,10,""],[79357,0,"systems"],[79374,10,""],[79783,43,""],[79783,0,"is orders of magnitude faster than"],[79849,0," in the best case, and similar to the best existing algorithms in the worst case"],[79777,5,""],[79777,0,".\nIt"],[79865,0,"s"],[79872,7,""],[79872,0,"competitive"],[79884,2,""],[79884,0,"with"],[79907,10,""],[79907,0,"implementations"],[79940,0,"s"],[79475,246,""],[79647,4,""],[79647,0,"fastest"],[79990,37,""],[80248,0," by replaying subsets of the egr"],[80279,1,""],[80278,1,""],[80277,1,""],[80277,0,"graph"],[80045,11,""],[80045,0,"S"],[80274,289,""],[80471,10,""],[80626,0,"\n"],[82378,0,"//"],[82821,1901,""],[81520,0,"@traces-table gives an overview of the editing traces used in our evaluation (@benchmarking).\n\n// TODO: comment on how the traces were collected, and that we have the consent of the authors to use their writing. In the case of the Git-derived traces, it's public data\n\n/ Sequential Traces: (S1, S2, S3): Collected using an instrumented text editor. We use the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf, the text of an 8,800-word blog post @crdts-go-brrr, and the source for this article.\n/ Concurrent Traces: (C1, C2): in realtime, recorded with keystroke granularity. We added 0.5–1 second of artificial latency between the collaborating users to increase the incidence of concurrent operations.\n/ Asynchronous Traces: (A1, A2): We reconstructed the editing trace of some files in Git repositories. The event graph mirrors the branching/merging of Git commits. Since Git does not record individual keystrokes, we generated the minimal edit operations necessary to perform each commit's diff. We use `src/node.cc` from the Git repository for Node.js @node-src-nodecc and `Makefile` from the Git repository for Git itself @git-makefile.\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n\n"],[84280,1,""],[84279,1,""],[81614,0,"#if anonymous {\n  [All code and data used in our benchmarks is available for anybody to reproduce.#footnote[TODO: anonymised link to download]]\n} else {\n  [We have made these traces freely available on GitHub @editing-traces.]\n}\n"],[81633,123,""],[81613,0,"\nAll traces are freely available"],[81679,43,""],[81665,0,")"],[81665,1,""],[81665,0,"()"],[81666,1,""],[81666,0,")."],[81666,0,"link "],[81645,0," for benchmarking collaborative text editing algorithms"],[81726,0,"elided for anonymous review"],[81798,0,"\n\nThe tranc"],[81808,1,""],[81807,1,""],[81807,0,"ces represent the following documents:"],[81798,1,""],[82039,0,":"],[82039,1,""],[82041,0,"Trace "],[82047,1,""],[82111,67,""],[82049,0,"  the LaTeX source of a journal paper @Kleppmann2017 @automerge-perf"],[82050,0,"is"],[82089,0,"#if not an"],[82097,2,""],[82097,0,"anonymous {["],[82139,0,"]} written by two authors who took turns."],[82191,44,""],[82933,0,"\n\n"],[82934,0,"Collected using an instrumented text editor."],[82180,1,""],[82183,15,""],[82183,0," is"],[82222,0,"#if not anon"],[82230,4,""],[82230,0,"anonymous {}"],[82241,0,"[]"],[82242,2,""],[82257,0,"]}."],[82260,5,""],[82260,0," S3 is"],[82212,0,", single-author"],[82309,0,", which you are currently reading"],[82300,1,""],[82299,1,""],[82299,0,"e"],[82308,7,""],[82308,0," that"],[82286,10,""],[82286,0,"text of"],[82296,1,""],[82296,0,"is"],[82040,0," These traces have no concurrency. They were recorded using an instrumented text editor that recorded keystroke-granularity editing events."],[83127,44,""],[81823,0," editing history of the"],[84431,0,"Avg. "],[84440,0,"."],[84054,11,""],[82522,1,""],[82522,0,"Trace "],[82530,0," is \n"],[82534,0,"two users in the same document, writing a reflection on an episode of a TV series they have just watched. C2 is two users collaboratively reflecting on going to clown school together. We recorded these real-time collaborations with keystroke granul"],[82776,6,""],[82776,0,"granularity, and we added 1 second ()"],[82812,0,"C1"],[82815,0," or 0.5 sec"],[82809,1,""],[82808,1,""],[82807,1,""],[82806,1,""],[82805,1,""],[82820,1,""],[82819,1,""],[82819,0," ()"],[82821,0,"C2"],[82824,0," "],[82825,83,""],[82817,1,""],[82817,0,"~"],[82803,1,""],[82803,0,"~"],[71560,1,""],[71560,0,"~"],[82805,0,"ec"],[82821,0,"ec"],[82955,10,""],[63914,18,""],[63914,0,", which we ran"],[63789,0," reported"],[63821,9,""],[63914,0," trace A2"],[83223,6,""],[83223,0,"Trace A1 is"],[83301,0,","],[83306,0," A2 is"],[83379,744,""],[83378,1,""],[84672,0,"\n\n\nThe recorded editing traces originally varied a great deal in size. We have roughly standardised the sizes of all editing traces by duplicating the recorded event graphs multiple times in our data files. For example, a trace containing events ${A, B, C, ...}$ would be repeated to become ${A_1, B_1, C_1, ..., A_2, B_2, C_2, ..., A_3, B_3, C_3, ...}$. Each repeated copy of the graph happens causally after all earlier repetitions, so for example ${A_1, B_1, C_1, ...} -> {A_2, ...} -> {A_3, ...}$. All traces have been normalised this way to contain approximately 500k inserted characters. If printed, the resulting documents would be up to about 100 pages in length, depending on the number of deleted characters and the printed font size.\n"],[84673,2,""],[84671,0,"\n\nWe recorded the sequential and concurrent traces ourselves, collaborating with friends or colleagues.\n#if anon"],[84779,4,""],[84779,0,"anonymous {}"],[84790,0,"[]"],[84791,0,"Please note that as a result, the trace data is non "],[84842,1,""],[84841,1,""],[84841,0,"t anonymised."],[84835,0," contains the names of the authors of this paper, and"],[84889,0,"it "],[84912,0,"\nAll contributors to the traces have given their consent for their edits to be "],[84979,12,""],[84979,0,"keystrokes to be made publicly available and used for benchmarking algorithms."],[85598,50,""],[85126,0," To allow easier comparison of measurements between traces,"],[85186,1,""],[85186,0,"w"],[85246,0," to contain approximately 500k inserted characters."],[85126,1,""],[85126,0,"\n"],[85297,0,"\nWe did this"],[82466,7,""],[82466,0,"paper"],[85021,0," to be"],[85387,0,", without introducing any concurrency (so "],[85426,3,""],[85426,0,"that is, all events from one run of the trace happen either before or after all events from another run)"],[85531,0,"\n"],[85532,489,""],[85531,0,"\nWe repeat the original S1 and S3 traces 3 times, the original C1 and "],[85563,1,""],[85563,0,"2"],[85601,0,"C2 traces 25 times, and the original A2 trace twice.\nThe statistics given in @traces-table are after the duplication."],[85702,4,""],[85050,10,""],[85050,0,"purposes"],[84977,0,"recorded "],[84995,1,""],[84995,0," data"],[85072,0,"\nThe asynchronous traces are derived from public data on GitHub."],[85408,8,""],[85408,0,"shorter"],[81874,174,""],[83228,0,", authors"],[83468,0,"// "],[83491,0,"\n    str(authors)"],[83500,7,""],[83500,0,"n"],[83230,7,""],[83230,0,"n"],[83495,0,"u"],[83231,0,"u"],[83497,0,"m"],[83232,0,"m"],[83499,0,"_"],[83233,0,"_"],[83501,0,"a"],[83234,0,"a"],[83503,0,"u"],[83235,0,"u"],[83505,0,"t"],[83236,0,"t"],[83507,0,"h"],[83237,0,"h"],[83509,0,"o"],[83238,0,"o"],[83511,0,"r"],[83239,0,"r"],[83513,0,"s"],[83240,0,"s"],[83791,8,""],[83791,0,"Authors"],[83863,0,", 2"],[83896,0,", 1"],[83929,0,", 2"],[83963,0,", 2"],[83997,0,", 2"],[84032,0,", 194"],[84069,0,", 299"],[83522,0,"\n\nasdf"],[83524,4,""],[83524,0,"#null"],[83528,1,""],[83527,1,""],[83526,1,""],[83526,0,"ill"],[83528,1,""],[83527,1,""],[83527,0,"l"],[83527,1,""],[83526,1,""],[83525,1,""],[83525,0,"None"],[83525,4,""],[83525,0,"none or []as"],[83536,1,""],[83535,1,""],[83534,0,"asdf"],[83530,2,""],[83530,0,"||"],[83525,14,""],[83525,0,"I"],[83525,1,""],[83525,0,"none || [asdf])"],[83525,0,"("],[83532,1,""],[83531,1,""],[83530,1,""],[83526,0,"if "],[83533,0," == on"],[83538,1,""],[83537,1,""],[83537,0,"none"],[83524,25,""],[83523,1,""],[83522,1,""],[83303,0,"\n  \n  "],[83304,2,""],[83305,2,""],[83304,0,"\n  let a = if"],[83316,1,""],[83315,1,""],[83314,1,""],[83314,0," num_authors\n  if a == none {"],[83342,1,""],[83342,0,"["],[83342,1,""],[83327,15,""],[83327,0,"  if a == none {\n    a = "],[83344,8,""],[83344,0,"    a = str(data.num_agents)\n    "],[83373,4,""],[83373,0,"  }"],[83352,4,""],[83367,1,""],[83573,11,""],[83573,0,"a"],[84093,3,""],[84093,0,"11"],[84093,2,""],[84093,0,"none"],[84131,3,""],[84131,0,"none"],[84024,1,""],[84024,0,"none"],[84543,8,""],[84543,0,"Authors"],[83537,27,""],[83536,1,""],[83230,0,"authors = "],[83239,1,""],[83238,1,""],[83237,1,""],[83237,0,": "],[83230,9,""],[83230,0,"authiors: "],[83239,1,""],[83238,1,""],[83237,1,""],[83236,1,""],[83235,1,""],[83234,1,""],[83234,0,"ors: "],[83230,7,""],[83230,0,"num_authors"],[83243,11,""],[83243,0,"data.num_agents"],[83243,15,""],[83243,0,"num_authors"],[83243,11,""],[83243,0,"none"],[83313,0,"// "],[84115,0,"n"],[84077,0,"n"],[84042,0,"n"],[84005,0,"n"],[83971,0,"n"],[83938,0,"n"],[83905,0,"n"],[84122,0,"u"],[84083,0,"u"],[84047,0,"u"],[84009,0,"u"],[83974,0,"u"],[83940,0,"u"],[83906,0,"u"],[84129,0,"m"],[84089,0,"m"],[84052,0,"m"],[84013,0,"m"],[83977,0,"m"],[83942,0,"m"],[83907,0,"m"],[84136,0,"_"],[84095,0,"_"],[84057,0,"_"],[84017,0,"_"],[83980,0,"_"],[83944,0,"_"],[83908,0,"_"],[84143,0,"a"],[84101,0,"a"],[84062,0,"a"],[84021,0,"a"],[83983,0,"a"],[83946,0,"a"],[83909,0,"a"],[84145,5,""],[84145,0,"num_authors"],[84102,5,""],[84102,0,"num_authors"],[84062,5,""],[84062,0,"num_authors"],[84020,5,""],[84020,0,"num_authors"],[83981,5,""],[83981,0,"num_authors"],[83943,5,""],[83943,0,"num_authors"],[83905,5,""],[83905,0,"num_authors"],[84192,0,":"],[84143,0,":"],[84097,0,":"],[84049,0,":"],[84004,0,":"],[83960,0,":"],[83916,0,":"],[84199,0," "],[84149,0," "],[84102,0," "],[84053,0," "],[84007,0," "],[83962,0," "],[83917,0," "],[83341,1,""],[83341,0,"num_authors"],[83367,1,""],[83367,0,"num_authors"],[83574,1,""],[83574,0,"anu"],[83576,1,""],[83575,1,""],[83574,1,""],[83574,0,"num_"],[83574,4,""],[83574,0,"num_authors"],[83396,0," - 10"],[83398,3,""],[83396,2,""],[84221,19,""],[84170,19,""],[84072,19,""],[83979,16,""],[516,0,"\n"],[516,0,"\nl"],[517,1,""],[517,0,"#let draft = true\n#"],[535,1,""],[535,0,"#let background = none\n#if "],[559,3,""],[559,0,"if 1 < 2 {\n  \n}"],[562,5,""],[562,0,"1 < 2"],[559,15,""],[559,0,"if "],[561,1,""],[560,1,""],[559,1,""],[558,1,""],[558,0,"#if draft {\n  "],[570,2,""],[570,0,"}"],[569,0,"\n  background = roa"],[587,1,""],[587,0,"tate(64deg, text(120pt, fill: rgb(\"DFDB04\")))[*DRAFT*]("],[641,1,""],[641,0,")"],[567,0," == true"],[638,1,""],[568,8,""],[810,0,"\n  ba"],[813,2,""],[813,0,"background: bac"],[825,3,""],[825,0,"background"],[626,1,""],[626,0,"D"],[440,4,""],[440,0,"false"],[2649,0,"\n"],[2649,0,"\n#if draft {\n  \n  "],[2662,2,""],[2663,2,""],[2663,0,"}"],[2662,0,"  #align(center, text(16pt)[\n    \n    "],[2691,4,""],[2692,4,""],[2692,0,"  ])"],[2691,0,"    asdkfjlkj"],[2664,1,""],[2694,9,""],[2694,0,"DRAFT #data"],[2704,1,""],[2704,0,"e"],[2701,4,""],[2701,0,"datetime.todat"],[2714,1,""],[2713,1,""],[2713,0,"y("],[2714,1,""],[2713,1,""],[2713,0,"ay().display()"],[2649,86,""],[3203,0,"\n#if draft {\n  align(center, text(16pt)[\n    DRAFT #datetime.today().display()\n  ])\n}\n"],[3203,86,""],[2649,0,"\n#if draft {\n  align(center, text(16pt)[\n    DRAFT #datetime.today().display()\n  ])\n}\n"],[2694,5,""],[2694,0,"Draft"],[440,5,""],[440,0,"true"],[534,0,"\n#let draft = true"],[534,0,"\n#let draft = true"],[534,36,""],[534,0,"\n"],[516,1,""],[533,0,"\n}"],[514,2,""],[531,0,"\n  algname = \"Feathertail\""],[488,26,""],[505,0,"\n#if anonymous {"],[472,16,""],[489,0,"\n#let algname = \"Eg-walker\""],[445,27,""],[462,0,"\n\n"],[422,0,"\n// M"],[426,1,""],[426,0,"Is iw"],[430,1,""],[430,0,"t worth "],[426,12,""],[426,0,"We"],[426,2,""],[426,0,"Might be worth re"],[441,2,""],[441,0,"making these two fields"],[441,6,""],[441,0,"pulling"],[465,0," in from a config file instead"],[60747,0,"\n- (optional) "],[60760,1,""],[60750,0,"_Cached transform positions_ "],[60777,1,""],[60788,0,"_"],[60788,0,"."],[60790,0," For "],[60791,4,""],[60791,0,"Assup"],[60795,1,""],[60795,0,"ming the "],[60791,13,""],[60791,0,"The file can optionally also store the "],[60815,5,""],[60825,0,"transformed positions of each event"],[60804,0,"also "],[60865,0,". This data "],[60791,17,""],[60791,0,"We can"],[60856,10,""],[60856,0,"This as"],[60862,1,""],[60862,0,"ds "],[60864,1,""],[60863,1,""],[60863,0,"ds remarkably little overhead"],[60856,36,""],[60856,0,"Because most transformed positions are the same (or similar to) "],[60894,26,""],[60894,0," very similar"],[60864,43,""],[60864,0,"of the similarity between transformed positions and original positions, this "],[60855,0," This allows data to be loaded more"],[60886,4,""],[60886,0,"much more quickly"],[60868,35,""],[60868,0,"the document state to be recomputed more"],[60904,4,""],[60904,0,"much faster in most "],[60919,5,""],[60919,0,"many cases. And"],[60934,2,""],[60934,0," b"],[61020,0,"data adds a very small amount of file overhead in practice."],[60748,0,"// "],[61458,0,"\n\n"],[61459,0,"\n"],[61459,1,""],[61459,0,"The"],[61461,1,""],[61460,1,""],[61459,1,""],[61459,0,"Repli"],[61459,5,""],[61459,0,"Peers can also optionally store the file content after all merging is complete."],[61495,43,""],[61495,0,"text content after merging is complete. This increases"],[61540,9,""],[61540,0,"increases dis "],[61553,1,""],[61553,0,"k space "],[61550,11,""],[61550,0,"file size "],[61559,1,""],[61559,0,", but "],[61539,0," imp"],[61542,1,""],[61541,1,""],[61540,1,""],[61540,0,"im"],[61541,1,""],[61540,1,""],[61540,0,"allows "],[61540,7,""],[61540,0,"removes any overhead when loading data"],[61548,3,""],[61548,0,"all"],[61566,12,""],[61566,0,"opening a document (since the graph can "],[61586,20,""],[61586,0,"the event graph only needs to be read when merging changes)"],[61637,0,"concurrent "],[61656,0,". However it"],[61667,1,""],[61666,1,""],[61665,1,""],[61665,0,", it"],[61690,5,""],[61689,1,""],[61689,0,"."],[61670,0,"results in an "],[61692,1,""],[61691,1,""],[61690,1,""],[61690,0,"sed"],[61468,5,""],[61489,0," resulting"],[61512,0,","],[61519,20,""],[61519,0," all changes have been merged"],[61554,0," allows data to be loaded from diz"],[61587,1,""],[61587,0,"sk without any"],[61601,12,""],[61610,24,""],[61610,0,"."],[61611,74,""],[61611,0," "],[61480,0,"al"],[61481,1,""],[61480,1,""],[61480,0,"also "],[61494,10,""],[61491,0,"a copy of "],[61504,5,""],[61504,0," document's"],[61573,4,""],[61573,0,"documents"],[61596,0,"directly "],[61614,21,""],[61615,0," (The event graph is i"],[61636,1,""],[61636,0,"only needed when merging concurrent changes)."],[61614,0,", without any overhead"],[61628,0,"CPU"],[61630,1,""],[61629,1,""],[61628,1,""],[61628,0,"additona"],[61635,1,""],[61634,1,""],[61628,6,""],[61628,0,"additional "],[61714,47,""],[63569,24,""],[63569,0,"a more "],[64500,6,""],[64500,0,"1.78.0"],[64550,1,""],[64550,0,". Rust code was run"],[64569,7,""],[64583,11,""],[64583,0,"pinned core"],[64594,45,""],[64594,0,". // The reason "],[64599,0,"("],[64611,0," "],[64611,1,""],[64611,0,"is that different cores of the same CPU are clocked differently due to thermal reasons. This "],[64699,5,""],[64699,0,"Using a single core improves run-to-run stability)."],[64796,0," // Nodejs code wans's"],[64800,18,""],[64800,0,"Javascript wasn't run on a single core - nodejs u"],[64840,1,""],[64839,1,""],[64838,1,""],[64838,0,". "],[64840,1,""],[64840,0,"N"],[64848,0,"ses multiple cores to optimize"],[64852,26,""],[64852,0,"additional cores to run its "],[64876,4,""],[64876,0,"the V8 optimizer."],[64817,1,""],[64817,0," pinned "],[64825,6,""],[64825,0,"to"],[64896,0," "],[64896,1,""],[64896,0," Its not exactly like-for-like, but "],[64751,181,""],[64751,0,"For JavaScript (Yjs) we used Node.js v21.7.0. // Javascript wasn't pinned to a single core. Nodejs uses additional cores to run the V8 optimizer. Its not exactly like-for-like, but"],[64594,0," to improve run-to-run-"],[64616,1,""],[64616,0," stability"],[64566,17,""],[64572,0," to a single CPU"],[64927,35,""],[67739,0,"can "],[67739,4,""],[67739,0,"can "],[67782,0," by caching the resulting documet "],[67815,1,""],[67814,1,""],[67814,0,"nt to dsik"],[67823,1,""],[67822,1,""],[67821,1,""],[67821,0,"isk"],[67798,26,""],[67798,0,"final document to "],[67813,3,""],[67813,0,"on disk"],[67813,0,"state "],[67826,0,"."],[67826,0,". ad"],[67829,1,""],[67828,1,""],[67827,1,""],[67826,1,""],[67826,0,", and reloading it directly"],[67855,104,""],[67855,0,"Both of these algorithms can "],[67890,4,""],[67907,1,""],[67907,0,"ing"],[67907,3,""],[67907,0,"y"],[67890,0,"the "],[67890,3,""],[67890,0,"any"],[67912,0,"n"],[67912,1,""],[67912,0,"ing"],[67945,0,"concurrent "],[67945,11,""],[66767,0,"\n// TODO: Long"],[66775,0,"(seph)"],[66787,0," sentence. Revise."],[67626,0," from disk"],[67679,25,""],[67679,0,"."],[67681,4,""],[67681,0,"W"],[67680,1,""],[67679,1,""],[67679,0,", so "],[67684,1,""],[67684,0,"w"],[67866,2,""],[67866,0,"the text"],[67870,0,"document "],[68002,0," However, doing so requires additional disk space."],[68029,0," some"],[68002,1,""],[68002,0,"\n"],[71271,0,"// "],[71270,0,"\n// This is no longer true - I oti"],[71303,1,""],[71302,1,""],[71302,0,"ptimised it."],[71273,0," (Seph)"],[71182,3,""],[71181,1,""],[71180,1,""],[71180,0,"."],[71181,2,""],[71181,0," O"],[67893,1,""],[67893,0,"\n// "],[67893,0,"\nBoth of these algorithms can defer any loading and replaying of historical events until a merge is required."],[67919,13,""],[67919,0,"only need to"],[67938,1,""],[67937,1,""],[67936,1,""],[67949,1,""],[67948,1,""],[67947,1,""],[67947,3,""],[67965,27,""],[67965,0," when merging concurrent changes."],[67932,0,"re"],[67939,11,""],[67961,0," recomputing old versions, or "],[67990,1,""],[67894,9,""],[67894,0,"T"],[67953,29,""],[67980,0," or reconstructing old document versions"],[67984,0,"when "],[67984,5,""],[67984,0,"to "],[68000,1,""],[67999,1,""],[67998,1,""],[68022,112,""],[68031,8,""],[68031,0,"caching the document content p"],[68060,1,""],[68060,0,"on disk"],[68077,5,""],[68068,0,"obviously "],[68068,10,""],[68031,68,""],[68031,0,"thijs "],[68036,1,""],[68035,1,""],[68034,1,""],[68034,0,"s comp"],[68039,1,""],[68039,0,"es at a cost of additional disk space."],[68055,0,"consuming "],[68075,5,""],[68045,2,""],[68045,0,"the "],[68084,0,"\n// TODO:"],[68092,1,""],[68092,0,"(seph): This is "],[68105,3,""],[68105,0,"sentensen"],[68113,1,""],[68112,1,""],[68111,1,""],[68111,0,"ce is awkward. We talk about CRDTs, then OT+egwalker, then CRDTs again? "],[68182,1,""],[68182,0," ..."],[68185,1,""],[68184,1,""],[68183,1,""],[68183,0,"Clean em"],[68190,1,""],[68189,1,""],[68189,0,"me!"],[72605,0,"\n// The peak memory usage is a"],[72631,4,""],[72631,0,"could be reduced a lot of"],[72655,1,""],[72654,1,""],[72654,0,"if I first divide up the graph into chunks by the critical versions. Right now, the implmenetation"],[72738,14,""],[72738,0,"implementation makes a plan for the whole "],[72761,0,"\"merge "],[72772,0,"\""],[72788,0," t"],[72789,1,""],[72788,1,""],[72788,0,"thing (which is stored in memory) then processes the who"],[72841,3,""],[72841,0,"entire plan. The plan itself uses up a lot of memory. A better approach would chunk it in sections separated by critical versions "],[72970,1,""],[72970,0,". Taht would "],[72972,11,""],[72972,0,"That would dramatically reduce pa"],[73004,1,""],[73004,0,"eak memory usage!"],[72605,0,"\n"],[72609,0," (seph):"],[74592,0,"\nNote "],[74593,5,""],[74592,0,"\n\nWe also "],[74594,8,""],[74594,0,"#"],[74594,1,""],[74594,0,"To "],[74596,1,""],[74595,1,""],[74594,1,""],[74594,0,"#al"],[74595,2,""],[74595,0,"algname also support "],[74603,13,""],[74603,0,"can "],[74603,4,""],[74602,1,""],[74594,0,"Loading time of "],[74618,0," can be improved bny"],[74637,1,""],[74636,1,""],[74635,1,""],[74635,0,"by caching the resulting "],[74594,0,"Document "],[74603,1,""],[74603,0,"l"],[74669,0,"r"],[74669,1,""],[74669,0,"f"],[74669,1,""],[74669,0,"document"],[74659,18,""],[74659,0,"current document state. "],[74682,1,""],[74594,88,""],[74593,1,""],[74592,1,""],[75665,0,"\n    "],[75883,0,"\n    "],[75884,4,""],[75884,0,"  "],[75737,0," (with and without file cac"],[75756,8,""],[75756,0,"final document caching) compared to"],[75791,4,""],[75891,0," (and optionally cached content)"],[75923,1,""],[75923,0,". This acts"],[75934,11,""],[75934,0," as"],[74461,0," When ca"],[74462,7,""],[74461,1,""],[74592,0,"\n\n"],[74593,1,""],[74592,1,""],[74461,0,"\nWe also show the "],[74462,17,""],[74462,0,"Storing the resulting document text"],[74462,35,""],[74462,0,"We also show the file size whe"],[74491,1,""],[74490,1,""],[74489,1,""],[74489,0,"including a copy of the document at the curr"],[74529,4,""],[74529,0,"reuslting"],[74529,9,""],[74529,0,"resulting merged state."],[74280,0,"\n\n// TODO: I wonder if it would be b"],[74315,1,""],[74315,0,"worth adding zlib compression (matching automerge) to make MA"],[74375,1,""],[74374,1,""],[74374,0,"AM look good compard t"],[74382,14,""],[74382,0,"better"],[74366,22,""],[74365,1,""],[74365,0,"? It would be a small change."],[74666,70,""],[74576,0,"In all of our traces, #algname has a significantly smaller file size.\n"],[74736,61,""],[74646,0,"Storing the graph adds only modest overhead to the raw text.\n"],[74797,1,""],[74707,0,"\n"],[74798,0,"\n"],[74707,1,""],[74574,0,", with and without cached "],[74593,7,""],[74593,0,"a cache of the "],[74600,8,""],[74600,0,"d copy of the final document text"],[74766,90,""],[74765,1,""],[74672,14,""],[75312,0,"n"],[75312,1,""],[75312,0,"only stores the resulting document text"],[75351,18,""],[75351,0,". Any"],[75375,0," are not stored at all"],[75503,29,""],[75537,0,"n equivalent"],[75595,38,""],[75595,0,"we *on"],[75600,1,""],[75599,1,""],[75598,1,""],[75598,0,"_only_ store"],[75598,12,""],[75598,0,"only store the resulting te"],[75623,2,""],[75623,0,"document text and operation metadata"],[75659,11,""],[75328,19,""],[75332,0," of the resulting document"],[75349,0,", merged"],[75371,8,""],[75382,0," which have been deleted"],[75511,0," any"],[75511,4,""],[75511,0," any"],[75572,12,""],[75571,16,""],[75571,0,"the equivalent"],[75833,0,"\nThis approach allows #algname"],[75834,21,""],[75842,0," can still merge incoming "],[75834,0,"Using this scheme, "],[75878,9,""],[75878,0,"events"],[75878,0,"editing "],[75866,6,""],[75865,0," load the document text direclty "],[75897,1,""],[75896,1,""],[75895,1,""],[75894,1,""],[75894,0,"tly from disk and"],[75866,46,""],[75886,0," and load the document text directly from disk and "],[75933,4,""],[75932,1,""],[75932,0,"."],[75865,0," still"],[75892,47,""],[75892,0," and load the document text directly from disk."],[75834,0,"// "],[75367,0," This allo"],[75368,9,""],[75367,63,""],[75404,0," and fast"],[75409,4,""],[75409,0,"in the case of @"],[75424,1,""],[75424,0,"#al"],[75425,2,""],[75425,0,"algname, faster loading times. But it comes"],[75460,41,""],[75460,0,"the resulting system cannot"],[75504,4,""],[75504,0,"previous"],[75500,12,""],[75500,0,"earlier"],[75715,5,""],[75715,0,"."],[75716,2,""],[75716,0," T"],[74680,10,""],[74680,0,"o"],[74680,1,""],[74680,0,"overhead."],[74672,0,"signi"],[74672,5,""],[74672,0,"significantly "],[74704,60,""],[74703,1,""],[75386,0,"much "],[75413,3,""],[75413,0,"However,"],[76158,8,""],[76158,0,"stored"],[76169,32,""],[75442,0,"s"],[2983,4,""],[2983,0,"223"],[2546,0,"\n#let corollary = thmplain(\n  \"corollary\",\n  \"Corollary\",\n  base: \"theorem\",\n  titlefmt: strong\n)"],[2574,1,""],[2573,1,""],[2573,1,""],[2586,2,""],[2585,1,""],[2585,0," "],[2599,2,""],[2598,1,""],[2598,0," "],[2616,2,""],[2615,1,""],[2614,1,""],[2614,0,", "],[2632,1,""],[2633,0,"\n"],[2552,9,""],[2552,0,"tho"],[2554,1,""],[2554,0,"eorem"],[2572,9,""],[2572,0,"theorem"],[2583,9,""],[2583,0,"Theorem"],[2593,17,""],[2611,0,"#let theorem = thmplain(\"theorem\", \"Theorem\", titlefmt: strong)\n"],[2616,7,""],[2616,0,"lemma"],[2645,7,""],[2645,0,"Lemma"],[2672,177,""],[87939,4,""],[87939,0,"#theorem[]"],[87948,0,"The "],[87951,1,""],[87950,1,""],[87949,1,""],[87949,0,"ODO"],[2593,0,"base_level: 0, "],[2606,18,""],[2606,0,", titlefmt: strong"],[2668,0,"base_level: 0, "],[87983,0,"\n\n#lemma[]"],[87992,0,"TODO"],[2700,0,"\n#let proof = thmproof(\"proof\", \"Proof\")"],[204,0,"2"],[205,1,""],[88023,0,"\n#proof[]"],[88031,0,"TODO"],[2740,0,"\n#show: thmrules.with(qed-symbol: $square$)"],[2562,0,"par("],[2629,0,")"],[2629,1,""],[2562,4,""],[88066,0," <main"],[88071,1,""],[88070,1,""],[88069,1,""],[88068,1,""],[88068,0,"thm-main>"],[88061,4,""],[88061,0,"Every execution of the #algname algorithm be"],[88104,1,""],[88103,1,""],[88103,0,"is consistent with Attiya et al.'s strong list specification @att"],[88165,3,""],[88165,0,"Attiya2016."],[2756,27,""],[421,0,".with(qed-symbol: $square$)"],[2768,15,""],[2767,1,""],[447,0,", inset: 0"],[447,10,""],[2652,0,".with()"],[2658,0,", inset: 0"],[2659,1,""],[2658,1,""],[2665,0,"(top: "],[2666,6,""],[2666,0,"left: 0, right: 0"],[2683,1,""],[2683,0,"))"],[2592,5,""],[2592,0,"box"],[2671,0,"pt"],[2683,0,"pt"],[2663,23,""],[2663,0,"0pt"],[2742,0,".with(inset: 0pt)"],[2592,3,""],[2592,0,"plain"],[2592,5,""],[2592,0,"box"],[2592,3,""],[2592,0,"plain"],[88214,4,""],[88214,0,"\n  \n"],[88217,0,"Paraphrased slightly, the strong list specification requires that "],[2801,0,".with(inset: 0pt)"],[88300,0,"for every execution there exists a "],[88086,0,"\n\n"],[88087,0,"Let #$$"],[88092,2,""],[88091,1,""],[88091,0,"$$"],[88092,0,"C"],[88094,0," bee the "],[88097,1,""],[88102,0,"set of characters"],[88092,0,"sans("],[88098,0,")"],[88125,0,", and $$"],[88132,0,"sans()"],[88137,0,"Op"],[88137,0,"\""],[88140,0,"\""],[88125,0," that can be inserted into a document"],[88167,0," "],[88180,0," = $e_1: italic(\"Insert\")(0, \\\"H\\\")$"],[88215,1,""],[88183,6,""],[88183,0,"{"],[88210,0,"}"],[88098,0,"har"],[88097,0,"\""],[88102,0,"\""],[88173,0,"let"],[88209,1,""],[88209,0,"i"],[88212,5,""],[88212,0,"c"],[88214,0," | i in NN and c in sans{}"],[88238,2,""],[88238,0,"()"],[88239,0,"\"\""],[88240,0,"Char"],[88247,0," union {}"],[88255,0,"italic()"],[88262,0,"\"\""],[88263,0,"Delete"],[88271,0," "],[88271,1,""],[88271,0,"()"],[88272,0,"i"],[88274,0," | i in NN"],[88130,37,""],[88120,0,"document "],[88120,9,""],[88130,0," that can be inserted in a document"],[88151,14,""],[88270,0," be the set of possible operations."],[88151,7,""],[88151,0,".\nL"],[88151,0," in a document"],[88315,0,"\nLet $$"],[88321,0,"sans()"],[88326,0,"\"\""],[88327,0,"ID"],[88332,0," be the set of unique event identifiers, "],[88372,1,""],[88371,1,""],[88371,0,", and let $$"],[88382,0,"sans()"],[88387,0,"\"\""],[88388,0,"Event"],[88392,1,""],[88391,1,""],[88390,1,""],[88390,0,"t"],[88393,0," = cal()"],[88400,0,"\"\""],[88400,2,""],[88400,0,"P"],[88402,0,"()"],[88403,0,"sans()"],[88408,0,"\"\""],[88409,0,"ID"],[88414,0," times sans()"],[88426,0,"\"\""],[88427,0,"Op"],[88395,0," sans()"],[88401,0,"\"\""],[88402,0,"ID"],[88406,0," \\tim"],[88410,1,""],[88409,1,""],[88408,1,""],[88407,1,""],[88407,0,"times"],[88449,0," be the set of events consisting of a unique ID, a set of parent event IDs, and an operatino."],[88539,2,""],[88539,0,"on"],[88464,0,"possible "],[88085,0,"\n\nWe now formalise "],[88094,10,""],[88094,0,"justify why #al"],[88107,2,""],[88107,0,"algname is a correct collaborative text algorithm by showing that it satisfies the Attiya et al.'s strong list specification @Attiya2016"],[88190,16,""],[88190,0,"_"],[88216,0,"_ proposed by Attiya et al.'"],[88243,1,""],[88255,0,"."],[88094,11,""],[88094,0,"explain"],[88094,7,""],[88094,0,"demonstrate that"],[88261,0,"\nInformally speaking, this specification requires that all replicas converge to the same state, that this state c"],[88350,0,"document "],[88383,0,"ontains exactly those characters that were inserted but not deleted in causally prior "],[88316,4,""],[88333,0,": that is, two replicas that "],[88333,29,""],[88446,19,""],[88446,0,", and that inserted characters appear in the correct place relative to the surrounding characters at the time of insertion."],[88521,11,""],[88521,0,"existing"],[88540,0," that surrounded it"],[88572,2,""],[88572,0,"it was"],[88587,1,""],[88586,1,""],[88585,1,""],[88585,0,"ed"],[88520,9,""],[88579,0,"\nIt is a "],[88580,8,""],[88580,0,"Under the assumptions that "],[88580,27,""],[88580,0,"It is a stronger specification than _strong eventual consistency_ @sha"],[88647,3,""],[88647,0,"Shapiro2011, which is the "],[88580,0,"Assuming network partitions are eventually repaired, "],[88633,1,""],[88634,0,"his"],[88728,0,"standard correctness criterion for CRDTs."],[88768,0," @Gomes2017verifying"],[88724,3,""],[88724,0,"a"],[89399,0,"\n  Attia"],[89406,1,""],[89406,0,"ya et al. make a simplifying assumption that every insertion operation has a unique character.\n  We will avoid this assumption, at the cost of slightly modifying their defint"],[89579,1,""],[89579,0,"ition"],[89505,79,""],[89505,0," use a slightly modified version of the specification that avoids this assumption.\n  An "],[89590,3,""],[89590,0,"Moreover"],[89590,8,""],[89590,0,"We also "],[89264,20,""],[89264,0,"T"],[89287,18,""],[89287,0,"complies"],[89296,0,"with "],[89301,15,""],[89301,0,"the"],[89485,8,""],[89485,0,"stronger"],[89562,0,"simplify the specification by using our event graph definition instead of the original s"],[89649,1,""],[89649,0,"abstract execution definition ()"],[89680,0,"consisting of message broadcast and "],[89680,13,""],[89680,0,"containing "],[89690,1,""],[89713,0,"receive events "],[89727,1,""],[89690,0," a "],[89692,1,""],[89691,1,""],[89690,1,""],[89708,5,""],[89708,0,"/"],[89723,0," and a visibility relation"],[89750,0,".\n  These changes do not affect the substance of the proof.\n  "],[89810,2,""],[89813,21,""],[89813,0,"Our version of"],[89882,9,""],[89882,0,"event graph $$"],[89895,0,"G subset.eq sans()"],[89912,0,"\"\""],[89913,0,"Evt"],[89903,3,""],[89903,0,".eq"],[89882,0,"finite "],[89253,0,"\nLet $$"],[89259,0,"G"],[89261,0," be a valid event graph"],[89254,30,""],[89254,0,"We say that an envent "],[89271,1,""],[89270,1,""],[89270,0,"v"],[89254,0,"\n"],[89276,0,"graph $$"],[89283,0,"G \\s"],[89286,1,""],[89285,1,""],[89285,0,"subset.eq sans()"],[89300,0,"\"\""],[89301,0,"Evt"],[89307,0," is _valid_ if:\n1. every event $$"],[89339,0,"#"],[89339,1,""],[89339,0,"e in G"],[89346,0," has a unique ID: $$"],[89365,0,"forall e in G. "],[89372,1,""],[89372,0,"()"],[89373,0,"i_1, p_1, o_1"],[89394,0,"forall ()"],[89402,0,"i_2, p_2, o_2"],[89416,0," in G. "],[89392,1,""],[89392,0,":"],[89421,1,""],[89421,0,":"],[89423,0,"i_1 = i_2 => p_1 = p_2 and o_1 = o_2"],[89460,0,"."],[89338,9,""],[89452,0,"\n2. "],[89353,99,""],[89353,0,";"],[89338,0,"$#"],[89339,1,""],[89339,0,"e in G$ "],[89339,1,""],[89339,0,"()"],[89340,0,"i"],[89340,1,""],[89340,0,"italic()"],[89347,0,"\"\""],[89348,0,"id"],[89352,0,", it()"],[89340,18,""],[89340,0,"i, p, o"],[89370,0," $i$"],[89379,0,"the par"],[89385,1,""],[89384,1,""],[89383,1,""],[89379,4,""],[89379,0,"all parent IDs #$$"],[89396,0,"p"],[89396,1,""],[89395,2,""],[89394,1,""],[89394,0,"$$"],[89395,0,"p"],[89397,0," "],[89379,3,""],[89379,0,"every"],[89379,5,""],[89379,0,"all"],[89398,0,"of every parent "],[89407,7,""],[89407,0,"event $$"],[89414,0,"()"],[89415,0,"i, p, o"],[89423,0," in G"],[89379,3,""],[89379,0,"the"],[89429,0," all occur as the ID of some other event in $$"],[89474,0,"G"],[89476,0,"; and"],[89478,3,""],[89478,0,"and"],[89477,4,""],[89477,0,"\n3. the graphi "],[89491,1,""],[89490,1,""],[89490,0," is acyclic, i.e. there is no subset $$"],[89528,0,"{}"],[89529,0,"e_1, e_2, ..., e_n"],[89548,0," in "],[89551,1,""],[89550,1,""],[89549,1,""],[89549,0,"subsete"],[89555,1,""],[89555,0,".eq G"],[89520,6,""],[89520,0,"set of events"],[89520,0,"sub"],[89571,0," such that e_"],[89583,1,""],[89582,1,""],[89582,0,"$$"],[89583,0,"e_1"],[89587,0," is a parent of $$"],[89604,0,"e_2"],[89608,0,", ..., $"],[89610,0,"$"],[89611,5,""],[89611,0,"e_2"],[89615,0," is a parent of $$"],[89632,0,"e_3"],[89636,0,", ..., and $$"],[89648,0,"e_n"],[89652,0," is a parent of$$"],[89667,0," "],[89669,0,"e_1"],[89673,0,"; and"],[89675,3,""],[89675,0,"and\n4. for every operation $$"],[89703,0,"o"],[89705,0," in an event $$"],[89719,0,"()"],[89720,0,"i, p, o"],[89728,0," in G"],[89734,0,", the index at which the o"],[89755,5,""],[89755,0,"$$"],[89756,0,"o"],[89758,0," inserts or deletes is an index that "],[89360,7,""],[89360,0,"n"],[89368,0," that is unique within $G$"],[89815,0,"exists ()"],[89823,0,"is not out "],[89830,4,""],[89830,0,"beyond the end of the document"],[89861,0," in the document version defined by the parents $$"],[89910,0,"p"],[89912,0,"."],[89450,0,"are "],[89458,9,""],[89464,0,"s"],[89485,0,"s"],[89458,4,""],[89907,0,"\n\n"],[89908,0,"It is "],[89908,6,""],[89908,0,"In practice it is easy to ensure that an event graph is always valid."],[89908,13,""],[89908,0,"I"],[89908,1,""],[89908,0,"In practice i"],[89908,17,""],[89908,0,"The algorithm"],[89908,65,""],[89908,0,"It is "],[89908,6,""],[89908,0,"Since event graphs on"],[89928,1,""],[89927,1,""],[89927,0,"gorw"],[89930,1,""],[89929,1,""],[89928,1,""],[89928,0,"row monotonically and we never removee"],[89965,1,""],[89965,0," events, it is easy to ensure that the graph remains valid whenever a new event is added to it.\n\nWe begin with our main result:"],[90062,32,""],[90749,0,"relation $$"],[90759,0,"italic()"],[90766,0,"\"\""],[90767,0,"lo"],[90748,0," list order"],[90748,11,""],[90772,0," called the _list order_, such that:\n  1. For every event $$"],[90831,0,"e in G"],[90838,0,", let $$"],[90845,0,"sans()"],[90850,0,"'"],[90850,1,""],[90850,0,"\"\""],[90851,0,"replay"],[90859,0,"()"],[90860,0,"{}"],[90861,0,"e"],[90863,0," union sans()"],[90875,0,"\"\""],[90876,0,"Events"],[90884,0,"()"],[90885,0,"e.italic()"],[90894,0,"\"\""],[90895,0,"parents"],[89253,0,"\nWhen $$"],[89260,0,"()"],[89261,0,"i, p, o"],[89269,0," in G"],[89260,9,""],[89260,0,"e"],[89267,0," and $$"],[89273,0,"e = ()"],[89278,0,"i,p,o"],[89285,0," we also write $$"],[89294,5,""],[89294,0,"use the notation"],[89312,0,"e.italic()"],[89321,0,"\"\""],[89322,0,"id"],[89325,0," "],[89325,1,""],[89326,0," = i"],[89331,0,", $$"],[89334,0,"e.italic()"],[89343,0,"\"\""],[89344,0,"parents"],[89353,0," = p[]"],[89357,2,""],[89358,0,", and $$"],[89365,0,"e.italic)"],[89373,1,""],[89373,0,"()"],[89374,0,"\"\""],[89375,0,"op"],[89379,0," = o"],[89384,0,"."],[89471,9,""],[89471,0,"e"],[89490,0,"e."],[89492,1,""],[89492,0,"italic()"],[89499,0,"\"\""],[89500,0,"id"],[89536,0,"for every event $e in G$, "],[89578,1,""],[89578,0,"e.p"],[89580,1,""],[89580,0,"italic()"],[89587,0,"\"\""],[89588,0,"parents"],[89562,0,"every "],[89568,4,""],[89577,1,""],[89579,0,"p in "],[89605,39,""],[89605,0,"is the"],[89614,1,""],[89634,1,""],[89856,20,""],[89864,9,""],[89864,0,"e"],[89892,2,""],[89892,0,"#$$"],[89892,2,""],[89893,0,"i"],[89893,1,""],[89893,0,"o."],[89894,1,""],[89893,1,""],[89893,0,"e.italic()"],[89902,0,"\"\""],[89903,0,"op"],[90040,0,"e.italic(\""],[90051,0,"arents\")"],[88787,0,"\n\nWith a suitable algorithm for ordering concurrent insertions at the same position, $$"],[88873,0,"#"],[88873,1,""],[88872,2,""],[88872,0,"#al"],[88873,2,""],[88873,0,"algnameis"],[88881,1,""],[88880,1,""],[88880,0," is also able to achieve maximal non-interleaving @fugue.\nHowever, since that algorithm is out of scope of this ap"],[88993,1,""],[88992,1,""],[88992,0,"paper, we also leave the proof of non-interleaving out of scope."],[89790,4,""],[19669,0," <replay>"],[90489,0,"\n\n#lemma[]"],[90592,4,""],[90596,0,"-theorem"],[90489,0,"\n\n $italic(\"doc\") = sans(\"replay\")(G)$"],[90491,0,"We define a replay function"],[90520,16,""],[90538,0," as introduced in @replay "],[90563,1,""],[90563,0,", based on the #a"],[90579,1,""],[90579,0,"algname algorithm. "],[90597,1,""],[90597,0,"\nIt "],[90491,0,"Given an event graph $G$ "],[90516,1,""],[90516,0,"w"],[90626,0,"first performs a topolo"],[90643,6,""],[90643,0,"topological sort of $$"],[90664,0,"G"],[90665,1,""],[90665,0,"$ and then iterates over the events "],[90626,50,""],[90651,0,"in $$"],[90655,0,"G"],[90656,1,""],[90656,0,"$ in some topologically sorted order, transforming each "],[90707,5,""],[90707,0,"the operation in each event as described in @algorithm, and then applying the transformed operation to the document state resulting from the operations processed so far."],[90859,9,""],[90859,0,"applied"],[90873,0," (starting with the empty document)"],[90909,0,"\nFor the sake of this proof, we define $$"],[90949,0,"sans()"],[90954,0,"\"\""],[90955,0,"replay"],[90964,0," "],[90909,0,"\nIn a real implementation, $sans(\"replay\")$ returns the final document state as a concatenated sequence of characters."],[91083,0,"to instead return a sequence of insertion events"],[91115,16,""],[91115,0,"$$"],[91116,0,"()"],[91117,0,"italic()"],[91124,0,"\"\""],[91125,0,"id"],[91129,0,", italic()"],[91131,8,""],[91131,0,"c"],[91134,0," pairs, where $$"],[91149,0,"italic(\"id\")"],[91162,0," is the unique ID of the event that inserted the character $$"],[91222,0,"c"],[91224,0,".\nThis allows us to distinguish f"],[91256,1,""],[91256,0,"between different occurrences of the same character.\nThe plain text of the document can be recovered by simply ignoring the $$"],[91381,0,"italic(\"id\")"],[91394,0," of each pe"],[91404,1,""],[91404,0,"air and concatenating the characters."],[91313,6,""],[91444,0,"The replay function $sans(\"replay\")(G)$ "],[91444,20,""],[91464,0,"is a determ"],[91469,6,""],[91469,0,"pure function of the event graph $$"],[91503,0,"G"],[91504,1,""],[91504,0,"$"],[91469,4,""],[91469,0,"determis"],[91476,1,""],[91476,0,"nistic"],[91515,0,".\n#pr"],[91518,2,""],[91518,0,"proof[]"],[91524,0,"\n  \n"],[91527,0,"We "],[91514,0,"."],[91516,1,""],[91527,3,""],[91527,0,"The only "],[91531,5,""],[91531,0,"algorithm to transform an operation "],[91540,0,"s"],[91568,0,"and to apply a transformed operation ot "],[91607,1,""],[91606,1,""],[91605,1,""],[91605,0,"to the document state are by definition determin"],[91645,8,""],[91645,0,"deterministic.\n  This leaves as the only source of nondeterminism the choice of topologically sorted order.\n  We show that all sort orders result in the same final document state."],[91444,0,"Given a valid event graph $$"],[91471,0,"G"],[91472,1,""],[91472,0,"$, "],[91522,23,""],[91759,0," ()"],[91761,0,"since $$"],[91768,0,"G"],[91769,1,""],[91769,0,"$ is valid and hence acyclic, at least one such order exists, but there may be several topo"],[91856,4,""],[91856,0,"topologically sorted orders if $$"],[91888,0,"G"],[91889,1,""],[91889,0,"$ contains concurrent events"],[91991,0,"\n  "],[91992,2,""],[91992,0,"\n  Let $$"],[92000,0,"e_1"],[92000,0,"<"],[92000,1,""],[92000,0,"angle.l "],[92011,0,", e_2, dot"],[92020,1,""],[92019,1,""],[92018,1,""],[92018,0,"dots"],[92018,4,""],[92018,0,"..., e_n angle.r"],[92035,0," and $$"],[92041,0,"angle.l e_1' "],[92053,1,""],[92052,1,""],[92050,0,"'"],[92053,0,", e'_2, ..., e'_n angle.r"],[92079,0," be two topological o"],[92099,1,""],[92099,0,"sort orders of $$"],[92115,0,"g = "],[92120,2,""],[91993,0,"]\n"],[92122,0,"\n]"],[91993,2,""],[92115,1,""],[92115,0,"G"],[92119,0,"{}"],[92120,0,"e_1, e_e, ..."],[92127,1,""],[92127,0,"2"],[92133,0,", e_n"],[92140,0,"."],[92000,0,"O = "],[92045,0,"O' = "],[92000,1,""],[92000,0,"E"],[92045,1,""],[92045,0,"E"],[92150,0,"\n  $$"],[92154,0,"E'"],[92157,0," must be a er"],[92169,1,""],[92168,1,""],[92167,1,""],[92167,0," permutation of $$"],[92184,0,"E"],[92186,0,"."],[92153,0,"Then "],[92192,0,"\n  Moreover, it is possible to "],[92191,0,", and both sequences are in causal order"],[92219,0,"some "],[92236,0,", that is: if $e_1 -> e_2$ "],[92253,1,""],[92253,0,"i"],[92260,1,""],[92260,0,"j"],[14241,0," <ev"],[14244,1,""],[14244,0,"vent-graphs>"],[92278,0,"()"],[92279,0,"the happens-be"],[92279,3,""],[92279,0,"$$"],[92280,0,"e_i"],[92292,1,""],[92292,0," "],[92295,0,"for "],[92298,1,""],[92298,0,"e $$"],[92301,0,"e_j"],[92305,0,", as defined in @event-graphs"],[92335,0,", then $e_i$ must appear before $e_j$ in both $E$ and $E'$"],[92397,28,""],[92397,0,"Therefore, it is possible to transform $$"],[92437,0,"E"],[92439,0," into $$"],[92446,0,"E'"],[92449,0," by "],[92206,7,""],[92206,0,".\n  B"],[92392,0,"\n  If $$"],[92399,0,"e"],[92398,3,""],[92398,0,"_concurrent_, written $a parallel b$"],[92397,22,""],[92399,1,""],[92399,0,"e_i"],[92412,1,""],[92412,0,"e_j"],[92416,0," ()"],[92418,0,"they are concurrent"],[92438,0,", the events could appear in either order."],[92539,0,"repeatedly swapping two adjacent "],[92571,1,""],[92571,0,", "],[92563,10,""],[92563,0,"concurrent events that are adjacent in the sequence."],[91451,0,"\n\n"],[91452,0,"#lem"],[91453,3,""],[91453,0,"lemma[]"],[93186,0,"; our event graph provides the partial order that is equivalent to Attiya et al.'s visibility relation"],[93187,0," the edges of"],[93217,34,""],[93217,0,"are"],[93235,15,""],[93235,0,"the"],[93192,5,""],[93192,0,"transitive closure"],[93230,3,""],[93230,0,"is"],[93187,0," in particular,"],[93187,15,""],[93426,0," subset.eq G \\"],[93439,1,""],[93439,0,"times G"],[93582,0,"... TODO"],[91459,0,"Let $$"],[91464,0,"G"],[91465,1,""],[91465,0,"$ be a valid event graph with $$"],[91496,0,"{}"],[91497,0,"a, b"],[91502,0," subset.eq sans()"],[91518,0,"\"\""],[91519,0,"Version"],[91528,0,"()"],[91529,0,"G"],[91532,0,". Let $E = angle.l e_1, e_2, ..., e_n angle.r$ be a "],[91537,0," the sequence of events"],[91607,0,"topological sort of $$"],[91628,0,"G - {}"],[91633,0,"a, b"],[91639,0,". Then replaying the events $$"],[91668,0,"de"],[91669,1,""],[91668,1,""],[91668,0,"E"],[91670,0," in order followed by "],[91679,0,","],[91693,0,"$$"],[91694,0,"a"],[91696,0," and then $$"],[91707,0,"b"],[91709,0,", results in the same document state as replaying $$"],[91760,0,"e"],[91760,1,""],[91760,0,"E"],[91762,0," followed by $$"],[91776,0,"b"],[91777,1,""],[91777,0,"$ and then $$"],[91789,0,"a"],[91791,0,"."],[91793,0," <lemma-commute>"],[91490,4,""],[91490,0,"and"],[91490,3,""],[91490,0,"with"],[91541,0," event"],[91556,10,""],[92131,6,""],[92163,0,"thus "],[92969,0,"\n  At "],[92972,3,""],[92970,2,""],[92970,0,"\n  Let $E = angle.l e_1, e_2, ..., e_n angle.r$"],[92978,4,""],[93000,0," e_i, e_j, ...,"],[93028,0," be the sequence "],[92969,0,"\n  We show that at each swap we maintain the invariant that the result of applying the events in the order before the swap is the "],[93033,0,"document state "],[93054,3,""],[93054,0,"ing from"],[93115,4,""],[93115,0,"equal to the document state resulting from applying the events in the order after the swap."],[92992,0," such"],[93211,0,"\n  Therefore "],[93223,1,""],[93223,0,", the document state resulting from applying "],[93259,9,""],[93259,0,"replaying $$"],[93270,0,"E"],[93271,1,""],[93271,0,"$ is equal to that resulting from $$"],[93306,0,"E'"],[93309,0,"."],[93386,0,"of events prior to one of these swaps, and $$"],[93430,0,"e_i"],[93434,0,", $$"],[93437,0,"e_j"],[93441,0," are the events to be swapped.\n  The set of events $$"],[93493,0,"G' = {}"],[93499,0,"e_1, e_2, ..., e_i, e_j"],[93524,0," in the prefix of this sequence up to and including $$"],[93577,0,"e_j"],[93581,0," also forms a valid event graph since in a topol"],[93624,5,""],[93624,0,"topological sort, an event's parents must always appear earlier in the sequence."],[93613,6,""],[93613,0,"("],[93698,0,")"],[93698,0,", so the removal of a suffix cannot remove an event that an event in the "],[93742,29,""],[93742,0," parent of a su"],[93756,1,""],[93755,1,""],[93754,1,""],[93753,1,""],[93753,0,"n event "],[93753,0,"a"],[93762,0,"in the prefix"],[93777,0,"\n  Moreover, $$"],[93791,0,"e_i"],[93795,0," and $$"],[93801,0,"e_j"],[93805,0," must both be in the frontier set of $$"],[93843,0,"G'"],[93846,0,", since they are cu"],[93864,1,""],[93864,0,"oncurrent and no "],[93878,3,""],[93878,0,"they cannot be the parent of any other event in $$"],[93927,0,"G'"],[93930,0,".\n  By @lemma-commute, replaying the events in the prefix results in the same document state as replaying the events in a variant of the prefix in which $$"],[94084,0,"e_i"],[94088,0," and $$"],[94094,0,"e_j"],[94098,0," are swapped.\n  Replaying the events in the suffix is a deterministic algorithm based on this document state.\n  Therefore, replaying $angle.l e_1, e_2, ..., e_i, e_j, ..., e_n angle.r$ results in the same document state as replaying $angle.l e_1, e_2, ..., e_i, e_j, ..., e_n angle.r$."],[94357,1,""],[94357,0,"j"],[94362,1,""],[94362,0,"i"],[91894,0," <lemma-determis"],[91909,1,""],[91909,0,"nistic>"],[91805,0,"\n#proof "],[91812,1,""],[91812,0,"[]"],[91813,0,"\n  \n"],[91816,0,"By induction over $$"],[91835,0,"n"],[91837,0,", the length of $$"],[91854,0,"E"],[91856,0,".\n  \n  "],[91858,2,""],[91861,0,"Base case ()"],[91872,0,"$$"],[91873,0,"n=0"],[91878,0,"."],[91878,1,""],[91878,0,": Without loss of generality "],[91880,27,""],[91880,0,"WLOG we consider three cases "],[91908,1,""],[91878,1,""],[91878,0,"."],[91908,0,": ()"],[91911,0,"1"],[91913,0,"~$$"],[91915,0,"a.italic()"],[91924,0,"\"\""],[91925,0,"op"],[91929,0," = italic()"],[91939,0,"\"\""],[91940,0,"Insert"],[91948,0,"()"],[91949,0,"i, c"],[91955,0," and $a.italic(\"op\") = italic(\"Insert\")(i, c)$"],[91961,1,""],[91961,0,"b"],[91995,1,""],[91995,0,"j"],[91998,1,""],[91998,0,"d"],[92001,0,"; ()"],[92004,0,"2"],[92005,1,""],[92005,0,")~$a.italic(\"op\") = italic(\"Insert\")(i, c)$ and $a.italic(\"op\") = italic(\"Insert\")(i, c)$"],[92079,6,""],[92079,0,"Delete"],[92088,4,""],[92088,0,"j"],[92054,1,""],[92054,0,"b"],[92091,0,"; ()"],[92094,0,"3"],[92095,1,""],[92095,0,")~$a.italic(\"op\") = italic(\"Insert\")(i, c)$"],[92133,3,""],[92123,6,""],[92123,0,"Delete"],[92135,0," and $a.italic(\"op\") = italic(\"Insert\")(i, c)$"],[92175,4,""],[92175,0,"j"],[92166,6,""],[92166,0,"Delete"],[92141,1,""],[92141,0,"b"],[92178,0,".\n  ()"],[92183,0,"the "],[92183,1,""],[92183,0,"T"],[92187,0,"case where $$"],[92199,0,"a"],[92201,0," is a deletion and $$"],[92221,0,"b"],[92223,0," is a"],[92227,1,""],[92227,0,"n i"],[92229,1,""],[92228,1,""],[92227,1,""],[92227,0,"an insertion is symmetric to "],[92243,13,""],[92243,0,"equivalent to case 2."],[92262,0,"("],[92264,0,")"],[92266,1,""],[92182,1,""],[92265,0,"\n  \n  "],[92266,2,""],[92269,0,"TODO\n  \n  "],[92274,2,""],[92277,0,"Inductive step: "],[92292,1,""],[92291,1,""],[92291,0,". "],[92292,1,""],[92292,0,"\n  We assume "],[91953,0,"_i"],[92000,1,""],[92000,0,"c_j"],[91880,6,""],[91880,0,"W"],[91880,1,""],[91880,0,"WLOG w"],[92309,0,"that replaying $E = angle.l e_1, e_2, ..., e_n angle.r$"],[92354,1,""],[92354,0,"k, a, b"],[92370,0," results in document state $$"],[92398,0,"d"],[92400,0,", and that "],[92326,0,"_1"],[92413,0,"$E_1 = angle.l e_1, e_2, ..., e_k, a, b angle.r$"],[92448,1,""],[92448,0,"b"],[92451,1,""],[92451,0,"a"],[92416,1,""],[92416,0,"2"],[92461,0," results in the same document $$"],[92492,0,"d"],[92494,0,"."],[92309,0,"the inductive hypothesis, namely "],[92299,15,""],[92299,0,"I"],[92319,13,""],[92319,0,":"],[92415,5,""],[92497,0,"\n  We must show that replaying $$"],[92529,0,"E'_1 = "],[92528,9,""],[92528,0,"$E_1 = angle.l e_1, e_2, ..., e_k, a, b angle.r$"],[92530,0,"'"],[92563,0," e_l,"],[92582,0," results in the same document state as replaying $E_1 = angle.l e_1, e_2, ..., e_k, a, b angle.r$"],[92633,0,"'"],[92635,1,""],[92635,0,"2"],[92666,0," e_l,"],[92672,0,"b, "],[92676,3,""],[92685,0,", where $$"],[92694,0,"e_l"],[92698,0," is the next event after $$"],[92724,0,"e_k"],[92728,0," in $$"],[92733,0,"E"],[92735,0,".\n  \n  "],[92737,2,""],[92740,0,"TODO"],[92273,4,""],[92273,0,"Case ()"],[92279,0,"1"],[92280,1,""],[92280,0,"). WLOG we consider tow cases"],[92301,2,""],[92301,0,"wo"],[92309,0,": ()"],[92312,0,"a"],[92312,0,"1"],[92315,0,"~$$"],[92317,0,"i<j"],[92321,0,"; ()"],[92324,0,"1b"],[92327,0,"~$$"],[92329,0,"i=j"],[92333,0," ()"],[92335,0,"the case of $$"],[92348,0,"j>1"],[92352,0," is equivalent to case 1a"],[92378,0,"."],[92322,0," and"],[92354,1,""],[92354,0,"i"],[92352,3,""],[92352,0,"u"],[92352,1,""],[92352,0,"i>j"],[92360,10,""],[92360,0,"symmetric"],[92246,10,""],[92246,0,"symmetric"],[92246,9,""],[92246,0,"similar"],[92357,9,""],[92357,0,"similar"],[92377,0,"\n  If $$"],[92384,0,"i<j"],[92388,0,", "],[92389,1,""],[92388,1,""],[92388,0," and we replay $$"],[92404,0,"a"],[92406,0," before $$"],[92415,0,"b"],[92417,0,", we first apply $$"],[92435,0,"a"],[92437,0,", then retreat $$"],[92453,0,"a"],[92455,0,", and then apply $$"],[92473,0,"b"],[92475,0,".\n  Applying $$"],[92489,0,"a"],[92491,0," inserts a record into the internal state with"],[92532,5,""],[92532,0,", and after retreating $$"],[92556,0,"a"],[92558,0," this record has $s_p = mono(\"NotInsertedYet\")$ and $$"],[92611,0,"s_e = mono()"],[92622,0,"\"\""],[92623,0,"Ins"],[92629,0,".\n  When applying $$"],[92648,0,"b"],[92650,0,", this "],[92652,5,""],[92652,0,"the record inserted for $$"],[92677,0,"a"],[92679,0," is not counted for the purpose of determining the insertion position for $$"],[92754,0,"b"],[92756,0,", and since $$"],[92769,0,"b"],[92771,0,"'s index is greater, the record fo4"],[92805,1,""],[92805,0,"r $$"],[92808,0,"b"],[92810,0," is inserted after the record for $$"],[92845,0,"a"],[92847,0," in the internal state."],[92380,0,"Case (a). "],[92386,0,"1"],[92393,10,""],[92389,1,""],[92389,0,":"],[92871,0,"\n  When computing the transformed for "],[92905,4,""],[92905,0,"index for $$"],[92916,0,"b"],[92917,1,""],[92917,0,"$, the record for _"],[92935,1,""],[92935,0,"$$"],[92936,0,"a"],[92938,0," _is_ counted, and therefore the transformed index for $$"],[92994,0,"b"],[92996,0," is $$"],[93001,0,"j+1"],[93005,0,".\n  On the other hand, if we first "],[93034,6,""],[93034,0,"replay $$"],[93042,0,"b"],[93044,0," before $$"],[93053,0,"a"],[93055,0,", the "],[93000,6,""],[93000,0,"one greater than it would have been without $$"],[93045,0,"a"],[93043,0," earlier applying"],[93064,0,"."],[93120,0,"record for $$"],[93132,0,"b"],[93134,0," appears after the "],[93134,0," also"],[93135,5,""],[93153,0,"record for $$"],[93165,0,"a"],[93167,0," in the internal state, so the transformation of $$"],[93217,0,"a"],[93219,0," is not affected by $$"],[93240,0,"b"],[93242,0,".\n  Thus, we have the situation as shown in  @two-inserts"],[93286,1,""],[93298,0,", and the effect of the two insertions is the same regardless of their order."],[93336,0," $$"],[93338,0,"a"],[93340,0," and $$"],[93346,0,"b"],[92951,0," since $s_e = mono(\"Ins\")$"],[93413,0,"\n  \n  "],[93414,2,""],[93417,0,"Case ()"],[93423,0,"1b"],[93426,0,": We have two concurrent insertions at the same position.\n  In this case "],[93498,1,""],[93498,0,", as explained in @prepare-effect-versions, we rep"],[93547,1,""],[93547,0,"ly on an existing CRDT algorithm to place the inserted "],[93593,9,""],[93593,0,"records in the internal state in a consistent order, regardless of their inser"],[93660,11,""],[93660,0,"the order in which the events are applied.\n  The details of taht "],[93724,1,""],[93723,1,""],[93722,1,""],[93721,1,""],[93721,0,"hat algorihm "],[93733,1,""],[93732,1,""],[93731,1,""],[93731,0,"thm are out of scope for this paper. "],[93767,1,""],[93767,0,"\n  The rest of this case is similar to ()"],[93807,0,"a"],[93807,1,""],[93807,0,"1a"],[93810,0,": if the event with the earlier insertion position "],[93842,19,""],[93842,0,"record in the internal state"],[93841,0," "],[93841,1,""],[93848,0," position"],[93879,0," is applied first, the event with the l"],[93908,10,""],[93908,0,"applied sedond "],[93918,1,""],[93918,0,"c"],[93923,0,"has its index incremented "],[93948,1,""],[93948,0,", as required for convergence.\n  \n  "],[93979,2,""],[93982,0,"Case ()"],[93988,0,"2"],[93989,1,""],[93989,0,"): Since $$"],[93999,0,"a"],[94001,0," and $$"],[94007,0,"b"],[94009,0," are concurrent, it is not"],[94026,9,""],[94026,0,"the character being deleted by $$"],[94058,0,"b"],[94060,0," cannot be the character inserted by $$"],[94098,0,"a"],[94100,0,".\n  We therefore only need to consider two cases "],[94148,1,""],[94148,0,": ()"],[94151,0,"2a"],[94154,0,"~the r"],[94159,1,""],[94159,0,"internal state record inserted by $$"],[94194,0,"a"],[94196,0," "],[94159,15,""],[94182,0,"has an earlier position in the internal state than the record updated by $$"],[94256,0,"b"],[94258,0,"; or ()"],[94264,0,"2b"],[94267,0," vice versa.\n  Case ()"],[94288,0,"1"],[94288,1,""],[94288,0,"2b"],[94289,1,""],[94289,0,"a"],[94291,0,": If re"],[94297,1,""],[94296,1,""],[94296,0,"we replay $$"],[94307,0,"a"],[94309,0," before $$"],[94318,0,"b"],[94320,0,", we first apply $$"],[94338,0,"a"],[94340,0,", then retreat $$"],[94356,0,"a"],[94358,0,", then apply $$"],[94372,0,"b"],[94374,0,".\n  "],[94376,2,""],[94376,0,"  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n  Subsequently apply "],[94532,0,"When "],[94537,1,""],[94537,0,"s"],[94555,1,""],[94555,0,"ing $$"],[94560,0,"b"],[94562,0," we update an internal state record at a later position.\n  The record inserted by $$"],[94645,0,"a"],[94647,0," is not counted when mapping $$"],[94677,0,"b"],[94679,0,"'s index to an internal record, but it is counted when mapping the internal record back to a transformed index, resulting in $$"],[94805,0,"b"],[94807,0,"'s transformed index being one greater than it would have been without earlier applying $a$."],[94898,0,", as required"],[94913,0,"  On the other hand, if we replay $b$ before $a$, the record for $b$ appears after the record for $a$ in the internal state, so the transformation of $a$ is not affected by $b$.\n"],[94974,3,""],[94974,0,"updated by"],[95006,0," $$"],[95008,0,"a"],[95010,0,"'s"],[95020,8,""],[92377,0,"\n  "],[94282,0,"\n  "],[92378,2,""],[94902,13,""],[94281,2,""],[95084,0,"\n  This "],[95091,1,""],[95090,1,""],[95089,1,""],[95089,0,"ese transformed operations converge."],[95090,2,""],[95123,0,"\n  \n  "],[95124,2,""],[95127,0,"Case ()"],[95133,0,"2b"],[95136,0,": If we replay $$"],[95152,0,"b"],[95154,0," before $$"],[95163,0,"a"],[95165,0,", we first apply $$"],[95183,0,"b"],[95185,0,", then retreat $$"],[95201,0,"b"],[95203,0,", then apply $$"],[95217,0,"a"],[95219,0,".\n  Applying $$"],[95233,0,"b"],[95235,0," updates an existing record in the internal state ()"],[95286,0,"possibly splitting a placeholder in the process"],[95334,0,".\n  After retreating $$"],[95356,0,"b"],[95358,0," this record has either $$"],[95383,0,"s_p = mono()"],[95394,0,"\"\""],[95395,0,"Ins"],[95401,0," ()"],[95403,0,"if there is no concurrent deletion of the same character "],[95406,9,""],[95451,0,"was applied previously"],[95474,0," or #"],[95478,1,""],[95478,0,"$$"],[95479,0,"s_p = mono()"],[95490,0,"\"\""],[95491,0,"Del"],[95496,0," k"],[95499,0," ()"],[95501,0,"if $$"],[95505,0,"k"],[95507,0," concurrent deletions have been applied"],[95547,0,", and it has $$"],[95561,0,"s_e = mono()"],[95572,0,"\"\""],[95573,0,"Del"],[95579,0," in any case.\n  If $s_p = mono(\"Ins\")$, "],[95592,0,"\n  We next apply $$"],[95610,0,"a"],[95612,0,", which needs to insert a record into the internal state at a later position than $$"],[95695,0,"b"],[95697,0,"'s record."],[95473,0,", in which case the transformation of $$"],[95512,0,"b"],[95502,5,""],[95502,0,"ed operation"],[95515,2,""],[95515,0,"for"],[95522,0," is still a deeltion"],[95537,1,""],[95536,1,""],[95536,0,"le"],[95615,0,", in which case the transformed operation for $$"],[95662,0,"b"],[95663,1,""],[95663,0,"$ is a no0-o"],[95674,1,""],[95673,1,""],[95672,1,""],[95672,0,"-op"],[95676,0,".\n  $b$'s record "],[95692,9,""],[95575,0,">0"],[95599,0," of the same character"],[95895,0,"$$"],[95896,0,"b"],[95898,0,"'s record is counted when mapping $$"],[95933,0,"b"],[95933,1,""],[95933,0,"a"],[95935,0,"'s index to an internal accou"],[95959,5,""],[95959,0,"record position, "],[95781,9,""],[95787,0,"s"],[95780,0," by assumption"],[95982,0,"but not counted when mapping the internal record back to a transformed index "],[96058,1,""],[96058,0,", resulting in $$"],[96074,0,"a"],[96076,0,"'s transformed index being one less than it would have been without earlier applying $$"],[96162,0,"b"],[96164,0,".\n  If $s_p = mono(\"Del\") k$, $$"],[96195,0,"b"],[96197,0,"'s record is not counted during either mapping"],[96164,0,", as required given that $a$ has deleted an earlier character"],[96297,0,"index "],[96310,0,", so the index of $$"],[96329,0,"a"],[96331,0," is not affected by $$"],[96352,0,"b"],[96354,0,", as required given that "],[96190,1,""],[96190,0,"b"],[96379,0,"$$"],[96380,0,"b"],[96382,0," is a no-op.\n  On the other hand, if we replay $$"],[96430,0,"a"],[96432,0," before $$"],[96441,0,"b"],[96443,0,", the record updated by "],[96456,11,""],[96456,0,"inserted by $$"],[96469,0,"a"],[96471,0," appea"],[96476,1,""],[96476,0,"ars after "],[94992,4,""],[96482,0,"$$"],[96482,2,""],[96482,0,"$$"],[96483,0,"b"],[96485,0,"'s record in the internal state, so the transformation of $$"],[96544,0,"b"],[96546,0," is not affected by $$"],[96567,0,"a"],[96569,0,", and the transformed operations converge."],[96375,0,"the transformed operation for "],[91450,0,"\n\n#lemma[]"],[91459,0,"Let $a.italic(\"op\") = italic(\"Insert\")(i, c_i)$ and $b.italic(\"op\") = italic(\"Insert\")(j, c_j)$"],[91462,0," $$"],[91464,0,"a"],[91466,0," and $$"],[91472,0,"b"],[91474,0," be two concurent"],[91482,9,""],[91482,0,"concurrent events such that"],[91601,0,". If we start in "],[91615,3,""],[91615,0,"with some internal state and document state and then replay $$"],[91676,0,"a"],[91678,0," followed by $$"],[91692,0,"b"],[91694,0,", the resulting document "],[91710,0,"internal state and "],[91738,0,"state are the same as if we had replayed $$"],[91780,0,"b"],[91782,0," followed by $$"],[91796,0,"a"],[91798,0,"."],[92630,1700,""],[91801,0,"\n"],[91801,0,"#pro"],[91802,3,""],[91802,0,"proof[]"],[91808,0,"\n  \n"],[91809,2,""],[91809,0,"WLOG we consider two cases: (1a)~$i<j$; and (1b)~$i=j$ (the case of $i>j$ is similar to case 1a).\n\n  Case (1a): If we replay $a$ before $b$, we first apply $a$, then retreat $a$, and then apply $b$.\n  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n  When applying $b$, the record inserted for $a$ is not counted for the purpose of determining the insertion position for $b$, and since $b$'s index is greater, the record for $b$ is inserted after the record for $a$ in the internal state.\n  When computing the transformed index for $b$, the record for $a$ _is_ counted since $s_e = mono(\"Ins\")$, and therefore the transformed index for $b$ is one greater than it would have been without earlier applying $a$.\n  On the other hand, if we replay $b$ before $a$, the record for $b$ appears after the record for $a$ in the internal state, so the transformation of $a$ is not affected by $b$.\n  Thus, we have the situation as shown in @two-inserts, and the effect of the two insertions $a$ and $b$ is the same regardless of their order.\n\n  Case (1b): We have two concurrent insertions at the same position.\n  In this case, as explained in @prepare-effect-versions, we rely on an existing CRDT algorithm to place the records in the internal state in a consistent order, regardless of the order in which the events are applied.\n  The details of that algorithm are out of scope for this paper.\n  The rest of this case is similar to (1a): if the event with the earlier record position in the internal state is applied first, the event applied second has its index incremented, as required for convergence.\n"],[91809,0,"  "],[91841,1,""],[91855,2,""],[91855,0,"2"],[91903,1,""],[91916,1,""],[92951,2,""],[92951,0,"2"],[93335,1,""],[91819,0,"need to "],[92012,0," ()"],[92014,0,"we may also retreat and advance other events "],[93561,1,""],[92059,0,"so that the prepare state is updated "],[92067,29,""],[92067,0,"each event is applied in the correct prepare state"],[93016,0," on the document state and internal state"],[93058,2,""],[93058,0,"are"],[93058,26,""],[93058,0,"do not dependo "],[93072,1,""],[93071,1,""],[93071,0," on"],[93071,3,""],[93071,0,"o "],[93072,1,""],[93064,8,""],[93060,4,""],[93058,2,""],[93058,0,"are the same regardless of"],[93058,3,""],[93058,0,"is"],[91808,0,"\n  To replay $$"],[91822,0,"a"],[91824,0," followed by $$"],[91838,0,"b"],[91840,0,", we first retreat/advance so that the prepare state corresponds to $$"],[91909,0,"a,"],[91910,1,""],[91910,0,".italic()"],[91918,0,"\"\""],[91919,0,"parents"],[91929,0,", then apply $$"],[91943,0,"a"],[91945,0,", then retreat $$"],[91961,0,"a"],[91963,0,", then retreat/advance so that the prepare state corresponds to $$"],[92028,0,"b.italic()"],[92037,0,"\"\""],[92038,0,"parents"],[92048,0,", then apply $$"],[92062,0,"b"],[92064,0,".\n  "],[92066,2,""],[92377,0,"\n  "],[92378,2,""],[92379,154,""],[92066,0,"  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n"],[92219,0,"\n  When $$"],[92228,0,"b"],[92230,0," is applied, the presence of the record inserted by $$"],[92283,0,"a"],[92285,0," is the only differenb"],[92306,1,""],[92306,0,"ce between the internal state that $$"],[92342,0,"b"],[92336,4,""],[92336,0,"when applying"],[92353,0," after $$"],[92361,0,"a"],[92363,0," cp,[]"],[92368,0,"ared tp "],[92365,3,""],[92365,0,"omp"],[92375,1,""],[92374,1,""],[92374,0,"o "],[92376,1,""],[92376,0,"applying $$"],[92386,0,"b"],[92388,0," first"],[92389,0,"without applying $a$ "],[92415,0," ()"],[92417,0,"all other records are set to the same state by the retreat/ada"],[92478,1,""],[92478,0,"vance process"],[92492,0,".\n  Moreover"],[92496,8,""],[92496,0,"When determining the insertion position for $$"],[92540,2,""],[92539,1,""],[92538,1,""],[92537,1,""],[92536,1,""],[92536,0,"in the internal state"],[92375,0," the internal state when"],[92375,24,""],[92535,0," "],[92535,1,""],[92557,0," for $$"],[92563,0,"b"],[92565,0,"'s record based on $$"],[92585,0,"b"],[92587,0,"'s index $$"],[92597,0,"j"],[92599,0,", the record inserted by $$"],[92625,0,"a"],[92627,0," does not count since it has has $s_p = mono(\"NotInsertedYet\")$."],[92656,4,""],[92493,0," // TODO: do we need to pr"],[92514,5,""],[92514,0,"a lemma for that?"],[92725,0,"\n  Therefore, $$"],[92740,0,"b"],[92742,0,"'s record is inserted into the internal state at the same position relative to its neighbours, regardless of whether $$"],[92860,0,"a"],[92862,0," as "],[92865,1,""],[92864,1,""],[92863,1,""],[92863,0,"has been applied previously.\n  By similar argument the same holds for $$"],[92934,0,"a"],[92936,0,"."],[92936,0,"'s record"],[92946,0,"\n  \n  "],[92947,2,""],[92950,0,"Since the internal state "],[92976,0,"  In this case, as explained in @prepare-effect-versions, we rely on an existing CRDT algorithm to place the records in the internal state in a consistent order, regardless of the order in which the events are applied.\n  The details of that algorithm are out of scope for this paper.\n"],[92950,7,""],[92950,0,"T"],[92969,0,"uses an existing CRDT algorithm "],[93019,39,""],[92950,0,"As explained in @prepare-effect-versions, "],[92992,1,""],[92992,0,"t"],[93043,58,""],[93019,9,""],[93017,1,""],[93220,0,"\n  Even if "],[93188,10,""],[93188,0,"go beyond the"],[93208,3,""],[93208,0,"of"],[93225,8,""],[93225,0,"the "],[93225,1,""],[93225,0,"T"],[93229,0,"key property of that la"],[93251,1,""],[93250,1,""],[93250,0,"algorithm is that the final "],[93272,6,""],[93272,0,"sequence of internal state records "],[91800,0,"\n// TODO: technically the internal states will not be the same, since the "],[91862,12,""],[91862,0," since the prepare states will differ."],[91888,5,""],[91895,0," But the next retreat/to"],[91918,1,""],[91917,1,""],[91917,0,"advance to a specific m"],[91939,1,""],[91939,0,"version should fix that up."],[93473,0,"i"],[93473,1,""],[93438,0,"final "],[93479,0,"is the saem"],[93489,1,""],[93488,1,""],[93488,0,"me, regardless of whether we apply first $$"],[93530,0,"a"],[93531,1,""],[93531,0,"$ and then $$"],[93543,0,"b"],[93545,0,", or vice versa.\n  "],[93562,2,""],[93562,0,"\n  Now that we know that the internals "],[93600,1,""],[93599,1,""],[93599,0,"  s"],[93601,1,""],[93600,1,""],[93600,0,"state does not a"],[93615,1,""],[93615,0,"depend on the order of $$"],[93639,0,"a"],[93641,0," and $$"],[93647,0,"b"],[93649,0,", we consider the document state.\n  WLOG assume that $$"],[93703,0,"a"],[93705,0,"'s internal "],[93708,9,""],[93708,0,"records "],[93715,1,""],[93714,1,""],[93714,0," "],[93702,5,""],[93702,0,"the"],[93713,0,"inserted by $$"],[93726,0,"a"],[93728,0," appears earlier in t"],[93737,0,"at an "],[93751,0,"position "],[93764,0,"he internal state than the record inserted by $$"],[93811,0,"b"],[93813,0,"."],[93569,5,""],[93571,77,""],[93731,0," ()"],[93733,0," the order of $a$ and $b$"],[93733,0,"regardless of"],[93759,0," applying"],[93784,311,""],[93784,0,"  WLOG we need to consider two cases: (1)~$i<j$; and (2)~$i=j$ (the case of $i>j$ is similar to case 1).\n\n  Case (1): If we replay $a$ before $b$, we first apply $a$, then retreat $a$, and then apply $b$ (we may also retreat and advance other events so that each event is applied in the correct prepare state).\n"],[93890,2,""],[93890,0,"    "],[93784,2,""],[93784,0,"    "],[93783,123,""],[93783,0,"  "],[93782,0,"\n  Let $$"],[93790,0,"i'"],[93793,0," be the transformed index of $a.italic(\"op\")$$"],[93838,1,""],[93838,0," when $$"],[93845,0,"a"],[93847,0," is applied first.\n  "],[93866,2,""],[93865,0,"\n  \n  "],[93866,2,""],[93869,0,"TODO"],[93864,0,", and let $j'$ be the transformed index of $b.italic(\"op\")$ when $b$ is applied first."],[93950,1,""],[93960,195,""],[93960,0,"  If we replay $a$ before $b$, we first apply $a$, then retreat $a$, and then apply $b$ (we may also retreat and advance other events so that each event is applied in the correct prepare state).\n"],[93962,2,""],[93962,0,"Say"],[93952,8,""],[93982,164,""],[93983,1,""],[93984,240,""],[94050,0," is not counted when mapping $$"],[94080,0,"j"],[94082,0," to an internal "],[94086,12,""],[94086,0,"$$"],[94087,0,"b"],[94089,0,"'s internal state record, but it"],[94113,0," since it has $s_p = mono(\"NotInsertedYet\")$.\n  "],[94161,5,""],[94161,0,"However, $$"],[94171,0,"a"],[94173,3,""],[94173,0,"'s record"],[94195,0," when mappint $$"],[94210,0,"b"],[94212,0,"'s internal record"],[94207,1,""],[94207,0,"g"],[94223,0," state"],[94236,0," back to an index,"],[94261,0,"it has "],[94261,2,""],[94261,0,"$$"],[94262,0,"a"],[94264,0,"'s record"],[94297,0," and it appears before $b$'s record."],[94333,7,""],[94333,0,"\n  T"],[94375,0," when applied after $$"],[94396,0,"a"],[94402,64,""],[94402,0,"$j' + 1$"],[94398,12,""],[94375,0," is $j' + 1$"],[94557,1,""],[94556,1,""],[94555,1,""],[94554,1,""],[94553,1,""],[94553,0,"ed index for"],[94565,3,""],[94572,0," $$"],[94574,0,"i'"],[94577,0,","],[94579,3,""],[94579,0,"un"],[94581,1,""],[94783,563,""],[94078,0," $$"],[94080,0,"b.italic()"],[94089,0,"\"\""],[94090,0,"op"],[94095,0,"'s index"],[94147,35,""],[94138,9,""],[94050,0," has $s_p = mono(\"NotInsertedYet\")$, and "],[94090,1,""],[94093,0," hence"],[94036,0,"internal state "],[94114,0," it is"],[94106,3,""],[94419,0,".inse"],[94423,1,""],[94422,1,""],[94421,1,""],[94421,0,"talic()"],[94427,0,"\"\""],[94428,0,"op"],[94783,19,""],[94823,0,"\n\n$$"],[94826,0,"#"],[94826,1,""],[94825,2,""],[94825,0,"#le"],[94826,2,""],[94826,0,"lemma[]"],[94832,0,"Let $$"],[94837,0,"a"],[94839,0," and "],[94844,1,""],[94844,0,"$b$ be two concurrent events such that ]"],[94883,0,"$a.italic(\"op\") = italic(\"Insert\")(i, c)$ and $b.italic(\"op\") = italic(\"Delete\")(j)$. If we start with some internal state and document state and then replay $a$ followed by $b$, the resulting internal state and document state are the same as if we had replayed $b$ followed by $a$."],[95166,0,"\n#por"],[95170,1,""],[95169,1,""],[95169,0,"roof[]"],[95174,0,"\n  \n"],[96022,2648,""],[95175,2,""],[95995,27,""],[95175,0,"Since $a$ and $b$ are concurrent, the character being deleted by $b$ cannot be the character inserted by $a$.\n  We therefore only need to consider two cases: (2a)~the record inserted by $a$ has an earlier position in the internal state than the record updated by $b$; or (2b) vice versa.\n\n  Case (2a): If we replay $a$ before $b$, we first apply $a$, then retreat $a$, then apply $b$.\n  Applying $a$ inserts a record into the internal state, and after retreating $a$ this record has $s_p = mono(\"NotInsertedYet\")$ and $s_e = mono(\"Ins\")$.\n  When subsequently applying $b$ we update an internal state record at a later position.\n  The record inserted by $a$ is not counted when mapping $b$'s index to an internal record, but it is counted when mapping the internal record back to a transformed index, resulting in $b$'s transformed index being one greater than it would have been without earlier applying $a$.\n  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears after $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n  The transformed operations converge.\n\n  Case (2b): If we replay $b$ before $a$, we first apply $b$, then retreat $b$, then apply $a$.\n  Applying $b$ updates an existing record in the internal state (possibly splitting a placeholder in the process).\n  After retreating $b$ this record has either $s_p = mono(\"Ins\")$ (if no concurrent deletion of the same character was applied previously, in which case the transformed operation for $b$ is still a deletion) or $s_p = mono(\"Del\") k$ (if $k>0$ concurrent deletions of the same character have been applied, in which case the transformed operation for $b$ is a no-op).\n  $b$'s record has $s_e = mono(\"Del\")$ in any case.\n  We next apply $a$, which by assumption inserts a record into the internal state at a later position than $b$'s record.\n  If $s_p = mono(\"Ins\")$, $b$'s record is counted when mapping $a$'s index to an internal record position, but not counted when mapping the internal record back to a transformed index, resulting in $a$'s transformed index being one less than it would have been without earlier applying $b$, as required given that $b$ has deleted an earlier character.\n  If $s_p = mono(\"Del\") k$, $b$'s record is not counted during either index mapping, so the index of $a$ is not affected by $b$, as required given that the transformed operation for $b$ is a no-op.\n  On the other hand, if we replay $a$ before $b$, the record inserted by $a$ appears after $b$'s record in the internal state, so the transformation of $b$ is not affected by $a$, and the transformed operations converge."],[95175,0,"  "],[95336,2,""],[95336,0,"1"],[95473,2,""],[95473,0,"1"],[95448,2,""],[95448,0,"2"],[96310,2,""],[96310,0,"2"],[91800,0," <lemma-ins-ins>"],[95182,0," <lemma-ins-del>"],[95589,0," (and also retreat/advance other events before applying, as"],[95647,1,""],[95646,1,""],[95646,0,"like in @lemma-ins-ins)"],[96403,0,"therefore "],[96517,0," ()"],[96519,0,"plus other reatre"],[96535,1,""],[96534,1,""],[96533,1,""],[96532,1,""],[96532,0,"treats/advances"],[97977,0,"\n#lemma[Let $a$ and $b$ be two concurrent events such that $a.italic(\"op\") = italic(\"Insert\")(i, c)$ and $b.italic(\"op\") = italic(\"Delete\")(j)$. If we start with some internal state and document state and then replay $a$ followed by $b$, the resulting internal state and document state are the same as if we had replayed $b$ followed by $a$.] <lemma-ins-del>\n"],[98327,3,""],[98327,0,"del"],[98036,84,""],[98036,0,"$a.italic(\"op\") = italic(\"Delete\")(i)$ and $b.italic(\"op\") = italic(\"Delete\")(j)$"],[98332,0,"\n#pr"],[98334,2,""],[98334,0,"proof[]"],[98340,0,"TODO."],[98776,0,"\n  "],[98776,0,"T"],[98776,1,""],[98776,0,"There four subcases: if $$"],[98801,0,"a"],[98802,1,""],[98802,0,"$ and $$"],[98809,0,"b"],[98810,1,""],[98810,0,"$ are both deletions, the document states are the same by @lemma-ins-ins."],[98775,1,""],[98775,0,"\n  "],[98885,0,"\n  "],[98886,2,""],[98784,4,""],[98784,0,"three"],[98887,0,"  If $$"],[98892,2,""],[98892,0,"one of $$"],[98900,0,"a"],[98902,0," and $$"],[98908,0,"b"],[98910,0," is an "],[98824,9,""],[98824,0,"insertions"],[98918,0,"insertion and the other is a deletion, we use @lemma-ins-del.\n  If both $$"],[98991,0,"a"],[98993,0," and $$"],[98999,0,"b"],[99001,0," are deletions, we use @lemma-a"],[99031,1,""],[99031,0,"del-del."],[99040,389,""],[98753,0,"\n  // TODO: not sure that reasoning is sound. Even if we start off with a valid graph, removing an event that's not in the frontier would make it invalid."],[93577,0,"\n  // TODO: should say something about placeholders"],[93616,0,"state clearning, "],[93627,1,""],[93631,0," critical versions, and"],[93632,19,""],[93616,0,"critical versions, "],[92401,0,"\n  Since $$"],[92411,0,"b"],[92412,1,""],[92412,0,"$ is concurret to $$"],[92431,0,"a"],[92433,0,", $$"],[92436,0,"a"],[92437,1,""],[92437,0,"$ am"],[92440,1,""],[92439,1,""],[92439,0,"cannot be a critical version, and therefore the internal state is not cleared after applying $$"],[92533,0,"a"],[92534,1,""],[92534,0,"$."],[92425,0,"n"],[93713,0,"\n  // When we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$."],[93713,0,"\n  For example, if we first apply $$"],[93748,0,"a"],[93749,1,""],[93749,0,"$ then $$"],[93757,0,"b"],[93758,1,""],[93758,0,"$, and if $$"],[93769,0,"a"],[93771,0,"'s final position in the internal state is af"],[93768,5,""],[93768,0,"the"],[93786,0," of When we are seeking for the insertion position, we never need to seek past a placeholder, since the placeholder represents characters that were inserted before $V_\"crit\"$."],[93790,171,""],[93790,0,"'a"],[93791,1,""],[93790,1,""],[93790,0,"$$"],[93791,0,"a"],[93793,0,"'s record"],[93830,0,"ter $$"],[93835,0,"b"],[93837,0,"'s record"],[93791,1,""],[93791,0,"b"],[93835,1,""],[93835,0,"a"],[93846,0,", then the CRDT algorithm has to skip over $$"],[93890,0,"a"],[93892,0,"'s record when inserting $$"],[93918,0,"b"],[93907,9,""],[93907,0,"applying"],[93919,0,".\n  This skipping process never needs to skip "],[93927,9,""],[93956,0,"over a placeholder, since placeholders represent characters that were inserted before the last critical version"],[93901,0," ()"],[93903,0,"and potentially other, concurrently inserted records"],[93962,8,""],[93962,0,"determining the insertion position for"],[94004,0,"'s record"],[94161,0,"; it only ever needs to skip across concurrent "],[94161,3,""],[94161,0,".\n  I"],[94192,6,""],[94192,0,"over"],[94197,0,"re"],[94198,1,""],[94197,1,""],[94197,0,"records for "],[94209,11,""],[94209,0,"insertions that are concurrent with $$"],[94246,0,"a"],[94248,0," or $$"],[94253,0,"b"],[94255,0,", and all such insertion events "],[94255,5,""],[94255,0,"; by the definition of a crit"],[94283,1,""],[94282,1,""],[94281,1,""],[94280,1,""],[94279,1,""],[94278,1,""],[94278,0,"critical versions,"],[94323,0,"appear after the last critical version ()"],[94363,0,"and hence after the last internal state clearing"],[94412,0," in the topological sort, and therefore they are represented by explicit internal state records, not placeholders."],[94527,267,""],[99289,5,""],[99289,0,"\n  \n"],[99292,0,"WLOG we need to consider two cases: ()"],[99329,0,"1"],[99331,0,"~the record updated by $$"],[99355,0,"a"],[99357,0," has an earlier position in the internal state than the record updated by $$"],[99432,0,"b"],[99434,0,"; or ()"],[99440,0,"2"],[99442,0,"~$$"],[99444,0,"a"],[99446,0," and $$"],[99452,0,"b"],[99454,0," update the same internal state record. The case where $$"],[99510,0,"a"],[99512,0,"'s record has a late "],[99532,1,""],[99532,0,"r position than $$"],[99549,0,"b"],[99551,0,"'s record is symmetric to ()"],[99578,0,"1"],[99579,1,""],[99579,0,").\n  \n  "],[99582,2,""],[99585,0,"Case ()"],[99591,0,"1"],[99592,1,""],[99592,0,"): We "],[99593,1,""],[99593,0,"."],[99598,0,"further consider two sub-ccases: "],[99623,1,""],[99630,0,"()"],[99631,0,"1a"],[99634,0,"~the record updated by $$"],[99658,0,"a"],[99660,0," has $s_e = mono(\"Del\")$ prior applying $$"],[99701,0,"a"],[99703,0,"; or ()"],[99709,0,"1b"],[99712,0,"~the record updated by $a$ has $s_e = mono(\"Del\")$ prior applying $a$"],[99711,1,""],[99711,0,")"],[99678,3,""],[99678,0,"Ins"],[99690,0," to"],[99726,15,""],[99750,19,""],[99750,0,".\n  \n  "],[99752,2,""],[99755,0,"Case ()"],[99761,0,"a"],[99761,0,"1"],[99764,0,": "],[99593,1,""],[99593,0,":"],[99766,0,"Say we replay $$"],[99781,0,"a"],[99783,0," before $$"],[99792,0,"b"],[99794,0,". "],[99795,1,""],[99795,0,"\n  After applying and retreating $$"],[99829,0,"a"],[99831,0,", like "],[99833,5,""],[99833,0,"the record updated by $$"],[99856,0,"a"],[99858,0," has "],[99795,0,"\n  Before applying $$"],[99815,0,"a"],[99817,0,", the record that $$"],[99836,0,"a"],[99838,0," will update "],[99646,10,""],[99646,0,"that"],[99655,0,"will update "],[99857,0,"must have $s_p = mono(\"Ins\")$ ()"],[99888,0,"it cattnot by "],[99891,11,""],[99891,0,"cannot be $$"],[99902,0,"mono(\"NotInsertedYet\")"],[99925,0," since the insertion of that record must happen causally before $$"],[99990,0,"a"],[99992,0," and hence cannot be retreated, and it cannot be $$"],[100042,1,""],[100042,0,"mono(\"Del\") k$ since otherwise we would be in case ()"],[100094,0,"2"],[100097,0,"."],[100022,0," before applying $a$"],[100114,1,""],[100114,0,"1h"],[100115,1,""],[100115,0,"b"],[100187,0,"$s_p = mono(\"Ins\")$ and $s_e = mono(\"Del\")$.\n  When subsequently applying $$"],[100262,0,"b"],[100234,4,""],[100234,0,"We"],[100257,1,""],[100256,1,""],[100255,1,""],[100259,0,", which by assumption updates a record "],[100290,0,"n internal state"],[100314,0,"that is later than $$"],[100334,0,"a"],[100336,0,"'s.\n  $$"],[100343,0,"a"],[100345,0,"'s record is countend"],[100365,1,""],[100364,1,""],[100364,0,"d when mapping the index of $$"],[100393,0,"b.italci()"],[100402,0,"\"\""],[100402,2,""],[100401,2,""],[100400,1,""],[100399,1,""],[100399,0,"ic()"],[100402,0,"\"\""],[100403,0,"op"],[100408,0," to "],[100357,0," therefore"],[100422,0,"an internal record position, but not counted when mapping the internal record back to a transformed index, resulting in $a$'s transformed index being one less than it would have been without earlier applying $b$, as required given that $b$ has deleted an earlier character."],[100230,0,", and the transformed operation for $a$ is a "],[100274,1,""],[100273,1,""],[100273,0,"$italic(\"Delete\")(i')$ for some transformed index $i'$"],[100624,0,".\n  "],[100625,0,"\n  Thus, if the record updated by $$"],[100660,0,"b"],[100662,0," is not already marked as deleted, the transformed operation for $$"],[100728,0,"b"],[100730,0," is $italic(\"Delete\")(i')$ for some transformed index $i'$."],[100752,1,""],[100752,0,"j"],[100754,0,"-1"],[100758,0,", where $$"],[100767,0,"j'"],[100771,31,""],[100695,0," ($s_e = mono(\"Del\")$)"],[100716,1,""],[100663,34,""],[100663,0,"has "],[100680,3,""],[100680,0,"Ins"],[100762,0,"the transformed "],[100762,0,"is "],[100781,0,"index of $b$'s operation if $a$ had not been applie"],[100826,6,""],[100826,0,"replayed previously"],[100849,168,""],[100849,0,"If $b$ has $s_e = mono(\"Ins\")$"],[100855,0,"'s record previously"],[100893,3,""],[100893,0,"Del"],[100899,0,", it is transformed into a no-op."],[100845,0,", and j'"],[100852,1,""],[100851,1,""],[100851,0,"$j'-1 > i'$"],[100857,1,""],[100857,0,"gt.eq"],[100866,0,", as required"],[100966,0,"\n  If we replay $$"],[100983,0,"b"],[100985,0," before $$"],[100994,0,"a"],[100969,0,"On the other hand, "],[100988,1,""],[100988,0,"i"],[101015,0,", the record updated by $$"],[101040,0,"b"],[101042,0," appears later than $$"],[101063,0,"a"],[101065,0,"'s record in the internal state, so the transformation of $$"],[101124,0,"a"],[101126,0," is not affected by $$"],[101147,0,"b"],[101149,0,".\n  "],[101151,2,""],[101151,0,"\n  Case ()"],[101160,0,"1b"],[101163,0,": "],[104631,0,"\n  // It is never the case that we clear the internal state between the two events being swapped"],[104636,0," TOD:"],[104640,1,""],[104640,0,"O:"],[101165,0,"Say we replay $a$ before $b$.\n  Before applying $a$, the record that $a$ will update must have $s_p = mono(\"Ins\")$"],[101260,0,"either "],[101286,0," ()"],[101288,0,"if "],[101292,0," or $mono(\"Del\") k$"],[101297,0,"s_p = "],[101291,0,"all deletions "],[101295,0,"prevo"],[101299,1,""],[101299,0,"iously replayed "],[101325,0,"of the same item "],[101337,5,""],[101337,0,"character are concurrent with $$"],[101368,0,"a"],[101396,0," ()"],[101398,0,"if there is a deletion "],[100083,34,""],[100083,0,"that would require that an event that happened before $$"],[100138,0,"a"],[100140,0," already deleted "],[100094,7,""],[100094,0,"imply"],[100155,0,"the same character, in which case it would not be possible to generate $$"],[100227,0,"a"],[99886,0,".\n  "],[99890,1,""],[99891,1,""],[99891,0,"I"],[100045,7,""],[100045,0,".\n  I"],[100230,1,""],[100231,0,")"],[101373,7,""],[101393,135,""],[101393,0,"by the same argument as in ()"],[101421,0,"1a"],[101424,0,".\n  "],[101426,2,""],[101426,0,"  After applying and retreating $a$, the record updated by $a$ has $s_p = mono(\"Ins\")$ and $s_e = mono(\"Del\")$, and the transformed operation for $a$ is $italic(\"Delete\")(i')$ for some transformed index $i'$.\n"],[101579,54,""],[101579,0,"a no-op since $s_e = mono(\"Del\")$"],[101593,19,""],[101424,0,", and $s_e = mono(\"Del\")$ by assumption"],[101625,7,""],[101528,3,""],[101528,0,"remains in the same state"],[101554,0,"()"],[101555,1,""],[101574,0,","],[101575,4,""],[101595,0,")"],[101648,0,"  When we subsequently apply $$"],[101678,0,"b"],[101680,0,", the transformed operation is therefore the same as if $$"],[101737,0,"a"],[101739,0," had not been applied, as required."],[91451,0,"\n\n"],[91452,0,"#le"],[91453,2,""],[91453,0,"lemma"],[91452,8,""],[91452,0,"#lemma\n\n"],[91458,0,"[]"],[91459,0,"Let $$"],[91464,0,"a"],[91464,1,""],[91464,0,"e"],[91466,0," be an event in a valid gra"],[91490,3,""],[91490,0,"event graph such that $b.italic(\"op\") = italic(\"Delete\")(j)$."],[91547,1,""],[91547,0,"i"],[91513,1,""],[91513,0,"a"],[91551,0," In a"],[91555,1,""],[91555,0,"the internal state res"],[91576,1,""],[91575,1,""],[91574,1,""],[91574,0,"that has advanced all events that happeen"],[91614,1,""],[91613,1,""],[91613,0,"ned bo"],[91618,1,""],[91618,0,"efore $$"],[91625,0,"e"],[91627,0," and retreated all events that did not happen before $$"],[91681,0,"e"],[91683,0,", the record "],[91513,1,""],[91513,0,"e"],[91696,0,"that $$"],[91702,0,"e"],[91704,0," will update has $s_p = mono(\"Ins\")$."],[91742,0," <lemma-delete-prepare>"],[100139,0," by @lemma-prepare-delete"],[91750,7,""],[91757,0,"-delete"],[100228,345,""],[91765,0,"\n#pr"],[91767,2,""],[91767,0,"proof[]"],[91773,0,"\n  \n"],[91776,0,"  (It cannot be $mono(\"NotInsertedYet\")$ since the insertion of that record must happen causally before $a$ and hence cannot be retreated before applying $a$.\n  It cannot be $mono(\"Del\") k$ since that would imply that an event that happened before $a$ already deleted the same character, in which case it would not be possible to generate $a$.)\n"],[91776,3,""],[92116,2,""],[91573,0," directly before applying $$"],[91600,0,"e"],[91603,17,""],[91603,0,"()"],[91604,0,"in which"],[91612,1,""],[91648,0," have been advanced "],[91667,1,""],[91671,0," all others have been"],[91702,42,""],[91702,0,")"],[91574,8,""],[91574,0,"immed"],[91574,5,""],[91574,0,"immediately"],[91799,2,""],[91799,0,"$$"],[91800,0,"s_p"],[91803,17,""],[91803,0," eq.not mono"],[91796,0,"\n  "],[91848,107,""],[91797,2,""],[91797,0,"insertion of that record must happen causally before $a$ and hence cannot be retreated before applying $a$."],[91797,0,"  The "],[91819,1,""],[91818,1,""],[91818,0,"e"],[91856,1,""],[91856,0,"e"],[91858,0,";\n  "],[91859,0," we therefore have "],[91935,46,""],[91878,0,"$s_p eq.not mono(\"NotInsertedYet\")$ since the "],[91923,1,""],[91922,1,""],[91922,0,"at state can only be reached by retreating an insertion."],[91979,57,""],[91981,0,"Furthermore, "],[91994,12,""],[91994,0,"we have"],[92003,0,"s_p eq.not "],[92028,0," for any $$"],[92038,0,"k"],[92100,1,""],[92100,0,"e"],[92191,1,""],[92191,0,"e"],[92194,0,"\n  This leaves $$"],[92210,0,"s_p = mono()"],[92221,0,"\"\""],[92222,0,"ins"],[92225,1,""],[92225,0,"\""],[92222,1,""],[92222,0,"I"],[92228,0," as the only possibility."],[91796,0,"\n  If we had "],[91891,35,""],[91809,0,"$s_p eq.not mono(\"NotInsertedYet\")$"],[91814,6,""],[91814,0,"="],[91839,0,", that would imply that we retreated the insertion of that "],[91893,5,""],[91893,0,"the character deleted by $$"],[91919,0,"e"],[91921,0,", which contradicts the fact that the insertion of a character must happen before any deletion of teh"],[92021,1,""],[92020,1,""],[92020,0,"he sm"],[92024,1,""],[92024,0,"ame character."],[92039,147,""],[92053,0," if"],[92062,2,""],[92062,0,"d"],[92069,6,""],[92069,0,"="],[92090,3,""],[92090,0,"some"],[92098,6,""],[92098,0,","],[92294,11,""],[92294,0,"option that does not result in a contradiction"],[91763,0,", or it is a placeholder ()"],[91789,0,"which behaves the same"],[91773,0," part of"],[91811,8,""],[91811,0,"like $s_p = mono(\"Ins\")$ records"],[91815,0," a sequence of"],[91708,0,"either "],[92383,0," or placeholder"],[92417,0,"s"],[92427,1,""],[92426,1,""],[98622,0,"\n  Before applying $$"],[98642,0,"b"],[98644,0," this record must have $s_p = mono(\"Ins\")$ by @lemma-prepare-delete."],[98720,0," applying and"],[98765,7,""],[98711,0,", and $s_e = mono(\"Del\")$"],[98721,0,"#"],[98721,1,""],[98721,0,"$$"],[98722,0," can be either "],[98738,3,""],[98737,0,"$mono(\"Del\")$ or "],[98744,3,""],[98744,0,"Ins"],[98767,0," ()"],[98769,0,"depending on whether a concurrent deletion of the same character has already been d"],[98851,1,""],[98851,0,"applied"],[98933,318,""],[98933,0,"and"],[98711,0,")"],[98687,0,"("],[99098,0,"we "],[99100,0," \n  "],[98718,0," we must have either"],[98743,17,""],[98743,0," = "],[98758,0," ()"],[98760,1,""],[98760,0,")"],[98760,0,"in which case, the transformed operation for $$"],[98806,0,"b"],[98808,0," is $$"],[98813,0,"italic()"],[98820,0,"\"\""],[98821,0,"Delete"],[98829,0,"()"],[98830,0,"j'"],[98834,0," for some transformed index j'$$"],[98865,1,""],[98862,0,"$"],[98872,0,"s_e = "],[98892,89,""],[98892,0,"in which case, the transformed operation is a no-op"],[98907,36,""],[98907,0,"%"],[98907,1,""],[98907,0,"$$"],[98908,0,"b"],[98910,0," is transformed into a no-op"],[99179,0,"had $s_e = mono(\"Del\")$ before applying $$"],[99220,0,"b"],[99222,0,", the internal state "],[99228,15,""],[99228,0,"transformed operation for $$"],[99255,0,"a"],[99257,0," is the same as if $$"],[99277,0,"b"],[99279,0," had not been applied, which is consistent with the fact that $$"],[99342,0,"b"],[99344,0," was transformed into a no-op.\n  \n  "],[99375,2,""],[99376,2,""],[99376,0,"    "],[99376,4,""],[99376,0,"      "],[99375,3,""],[99375,0,"  If we had "],[99387,8,""],[99390,1,""],[99390,0,"e"],[99406,0," before applying $b$"],[99754,198,""],[98722,4,""],[98722,0,"can"],[98719,2,""],[98719,0,"it"],[99222,0," applying "],[99223,0,"the process of "],[99247,0,"and retreating $$"],[99263,0,"b"],[99264,1,""],[99264,0,"$ did not change the internal state, so"],[100956,24,""],[100955,1,""],[101017,0," ()"],[101019,0,"by @lemma-prepare-delete"],[101551,0,"\n  If $$"],[101558,0,"a"],[101560,0," had not been applied"],[101574,7,""],[101574,0,"replayed previously, it would have been counted during both mappings."],[102297,32,""],[102297,0," (by @lemma-prepare-delete)"],[102548,0,"  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears later than $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n"],[102548,184,""],[102675,0,"  On the other hand, if we replay $b$ before $a$, the record updated by $b$ appears later than $a$'s record in the internal state, so the transformation of $a$ is not affected by $b$.\n"],[102858,0,"\n  "],[102859,2,""],[102859,0,"\n  Case ()"],[102868,0,"2"],[102870,0,": TODO"],[102872,4,""],[102872,0,"Say we replay $$"],[102887,0,"a"],[102889,0," before $$"],[102898,0,"b"],[102900,0,".\n  Before applying $$"],[102921,0,"a"],[102923,0,", the record that both events update may have $s_e = mono(\"Del\")$"],[102969,0,"$s_e = mono(\"Del\")$ "],[102982,3,""],[102982,0,"Ins"],[102989,0,"or "],[103011,0,", but after applying $$"],[103033,0,"a"],[103035,0," it definitely has $s_e = mono(\"Del\")$."],[102872,32,""],[102888,3,""],[102888,0,"one of the two events"],[102888,21,""],[102888,0,"both of the events"],[103015,3,""],[103015,0,"the first event"],[103069,0,"\n  The second event will therefore be transformed into a no-op.\n  The same happens regardless of whetther "],[103174,1,""],[103173,1,""],[103172,1,""],[103171,1,""],[103170,1,""],[103170,0,"er"],[103171,1,""],[103170,1,""],[103170,0,"her $$"],[103175,0,"a"],[103177,0," or $$"],[103182,0,"b"],[103184,0," is appl"],[102879,8,""],[102879,0,"replaying"],[103189,4,""],[103189,0,"replayed first, so the result does not depend on the order of replay."],[103257,0," of the two events"],[104682,0," In other words, any two replicas that have the same event graph converge to the same document state and the same internal state."],[105992,0," and internal state"],[106091,9,""],[106097,0,"s"],[106076,2,""],[106076,0,"are"],[105997,0,"the "],[106031,8,""],[106031,0,"replaying"],[106120,8,""],[106120,0,"replaying"],[106201,0," and the internal state"],[106254,2,""],[106254,0,"are"],[106267,4,""],[106267,0,"those"],[106454,0,"\n  \n  "],[106455,2,""],[106456,2,""],[106455,0,"  Replaying the events in the prefix $angle.l e_1, e_2, ..., e_i, e_j, ..., e_n angle.r$"],[106519,15,""],[106519,0,"-1)"],[106518,0,"("],[106532,0," is a "],[106533,5,""],[106533,0,"results in a deter"],[106533,18,""],[106533,0,"is a deterministic algorithm resulting in some document state and some internal state."],[103862,264,""],[106356,0,"  There three subcases: if $a$ and $b$ are both insertions, the document states are the same by @lemma-ins-ins.\n  If one of $a$ and $b$ is an insertion and the other is a deletion, we use @lemma-ins-del.\n  If both $a$ and $b$ are deletions, we use @lemma-del-del.\n"],[106358,21,""],[106358,0,"Next, re rep"],[106364,6,""],[106364,0,"we replay either e_i, e_j"],[106381,0,"$"],[106385,0,"#"],[106385,1,""],[106385,0,"$ followed buy"],[106398,1,""],[106397,1,""],[106397,0,"y "],[106399,2,""],[106399,0,"#"],[106399,1,""],[106399,0,"$#"],[106400,1,""],[106403,0,"#"],[106403,1,""],[106403,0,"$$"],[106404,0,", or"],[106408,1,""],[106408,0," $$"],[106410,0,"e_j"],[106414,0," followed by $$"],[106428,0,"e_i"],[106432,0,".\n  "],[106436,2,""],[106436,0,"I"],[106440,1,""],[106440,0,"e_i"],[106450,1,""],[106450,0,"e_j"],[106480,0,"resulting "],[106490,9,""],[106496,0," in either order"],[106558,1,""],[106558,0,"e_i"],[106568,1,""],[106568,0,"e_j"],[106652,0,"e_i"],[106655,1,""],[106662,1,""],[106662,0,"e_j"],[106704,0,"\n  Finally, replaying the suffix $angle.l e_1, e_2, ..., e_i, e_j, ..., e_n angle.r$"],[106746,20,""],[106748,0,"("],[106750,0,"+1)"],[106772,0," is a deterministic altor"],[106796,1,""],[106795,1,""],[106794,1,""],[106794,0,"gorithm.\n  This shows that concurrent operations commute."],[106852,1015,""],[103280,1052,""],[103280,0,"#lemma[Let $G$ be a valid event graph with ${a, b} subset.eq sans(\"Version\")(G)$. Let the event sequence $E = angle.l e_1, e_2, ..., e_n angle.r$ be a topological sort of $G - {a, b}$. Then replaying the events $E$ in order, followed by $a$ and then $b$, results in the same document state as replaying $E$ followed by $b$ and then $a$.] <lemma-commute>\n#proof[\n  By induction over $n$, the length of $E$.\n  // TODO: not sure that reasoning is sound. Even if we start off with a valid graph, removing an event that's not in the frontier would make it invalid.\n\n  Base case ($n=0$).\n\n  Inductive step.\n  Inductive hypothesis: replaying $E_1 = angle.l e_1, e_2, ..., e_k, a, b angle.r$ results in document state $d$, and $E_2 = angle.l e_1, e_2, ..., e_k, b, a angle.r$ results in the same document $d$.\n  We must show that replaying $E'_1 = angle.l e_1, e_2, ..., e_k, e_l, a, b angle.r$ results in the same document state as replaying $E'_2 = angle.l e_1, e_2, ..., e_k, e_l, b, a angle.r$, where $e_l$ is the next event after $e_k$ in $E$.\n\n  TODO\n]\n\n"],[103280,1052,""],[92459,0,"\n\n#lemma[]"],[92468,0,"Let $$"],[92473,0,"s"],[92473,1,""],[92473,0,"S"],[92475,0," be some internal $$"],[92494,0,"al"],[92495,1,""],[92494,1,""],[92493,2,""],[92493,0,"#al"],[92494,2,""],[92494,0,"algname state"],[92506,1,""],[92506,0,"e, and let $$"],[92518,0,"a"],[92520,0,"a"],[92520,1,""],[92520,0," and $$"],[92526,0,"b"],[92528,0," be two concurrent events. Let"],[92474,0,"_0"],[92560,0," $$"],[92562,0,"s_"],[92563,1,""],[92562,1,""],[92562,0,"S_1"],[92566,0," be the internal state resulting from updating $$"],[92614,0,"S_0"],[92618,0," with retreat and advance calls so that the prepare version of $$"],[92682,0,"~S"],[92683,1,""],[92682,1,""],[92682,0,"S_1"],[92686,0," equals the parents of $$"],[92710,0,"b"],[92712,0,". Let $$"],[92719,0,"S_2"],[92723,0," be the internal state resulting from first replaying $$"],[92778,0,"S"],[92778,1,""],[92778,0,"a"],[92780,0," on top of $$"],[92792,0,"S_09"],[92795,1,""],[92796,0,", and then retreating and advancing so hat "],[92838,1,""],[92837,1,""],[92836,1,""],[92835,1,""],[92835,0,"that the prepare version of $$"],[92864,0,"S_2"],[92868,0," equals the parents of $$"],[92892,0,"b"],[92894,0,". Then the only difference between $$"],[92930,0,"S_1"],[92934,0," and $$"],[92940,0,"S_2"],[92944,0,"is t"],[92947,1,""],[92946,1,""],[92945,1,""],[92944,1,""],[92944,0," is in the record updat"],[92966,1,""],[92965,1,""],[92964,1,""],[92963,1,""],[92962,1,""],[92962,0,"inserted or updated by $$"],[92986,0,"a"],[92988,0,"; the rest of the internal states are the same."],[93036,0,"\n#pro"],[93038,3,""],[93038,0,"proof[]"],[93044,0,"\n  \n"],[93045,2,""],[93036,0," <lemma-prepare-state>"],[93067,0,"  $$"],[93070,0,"S_1"],[93074,0," has the same record sequence, and the same $$"],[93119,0,"s_e"],[93123,0," in each record "],[93103,1,""],[93138,0,"as $$"],[93142,0,"S_0"],[93146,0,", since retreating and advancing does n"],[93179,6,""],[93179,0,"only updates $$"],[93193,0,"s_p"],[93197,0," values."],[93179,26,""],[93179,0,"does not change those things.\n  The $$"],[93216,0,"s_p"],[93220,0," values in $$"],[93232,0,"S_1"],[93236,0," are set so that c"],[93253,1,""],[93066,0,"\n  Since $$"],[93076,0,"S_0"],[93080,0," is produced by #al"],[93097,2,""],[93097,0,"algname, it contains 122345\n  "],[93125,2,""],[93118,6,""],[93118,0,"records for all characters that have been inserted or deleted by events since the last critical version, it contains placeholders for any characters"],[93221,0," prior to $a$ and $b$"],[93287,0," inserted but not deleted prior to that critical version, and it does not contain anything for characters that were deleted prior to that critical version."],[93002,23,""],[93002,0,"$S_1$ and $S_2$ is"],[93437,0,"\n  By the definition of criticf"],[93467,1,""],[93467,0,"al version, any event that is conccu"],[93502,1,""],[93501,1,""],[93501,0,"urrent with $$"],[93514,0,"b"],[93516,0," must be after the critical version, and therefore the record that "],[93512,0," $$"],[93514,0,"a"],[93516,0," or "],[93519,1,""],[93489,0,"$e$ "],[93594,0,"is updated by $$"],[93609,0,"e"],[93611,0," must exist in $$"],[93627,0,"S_0"],[93631,0,"."],[92988,0," ()"],[92990,0,"and possibly a split of a placeholder that this record falls within"],[93003,1,""],[93003,0,"the"],[93892,0,"every record inserted by an event concurrently with $$"],[93945,0,"b"],[93947,0," has $s_p = mono(\"NotInsertedYet\")$, every record whose inserttion "],[94009,1,""],[94013,0,"happened before $$"],[94030,0,"b"],[94032,0," but which was not deleted before $$"],[94067,0,"b"],[94069,0," has $s_p = mono(\"NotInsertedYet\")$"],[94087,14,""],[94087,0,"Ins"],[94093,0,", and every record that was deleted #"],[94129,1,""],[94129,0,"$$"],[94130,0,"k"],[94132,0," times before $$"],[94147,0,"b"],[94149,0," has $s_p = mono(\"NotInsertedYet\")$"],[94167,14,""],[94167,0,"Del"],[94172,0," k"],[94175,0,"."],[94129,0,"by "],[94134,0,">0"],[94138,5,""],[94138,0,"separate events"],[94191,0,"\n  Thus, the "],[93854,21,""],[93854,0,"$s_p$ values in $S_1$"],[94204,0,"$s_p$ values in $S_1$ do not depend on teh"],[94245,1,""],[94244,1,""],[94244,0,"he $s_p$ values in $S_1$"],[94266,1,""],[94266,0,"0"],[94268,0,", and they do not depend on any events that are concurrent with $$"],[94333,0,"b"],[94335,0,"."],[94191,0,"\n  To achieve this it is sufficient to consider events that happened after the last critical version."],[94437,0,"\n  \n  "],[94438,2,""],[94441,0,"Replaying $$"],[94452,0,"a"],[94454,0," on top of $$"],[94466,0,"S_0"],[94470,0," finvo"],[94475,1,""],[94474,1,""],[94473,1,""],[94472,1,""],[94471,1,""],[94471,0,"involves first updating the $$"],[94500,0,"s_p"],[94504,0," values to "],[94512,3,""],[94512,0,"based on the parents of "],[94512,24,""],[94512,0,"to set the prepare version to the parents of $$"],[94558,0,"a"],[94560,0,", then "],[94566,1,""],[94565,1,""],[94564,1,""],[94563,1,""],[94562,1,""],[94562,0,"and then applying "],[94560,0," ()"],[94562,0,"which may differ from the parents of $$"],[94600,0,"b"],[94623,0,"$$"],[94624,0,"a"],[94626,0,", which may insert a record ()"],[94634,3,""],[94634,0,"either"],[94647,0,"s"],[94659,1,""],[94658,1,""],[94648,0," or updates"],[94669,0,"in the internal state, and possibly splits a placeholder to accommodate this record.\n  $$"],[94757,0,"S_2"],[94761,0," is then produced by updating the $$"],[94796,0,"s_p"],[94800,0," values in the same way as for $$"],[94832,0,"S_1"],[94836,0,".\n  Even if "],[94840,8,""],[94840,0,"As these $$"],[94850,0,"s_p"],[94854,0," values depend only on $$"],[94878,0,"b.italic()"],[94887,0,"\"\""],[94888,0,"parents"],[94898,0," and not on $$"],[94911,0,"a"],[94913,0,", $$"],[94916,0,"S_2"],[94920,0," is identical to $$"],[94938,0,"s"],[94938,1,""],[94938,0,"S_1"],[94942,0," except for the record "],[94790,0," all of"],[94972,0,"inserted or updated by $$"],[94996,0,"a"],[94998,0,"."],[96286,74,""],[96286,0,"by @lemma-prepare-state"],[96311,38,""],[100604,0," (by @lemma-prepare-state)"],[102250,0," (by @lemma-prepare-state)"],[104147,0," (by @lemma-prepare-state)"],[104057,0,"f"],[104057,1,""],[93821,1,""],[93820,1,""],[107910,0,"\n  // TODO: It is never the case that we clear the internal state between the two events being swapped"],[107910,0,"\n  Since $e_i$ followed by $e_j$"],[107925,11,""],[107925,0,"and"],[107934,0," are concurrent, it is not possible for only one fo"],[107984,1,""],[107983,1,""],[107983,0,"of the two to be contained in a critical version, and therefore no state clearing will take place after "],[108081,6,""],[108081,0,"between app"],[108091,1,""],[108091,0,"plying these two events."],[108116,102,""],[558,4,""],[558,0,"false"],[61579,5,""],[61579,0,"Replicas"],[61628,0,"final "],[61642,10,""],[61642,0," state"],[61837,1,""],[61774,4,""],[61774,0,"Loading the"],[61798,14,""],[61798,0,"can be deferred until"],[61820,12,""],[61820,0,"new"],[61835,7,""],[61835,0,"events need to be merged"],[61749,23,""],[61749,0,"replaying the event graph"],[61739,1,""],[61825,11,""],[61849,0," that are concurrent with an existing event"],[61278,0,"// "],[61651,7,""],[61651,0," reflecting"],[61674,17,""],[61667,7,""],[61667,0,"events"],[61710,9,""],[62142,3,""],[62142,0,"event IDs of the form"],[62204,10,""],[62204,0," event IDs"],[62204,10,""],[62220,9,""],[62220,0,"the"],[62233,11,""],[62233,0,"is similar"],[64757,28,""],[64757,0,"reduce variance across runs"],[62962,0,"performance "],[65706,8,""],[65706,0,"established"],[66070,6,""],[66070,0,"use"],[66101,0,"to"],[67035,0,":\n-"],[67123,0,"\n-"],[66941,38,""],[67116,0," into memory"],[67051,0," ()"],[67053,1,""],[67053,0,")"],[67053,0,"e.g. after the user has worked offline"],[67051,41,""],[67080,0,"  (e.g. after the user has worked offline)"],[67081,1,""],[67086,0," reconnecting"],[67106,13,""],[67111,1,""],[67110,1,""],[67110,0,"ing"],[67067,8,""],[67114,5,""],[67114,0,";"],[67396,0,"merge "],[67407,8,""],[67407,0,"for"],[67425,22,""],[67416,9,""],[67416,0,"imple"],[67416,5,""],[67416,0,"implementation"],[67972,0," than CRDTs"],[68033,36,""],[68033,0,"loading just this text (essentially a plaint ext file)"],[68078,0,"t"],[68076,1,""],[67948,17,""],[67948,0,"orders of magnitude"],[68219,0,"// "],[68284,0," we a"],[68288,1,""],[68287,1,""],[68286,1,""],[68285,1,""],[68284,1,""],[68284,0,"// W"],[68284,0," "],[68289,0,"e talk about this later"],[61755,118,""],[61754,1,""],[67971,0,"\nLoading the event graph can be deferred until new events need to be merged that are concurrent with an existing event."],[68121,2,""],[68126,10,""],[68126,0,"the"],[68135,0," graph"],[68141,1,""],[67972,119,""],[67793,0,"\nIn existing CRDTs"],[68112,0,", but not to edit a document"],[67811,0,", the "],[67797,8,""],[67797,0,"these"],[68143,0," or to apply non-concurrent changes"],[68171,7,""],[68171,0,"remote events"],[67803,5,""],[67803,0,"algorithms"],[67819,0,"CRDT metadata needs to be in memory in order to be "],[67855,15,""],[67855,0,"for the user to be able to edit the document, or to apply any updates received from other replicas ()"],[67955,0,"including non-concurrent "],[67955,25,""],[67955,0,"even when there is no concurrency"],[67989,0,"."],[67991,0,"In contrast, "],[68375,324,""],[68179,0," with no metadata"],[68199,16,""],[68199,0,"OT and #algname"],[68199,7,""],[68207,0," and OT"],[68320,0,".\n"],[68322,14,""],[68322,0,"E"],[68326,0,"ing"],[68343,3,""],[68349,0,"ing"],[68381,0," do not need the graph"],[68179,17,""],[68381,0,"event "],[68305,0,"The local user "],[68320,1,""],[68320,0,"e"],[68144,4,""],[68144,0,"data"],[68305,26,""],[68305,0,"D"],[68313,0," edits by the local user"],[71495,275,""],[74451,0," (to enable fast loads)"],[74475,0,"\nEven with this additional copy "],[74502,5,""],[74502,0,"document text, "],[74517,23,""],[74525,37,""],[74525,0,"'s files are smaller on all traces except S1"],[74447,4,""],[74447,0,"state"],[74546,0," than Atuomer"],[74558,1,""],[74557,1,""],[74556,1,""],[74555,1,""],[74554,1,""],[74554,0,"uto"],[74556,1,""],[74555,1,""],[74554,1,""],[74553,1,""],[74553,0,"utomerge"],[74546,15,""],[74572,1,""],[75159,9,""],[75159,0,"final"],[75220,93,""],[75220,0,"at the cost of making it impossible to"],[75392,9,""],[75392,0,"final"],[62918,0,"To evaluate performance, "],[62943,1,""],[62943,0,"w"],[62953,0," the Rust implementation of"],[62839,78,""],[62839,0,"\n"],[62839,0,"\nTo evaluate correctness"],[62852,0,"the "],[62867,0," of #a"],[62872,1,""],[62872,0,"algname we proved that the algorithm complies with Attiya et al.'s "],[62940,0,"proofs>\n\nWe now demonstrate that #algname is a correct collaborative text algorithm by showing that it satisfies the _strong list specification_ proposed by Attiya et al. @Attiya2016.\n"],[63057,28,""],[62939,0,"_strong list specification_ "],[63110,12,""],[62967,0," @Attiya2016"],[62966,1,""],[62978,0," ()"],[62980,0,"see @proofs"],[62993,143,""],[62992,1,""],[62992,0,"and "],[62992,0,", "],[62998,0,"we "],[63015,0,"its "],[63001,0,"also performed extensive randomised property testing on the impl"],[63061,4,""],[63061,0,"implementations."],[63076,0,", including checking convergence, and checing "],[63121,1,""],[63120,1,""],[63119,1,""],[63118,1,""],[63118,0,"king that our impl"],[63132,4,""],[63132,0,"implementations"],[63097,26,""],[63121,0," converge to the same result"],[63150,0,"\nWe found several implementations"],[63182,1,""],[63182,0," bugs ."],[62992,7,""],[62992,0,".\nW"],[63183,1,""],[63147,8,""],[63147,0,"This uncovered"],[62735,12,""],[62735,0," ("],[62827,0,")"],[62793,4,""],[62780,4,""],[62760,4,""],[62714,23,""],[62714,0,"the "],[62796,1,""],[62765,0," and"],[108547,13,""],[108547,0,"satisfies"],[109068,1,""],[109068,0,"F"],[109068,1,""],[109068,0,": each e"],[109075,1,""],[109075,0,"node of our event graph corresponds to a _do_ event in the strong list specification, and"],[109349,3,""],[109407,3,""],[109491,0,"italic(\"doc\")_e = "],[109571,8,""],[109571,0," be the document state immediately after generating $$"],[109624,0,"e"],[109626,0,"."],[109593,0," "],[109593,1,""],[109570,0," = angle.l ()"],[109582,0,"italic()"],[109589,0,"\"\""],[109590,0,"id"],[109594,0,"_0, c_0"],[109602,0,", ..., ()"],[109610,0,"italic()"],[109617,0,"\"\""],[109618,0,"id"],[109622,0,"_()"],[109624,0,"n-1"],[109628,0,", c_()"],[109633,0,"n-1"],[109638,0," angle.r"],[109703,0,"\n  As "],[109704,2,""],[109704,0,"    "],[2763,0,"#let lemma = thmplain(\"theorem\", \"Lemma\", base_level: 0, titlefmt: strong).with(inset: 0pt)\n"],[2768,5,""],[2768,0,"definition"],[2574,0,"defin"],[2574,5,""],[2802,5,""],[2802,0,"Definition"],[108615,0,"\n\n#defi"],[108618,4,""],[108618,0,"definition[]"],[108615,0,"\n\nA"],[108617,1,""],[108617,0,"We are now "],[108617,13,""],[108629,0,"\n  \n"],[109371,462,""],[108630,2,""],[108630,0,"  Our version of the strong list specification requires that for every finite event graph $G subset sans(\"Evt\")$ there exists a relation $italic(\"lo\") subset G times G$ called the _list order_, such that:\n  1. For every event $e in G$, let $italic(\"doc\")_e = sans(\"replay\")({e} union sans(\"Events\")(e.italic(\"parents\"))) = angle.l (italic(\"id\")_0, c_0), ..., (italic(\"id\")_(n-1), c_(n-1)) angle.r$ be the document state immediately after generating $e$.\n    As \n"],[109091,1,""],[109093,0," <strong-list-sec"],[109109,1,""],[109108,1,""],[109108,0,"pec>"],[109186,11,""],[109186,0,"(@strong"],[109188,6,""],[109188,0,"strong-list-spec)"],[109231,626,""],[109234,14,""],[108617,0,"  Attiya et al. make a simplifying assumption that every insertion operation has a unique character.\n  We use a slightly stronger version of the specification that avoids this assumption.\n  We also simplify the specification by using our event graph definition instead of the original abstract execution definition (containing message broadcast/receive events and a visibility relation).\n  These changes do not affect the substance of the proof: each node of our event graph corresponds to a _do_ event in the strong list specification, and the transitive closure of our event graph is equivalent to the visibility relation.\n\n"],[109005,2,""],[108805,2,""],[108718,2,""],[108617,1117,""],[91532,0,"Attiya et al. make a simplifying assumption that every insertion operation has a unique character.\nWe use a slightly stronger version of the specification that avoids this assumption.\nWe also simplify the specification by using our event graph definition instead of the original abstract execution definition (containing message broadcast/receive events and a visibility relation).\nThese changes do not affect the substance of the proof: each node of our event graph corresponds to a _do_ event in the strong list specification, and the transitive closure of our event graph is equivalent to the visibility relation.\n\n#definition[\n  Our version of the strong list specification requires that for every finite event graph $G subset sans(\"Evt\")$ there exists a relation $italic(\"lo\") subset G times G$ called the _list order_, such that:\n  1. For every event $e in G$, let $italic(\"doc\")_e = sans(\"replay\")({e} union sans(\"Events\")(e.italic(\"parents\"))) = angle.l (italic(\"id\")_0, c_0), ..., (italic(\"id\")_(n-1), c_(n-1)) angle.r$ be the document state immediately after generating $e$.\n    As \n] <strong-list-spec>\n\n"],[89161,0,"\n\n"],[89162,0,"== Definitions"],[83850,0,".1"],[92664,0,"\n== Proving Convergence"],[92676,11,""],[92676,0,"convergence\n"],[92676,1,""],[92676,0,"C"],[91550,618,""],[90604,0,"Attiya et al. make a simplifying assumption that every insertion operation has a unique character.\nWe use a slightly stronger version of the specification that avoids this assumption.\nWe also simplify the specification by using our event graph definition instead of the original abstract execution definition (containing message broadcast/receive events and a visibility relation).\nThese changes do not affect the substance of the proof: each node of our event graph corresponds to a _do_ event in the strong list specification, and the transitive closure of our event graph is equivalent to the visibility relation.\n\n"],[91105,0," original"],[92175,0,"\n\nWe can now state our slightly rephrased"],[92198,9,""],[92207,0," definition of the strong list specification:"],[88366,0,", a formal specification of collaborative text editing"],[89096,0,", which is a further strengthening of the strong list specification"],[92319,9,""],[92319,0,"modified"],[92389,0,"A collaborative text editing algorithm with a replay function $sans(\"replay)"],[92464,1,""],[92464,0,"\")(G)$ "],[92471,14,""],[92471,0,"satisfied"],[92479,1,""],[92479,0,"s"],[92485,0,"_"],[92511,0,"_"],[92513,13,""],[92513,0,"if"],[92526,6,""],[92526,0,"valid"],[89898,0,"\n#def"],[89900,3,""],[89900,0,"definition[]"],[89911,0,"\n  \n"],[89912,5,""],[90582,0,"\n]"],[90365,0,"  "],[90164,0,"  "],[90054,0,"  "],[89980,0,"  "],[89912,0,"  "],[89914,13,""],[89914,0,"A"],[92919,9,""],[92919,0,", where $$"],[92928,0,"c_i in sans()"],[92940,0,"\"\""],[92941,0,"Char"],[92948,0," and $$"],[92954,0,"italic()"],[92961,0,"\"\""],[92962,0,"id"],[92966,0,"_i in sans()"],[92977,0,"\"\""],[92978,0,"ID"],[92983,0,". Then:\n    a. $$"],[92999,0,"italic()"],[93006,0,"\"\""],[93007,0,"doc"],[93012,0,"_e"],[92995,0,"  "],[92995,4,""],[92995,0,"+"],[92990,0,"\n  #enum()"],[92999,0,"\n    \n  "],[93011,2,""],[93000,4,""],[93007,1,""],[93007,0,"2."],[93000,0,"    []"],[92993,0,"  "],[93011,0,"  "],[93006,0,"  "],[93001,0,"numbering: \"\""],[93013,0,"(a)"],[93017,0,","],[93039,17,""],[93039,0,"The list order"],[93026,0,"$italic(\"doc\")_e$"],[93070,0,"$italic(\"lo\") subset G times G$"],[93070,0," "],[93084,17,""],[93085,0," is transitive, irreflexive, and total, and thus determines the order of all insert operations in the event graph."],[93043,0," contains exactly the elements that have been inserted but not deleted in events that "],[93116,0," $$"],[93118,0,"e"],[93120,0," or"],[93136,0,"happened before $$"],[93153,0,"e"],[93154,1,""],[93154,0,"$:"],[93018,0," body-indent: 0.5em,"],[93034,1,""],[93034,0,"3"],[93018,0," indent: 0em,"],[93028,0,".3"],[93029,1,""],[93029,0,"5"],[93049,1,""],[93049,0,"5"],[93019,0,"//"],[93020,1,""],[93019,1,""],[93192,0,",\n      []"],[93201,0,"The order of the elements in $italic(\"doc\")_e$ is consistent with the list order:"],[93283,0,",\n      []"],[93292,0,"Elements are inserted at the specified position:"],[92741,45,""],[92741,0,"G_e"],[92706,0," $$"],[92708,0,"G_e = {e} union sans(\"Events\")(e.italic(\"parents\"))"],[92760,0,"\n  \n  "],[92680,6,""],[92754,0," be the subgraph consisting of $$"],[92786,0,"d"],[92786,1,""],[92786,0,"e"],[92788,0," and all events that happened before $$"],[92826,0,"e"],[92828,0,", and let "],[92838,7,""],[93242,0,"G_"],[93246,35,""],[92765,5,""],[92765,0,"set of $$"],[92773,0,"G"],[92833,7,""],[92833,0,".\n  L"],[92837,0,"  "],[92999,0,"locally "],[93260,0,"\n      $$"],[93268,0," "],[93269,1,""],[93269,0,"$"],[93268,0," fora"],[93269,4,""],[93269,0,"forall i in []"],[93282,0,"0, n-1"],[93289,0,":"],[93269,6,""],[93269,0,"exists"],[93291,0,"doc_e"],[93291,0,"italic(\""],[93302,0,"\")"],[93306,0," "],[93306,0,"[]"],[93307,0,"i"],[93309,0," = ()"],[93313,0,"italic()"],[93320,0,"\"\""],[93321,0,"id"],[93325,0,", c"],[93269,0,"9"],[93269,1,""],[93269,0,"("],[93330,0,") <==>"],[93307,0," "],[93337,0," \\\n        ()"],[93349,1,""],[93349,0,")"],[93349,0,"exi"],[93349,3,""],[93349,0,"exists italic()"],[93363,0,"\"\""],[93364,0,"ins"],[93369,0," in G_e : italic(\"ins\").italic()"],[93400,0,"\"\""],[93401,0,"op"],[93405,0," = italic()"],[93415,0,"\"\""],[93416,0,"Insert"],[93376,0,", j in NN"],[93388,0,"italic(\"ins\").italic(\"op\")"],[93410,2,""],[93410,0,"id"],[93414,0," = italic(\"id\") and "],[93479,0,"()"],[93480,0,"j,c"],[93434,0,"\\\n        "],[93434,10,""],[93485,0," and"],[93486,3,""],[93486,0,"and\n        ()"],[93499,1,""],[93499,0,")"],[93499,0,"exists.not"],[93489,0," \\"],[93356,13,""],[93356,0,"a"],[93376,13,""],[93376,0,"a"],[93410,13,""],[93410,0,"a"],[93475,0," b in G_e, j in NN : b.op "],[93500,1,""],[93499,1,""],[93498,1,""],[93498,0,"op "],[93498,0,"italic(\""],[93508,0,"\")"],[93511,0,"= italic()"],[93520,0,"\"\""],[93521,0,"Delete"],[93529,0,"()"],[93530,0,"j /\\"],[93533,1,""],[93532,1,""],[93531,1,""],[93532,0," and sans()"],[93542,0,"\"\""],[93543,0,"replay"],[93551,0,"()"],[93552,0,"sans()"],[93557,0,"\"\""],[93558,0,"Events"],[93566,0,"()"],[93567,0,"b.italic()"],[93576,0,"\"\""],[93577,0,"parents"],[93587,0,"[]"],[93588,0,"j"],[93587,0,")"],[93591,1,""],[93537,0,"\\\n        "],[93601,0," = ()"],[93605,0,"italic()"],[93612,0,"\"\""],[93613,0,"id"],[93617,0,", c"],[93260,0," #text()"],[93267,0,"8pt,"],[93271,1,""],[93271,0," []"],[93273,1,""],[93637,0,"])"],[93267,1,""],[93267,0,"10"],[93267,2,""],[93267,0,"9"],[93499,1,""],[93499,0,"k"],[93543,1,""],[93543,0,"k"],[93613,0,"k"],[93612,1,""],[93730,0,"\n      $$"],[93738,0,"  "],[93739,0,"forall i, j in []"],[93755,0,"0, n-1"],[93762,0,":"],[93386,1,""],[93505,1,""],[93761,0," i<j ==> "],[92625,1,""],[92625,0,"sans(\"ID\")"],[92642,1,""],[92642,0,"sans(\"ID\")"],[93783,0," and italic()"],[93795,0,"\"\""],[93796,0,"doc"],[93801,0,"_e"],[93784,20,""],[93788,0,"italic()"],[93795,0,"\"\""],[93796,0,"id"],[93800,0,"_i"],[93788,0,"("],[93803,0,", italic()"],[93812,0,"\"\""],[93813,0,"id"],[93817,0,"_j) in italic()"],[93831,0,"\"\""],[93832,0,"lo"],[93838,0,"."],[93838,1,""],[93836,0,"."],[93651,0,"."],[93898,0,"\n      $$"],[93906,0,"  "],[93907,0,"e.italic()"],[93916,0,"\"\""],[93917,0,"op"],[93921,0," = italic()"],[93931,0,"\"\""],[93932,0,"Insert"],[93940,0,"()"],[93941,0,"i,c"],[93945,0," ==> italic()"],[93957,0,"\"\""],[93958,0,"doc"],[93963,0,"_e[]"],[93966,0,"i"],[93906,0," forall i, c."],[93918,1,""],[93918,0," "],[93918,1,""],[93918,0,":"],[93978,0," "],[93982,0," 9 "],[93984,1,""],[93983,1,""],[93983,0,"= ()"],[93986,0,"e.italic()"],[93995,0,"\"\""],[93996,0,"id"],[94000,0,", c"],[93898,0," #tre"],[93902,1,""],[93901,1,""],[93901,0,"ext()"],[93905,0,"9pt, []"],[93911,2,""],[94019,0,"])"],[93747,0," #text()"],[93754,0,"9pt, []"],[93760,2,""],[93853,0,"])"],[90582,0," <valid-graph>"],[111454,0,"\n  Given an event graph $$"],[111479,0,"G"],[111481,0,", let $$"],[111488,0,"sans()"],[111493,0,"\"\""],[111494,0,"replay"],[111502,0,"()"],[111503,0,"G"],[111506,0," be the replay function based on #algname, as introduced earlier."],[111464,1,""],[111464,0," valid"],[111576,0,"\n  We must show that there exists a list order $$"],[111624,0,"italic()"],[111631,0,"\"\""],[111632,0,"lo"],[111636,0," subset sans()"],[111649,0,"\"\""],[111650,0,"ID"],[111654,0," times sans()"],[111666,0,"\"\""],[111667,0,"ID"],[111672,0," that satisfies the conditions given in @strong-list-spec."],[111336,0,"\n\n== Satisfying the Strong List Specification"],[111775,0,"\n  We claim that this list order corresponds exactly to the sequence of records and placeholders in the $$"],[111879,2,""],[111879,0,"#al"],[111880,2,""],[111880,0,"algname internal state."],[111902,0," after replaying the entire event graph $G$"],[111903,42,""],[111871,16,""],[111887,0,"after replaying the entire event graph $G$, "],[111930,1,""],[111929,1,""],[111871,0," in the "],[111878,1,""],[111937,0,"\n  This correspondence is more in "],[111970,1,""],[111969,1,""],[111968,1,""],[111968,0,"apparent if we assume a variant of #al"],[112004,2,""],[112004,0,"algname that does not clear the internal state on critical versions ()"],[112073,0,"omitting the opimisations in @clearing"],[112112,0,", but we also claim that "],[112073,38,""],[112071,3,""],[112096,0,"performing the omitting the opimisations in @clearing"],[112111,13,""],[112136,0," preserves this property.\n  \n  "],[112162,2,""],[112165,0,"To begin, note that the internal state is a totally ordered sequence of records, and that we only ever modify this sequence by inserting records or by changing "],[112316,9,""],[112316,0,"updating the $$"],[112330,0,"s_p "],[112333,1,""],[112334,0," and $$"],[112340,0,"s_e"],[112344,0," properties of existing "],[112254,0," ()"],[112256,0,"aside from clearing"],[112390,0,"records.\n  Thus "],[112405,1,""],[112405,0,", if a record with ID $$"],[112428,0,"#"],[112428,1,""],[112428,0,"itl"],[112430,1,""],[112430,0,"alic()"],[112435,0,"\"\""],[112436,0,"id"],[112440,0,"_1"],[112443,0," appears before a record with ID $$"],[112477,0,"italic()"],[112484,0,"\"\""],[112485,0,"id"],[112441,1,""],[112441,0,"i"],[112489,0,"_j"],[112492,0," at some point in the replay, the order of those IDs rea"],[112547,1,""],[112547,0,"mains unchanged for the rest of the replay.\n  \n  "],[112591,2,""],[112594,0,"For event $e in G$, let $G_e = {e} union sans(\"Events\")(e.italic(\"parents\"))$ be the subset of $G$ consisting of $e$ and all events that happened before $e$.\n    Let $italic(\"doc\")_e = sans(\"replay\")(G_e) = angle.l (italic(\"id\")_0, c_0), ..., (italic(\"id\")_(n-1), c_(n-1)) angle.r$ be the document state immediately after locally generating $e$"],[112752,4,""],[112752,0,"  "],[112275,0," the internal state"],[112613,9,""],[112613,0,"Let"],[112625,0," by"],[112627,1,""],[112627,0,"e any event in the graph"],[112652,0," and"],[112979,0,".\n  Since $$"],[112990,0,"sans()"],[112995,0,"\"\""],[112996,0,"replay"],[113005,0," is deterministic, $italic(\"doc\")_e$$"],[113041,1,""],[113022,0," (lemma-deterministic)"],[113024,0,"@"],[113064,0," exists and is unique."],[113089,0,"\n/*\n*/"],[113093,2,""],[113093,0,"    #enum(numbering: \"(a)\", indent: 0.5em, body-indent: 0.5em,\n      [$italic(\"doc\")_e$ contains exactly the elements that have been inserted but not deleted in $G_e$: #text(9pt, [\n      $ (exists i in [0, n-1]: italic(\"doc\")_e [i] = (italic(\"id\"), c)) <==> \\\n        (exists a in G_e, j in NN: a.italic(\"id\") = italic(\"id\") and a.italic(\"op\") = italic(\"Insert\")(j,c)) and \\\n        (exists.not b in G_e, k in NN: b.italic(\"op\") = italic(\"Delete\")(k) and \\\n        sans(\"replay\")(sans(\"Events\")(b.italic(\"parents\")))[k] = (italic(\"id\"), c)). $])],\n      [The order of the elements in $italic(\"doc\")_e$ is consistent with the list order: #text(9pt, [\n      $ forall i, j in [0, n-1]: i<j ==> (italic(\"id\")_i, italic(\"id\")_j) in italic(\"lo\"). $])],\n      [Elements are inserted at the specified position: #text(9pt, [\n      $ forall i, c: e.italic(\"op\") = italic(\"Insert\")(i,c) ==> italic(\"doc\")_e [i] = (e.italic(\"id\"), c) $])]\n    )\n  2. The list order $italic(\"lo\")$ is transitive, irreflexive, and total, and thus determines the order of all insert operations in the event graph.\n"],[114444,0,"\n*/"],[113086,0,"\n  \n  "],[113087,2,""],[113090,0,"TODO more..."],[113172,485,""],[111381,0,"\n\n#le"],[111384,2,""],[111384,0,"lemma[]"],[111390,0,"\n  \n"],[111393,0,"      [$italic(\"doc\")_e$ contains exactly the elements that have been inserted but not deleted in $G_e$: #text(9pt, [\n      $ (exists i in [0, n-1]: italic(\"doc\")_e [i] = (italic(\"id\"), c)) <==> \\\n        (exists a in G_e, j in NN: a.italic(\"id\") = italic(\"id\") and a.italic(\"op\") = italic(\"Insert\")(j,c)) and \\\n        (exists.not b in G_e, k in NN: b.italic(\"op\") = italic(\"Delete\")(k) and \\\n        sans(\"replay\")(sans(\"Events\")(b.italic(\"parents\")))[k] = (italic(\"id\"), c)). $])],\n"],[111399,1,""],[111875,1,""],[111874,1,""],[111497,0,"\n        "],[111504,2,""],[111502,2,""],[111500,2,""],[111517,2,""],[111594,2,""],[111707,2,""],[111787,2,""],[111869,1,""],[111390,0,"\n  Let $$"],[111398,0,"G"],[111399,1,""],[111399,0,"$ be a valid event graph."],[113318,0,"\n  Note that $$"],[113332,0,"G subset.eq"],[113333,0,"_e"],[113345,0," G"],[113348,0," and $$"],[113354,0,"G_e"],[113358,0," also satisfies the conditions in @de"],[113394,1,""],[113393,1,""],[113393,0,"val"],[113393,3,""],[113393,0,"valid-graph, so $$"],[113410,0,"G_e"],[113414,0," is also valid."],[113335,12,""],[113237,0," subset.eq G"],[113237,12,""],[113336,15,""],[113382,5,""],[113382,0,"it"],[111424,8,""],[111424,0," Then"],[111444,2,""],[111444,0," = sans()"],[111452,0,"\"\""],[111453,0,"replay"],[111461,0,"()"],[111462,0,"G"],[111606,1,""],[111605,1,""],[111604,1,""],[111657,1,""],[111656,1,""],[111772,1,""],[111771,1,""],[111541,2,""],[111545,15,""],[111893,1,""],[111892,1,""],[111894,0,"\n#pf"],[111897,1,""],[111897,0,"r"],[111896,2,""],[111896,0,"proof[]"],[111902,0,"\n  \n"],[111905,0,"Let $$"],[111910,0,"E = angle.l e_1, e_2, ... "],[111935,1,""],[111935,0,", e_n angle.r"],[111949,0," be some topological sort of $$"],[111979,0,"G"],[111980,1,""],[111980,0,"$, and assume that we replay $$"],[112010,0,"G"],[112011,1,""],[112011,0,"$ in this order.\n  By $$"],[112033,2,""],[112033,0,"@lemma-de"],[112034,8,""],[112034,0,"lemma-deterministic it does not matter which of the possible orders we choose.\n  We the "],[112121,1,""],[112121,0,"n proof "],[112128,1,""],[112127,1,""],[112126,1,""],[112126,0,"ve the thesis by induction over $$"],[112159,0,"n"],[112161,0,", the number of events in $$"],[112188,0,"G"],[112189,1,""],[112189,0,"$.\n  The base case is trivial: $$"],[112221,0,"g"],[112221,1,""],[112221,0,"G={}"],[112224,1,""],[112224,0,"}"],[112226,0,", $$"],[112229,0,"doc=angle.l"],[112229,0,"italic(\""],[112240,0,"\")"],[112250,0," angle.r"],[112259,0,".\n  \n  "],[112261,2,""],[112264,0,"Inductive step: "],[112282,0,"\n\n#le"],[112285,2,""],[112285,0,"lemma[]"],[112291,0,"\n  \n"],[112294,0,"      [The order of the elements in $italic(\"doc\")_e$ is consistent with the list order: #text(9pt, [\n      $ forall i, j in [0, n-1]: i<j ==> (italic(\"id\")_i, italic(\"id\")_j) in italic(\"lo\"). $])],\n      [Elements are inserted at the specified position: #text(9pt, [\n      $ forall i, c: e.italic(\"op\") = italic(\"Insert\")(i,c) ==> italic(\"doc\")_e [i] = (e.italic(\"id\"), c) $])]\n"],[112294,9,""],[112294,0,"Th"],[112555,6,""],[112555,0,"    "],[112486,6,""],[112486,0,"    "],[112389,6,""],[112389,0,"    "],[112551,4,""],[112551,0,"  "],[112484,4,""],[112484,0,"  "],[112389,4,""],[112389,0,"  "],[112480,1,""],[112479,1,""],[112482,1,""],[112649,2,""],[112651,0,"\n\n#le"],[112654,2,""],[112654,0,"lemma[]"],[112660,0,"\n  \n"],[112661,2,""],[112480,170,""],[112491,1,""],[112491,0,"  Elements are inserted at the specified position: #text(9pt, [\n  $ forall i, c: e.italic(\"op\") = italic(\"Insert\")(i,c) ==> italic(\"doc\")_e [i] = (e.italic(\"id\"), c) $])\n"],[111543,1,""],[111807,6,""],[111807,0,"    "],[111729,6,""],[111729,0,"    "],[111618,6,""],[111618,0,"    "],[111544,4,""],[111544,0,"  "],[112366,13,""],[112453,4,""],[112453,0," $$"],[112455,1,""],[112517,13,""],[112622,1,""],[112621,1,""],[112285,0,"Let $G$ be a valid event graph. Then $italic(\"doc\") = sans(\"replay\")(G)$ "],[112358,1,""],[112358,0,"t"],[112358,47,""],[112322,0,"the order of the elements in "],[111636,1,""],[111636,0,"i"],[111713,1,""],[111713,0,"i"],[111749,1,""],[111749,0,"i"],[111792,1,""],[111792,0,"i"],[111857,1,""],[111857,0,"i"],[112271,0,"Let $E = angle.l e_1, e_2, ..., e_n angle.r$"],[112277,0,"_k"],[112307,1,""],[112307,0,"k"],[112317,0," with $$"],[112324,0,"k<n"],[112328,0," be a prefix of $$"],[112345,0,"E"],[112347,0,", and assume that it satisfies te "],[112380,1,""],[112379,1,""],[112379,0,"he property that replaying that sequence of events results in a document containing exactly those elements that have been inserted but not deleted."],[112525,1,""],[112525,0," by an operation in $$"],[112546,0,"E_k"],[112550,0,".\n  We now "],[112551,0,"\n  This is possible because the set of events in any prefix of $$"],[112615,0,"E"],[112617,0," also forms a valid event graph."],[112347,5,""],[112347,0,".\n  "],[112553,95,""],[112348,0,"\n  This is possible because the set of events in any prefix of $E$ also forms a valid event graph."],[112351,24,""],[112351,0,"Since"],[112377,14,""],[112380,0,"_k"],[112414,1,""],[112414,0,", we can assume the inductive hypothesis, namely that"],[112467,15,""],[112468,2,""],[112468,0,"$$"],[112469,0,"E_k"],[112468,34,""],[112478,23,""],[112478,0,"$$"],[112479,0,"E_k"],[112618,0,"add the next event "],[112621,0," $$"],[112623,0,"E_k+1"],[112625,0,"("],[112629,0,")"],[112647,0,"in the sequence $$"],[112664,0,"E"],[112666,0,", to the replay.\n  We need to show that the invariant is still preserved.\n  We"],[112743,1,""],[112742,1,""],[112740,2,""],[112739,1,""],[112738,1,""],[112737,1,""],[112737,0,"d by considering two cases: ()"],[112766,0,"1"],[112768,0,"~$$"],[112770,0,"e_()"],[112773,0,"k+1"],[112777,0,".italic()"],[112785,0,"\"\""],[112786,0,"op"],[112790,0," = italic()"],[112800,0,"\"\""],[112801,0,"Insert"],[112809,0,"()"],[112810,0,"j,c"],[112815,0," for some $$"],[112826,0,"j"],[112828,0,", $$"],[112831,0,"c"],[112833,0,", or ()"],[112839,0,"2"],[112841,0,"~$$"],[112843,0,"e_()"],[112846,0,"k+1"],[112850,0,".italic()"],[112858,0,"\"\""],[112859,0,"op"],[112863,0," = italic()"],[112873,0,"\"\""],[112874,0,"Delete"],[112882,0,"()"],[112883,0,"j"],[112886,0," for some $$"],[112897,0,"j"],[112899,0,"."],[112606,2,""],[112605,1,""],[112761,0," either"],[112904,0,"\n  \n  "],[112905,2,""],[112908,0,"Case ()"],[112914,0,"a"],[112916,0,"\"\""],[112916,2,""],[112916,0,":"],[112914,1,""],[112914,0,"1"],[112628,0,","],[112918,0," The set of "],[112679,0," by transforming $E_(k+1)$ using the internal state obtained by replaying $E_k$"],[112620,1,""],[112620,0,"e"],[112697,1,""],[112697,0,"e"],[112679,0,".\n  We do this"],[112772,0,", and applying the transformed operation to the document state from $E_k$"],[112903,14,""],[112903,0,"in the following"],[113098,0,"elements that have been inserted but not deleted grows by $$"],[113157,0,"()"],[113158,0,"e_(k+1).italic(\"op\"), c"],[113174,2,""],[113174,0,"id"],[113183,0," and otherwise stays unchanged.\n  The transformation of an insertion operation is always an "],[113274,1,""],[113274,0,"other insertion operation, possibly at a different index.\n  The change to the document state is therefore that the same element $(e_(k+1).italic(\"id\"), c)$ is inserted"],[113299,31,""],[113410,0," at some index, as required."],[113306,14,""],[113335,4,""],[113335,0,"updated by inserting"],[113401,12,""],[113415,0," and otherwise remains unchanged,"],[113461,0,"\n  \n  "],[113462,2,""],[113465,0,"Case ()"],[113471,0,"2"],[113472,1,""],[113472,0,"): The element being deleted is at index $$"],[113514,0,"j"],[113516,0," in the document immediately "],[113533,12,""],[113533,0,"at the time $$"],[113546,0,"e_()"],[113549,0,"k+1"],[113554,0," was generated, which is $$"],[113580,0,"sans(\"replay\")(sans(\"Events\")(b.italic(\"parents\")))"],[113610,1,""],[113610,0,"e_(k+1)"],[113638,0,".\n  #fe"],[113644,1,""],[113643,1,""],[113643,0,"al"],[113643,2,""],[113643,0,"algname is able to compute this "],[113651,24,""],[113651,0,"computes this element by retreating and advancing events until the preopare stat"],[113721,1,""],[113730,0,"e "],[113726,6,""],[113726,0,"version equals e_(k+1).italic(\"parents\")$$"],[113767,1,""],[113741,0,"$"],[113768,0,", and then finding the $$"],[113792,0,"j"],[113794,0,"th ()"],[113798,0,"zero-indexed"],[113811,0," record in the internal state that has $s_p = mono(\"Ins\")$.\n  \n  "],[113871,2,""],[113874,0,"TODO more..."],[111382,0,"\n\n"],[111383,0,"TODO: the "],[111383,0,"// "],[111396,0,"$$"],[111397,0,"i"],[111399,0,"th element in the docuem"],[111422,1,""],[111421,1,""],[111421,0,"ment state corresponds to the $$"],[111452,0,"ith"],[111454,1,""],[111453,1,""],[111454,0,"th e"],[111457,1,""],[111457,0,"record with $$"],[111470,0,"s_e = mono()"],[111481,0,"\"\""],[111482,0,"Ins"],[111383,3,""],[111485,0," in the internal state ()"],[111509,0,"not counting records with other $$"],[111542,0,"s"],[111542,1,""],[111542,0,"s_e = mono()"],[111553,0,"\"\""],[111554,0,"Del"],[111535,6,""],[111556,0,"\n\n"],[111557,0,"#lemma[]"],[111564,0,"\n  \n"],[111567,0,"Let $G$ be a valid event graph. "],[111598,1,""],[111597,1,""],[111597,0,", let $italic(\"doc\") = sans(\"replay\")(G)$ be the document state resulting from replaying $$"],[111687,0,"G"],[111688,1,""],[111688,0,"$, and let $$"],[111700,0,"s"],[111700,1,""],[111700,0,"S="],[111701,1,""],[111701,0," = angle.l r_0, r_1, ..., r_n angle.r"],[111739,0," be the internal"],[111746,0," #fe"],[111749,1,""],[111748,1,""],[111748,0,"al"],[111748,2,""],[111748,0,"algname"],[111764,0," state ()"],[111772,0,"sequence of records"],[111792,0," "],[111747,9,""],[111784,0,"after replaying $$"],[111801,0,"G"],[111802,1,""],[111802,0,"$ "],[111803,1,""],[111803,0,". "],[111701,37,""],[111725,22,""],[111389,166,""],[111383,6,""],[111382,1,""],[111381,1,""],[111572,0,"Then the $i$th element in the document state corresponds to the $i$th record with $s_e = mono(\"Ins\")$ in the internal state (not counting records with $s_e = mono(\"Del\")$)"],[111598,18,""],[111598,0,"$italic(\"doc\")$$"],[111613,1,""],[111694,0,"countin g pla"],[111706,1,""],[111705,1,""],[111704,1,""],[111703,1,""],[111702,1,""],[111701,1,""],[111701,0,"g placeholders "],[111715,1,""],[111714,1,""],[111714,0," "],[111714,1,""],[111714,0,"s as having $s_e = mono(\"Ins\")$, and "],[111797,0,". Moreover, the set of elements in $italic(\"doc\")$"],[111847,95,""],[111847,0," is"],[112882,0,"corresponding to the records with $s_e = mono(\"Ins\")$ in the resulting internal state, and the document "],[112995,1,""],[112994,1,""],[112993,1,""],[112993,0,"s"],[113551,0," We also have to "],[113551,0,"\n  "],[113554,1,""],[113570,0,"consider the case where the internal state is cleared, but we begin with the case where no state clearing occurs."],[114496,0,"\n  \n  "],[114497,2,""],[114500,0,"State clearing"],[114500,1,""],[114500,0,"Internal s"],[112626,0,", so there are no records int"],[112654,1,""],[112654,0," the internal state and no elements in the document sat"],[112708,1,""],[112707,1,""],[112707,0,"tate"],[112643,0," events, no"],[112684,0,","],[114107,14,""],[114140,13,""],[114141,0,"\n  Therefore, "],[110344,3,""],[110344,0,"e_(i+1)"],[110438,3,""],[110438,0,"e_(i+1)"],[110686,3,""],[110686,0,"e_(i+1)"],[110700,3,""],[110700,0,"e_(i+1)"],[110747,3,""],[110747,0,"e_(i+1)"],[110953,3,""],[110953,0,"e_(i+1)"],[111075,3,""],[111075,0,"e_(i+1)"],[111173,3,""],[111173,0,"e_(i+1)"],[111264,1,""],[111264,0,"i"],[111266,1,""],[111266,0,"2"],[114187,0,"the property that the set of "],[114186,0," we preserve"],[114176,52,""],[114176,0,"Moreover, the transformed index of that insertion is computed by counting the number of internal state records with $$"],[114293,0,"s_e = mono()"],[114304,0,"\"\""],[114305,0,"Ins"],[114311,0," that appear before the new record in the internal state, and the new record has "],[114388,0,"also "],[114397,0,"$s_e = mono(\"Ins\")$, and the $$"],[114427,0,"s_e"],[114431,0," property of not "],[114447,1,""],[114446,1,""],[114446,0," other record is updated, so therefore the correspondence between internal state records and document state is preserved."],[114474,10,""],[114474,0,"\n  "],[114475,2,""],[114474,1,""],[114738,8,""],[114738,0,"We"],[114748,1,""],[114959,0,"\n  T"],[114962,1,""],[114962,0,"The records with $s_p = mono(\"Ins\")$ are those that have been inserted but not deleted in events tha t"],[115063,1,""],[115062,1,""],[115062,0,"t happened before $e_(k+1)$$"],[115089,0,"."],[115090,1,""],[115089,0,", and thefr"],[115099,1,""],[115098,1,""],[115098,0,"refore taking the $j$th"],[115105,7,""],[115114,0," such record is the record corresponding to $sans(\"replay\")(sans(\"Events\")(e_(k+1).italic(\"parents\")))$["],[115217,1,""],[115216,0,"[]"],[115217,0,"j"],[115221,0,"\n  The $$"],[115229,0,"s_p"],[115233,0," "],[115231,1,""],[115231,0,"e"],[115234,0,"state of the "],[115246,1,""],[115245,1,""],[115245,0,"is record before applying  "],[115271,1,""],[115271,0,"$e_(k+1)$ "],[115224,32,""],[115224,0,"B"],[115249,1,""],[115249,0,", this record may have either $$"],[115280,0,"s_e = mono()"],[115291,0,"\"\""],[115292,0,"Ins"],[115298,0," or $$"],[115303,0,"s_e = mono()"],[115314,0,"\"\""],[115315,0,"Del"],[115321,0,"."],[115278,0," ()"],[115280,0,"a"],[115282,1,""],[115282,0,"~"],[115279,4,""],[115322,0,"\n  If $s_e = mono(\"Ins\")$, then by the inductive hypothesis, the element to be "],[115386,0," index of the"],[115414,0,"deleted "],[115348,0," the transformed "],[115349,16,""],[115349,0,"$e_(k+1)$ is transformed into a deletion with "],[115390,5,""],[115389,1,""],[115389,0,", and its index is the number of $s_e = mono(\"Ins\")$ to the left of the target record in the internal state;"],[115497,5,""],[115527,39,""],[115527,0,"this is the correct document element to be deleted.\n  If $$"],[115585,0,"s_e = mono()"],[115596,0,"\"\""],[115597,0,"Del"],[115603,0,", $e_(k+1)$ is transformed into a no-op, since the element in question has already been deleted from the document state b"],[115723,1,""],[115649,0," a "],[115651,1,""],[115651,0,"nother operation in $$"],[115672,0,"E_k"],[115676,0," has already deleted"],[115720,26,""],[115720,0," "],[115744,1,""],[115744,0,".\n  In either case, "],[115348,0," we update to "],[115361,1,""],[115360,1,""],[115359,1,""],[115359,0,"it to $s_e = mono(\"Del\")$, and transform"],[115410,15,""],[115425,9,""],[115425,0," whose"],[115797,0,"we preserve the invairai"],[115820,1,""],[115819,1,""],[115818,1,""],[115817,1,""],[115817,0,"riant of the correspondence between internal state records and "],[115822,58,""],[115822,0,"s of the induction."],[115845,12,""],[115845,0,"$$"],[115845,2,""],[115845,0,"If $$"],[115849,0,"s_()"],[115852,0,"k+1"],[115857,0," is a critical version, we then clear the internal state and replace it with a placeholder."],[115949,27,""],[115884,5,""],[115943,0,"\n    "],[115946,2,""],[115946,0,"By the definition of critical version, all events in $$"],[116000,0,"E+"],[116001,1,""],[116001,0,"_k"],[116004,0," and  "],[116009,1,""],[116009,0,"$s_(k+1)$ happened before"],[115985,3,""],[115985,0,"every"],[115996,1,""],[116035,0," every evvent in the rest of $$"],[116065,0,"E"],[116044,1,""],[115636,1,""],[115636,0," before applying"],[115662,0,", that event"],[116093,0,".\n  Therefore, the retreating and advancing on replaying any event after "],[115876,1,""],[115876,0,"e"],[116038,1,""],[116038,0,"e"],[116166,0,"$e_(k+1)$ will "],[116108,3,""],[116108,0,"when"],[116138,13,""],[116163,6,""],[116163,0,", any internal state record with $$"],[116197,0,"s_e = mono()"],[116208,0,"\"\""],[116209,0,"Ins"],[116209,3,""],[116209,0,"Del"],[116215,0," will also have $$"],[116232,0,"s_p = mono()"],[116243,0,"\"\""],[116244,0,"Del"],[116249,0," k"],[116252,0," for some $$"],[116263,0,"k>0"],[116267,0,"."],[116108,4,""],[116108,0,"after"],[116269,0,"\n  Since i"],[116278,1,""],[116268,0,", and any internal state record with $s_e = mono(\"Del\")$"],[116318,3,""],[116318,0,"Ins"],[116324,0," will also have $s_p = mono(\"Del\") k$"],[116359,1,""],[116358,1,""],[116353,3,""],[116353,0,"Ins"],[116359,0," unless it is deleted by an event after $e_(k+1)$"],[116418,0,"an internal state with "],[116409,32,""],[116095,0,"  Since an internal state with \n"],[116441,0,"\n  Since an internal state with "],[116095,32,""],[116441,0,"$s_e = mono(\"Del\")$ can never §"],[116471,1,""],[116471,0,"move to state $s_e = mono(\"Ins\")$, this means that any records with $s_e = mono(\"Del\")$ as of the critical version can be discarded, since they will never again n"],[116632,1,""],[116632,0,"be needed for transforming the index of an operation after $$"],[116692,0,"e_()"],[116695,0,"k+1"],[116700,0,".\n  Moreover, since all of the remaining records have $s_e = mono(\"Ins\")$ will also have $s_p = mono(\"Ins\")$"],[116761,29,""],[116779,0," as of the critical version, they can all be replaced by a single placeholder record."],[116780,26,""],[116780,0,"af"],[116780,2,""],[116780,0,"as of the critical version"],[116856,7,""],[116856,0," while still preserving the invariants of the induction"],[116807,0," and since an event after the critical version "],[116818,36,""],[116818,0,"the replay of the remaining events in $$"],[116857,0,"E"],[116858,1,""],[116858,0,"$ will never need to advance or retreat an event prior to the critical version,"],[116938,4,""],[116938,0,"all of the records in the internal state"],[118042,0,"  Since $sans(\"replay\")$ is deterministic (@lemma-deterministic), $italic(\"doc\")_e$ exists and is unique.\n"],[118044,41,""],[118044,0,"By "],[118067,1,""],[118069,17,""],[118069,0,"this internal state"],[118782,0,"\n  There"],[118785,5,""],[118785,0,"We define the list order $italic(\"lo\")$$"],[118824,1,""],[118824,0," to be the ordering relation among IDs in the internal state of a #a"],[118891,1,""],[118891,0,"algname variant "],[118885,2,""],[118885,0,"after replaying $$"],[118902,0,"G"],[118903,1,""],[118903,0,"$ using"],[118930,0,"that does not clear the internal state.\n  This order exists and is transitive, irreflexive, and total"],[118996,0," by definition"],[119045,0,", so it meets the "],[119059,4,""],[119059,0,"requirement ()"],[119072,0,"2"],[119074,0," of @strong-list-spec."],[118983,6,""],[118983,0,"is unique ()"],[118994,0,"@lemma-deterministic"],[118983,0,"exists, "],[119023,0,","],[112293,0," <state-doc-"],[112301,4,""],[112301,0,"correspondence>"],[119716,12,""],[119716,0,"By @state-correspondence, $italic(\"doc\")_e$ contains exactly the elements that have been inserted but not deleted in $$"],[119834,0,"G_e"],[119838,0,".\n  Asl "],[119845,1,""],[119844,1,""],[119843,1,""],[119843,0,"lso by @state-correspondence, the $$"],[119878,0,"i"],[119880,0,"th "],[119873,10,""],[119873,0,"the $i$th element in $italic(\"doc\")$ corresponds to the $i$th record with $s_e = mono(\"Ins\")$ in the internal state"],[119908,0,"_e"],[119990,0," obtrain"],[119994,1,""],[119997,0,"ed by replaying $$"],[120014,0,"G_e"],[120018,0,", and since the orde"],[119838,0,", which is requirement (1a) of @stro"],[119870,4,""],[119870,0,"strong-list-spec"],[120066,20,""],[120066,0,".\n  Since any pair of IDs that are ordered by $$"],[120113,0,"G_e"],[120117,0,"'s internal state retain the same ordering in $$"],[120164,0,"G"],[120166,0,"'s internal state, we know that the ordering of elements in $italic(\"doc\")_e$ is consistent with the list order $italic(\"lo\")$, satsifying requirement ()"],[120318,0,"1b"],[120321,0," of @str"],[120326,3,""],[120326,0,"strong-list-spec.\n  \n  "],[120344,2,""],[120347,0,"Finally, we requirement (1b) of @strong-list-spec."],[120356,2,""],[120356,0,"to demonstrate"],[120385,1,""],[120385,0,"c"],[120408,0," we assume that $e$"],[120426,0,".italic()"],[120434,0,"\"\""],[120435,0,"op"],[120439,0," = italic()"],[120449,0,"\"\""],[120450,0,"Insert"],[120458,0,"()"],[120459,0,"i,c"],[120464,0,", and we need to show that $italic(\"doc\")_e$"],[120507,0," []"],[120509,0,"i"],[120511,0," = ()"],[120515,1,""],[120515,0,")"],[120515,0,"e.italic()"],[120524,0,"\"\""],[120525,0,"id"],[120529,0,", c"],[120112,7,""],[120112,0,"the"],[120130,0," derived from $G_e$"],[120178,5,""],[120178,0,"the"],[120196,0," derived from $G$"],[120565,0,"\n  This follows from the fact that "],[117105,405,""],[120198,873,""],[120197,1,""],[120195,0,"a"],[120163,33,""],[120163,0,"Since $$"],[120170,0,"#"],[120170,1,""],[120170,0,"G_e"],[120174,0," contains only $$"],[120190,0,"e"],[120192,0," and events that happened before $$"],[120226,0,"e"],[120228,0,", but no events concurrent with $$"],[120261,0,"e"],[120263,0,", we know that immediately before applying $$"],[120307,0,"e"],[120309,0,", every record in the internal state will have $$"],[120357,0,"s_p = mono()"],[120368,0,"\"\""],[120369,0,"Ins"],[120375,0," if and only if it has $$"],[120399,0,"s_e = mono()"],[120410,0,"\"\""],[120411,0,"Ins"],[120417,0," ()"],[120419,0,"because there are no events that are reflected in the effect version but not in the prepare version $$"],[120520,0,"e.italic()"],[120529,0,"\"\""],[120530,0,"parents"],[120541,0,".\n  Therefore "],[120554,1,""],[120554,0,", the set of records that are counted while transforming "],[120598,13,""],[120598,0,"mapping the original insertion index $$"],[120636,0,"i"],[120638,0," to an internal state record equals the set of records that are counted while mapping the internal record back to a transformed index.\n  Thus, the transformed index of the insertion is also $$"],[120829,0,"i"],[120831,0,", and therefore the new element is inserted at index $$"],[120885,0,"i"],[120887,0," of the document s"],[120904,1,""],[120904,0,"as required.\n  This completes the proof that #a"],[120950,1,""],[120950,0,"algname satisfies the strong list speic"],[120988,1,""],[120987,1,""],[120987,0,"cification."],[121000,0,"\n"],[12307,9,""],[117895,0,"t"],[119914,1,""],[119915,0,"s"],[64905,7390,""],[64905,0,"We compiled Rust code with rustc v1.78.0 in release mode with `'-C target-cpu=native'`. Rust code was pinned to a single CPU core to reduce variance across runs. // (The reason is that different cores of the same CPU are clocked differently due to thermal reasons. Using a single core improves run-to-run stability).\nFor JavaScript (Yjs) we used Node.js v22.2.0. // Javascript wasn't pinned to a single core. Nodejs uses additional cores to run the V8 optimizer.\nAll reported time measurements are the mean of at least 100 test iterations (except for the case where OT takes an hour to merge trace A2, which we ran 10 times).\nThe standard deviation for all benchmark results was less than 2%, except for Yjs which had a peak standard deviation of 5.6%. Error bars are too small to seen at the scales involved.\n]\n\n/ Speed: The CPU time to load a document into memory, and to merge a set of updates from a remote replica.\n/ Memory usage: The RAM used while a document is loaded and while merging remote updates.\n/ Storage size: The number of bytes needed to persistently store a document or replicate it over the network.\n\n== Editing traces\n\nAs there is no established benchmark for collaborative text editing, we collected a set of editing traces from real documents.\n#if anonymous {\n  [All code and data used in our benchmarks is available for anybody to reproduce.#footnote[TODO: anonymised link to download]]\n} else {\n  [We have made these traces freely available on GitHub @editing-traces.]\n}\nFor this evaluation we use seven traces, which fall into three categories:\n\n/ Sequential Traces: (S1, S2, S3): One author, or multiple authors taking turns (no concurrency).\n/ Concurrent Traces: (C1, C2): Multiple users concurrently editing the same document with $approx$1 second latency. Many short-lived branches with frequent merges.\n/ Asynchronous Traces: (A1, A2): Event graphs derived from branching/merging Git commit histories. Multiple long-running branches and infrequent merges.\n\nWe recorded the sequential and concurrent traces with keystroke granularity using an instrumented text editor.\nTo make the traces easier to compare, we normalised them so that each trace contains $approx$500k inserted characters (about 100 printed pages).\nWe extended shorter traces to this length by repeating them several times.\nSee @traces-appendix for details.\n\n== Time taken to load and merge changes\n\nThe slowest operations in many collaborative editors are:\n- merging a large set of edits from a remote replica into the local state (e.g. reconnecting after working offline);\n- loading a document from disk into memory so that it can be displayed and edited.\nTo simulate a worst-case merge, we start with an empty document and then merge an entire editing trace into it.\nIn the case of #algname this means replaying the full trace.\n@chart-remote shows the merge time for each implementation.\n// For the CRDT implementations, all events were preprocessed into the appropriate CRDT message format. The time taken to do this is not included in our measurements.\n\nAfter completing this merge, we saved the resulting local replica state to disk and measured the CPU time to load it back into memory.\nIn the CRDT implementations we tested, loading a document from disk is equivalent to merging the remote events, so we do not show CRDT loading times separately in @chart-remote.\nIn these algorithms, the CRDT metadata needs to be in memory for the user to be able to edit the document, or to apply any updates received from other replicas (even when there is no concurrency).\nIn contrast, OT and #algname can load documents orders of magnitude faster than CRDTs by caching the final document state on disk, and loading just this data (essentially a plain text file).\n#algname and OT only need to load the event graph when merging concurrent changes or to reconstruct old document versions.\nDocument edits by the local user or applying non-concurrent remote events do not need the event graph.\n\n// For completeness, we also measured the time taken to process local editing events. However, all of the systems we tested can process events many orders of magnitude much faster than any human's typing speed. We have not shown this data as at that speed, the differences between systems are irrelevant.\n\n#figure(\n  text(8pt, charts.speed_merge),\n  caption: [\n    The CPU time taken by each algorithm to merge all events in each trace (as received from a remote replica), or to reload the resulting document from disk. The CRDT implementations (Ref CRDT, Automerge and Yjs) take the same amount of time to merge changes as they do to subsequently load the document. The red line at 16 ms indicates the time budget available to an application that wants to show the results of an operation by the next frame, assuming a display with a 60 Hz refresh rate.\n  ],\n  kind: image,\n  placement: top,\n) <chart-remote>\n\nWe can see in @chart-remote that #algname and OT are very fast to merge the sequential traces (S1, S2, S3), since they simply apply the operations with no transformation.\nHowever, OT performance degrades dramatically on the asynchronous traces (6 seconds for A1, and 1 hour for A2) due to the quadratic complexity of the algorithm, whereas #algname remains fast (160,000$times$ faster in the case of A2).\n\nOn the concurrent traces (C1, C2) and asynchronous trace A2, the merge time of #algname is similar to that of our reference CRDT, since they perform similar work.\nBoth are significantly faster than the state-of-the-art Yjs and Automerge CRDT libraries; this is due to implementation differences and not fundamental algorithmic reasons.\n\nOn the sequential traces #algname outperforms our reference CRDT by a factor of 7--10$times$, and on trace A1 (which contains large sequential sections) #algname is 5$times$ faster.\nComparing to Yjs or Automerge, this speedup is greater still.\nThis is due to #algname's ability to clear its internal state and skip all of the internal state manipulation on critical versions (@clearing).\nTo quantify this effect, we compare #algname's performance with a version of the algorithm that has these optimisations disabled.\n@speed-ff shows the time taken to replay all our traces with this optimisation enabled and disabled.\nWe see that the optimisation is effective for S1, S2, S3, and A1, whereas for C1, C2, and A2 it makes little difference (A2 contains no critical versions).\n\n#figure(\n  text(8pt, charts.speed_ff),\n  caption: [\n    Time taken for #algname to merge all events in a trace, with and without the optimisations from @clearing.\n  ],\n  kind: image,\n  placement: top,\n) <speed-ff>\n\nAutomerge's merge times on traces C1 and C2 are outliers. This appears to be a bug, which we have reported.\n\nWhen merging an event graph with very high concurrency (like A2), the performance of #algname is highly dependent on the order in which events are traversed.\nA poorly chosen traversal order can make this trace as much as 8$times$ slower to merge. Our topological sort algorithm (@graph-walk) tries to avoid such pathological cases.\n\n== RAM usage\n\n@chart-memusage shows the memory footprint (retained heap size) of each algorithm.\nThe memory used by #algname and OT is split into peak usage (during the merge process) and the \"steady state\" memory usage, after temporary data such as #algname's internal state is discarded and the event graph is written out to disk.\nFor the CRDTs the difference between peak and steady-state memory use is small. The diagram shows steady state memory usage. Peak memory usage is up to 25% larger.\n"],[62419,133,""],[66147,33,""],[66147,0,"https://figshare.com/s/0fb13e5d179aaa6957d7"],[63378,24,""],[63378,0,"I"],[63411,5,""],[61297,74,""],[62861,10,""],[62986,0,"//"],[62986,46,""],[65305,0,"1."],[65321,0," the"],[65329,0," measurements,"],[65356,5,""],[65378,0,"less than "],[65388,2,""],[65391,0,"\nOur graphs show"],[65408,1,""],[65408,0,"e"],[65408,1,""],[65408,0,"E"],[65402,5,""],[65395,7,""],[65391,4,""],[65425,22,""],[65425,0,"on our graphs"],[65309,0," of the mean"],[65431,0," vb"],[65433,1,""],[65432,1,""],[65432,0,"be"],[65435,18,""],[65435,0,"visible"],[65414,0," on our graphs"],[63260,1,""],[63260,0,"ed"],[65371,16,""],[65371,0,"d"],[65371,1,""],[65371,0,"t"],[65371,1,""],[65371,0,"ddev"],[72063,67,""],[72063,0,"t"],[72106,3,""],[72106,0,"; p"],[72112,7,""],[72132,6,""],[72132,0,"higher"],[72067,7,""],[72067,0,"figure"],[72199,0,"'s steady state"],[72543,5,""],[72634,13,""],[73085,8,""],[73085,0,"somewhat"],[73151,13,""],[73151,0,"much"],[73085,8,""],[73085,0,"2--3$$"],[73090,0,"times"],[73138,0," on most traces"],[73169,4,""],[73169,0,"an order of magnitude"],[73097,6,""],[73097,0,"greater"],[73192,6,""],[73192,0,"greater"],[77994,0," internal state clearing and"],[81182,0," @Coglan2019"],[81207,0,"\n\n"],[81209,1,""],[81209,0,"D"],[81249,0," relies on heuristics such as similarity "],[81289,1,""],[81289,0,"-matching of text to"],[81309,1,""],[81324,0,", which is not guaranteed to converge."],[81362,489,""],[81196,11,""],[81196,0,"Pijul @pijul, and Darcs @darcs"],[81108,39,""],[81187,0," also track e"],[81199,1,""],[81199,0,"the editing history of text files and provide algorithms for merging concurrent changes."],[81237,7,""],[81237,0,"include"],[81287,0,"\nHowever, they use line-based "],[80852,86,""],[80951,68,""],[81165,154,""],[80953,0,"Differential synchronization @Fraser2009 relies on heuristics such as similarity-matching of text to perform merges, which is not guaranteed to converge.\n"],[81301,0," are not designed for real-time collaboration, "],[81348,4,""],[81348,0,"and they are"],[81372,0,"()"],[81373,0,"for code"],[81382,0," "],[81382,1,""],[81382,0,", not character-based ()"],[81405,0,"which is better for propse"],[81428,1,""],[81431,0,"."],[81302,20,""],[81302,0,"do not support"],[81399,9,""],[83361,0," "],[83361,1,""],[83361,0,"\n#page"],[83363,4,""],[83363,0,"pagebreak()"],[83373,1,""],[83372,1,""],[83372,0,"()"],[83361,0,"\n#show: columns.with(2, gutter: 8mm)\n"],[83362,35,""],[83361,1,""],[83361,0,"] // end of two-column layout"],[3597,0,"\n#columns()"],[3607,0,"2"],[3583,13,""],[3595,0,", gutter: 8mm, []"],[3611,2,""],[3562,23,""],[83353,0,")"],[85586,1055,""],[83480,0,"\n#figure(\n  text(8pt, table(\n    columns: (auto, auto, auto, auto, auto, auto),\n    align: (center, center, right, right, right, right),\n    stroke: none,\n    table.hline(stroke: 0.8pt),\n    table.header([*Name*], [*Type*], [*Events (k)*], [*Avg. Conc.*], [*Runs*], [*Authors*]),\n    table.hline(stroke: 0.4pt),\n\n    ..stats_for(\"S1\", \"seq\", num_authors: 2),\n    ..stats_for(\"S2\", \"seq\"),\n    ..stats_for(\"S3\", \"seq\", num_authors: 2),\n    ..stats_for(\"C1\", \"conc\"),\n    ..stats_for(\"C2\", \"conc\", num_authors: 2),\n    ..stats_for(\"A1\", \"async\"),\n    ..stats_for(\"A2\", \"async\"),\n    table.hline(stroke: 0.8pt),\n  )),\n  placement: top,\n  caption: [\n    The text editing traces used in our evaluation. _Events_: total number of editing events, in thousands. Each inserted or deleted character counts as one event. _Average concurrency_: mean number of concurrent branches per event in the trace. _Runs_: number of sequential runs (linear event sequences without branching/merging). _Authors_: number of users who added at least one event.\n  ]\n) <traces-table>\n\n#columns()"],[84546,0,"2, gutter: 8pt, []"],[84563,2,""],[120631,0,"])\n"],[86278,390,""],[86277,1,""],[86276,1,""],[83480,0,"\n#let stats_for(name, type, num_authors: none) = {\n  let data = json(\"results/dataset_stats.json\").at(name)\n\n  // let a = num_authors\n  if num_authors == none {\n    num_authors = data.num_agents\n  }\n\n  (\n    name,\n    type,\n    str(calc.round(data.total_keystrokes / 1000)),\n    str(calc.round(data.concurrency_estimate, digits: 2)),\n    str(data.graph_rle_size),\n    str(num_authors)\n  )\n}\n"],[84949,2,""],[84949,0,"mm"],[84954,0,"\n  "],[84955,2,""],[84595,0,"single-character "],[84640,0,", after repetition"],[84659,0," _Repeats_: Number of times the original trace was repeated "],[84642,16,""],[84642,0,"includi"],[84648,1,""],[84648,0,"ding repeats"],[84721,0,"to normalise its "],[84661,77,""],[84595,17,""],[84631,1,""],[84699,0,"  _Repeats_: Number of times the original trace was repeated to normalise its length relative to the other traces."],[84699,1,""],[84115,2,""],[84115,0,"erage"],[84125,1,""],[84125,0,"urrency"],[84219,0,"uential"],[84272,0,"uential"],[84309,0,"uential"],[84363,0,"urrent"],[84400,0,"urrent"],[84454,0,"hronous"],[84493,0,"h"],[84488,6,""],[84488,0,"asynchronous"],[84110,0," []"],[84112,0,"*Repeats*"],[84122,0,","],[83508,0,"repeats, "],[83763,0,"\n    str()"],[83772,0,"repeats"],[83779,1,""],[83779,0,"),"],[84268,0," 3,"],[84323,0,", 3"],[84365,0,"1, "],[84419,0,", 25"],[84460,0,", 25"],[84519,0,", 1"],[84561,0,", 2"],[83959,0,"auto, "],[84012,0,"right, "],[84168,5,""],[84168,0,"g."],[83981,0,", auto"],[84213,0,", asdf]"],[84215,0,"["],[83891,0,",\n    [asdf],"],[84229,4,""],[84229,0,"**"],[84230,0,"% chars remain in d"],[84248,1,""],[84247,1,""],[84246,1,""],[84245,1,""],[84244,1,""],[84232,1,""],[84232,0,"C"],[84238,1,""],[84238,0,"R"],[84244,0,"in"],[84245,1,""],[84244,1,""],[84230,2,""],[84242,0,"ing (%)"],[83892,0,"\n    str("],[83906,0,"// "],[83901,0,"data.num"],[83906,3,""],[83906,0,"num_insert_keystrokes"],[83901,0,"1 - ("],[83911,0,"num_insert_keystrokes / "],[83956,0,"))"],[83935,0,"data."],[83915,6,""],[83915,0,"delete"],[83902,0,"00"],[83913,21,""],[83913,0,"final_doc_len_utf8"],[83906,1,""],[83905,1,""],[83904,1,""],[83903,1,""],[83902,1,""],[83901,1,""],[83901,1,""],[83901,0,"100 * "],[83960,1,""],[83901,0,"calc.round("],[83970,0,", digits: 3"],[83982,0,")"],[83980,1,""],[83980,0,"1"],[83980,1,""],[83980,0,"0"],[83980,1,""],[83980,0,"1"],[84345,0,", [*Ops RLE"],[84355,1,""],[84354,1,""],[84353,1,""],[84352,1,""],[84352,0," RLE*], [*Graph RLE*]"],[84330,9,""],[84330,0,"rem"],[84279,5,""],[84283,7,""],[84283,0,","],[84283,1,""],[84283,0,"."],[84094,0,", auto, auto"],[84295,1,""],[84295,0,"urrency"],[84295,7,""],[83988,3,""],[83995,0,"\n    [asdf"],[84004,1,""],[84003,1,""],[84002,1,""],[84001,1,""],[84001,0,"fdsa],"],[83983,0,","],[84305,0,"urrency"],[84301,0,"Avg "],[84305,1,""],[84305,0,"c"],[84304,0,"."],[84306,1,""],[84306,0,"C"],[83989,7,""],[83989,0,"data.op"],[83994,2,""],[83994,0,"op_stats.len,"],[83989,0,"str("],[84010,0,")"],[84010,0," / 1000"],[83993,0,"calc.round("],[84028,0,")("],[84029,1,""],[84028,1,""],[84028,0,")"],[84028,0,", digits: 1"],[84411,0,"# "],[84413,3,""],[84411,0,"\\"],[84415,1,""],[84414,1,""],[84414,2,""],[84414,0,"RLE Ops (k)"],[84431,0,"\\&"],[84432,1,""],[84432,0,"# "],[84443,0," (k("],[84446,1,""],[84446,0,")"],[84347,5,""],[84408,4,""],[84411,1,""],[84411,0," rusn"],[84415,1,""],[84414,1,""],[84414,0,"ns"],[84434,4,""],[84434,0," runs"],[84412,5,""],[84412,0,"size "],[84435,4,""],[84435,0,"size"],[83985,0,"    str(calc.round(data.op_stats.len / 1000, digits: 1)),\n"],[84101,11,""],[84100,1,""],[84066,13,""],[84066,0,".grap"],[84067,4,""],[84067,0,"graph_rle_size"],[84081,7,""],[84480,4,""],[84469,1,""],[84468,1,""],[84467,1,""],[84449,1,""],[84448,1,""],[84447,1,""],[84449,5,""],[84449,0,"s"],[84447,0,"# "],[84447,0,"\\"],[84450,0,"R. "],[84466,0,"#"],[84466,1,""],[84466,0,"\\# "],[84468,1,""],[84467,1,""],[84466,1,""],[84451,1,""],[84451,0,"RL"],[84452,1,""],[84451,1,""],[84451,0,"LE"],[84047,0,"// "],[84466,16,""],[84408,4,""],[84408,0,"Graph size"],[84200,6,""],[84440,0,"aining"],[84334,0,"\n      "],[84460,1,""],[84435,1,""],[84422,1,""],[84406,1,""],[84389,1,""],[84376,1,""],[84360,1,""],[84350,1,""],[84453,0,"\n      "],[84429,0,"\n      "],[84417,0,"\n      "],[84402,0,"\n      "],[84386,0,"\n      "],[84374,0,"\n      "],[84359,0,"\n      "],[84350,0,"\n      "],[84527,0,"\n      "],[84528,6,""],[84528,0,"    "],[84527,0,","],[85351,4,""],[85351,0,"Graph i"],[85357,1,""],[85357,0,"size"],[85440,0," in the "],[85441,7,""],[85441,0,"o"],[85441,1,""],[85440,1,""],[85390,0,"of events "],[85508,0," _Chars remaining_ "],[85526,1,""],[85526,0,": the percent of characters which wre"],[85562,1,""],[85561,1,""],[85561,0,"ere "],[85542,0," inserted"],[85542,0," cha"],[85545,1,""],[85544,1,""],[85543,1,""],[85542,1,""],[85569,5,""],[85569,0,"remain in the document once m"],[85597,1,""],[85592,5,""],[85592,0,"when all events are"],[85610,1,""],[85608,2,""],[85608,0,"have been merged."],[85592,0,"("],[85592,1,""],[85569,56,""],[85569,0,"are never "],[85578,1,""],[85572,6,""],[85569,3,""],[85569,0,"remain in the document when all events have been merged."],[85592,0,"(ie, are never deleted) "],[85615,5,""],[85615,0," afer"],[85619,1,""],[85618,1,""],[85618,0,"ter"],[84509,0,"// "],[83989,0,"// "],[84046,55,""],[84045,1,""],[84141,6,""],[84443,0,"\n      [*"],[84451,1,""],[84450,1,""],[84450,0,"[*Final size ("],[84463,1,""],[84463,0,"(k)*],"],[84045,0,"\n    str(calc.round(data.op_stats.len / 1000, digits: 1)),"],[84070,12,""],[84069,1,""],[84069,0,".final_doc_len_utf8"],[84205,0,", auto"],[84158,0,"stats_for(\"S2\", \"sequential\", 3).map(x => auto)"],[84205,54,""],[84527,1,""],[84527,0,"KiB"],[84087,1,""],[84086,1,""],[84085,1,""],[84084,1,""],[84083,1,""],[84070,13,""],[84070,0,"final_doc_len_chars"],[84070,19,""],[84070,0,"final_doc_len_utf8"],[83940,1,""],[83939,1,""],[83938,1,""],[83937,1,""],[83923,14,""],[83923,0,"final_doc_len_chars"],[84522,0,"doc "],[84522,4,""],[84521,1,""],[84521,0," "],[84421,0,"Avg "],[84454,4,""],[84454,0,"runs"],[85397,4,""],[85397,0,"runs"],[85548,1,""],[85491,1,""],[85389,1,""],[85307,1,""],[85194,1,""],[85063,1,""],[85543,0,"\n    "],[85487,0,"\n    "],[85386,0,"\n    "],[85305,0,"\n    "],[85193,0,"\n    "],[85063,0,"\n    "],[85714,0,"\n    _Final size_: Resulting document size"],[84533,1,""],[84092,4,""],[84092,0,"1-"],[84093,1,""],[84093,0,"024"],[85755,0," after all events have been merged."],[85755,0,", in kilobytes,"],[85769,1,""],[85755,1,""],[84412,0,"\n      [*Events (k)*],"],[84372,22,""],[83781,0,"\n    str(calc.round(data.total_keystrokes / 1000)),"],[83713,51,""],[85314,0,"\n    _Events_: total number of editing events, in thousands, including repeats. Each inserted or deleted character counts as one event."],[85063,135,""],[88170,0,"attempted to "],[88202,1,""],[88201,1,""],[88201,0,"e"],[88285,0," "],[88285,1,""],[88285,0," (T"],[88287,1,""],[88287,0,"ho"],[88288,1,""],[88287,1,""],[88286,1,""],[88285,1,""],[88245,0," at least "],[88254,1,""],[88254,0," "],[88254,1,""],[88248,6,""],[88245,3,""],[88285,0," (ho"],[88285,4,""],[88285,0," (S3 is an outlier in this regard "],[88318,1,""],[88318,0,")"],[88287,0,"However, "],[88327,0," - it is much "],[88328,13,""],[88327,1,""],[88299,0,"exceeds this is"],[88313,1,""],[88312,1,""],[88312,0,"size a great"],[88319,5,""],[88317,2,""],[88299,0,"significantly "],[88330,29,""],[88330,0,"."],[88299,0,"gr"],[88300,1,""],[88299,1,""],[88299,0,"a"],[88299,1,""],[88299,0,"has grown to "],[88299,12,""],[88299,0,"grew to"],[88327,1,""],[88299,8,""],[88319,0,"s"],[88287,7,""],[88287,0,"With the exception of "],[88309,2,""],[88311,0,", which"],[88764,0,"\n\nUnfro"],[88770,1,""],[88769,1,""],[88766,3,""],[88766,0,"Unfortunately, all "],[88766,19,""],[88766,0,"All editing traces are "],[88788,1,""],[88788,0,", unfortuna"],[88790,9,""],[88790,0,"Unfortunately, "],[88789,1,""],[88788,1,""],[88788,1,""],[88788,0," u"],[88803,1,""],[88802,1,""],[88802,0," in English. "],[88766,49,""],[88766,0,"Our editing traces are unfortun"],[88789,8,""],[88789,0,"Unfortunately "],[88789,1,""],[88789,0,"u"],[88803,0,"limited to the English language."],[88803,10,""],[88803,0,"all in "],[88809,1,""],[88831,0," This work would be st"],[88832,21,""],[88832,0,"Editing traces in other languages may uncover "],[88802,76,""],[88802,0," almost entirely restricted to the ASCII subset "],[88766,84,""],[88765,1,""],[88764,1,""],[85602,0,"age"],[85591,4,""],[85625,5,""],[85625,0,"that"],[85655,0,"."],[85657,0,"."],[84532,1,""],[84532,0,"k"],[86693,0,", including appendices"],[86644,4,""],[86644,0,"Typst source"],[88314,4,""],[88314,0," w"],[88315,0,"("],[88379,1,""],[88380,0,"."],[88127,4,""],[88127,0,"length"],[88068,9,""],[88068,0," recorded"],[47998,13,""],[47998,0,"we can"],[48055,16,""],[48055,0,"$O(log n)$"],[48131,4,""],[48453,9,""],[48352,4,""],[48352,0," and"],[48453,0,"starting "],[48131,0,"the "],[48055,10,""],[48055,0,"logarithmic time"],[48000,4,""],[47998,2,""],[47998,0,"it is easy to"],[47998,13,""],[47998,0,"we can"],[15785,7,""],[81344,0,"good "],[81360,3,""],[81360,0,"whereas #al"],[81369,2,""],[81369,0,"algnamei"],[81376,1,""],[81376,0," is"],[81397,0,"which is "],[81425,0,"Git uses a 3-way diff"],[81442,4,""],[81442,0,"merge @Khanna2007, which requires manual resolution of conflicts."],[81467,39,""],[81467,0,"is not reliable on files containing substantial repeated text"],[81447,12,""],[81516,0," @Khanna2007"],[81516,0,", or that have divere"],[81536,1,""],[81536,0,"ged a lot"],[81559,0,"Darcs infamously has worst-case exponential complexity."],[81564,11,""],[81559,0,"Merges in "],[81577,1,""],[81577,0,"ve"],[81613,0," @darcs-book"],[81209,54,""],[81209,0," and include algorithms for merging concurrent changes"],[81209,54,""],[81571,0,", and Pi"],[81577,2,""],[81577,0,"Pijul merges using a CRDT that assigns a unique ID to every line"],[81382,1,""],[81382,0,"three"],[81466,29,""],[81616,0," @pijul-theory"],[81883,0," existing state-of-the-art"],[83010,8,""],[83010,0,"collaborative"],[81925,4,""],[81925,0,"orders of magnitude less"],[81956,0," in the steady state"],[81988,11,""],[81988,0,"vastly"],[82009,0," fi"],[82011,1,""],[82011,0,"or editing"],[82023,50,""],[82067,0," and edits from other users are merged much faster"],[82068,4,""],[82022,0," and"],[81883,9,""],[81703,0," that has characteristics of both CRDT "],[81741,1,""],[81741,0,"s and OT"],[81798,12,""],[81918,16,""],[81918,0,"existing"],[82286,8,""],[82286,0,"fully"],[82256,0,"arbitrary branching and merging patterns ("],[82297,1,""],[82297,0,"(which may arise during "],[82347,0,")"],[82349,2,""],[82349,0,"are"],[82352,6,""],[82255,0," it supports"],[82360,14,""],[82326,0,"e.g., "],[82331,1,""],[82330,1,""],[82330,0," "],[82331,6,""],[82331,0,"in the context of"],[82172,4,""],[82172,0,"when two "],[82180,1,""],[82186,4,""],[82186,0," each"],[82261,2,""],[82261,0,"#al"],[82262,2,""],[82262,0,"algname"],[82321,38,""],[82321,0,"e.g., in"],[82298,5,""],[82298,0,"/"],[82681,49,""],[82378,30,""],[82378,0,"a fine-grained"],[82821,49,""],[82934,0,".//"],[82935,0,"\n"],[82935,0,"\nThe "],[82936,4,""],[82935,1,""],[82823,0,"\nThe core idea of #a"],[82842,1,""],[82842,0,"algname is not specific to text; "],[82875,2,""],[82875,0,"w"],[82877,5,""],[82886,13,""],[82886,0,"it"],[82868,0," plain"],[82976,0,"\nMainstream applications have "],[82977,29,""],[82977,0,"Moreover, "],[82822,1,""],[82975,0,"\n"],[82977,10,""],[82601,15,""],[82601,0,"simple"],[82596,66,""],[82637,3,""],[82637,0,", so w"],[82905,0,"Many collaborative editors have chosen OT over CRDTs due to its lower memory use"],[82905,0,"In the past, "],[82918,1,""],[82918,0,"m"],[82945,11,""],[82945,0,"were based on"],[82955,3,""],[82949,6,""],[82945,4,""],[82945,0,"have chosen"],[82904,0,"\nHistorically, it was common for collaborative software to be built on OT rather than CRDTs due to OT's lower memory use in the steady state"],[82919,56,""],[82922,11,""],[82922,0,"was preferred over"],[82954,4,""],[82954,0,"its"],[82964,0,"steady-state "],[82988,19,""],[82988,0,"and faster document loads."],[83015,93,""],[83015,0,"However, OT made it difficult to support offline editing and branching/merging workflows"],[83071,4,""],[83071,0,","],[83014,0,"\n#fe"],[83017,1,""],[83016,1,""],[83016,0,"a"],[83016,1,""],[83016,0,"algname is the first CRDT to meet OT's performance in this regard.\nIt therefore "],[83097,0,"// "],[83096,0,"makes "],[83066,16,""],[83066,0,", while also preserving the advantages of CRDTs ()"],[83115,0,"arbitrary branching/merging workflows,"],[83045,4,""],[83045,0,"match"],[83067,88,""],[83067,0,"."],[83013,0,", and many applications were implme"],[83047,1,""],[83046,1,""],[83046,0,"emented using centralised server-based OT"],[83141,0,", allowing decentralised software to be competitive with traditional cloud software"],[83226,209,""],[83152,13,""],[83152,0,"local-first"],[83172,0," @Kleppmann2019localfirst"],[83143,8,""],[83143,0,"enabling"],[83201,2,""],[83201,0,"o"],[83201,1,""],[83201,0,"offer performance "],[83201,18,""],[83201,0,"be"],[82963,13,""],[82919,87,""],[82987,0," to avoid the overheads of CRDTs"],[82905,12,""],[82905,0,"Until now"],[82934,4,""],[82934,0,"have been"],[83075,0,".\n"],[83075,0,", and it requires no server"],[83103,0,"\nThis new paradigm"],[83121,11,""],[83121,0," makes it possible for decentralised,"],[83210,0,"come"],[83109,12,""],[83109,0,"breakthrough"],[83058,0," and surpass"],[83074,1,""],[83073,1,""],[83073,0,"'s"],[83062,8,""],[83058,4,""],[83109,12,""],[83109,0,"new paradigm"],[83109,12,""],[83109,0,"breakthrough"],[83053,5,""],[83053,0,"surpass"],[87182,22,""],[385,0,"// "],[385,3,""],[385,0,"// "],[355,0,"// "],[388,3,""],[355,33,""],[307,0,"// "],[210,0,"// "],[172,0,"// "],[172,3,""],[114,0,"// "],[114,3,""],[0,114,""],[96,151,""],[96,0,"// "],[68647,18,""],[68647,0,"image(\"diagrams/timings.svg\")"],[70770,30,""],[70770,0,"  text(8pt, charts.speed_ff),\n"],[70782,15,""],[70782,0,"  text(8pt, charts.speed_ff),\n"],[70782,30,""],[70782,0,"charts.speed_ff"],[70782,15,""],[70782,0,"image(\"diagrams/ff.svg\")"],[73416,19,""],[73416,0,"image(\"diagrams/memusage.svg\")"],[75692,20,""],[75692,0,"image(\"diagrams/filesize_full.svg\")"],[76097,20,""],[76097,0," image(\"diagrams/filesize_smol.svg\")"],[76097,1,""],[96,23,""],[95,1,""],[84644,0,"\n      [*'"],[84653,1,""],[84653,0,"ins*],\n      "],[84660,6,""],[84645,0,"      [*ins*],\n"],[84668,3,""],[84668,0,"del"],[84684,15,""],[84684,0,"cc"],[84684,2,""],[84684,0,"Avg Concurrency"],[83963,0,"    str(calc.round(data.total_keystrokes / 1000)),\n"],[84038,16,""],[84037,1,""],[84037,0,".ins"],[84038,3,""],[84038,0,"num_insert_keystrokes"],[84014,0,"    str(calc.round(data.num_insert_keystrokes / 1000)),\n"],[84094,21,""],[84094,0,"num_del"],[84094,7,""],[84094,0,"num_delete_keystrokes"],[84772,15,""],[84765,0,"% "],[84767,3,""],[84767,0,"Inserts"],[84074,0,"// "],[84038,21,""],[84038,0,"total_keystrokes"],[84054,7,""],[84033,0,"data.total"],[84038,5,""],[84038,0,"num_"],[84038,4,""],[84038,0,"num_insert_keystrokes / "],[84083,0,", digits: 2"],[84033,0,"100 * "],[84089,11,""],[84089,0,", digits: 2"],[84099,1,""],[84099,0,"1"],[84018,0,"// "],[84107,0,"    // str(calc.round(data.num_delete_keystrokes / 1000)),\n"],[84134,21,""],[84134,0,"num_on"],[84139,1,""],[84139,0,"n"],[84134,6,""],[84134,0,"num_insert_keystrokes"],[84111,3,""],[84862,1,""],[84861,1,""],[84868,0," (k)"],[84885,4,""],[84574,1,""],[84574,0,"7"],[84885,0,"Avg "],[84859,0,"// "],[84837,0,"table.cell("],[84862,0,")"],[84848,0,"colspan: 2, "],[84859,1,""],[84856,3,""],[84848,8,""],[84862,1,""],[84837,11,""],[84859,3,""],[84859,0,"// "],[84111,0,"// "],[84111,3,""],[84859,3,""],[88792,31,""],[88792,0,"has i"],[88792,5,""],[88792,0,"is about twice this size"],[88795,6,""],[88795,0,"approi"],[88800,1,""],[88800,0,"ximately "],[84859,0,"// "],[84111,0,"// "],[84013,0,"\n    \n    "],[84014,4,""],[84019,0,"/ "],[84020,1,""],[84020,0,"/ Other coul"],[84031,1,""],[84030,1,""],[84030,0,"lyum"],[84033,1,""],[84032,1,""],[84031,1,""],[84031,0,"umns:"],[84129,0," // "],[84037,96,""],[84037,0,"    // str(calc.round(100 * data.num_insert_keystrokes / data.total_keystrokes, digits: 1)), //"],[84013,0," // total events (k)"],[83962,0," "],[83945,18,""],[83945,0,"    str(repeats),"],[84152,0," % of ev"],[84158,2,""],[84157,1,""],[84156,1,""],[84155,1,""],[84155,0,"insert events"],[84227,0," // total i"],[84231,7,""],[84231,0,"um"],[84232,1,""],[84231,1,""],[84231,0,"number of insert events"],[84313,0," // number of delete events"],[84399,0," // concurrency estimate"],[84453,0," // number of RLE event"],[84467,9,""],[84467,0,"events in the "],[84467,14,""],[84467,0,"nodes in the causal graph"],[84756,1,""],[84756,0,"8"],[230,4,""],[230,0,"false"]],"_dtSpan":[0,2339471]}]}
